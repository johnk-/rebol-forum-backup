<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Web - AltRebol</title>
    <link>https://forum.rebol.info/c/domains/web/48</link>
    <description>Topics in the &#39;Web&#39; category Topics related to the WebAssembly build and in-browser applications.</description>
    
      <lastBuildDate>Thu, 18 Feb 2021 13:31:07 +0000</lastBuildDate>
      <atom:link href="https://forum.rebol.info/c/domains/web/48.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>Event Listener MVP</title>
          <dc:creator><![CDATA[rgchris]]></dc:creator>
          <category>Web</category>
          <description><![CDATA[
            <p>I'm attempting to create a minimum event loop handler that works from ReplPad (and presumably other Ren-C applications).</p>
<p><a href="https://gist.github.com/rgchris/ad5f071380653155d96b966df598df96/">Here's what I have so far</a>:</p>
<pre><code class="lang-nohighlight">do https://gist.githubusercontent.com/rgchris/ad5f071380653155d96b966df598df96/raw/
</code></pre>
<p>Not a loop at this point, but is able to discern events from different sources.</p>
            <p><small>13 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/event-listener-mvp/1514">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/event-listener-mvp/1514</link>
          <pubDate>Thu, 18 Feb 2021 13:31:07 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1514</guid>
          <source url="https://forum.rebol.info/t/event-listener-mvp/1514.rss">Event Listener MVP</source>
        </item>
        <item>
          <title>About the Web category</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Web</category>
          <description><![CDATA[
            <p>Topics related to the WebAssembly build and in-browser applications.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/about-the-web-category/1313">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/about-the-web-category/1313</link>
          <pubDate>Tue, 28 Jul 2020 12:51:42 +0000</pubDate>
          <discourse:topicPinned>Yes</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1313</guid>
          <source url="https://forum.rebol.info/t/about-the-web-category/1313.rss">About the Web category</source>
        </item>
        <item>
          <title>How would you use a template?</title>
          <dc:creator><![CDATA[gchiu]]></dc:creator>
          <category>Web</category>
          <description><![CDATA[
            <p>I've had a quick look at Vue.js and wonder if we can do templates</p>
<pre><code>&lt;div id="app"&gt;
    {{ message }}
&lt;/div&gt;

&lt;script type="text/rebol"&gt;
  js-do {document.getElementById('app').innerHTML = "Goodbye"}
&lt;/script&gt;
</code></pre>
<p>So what type of page setup would this work?</p>
            <p><small>10 posts - 5 participants</small></p>
            <p><a href="https://forum.rebol.info/t/how-would-you-use-a-template/1152">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/how-would-you-use-a-template/1152</link>
          <pubDate>Tue, 30 Apr 2019 06:48:32 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1152</guid>
          <source url="https://forum.rebol.info/t/how-would-you-use-a-template/1152.rss">How would you use a template?</source>
        </item>
        <item>
          <title>Web Build: Dangers and Opportunities</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Web</category>
          <description><![CDATA[
            <p>It's good to publish early, and publish often--and I'm glad people are enthusiastic about the visibly cool possibilities of putting the interpreter into the browser!</p>
<p>BUT excited though one may be, there are some big points that need to be emphasized to anyone you choose to show things to (especially the Rebol-biased):</p>
<h2>1. JavaScript is NOT bloating and contaminating the core</h2>
<p>The JavaScript extension code may live in the main repo for versioning convenience, but <a href="https://github.com/metaeducation/ren-c/tree/master/src/extensions/javascript" rel="nofollow noopener">it is completely separate</a>.  If you instead build an EXE, it isn't having to skip <code>#ifdef TO_JAVASCRIPT</code> smattered around in core files--it's simply not building ANY of the files in the directory the JavaScript bridge lives in.</p>
<p>Don't forget how we're fighting the dependency war more than ever.  You don't even need GNU make to build...just a Ren-C executable and a 350kb TCC compiler (though you need EMCC to target the web).  There's even a <a href="https://github.com/metaeducation/ren-c/tree/master/src/extensions/tcc" rel="nofollow noopener">TCC Extension</a> and <em>we're only a stone's throw from being able to bootstrap from a Ren-C executable and source alone.</em></p>
<p>So the only influences of this endeavor on the core are good ones...helping make it versatile enough to embed in very foreign hosts.  It makes it likely to be able to repeat that success elsewhere (C#. Qt. Red...? :-/)</p>
<h2>2. It's very early, and this is VERY ambitious</h2>
<p>The techniques are experimental and use bleeding edge tools.  We're also trying to support a spectrum of browsers without making people fiddle with experimental settings so they won't be turned away by some initial hassle.  This complicates things even more--but I think is still worth it.  Again: see (1), this "complexity" is borne by the JavaScript extension alone.</p>
<p>I definitely don't have a thought out plan from the start--because I'm having to learn what's possible and what is not possible as I go along.  If you can read between the lines, I think what's going on here is rather impressive--but you have to be pretty deeply experienced to articulate why in an informed way.  Still, even the deeply experienced probably shouldn't try to pass judgment on it...yet.</p>
<h2>3. Beta/One is NOT about shipping a next-generation web framework</h2>
<p>Beta/One is a 24/7 online tutorial that demonstrates a vetted subset of cool features...that we have reasonable confidence are not going to need to be unlearned.</p>
<p>Is it exciting that the <em>way</em> the tutorial is being built is with an eye to generality that can be applied to other web apps?  YES!</p>
<p>Is that web app generalization a "product" trying to publish this year?  NO, NO, NO!</p>
<p>So be mindful of what you tell people (including yourself).  If expectations aren't managed, then even Herculean successes can look like failures.  And if focus slips too much into infinite distractions there won't <em>be</em> a Beta/One.</p>
<hr>
<p><em>(Note: I do find this all kind of exciting, in spite of what I would think I'd think.  Making a VID-like GUI, in a browser?  Ick!  But the reasons for liking it are only due to relatively recent technical advancements.  That's advancements in Ren-C and its design, and in the web tech: without WASM and pthreads and ES6+Promises and ASYNC+AWAIT this would be vastly less interesting, to the extent it would be possible.  It really is something you can only write circa 2019, trying it earlier would have been miserable and ugly!)</em></p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/web-build-dangers-and-opportunities/1113">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/web-build-dangers-and-opportunities/1113</link>
          <pubDate>Thu, 14 Mar 2019 13:02:20 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1113</guid>
          <source url="https://forum.rebol.info/t/web-build-dangers-and-opportunities/1113.rss">Web Build: Dangers and Opportunities</source>
        </item>
        <item>
          <title>Web REPL now uses CONSOLE extension!</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Web</category>
          <description><![CDATA[
            <p>The CONSOLE extension was first implemented by <a class="mention" href="/u/draegtun">@draegtun</a>, who managed to be one of the few pioneers in the Rebol Universe who <a href="https://github.com/r3n/reboldocs/wiki/User-and-Console" rel="nofollow noopener">actually documented what he did</a>.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>I went on to take that code and get it mechanically wired up in a way that split it into a "console kernel" which would make deliberate transitions to calling the usermode "skin" code--and hence be able to gracefully recover from errors, vs. infinite loop or crash out.  For example:</p>
<pre><code>&gt;&gt; system/console/print-prompt: does [write-stdout "--ok--&gt;&gt; "]
== make action! [[] [...]]

--ok--&gt;&gt; system/console/print-prompt: does [write-stdddout "--oops!--&gt; "]
** UNSAFE ERROR ENCOUNTERED IN CONSOLE SKIN
** Script Error: write-stdddout has no value
** Where: print-prompt console
** Near: [write-stdddout ~~ "--oops!--&gt; "]
** Line: 1
** REVERTING TO DEFAULT SKIN

&gt;&gt;
</code></pre>
<p><em>(Note: the current error is a bit more verbose than that because it's trying to be informative for debugging of console internals, but I'll cut it down.)</em></p>
<p>Despite running with a lot of userspace code, the console is designed so it can be phased in such a way that when you do things like a debug trace (also written in usermode) you won't wind up tracing through the console as well.  <em>(Unless you want to--but most people wouldn't, they want to trace their own code.)</em>  Because of how it's done, you also don't see a ton of implementation stacks for the console in your backtrace...the console exits its "usermode kernel" portion long enough to run skin or user requests through the libRebol API with no kernel on the stack, and then re-enters the kernel after it's done.</p>
<p>Laying the groundwork for doing this correctly is intended to make it possible to let the console be hookable for all kinds of tasks, whether that's debugging and needing to show you stack levels and bind stack frames...or anything else!  That includes a tutorial console, that checks what you typed and the result you got to see if you should go to the next step!</p>
<h2>And now... the web REPL uses it too!</h2>
<p>In quite a nifty achievement for the console, <a href="http://hostilefork.com/media/shared/replpad-js/" rel="nofollow noopener">it is now live in the web demo!</a></p>
<p>For the moment, that means you can even use the conventional multi-line-by-hitting-enter mode, instead of Shift-Enter.  Really it should kick you over into the web's multiline editor ability...but that should be easier to do as an aspect of the console extension, it's all usermode code!</p>
<p>Here's a little counting console:</p>
<pre><code>&gt;&gt; ‌count: 0
== 0

&gt;&gt; system/console/print-prompt: does [
[\ count: count + 1
[\ write-stdout unspaced [count "&gt;&gt; "]
[\ ]
== make action! [[] [...]]

1&gt;&gt; print "A counting prompt!"
A counting prompt!

2&gt;&gt; ‌
</code></pre>
<p>You can imagine being able to flip your console mode around to all kinds of things... changing the bindings, being dialected.  (The debugger will have a frame it is "focused" on and show you the focus, but then use that frame for binding of expressions--for instance.)  Timing prompts could show you how long each command took, or just hook each command prompt to make the timing so you could ask for it retroactively if you ever cared...</p>
<p>It doesn't have cancellation yet (and if it did, it probably would want to be Escape vs. Ctrl-C).  Such things are actually rather complex to do--but of course, solving it is planned for and in the works.</p>
<p>This is really neat to see, hopefully people want to pitch in and make this better.  This isn't C code, so no excuses!  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/web-repl-now-uses-console-extension/1064">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/web-repl-now-uses-console-extension/1064</link>
          <pubDate>Sun, 10 Feb 2019 13:32:09 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1064</guid>
          <source url="https://forum.rebol.info/t/web-repl-now-uses-console-extension/1064.rss">Web REPL now uses CONSOLE extension!</source>
        </item>
        <item>
          <title>Crafting a Compelling Web Demo</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Web</category>
          <description><![CDATA[
            <p>Compiling C codebases to JavaScript is something that has been around a while.  The first successful build of Rebol to JavaScript was actually achieved shortly after the Montreal conference.</p>
<p>That was many years ago.  So why has it taken so long to get a console in the browser?</p>
<p>Pardon me for repeating myself: the issue is that the browser is rather authoritarian, and while the JavaScript interpreter is running you do not see screen paint events.  If you click a button on a JavaScript UI, and there is an associated JavaScript function that runs, if that function takes 10 seconds to run, you will not see any change in the UI until those 10 seconds are over.  (There are a few exceptions...like alert boxes or the console log, but that's not what most people think of when they think of good web design.)</p>
<p>Now enter the Rebol interpreter, written in C.  There is a <code>main()</code> function that expects to take control and keep that control until you QUIT.  Translate that into JavaScript that's a function that runs as long as you run the session.  Now imagine running that session for 20 minutes.</p>
<p>A program that runs for 20 minutes solid without updating the UI does not sound very satisfying!</p>
<p>Even something as simple as this loop has no opportunity to update the UI, because if paused long enough to give control to the browser to gather input, it would forget which step of the iteration it was on:</p>
<pre><code>loop 100 [
    print "Enter a string:"
    n: input
    print ["You entered:" n]
]
</code></pre>
<p>The recent breakthrough was the result of me learning stuff, and even <a href="https://groups.google.com/forum/#!topic/emscripten-discuss/avkPZkIuw6o" rel="nofollow noopener">feeding back into the design of emscripten a bit</a>.  The implementation is rough, but programs like the above can work...and I believe even more elegant implementations are possible.  There's quite a long way to go, but the mechanic appears solid.</p>
<blockquote>
<p><strong>NOTE:</strong> This build is not running the current Travis build yet--it should.  Until it does, language features will be very out of date.  Making it run off Travis directly is an important goal for the next steps, but this was a proof of concept.</p>
</blockquote>
<p><a href="http://hostilefork.com/media/shared/replpad-js/" class="onebox" target="_blank" rel="nofollow noopener">http://hostilefork.com/media/shared/replpad-js/</a></p>
<p><em>(Note: I should point out that systems which appear to be doing this generally are not.  For instance, if you use <a href="https://repl.it/" rel="nofollow noopener">repl.it</a> you will realize it is spinning up interpreters on the server side and just echoing it in your browser's screen--see the Network tab if you are wondering).</em></p>
<h2>So, now what?</h2>
<p>Now that a Rebol function can appear to have synchronous side effects, the field is wide-open for what a web application might do.</p>
<p>I'll pick an example of something I think is kind of "lame": Rebol's Logo heritage could be used to do something like a turtle graphics.  PEN DOWN, TURN 90, etc.</p>
<p><a href="https://www.calormen.com/jslogo/" class="onebox" target="_blank" rel="nofollow noopener">https://www.calormen.com/jslogo/</a></p>
<p>It is true that Rebol could be used to show a new spin on this--a PARSE rule that acted on data and the GROUP!s contained reaction code to move the turtle around.  But I don't think it's new enough.   I think the moment you put that turtle up people are going to say "oh, it's logo" and not be looking for the nuances.</p>
<p>I know Nick of <a href="https://rebolforum.com/index.cgi" rel="nofollow noopener">Nick's Forum</a> has expressed his belief that a Rebol2 GUI equivalent would be compelling.  That might lead one to think that wiring up web UI widgets to a view-like dialect and implementing something like the old calculator demo except perhaps <a href="http://www.qooxdoo.org/current/showcase/#Theming" rel="nofollow noopener">like Qooxdoo's version</a>.  I do not feel motivated personally to do that.</p>
<p>So here's where one has to put on the thinking cap.  What can Rebol do in a browser that would be interesting?</p>
<h2>This is not a product</h2>
<p>I want to be 100% clear in saying that I think Rebol is still very much trapped in the idea stage.  It has more questions than it has answers.  I would still dissuade most anyone from using these techniques in any kind of serious large scale production.  <em>It is an unproven, radical, extremely-odd-to-the-point-of-seeming-careless methodology</em> that makes strange bets.  To my tastes it is more an art project than a science project.</p>
<p>So my angle is not how to sell this to people as a product.  It's how to get people interested in the questions it raises.  I'd like to see a tutorial that gets people to the meat of what makes Rebol different quickly, that a programming sophisticate could absorb and go "hmmm, I never thought of that".  That's the audience I want to speak to--not someone who doesn't know how to write "Hello World" in 5 other languages.  Because a beginner has a lot to learn before even starting to think about why someone would do something as "crazy" as Rebol.</p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/crafting-a-compelling-web-demo/874">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/crafting-a-compelling-web-demo/874</link>
          <pubDate>Tue, 23 Oct 2018 15:29:51 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-874</guid>
          <source url="https://forum.rebol.info/t/crafting-a-compelling-web-demo/874.rss">Crafting a Compelling Web Demo</source>
        </item>
        <item>
          <title>What will Rebol on the Web Look Like?</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Web</category>
          <description><![CDATA[
            <p><em>First:</em> We had emscripten as a black box <code>%r3.js</code>, which you could give a string to, and it would evaluate it and give a string back.</p>
<p><em>Second:</em> We had the variadic-based libRebol manifesting as JavaScript.  It's important for making more complex interoperability, with API handles that offer certainty and can hold references over time...instead of guessing by picking apart strings with no running concept of identity.</p>
<p><em>Third:</em> We now have "JavaScript user natives", a category of ACTION! whose spec is a block of Rebol code, and whose body is a string of JavaScript.  These can use the aforementioned libRebol to dissect their arguments into JavaScript values, and then produce return results back as Rebol again.</p>
<p>With these pieces in hand, we seem prepared to have a web page where JavaScript calls into Rebol...and then Rebol turns around and brings about actions in the JavaScript world.  As exciting as that sounds, there are some technical hurdles...and three different directions to consider in how to address them:</p>
<ol>
<li>
<p><strong>Rebol as a Guest in JavaScript's House</strong> - This would take the view that Rebol is targeting becoming a relatively small but powerful download, in an era where WebAssembly languages can be loaded into a web app as easily as any other library.  Here the predominant way of thinking is that your application structure and libraries are in JavaScript, but some of the work is being done in Rebol.  People might want to use PARSE or invent other DSLs easily vs. worrying over how to do the equivalent thing in JS.</p>
</li>
<li>
<p><strong>JavaScript + Libraries as Display Driver</strong> - When you start a project you pick the appropriate set of JavaScript libraries to give the UI experience you want.  But the application's logic starts from a Rebol scripted foundation; getting data off of remote servers is done with <strong><code>read http://...</code></strong>, the UI is built by parsing a Rebol spec and then in the GROUP! rules that trigger it makes JavaScript calls that create windows or widgets or what-have you.  Likely the only libRebol calls you make are inside JavaScript service natives to get the arguments or give back results...none of the "app itself" is JavaScript.</p>
</li>
<li>
<p><strong>Emscripten Rebol as Web Tutorial / Game</strong> - It's possible to ignore broader issues of how Rebol might be used on the web, and just build a teaching tool that demonstrates interesting aspects of the design.  I feel like Ren-C's advances are largely unpublished and inaccessible, despite a huge amount of deep work.  There's little I can do to help that in a society that doesn't really read <sub>even the people with ostensible interest in the topic, <em>cough</em>.</sub></p>
</li>
</ol>
<p><span class="hashtag">#3</span> <em>seems</em> the easiest.  And sometimes I feel like getting it out there for people to try and discuss might build enough interest to get web-savvy people to come get involved and help.  At the same time, the more ambitious the tutorial gets, the more its needs line up with <span class="hashtag">#2</span>, where that has to be done anyway.</p>
<p><span class="hashtag">#1</span> and <span class="hashtag">#2</span> might seem like they'd be approached the same way.  But...not exactly.  To understand why, you should read and absorb the points in <a href="https://forum.rebol.info/t/on-giving-librebol-js-more-powers-than-javascript/849">"On Giving libRebol JS more powers than JavaScript"</a>.</p>
<p>The difference is that to accomplish a world where Rebol can "do things its way", <em>it really has to have more powers than JavaScript</em>.  And giving it those powers would involve technologies and trickery that are early alpha in today's browsers...and may change or be canceled entirely.</p>
<p>It's always been a risky gamble to try and run ahead of what the world has demonstrated readiness for.  People have been trying to do this for some time...remember <a href="https://en.wikipedia.org/wiki/Google_Native_Client" rel="nofollow noopener">Google Native Client</a>?  Anyone run any <a href="https://en.wikipedia.org/wiki/Apache_Flex" rel="nofollow noopener">Adobe Flex</a> applications lately?</p>
<p>In this case, the technical issue is that Rebol scripts want to have synchronous effects, whatever that may be.  Whether it's a <code>PRINT</code> or an <code>INPUT</code> or a <code>PARSE READ HTTP://</code>...they want to take one step after the other.  Making it even more necessary is that <a href="https://forum.rebol.info/t/what-happens-to-function-arguments-and-locals-when-the-call-ends/234">closures</a> haven't really been figured out; so even if we wanted to get callback-happy, things aren't quite ready for that.</p>
<p>These synchronous behaviors would need to use APIs in JavaScript...whether they be fetch() or callbacks from DOM events, or whatever.  Many-if-not-most of these behaviors must be running code on the GUI thread, and can involve several callback steps to fulfill one "synchronous" request.</p>
<p>If while making a synchronous request, Rebol doesn't want to lose its state--e.g. how far it has counted in a loop or any state of any local variable on the stack--there are two options:</p>
<ul>
<li>
<p>The <a href="https://github.com/kripken/emscripten/wiki/Emterpreter" rel="nofollow noopener">emterpreter</a>...which is a somewhat kludgey concept.  You compile your C codebase not into WebAssembly directly, but into a bytecode.  This is then run by a function called emterpret().  Since you're not running on "bare metal" of the browser, it is possible to suspend the bytecode interpreter (hence preserving all of your stack and variables and such as far as C was concerned when you made the "synchronous" request).  Then aysnchronous things happen to fulfill the request, and when they're finished the C code is awoken from "suspended animation" and given the information.</p>
</li>
<li>
<p>Compile your code directly to WebAssembly and run it on a separate thread, e.g. a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" rel="nofollow noopener">web worker</a>.  For the heap memory of the emterpreter, use a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer" rel="nofollow noopener">SharedArrayBuffer</a> so that both the GUI thread and the worker thread have access to it.  When the worker wants to make a synchronous request of the GUI, it posts a message containing the request and then uses an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait" rel="nofollow noopener">Atomics.wait</a> on an indicator of when the result has been written to a specific heap location.  The GUI does the requested work, writes the heap location, and does an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/notify" rel="nofollow noopener">Atomics.notify</a>.</p>
</li>
</ul>
<p>The first demonstration of synchronous input and output in a running script was done with "emterpreter", but running the emterpreter code on a separate thread.  Being on a separate thread is nice because the UI can stay responsive and receive events (such as pushing a cancel button, or doing anything else the worker isn't needed to accomplish).  But it means that JavaScript user natives are fairly useless, because pretty much everything you'd want to do when calling JavaScript from Rebol is on the GUI thread.</p>
<p>But this would really only be suitable for <span class="hashtag">#3</span>.  While I took pains to build a transmission method that required mixtures of C code and messaging to accomplish the most basic of I/O, no one else would use a <code>reb-lib.js</code> they had to compile each time they wanted to add a new JavaScript call.  And it fundamentally prohibited the mixture of libRebol code with DOM manipulation code.  If the emterpreter is used, it has to be moved to the main thread...and accept the various downsides (polling to keep the UI responsive from Rebol evaluator loop, for instance).</p>
<p>SharedArrayBuffer was not pursued in the first test because it had been disabled in all major browsers due to a Spectre-based security flaw.  Now--months later--it's back on in Desktop Chrome...although only with asm.js support by default <em>(you have to do <code>--enable-features='WebAssembly SharedArrayBuffer'</code> to get it to work with WASM, and it might not work even then)</em>.  A lot of people are invested in it, but when it's going to come back in other browsers is anyone's guess.  So it is a gamble to try to build on, and not necessarily trivial to work with.</p>
<hr>
<p>That's a lot of technical talk for philosophy.  But it just makes the point.  Where the bets are placed here depend on what the point is.  I think I've probably said much of what I have to say about option <span class="hashtag">#1</span> of being used as a casual service library for JavaScript programmers; I don't think it'll be ruled out, but I'm not sure that's worth focusing on too much.</p>
            <p><small>9 posts - 5 participants</small></p>
            <p><a href="https://forum.rebol.info/t/what-will-rebol-on-the-web-look-like/850">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/what-will-rebol-on-the-web-look-like/850</link>
          <pubDate>Wed, 10 Oct 2018 02:45:50 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-850</guid>
          <source url="https://forum.rebol.info/t/what-will-rebol-on-the-web-look-like/850.rss">What will Rebol on the Web Look Like?</source>
        </item>
        <item>
          <title>R3 GUI in web browser</title>
          <dc:creator><![CDATA[darrencruse]]></dc:creator>
          <category>Web</category>
          <description><![CDATA[
            <p><a class="mention" href="/u/gchiu">@gchiu</a> (or anybody <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> ) I do web applications for my day job and was dreaming of the possibility of Ren-C running r3-gui apps in the browser...</p>
<p>Do you have any thoughts about how close/distant this emscripten branch would be to truly being able to do that?</p>
<p>I assume the first step would be to get that little REPL console working.  I found this talking about how to read from stdin (writing to stdout seems straightforward the reading less so I think):<br>
<aside class="onebox stackexchange">
  <header class="source">
      <a href="https://stackoverflow.com/questions/32912129/providing-stdin-to-an-emscripten-html-program" target="_blank" rel="noopener nofollow ugc">stackoverflow.com</a>
  </header>
  <article class="onebox-body">
      <a href="https://stackoverflow.com/users/3750388/m%c4%b1nxoma%cf%84" target="_blank" rel="noopener nofollow ugc">
    <img alt="mınxomaτ" src="https://i.stack.imgur.com/7I6vZ.png?s=128&amp;g=1" class="thumbnail onebox-avatar" width="128" height="128">
  </a>
<h4>
  <a href="https://stackoverflow.com/questions/32912129/providing-stdin-to-an-emscripten-html-program" target="_blank" rel="noopener nofollow ugc">Providing stdin to an emscripten HTML program?</a>
</h4>

<div class="tags">
  <strong>javascript, emscripten</strong>
</div>

<div class="date">
  asked by
  
  <a href="https://stackoverflow.com/users/3750388/m%c4%b1nxoma%cf%84" target="_blank" rel="noopener nofollow ugc">
    mınxomaτ
  </a>
  on <a href="https://stackoverflow.com/questions/32912129/providing-stdin-to-an-emscripten-html-program" target="_blank" rel="noopener nofollow ugc">04:55PM - 02 Oct 15 UTC</a>
</div>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
</p>
<p>But in terms of the Ren-C codebase otherwise do you think there's a lot of underlying platform dependencies/<span class="hashtag">#ifdefs</span> etc. that will require a lot of changes for the webassembly output to really be able to work in the browser?</p>
<p>Otherwise regarding the technical feasibility of the GUI stuff, looking at some of these <a href="https://github.com/kripken/emscripten/wiki/Porting-Examples-and-Demos" rel="noopener nofollow ugc">emscripten demos</a> I'm impressed with a lot of them - i.e. I feel the draw/gui stuff seems within the realm of possibility.</p>
<p>In terms of overall strategy it looks to me the r3-gui stuff is pure Rebol code correct?<br>
So am I right the first thing would be to get the Draw dialect working?<br>
And do I understand that sits atop OpenGL?</p>
<p>I see some help about doing OpenGL from emscripten here:<br>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <a href="http://www.learnopengles.com/calling-opengl-from-c-on-the-web-by-using-emscripten-sharing-common-code-with-android-and-ios/" target="_blank" rel="noopener nofollow ugc">learnopengles.com</a>
  </header>
  <article class="onebox-body">
    <img src="" class="thumbnail" width="" height="">

<h3><a href="http://www.learnopengles.com/calling-opengl-from-c-on-the-web-by-using-emscripten-sharing-common-code-with-android-and-ios/" target="_blank" rel="noopener nofollow ugc">Calling OpenGL from C on the Web by Using Emscripten, Sharing Common Code...</a></h3>



  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
</p>
<p>Mostly I'm just wondering how big a job you think this is and whether I'm being overly optimistic...</p>
<p>(I did a lot of C years ago though more recently I do javascript exclusively so I do have some background to help me work on this if it's not complete a waste of time... <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> )</p>
            <p><small>14 posts - 6 participants</small></p>
            <p><a href="https://forum.rebol.info/t/r3-gui-in-web-browser/860">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/r3-gui-in-web-browser/860</link>
          <pubDate>Sun, 02 Jul 2017 19:24:04 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-860</guid>
          <source url="https://forum.rebol.info/t/r3-gui-in-web-browser/860.rss">R3 GUI in web browser</source>
        </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>GUI - AltRebol</title>
    <link>https://forum.rebol.info/c/domains/gui/38</link>
    <description>Topics in the &#39;GUI&#39; category Developing GUI based applications in Rebol</description>
    
      <lastBuildDate>Thu, 13 May 2021 18:28:16 +0000</lastBuildDate>
      <atom:link href="https://forum.rebol.info/c/domains/gui/38.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>Just moving ahead now with GTK3</title>
          <dc:creator><![CDATA[iArnold]]></dc:creator>
          <category>GUI</category>
          <description><![CDATA[
            <p>Decided to just make a start at a GTK(3) extension.</p>
<p>Made a start and just add many GTK3 functions for all kind of GTKWidgets.</p>
<p>(Just have to figure out how to rebUnbox a single character and how to return one. Its type is now issue!)</p>
<p>You can find changes in the gtk3and4 branch</p><aside class="onebox githubfolder">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">
      <a href="https://github.com/r3n/ren-c/tree/gtk3and4" target="_blank" rel="noopener">github.com</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/345;"><img src="https://opengraph.githubassets.com/c4c153f24fdc05e5e67b7c7a2d93ee3dcefd5085b2213c032a47ddf65f5ac62e/r3n/ren-c" class="thumbnail" width="690" height="345"></div>

<h3><a href="https://github.com/r3n/ren-c/tree/gtk3and4" target="_blank" rel="noopener">r3n/ren-c</a></h3>

<p><a href="https://github.com/r3n/ren-c/tree/gtk3and4" target="_blank" rel="noopener">gtk3and4</a></p>

  <p><span class="label1">Library for embedding a Rebol interpreter into C codebases</span></p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>(Oh I did not test any, and not even compiled, I said I made a start <img src="https://forum.rebol.info/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"> )</p>
            <p><small>22 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/just-moving-ahead-now-with-gtk3/1603">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/just-moving-ahead-now-with-gtk3/1603</link>
          <pubDate>Thu, 13 May 2021 18:28:16 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1603</guid>
          <source url="https://forum.rebol.info/t/just-moving-ahead-now-with-gtk3/1603.rss">Just moving ahead now with GTK3</source>
        </item>
        <item>
          <title>IMAGE! being moved to an extension, backed with BINARY!</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>GUI</category>
          <description><![CDATA[
            <p>IMAGE! is not a Beta/One feature.  More interesting would be a dialect for interacting with the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Advanced_animations" rel="nofollow noopener">HTML5 Canvas</a>.</p>
<p>The WebAssembly Story hinges on a small download...to let JS programmers escape out into Rebol to run PARSE or whatever logic they want.  More generally, Rebol itself hinges on being able to be small.  <strong>We need to be able to build a core binary without the IMAGE! support code</strong> <em>(or GOB! code, or VECTOR! code...)</em>.  The important functions (e.g. PARSE) must be lightly embeddable on web pages and elsewhere.</p>
<p>The image code was pretty sloppy.  But as tempting as it is to just delete IMAGE!, it has been kept around and working.  Being able to read/write PNGs or JPGs or GIFs or BMPs is useful.  And the PNG functionality has been updated and integrated/compacted in a fairly interesting way, which has exercised some advanced usages of the libRebol API.  Complex examples like this and the FFI challenge the system's ability to extend for practical needs.</p>
<p><strong>So I've moved IMAGE! to an extension.</strong>  It's still built by default, so we can keep testing the encoders/decoders.  But the JavaScript build does not include it.</p>
<p>One part of being in an extension means that the protocol for dealing with it needs to go through userspace.  The LodePNG extension doesn't get to fiddle the bits of an opaque image structure using system APIs, because IMAGE! has no system API.  It's a "user-defined-type" now...and has to be able to do what it needs by exchanging the currency of common Rebol values.</p>
<p>Being a user-defined type means IMAGE! becomes a victim of the weaknesses other user defined types have (e.g. no ability to define a meaning of FOR-EACH on them, because such an extension mechanism is not yet defined.)  So IMAGE! will get such abilities if-and-when other user defined types do.</p>
<p><strong>But you can still enumerate pixels in images, and what you can do for now is likely even better for most purposes, if anyone were using IMAGE! for anything real.</strong>  The reason is that IMAGE! is now essentially an OBJECT! that aggregates a plain backing store BINARY! with size information.</p>
<h2>MAKE IMAGE! [...x... #{...}] now takes ownership of the BINARY!</h2>
<p>This is to allow things like the PNG decoder to make a BINARY! and then not need to have that copied to MAKE IMAGE!.</p>
<p>The implication is that <em>you now have to give it a binary of the exact number of bytes the RGBA data it wants is</em>.   So if your image is 10x10, the BINARY! you give it in MAKE IMAGE! must be 4 * 10 * 10 bytes long.</p>
<p>This isn't actually taking away any intrinsic functionality.  While it may have <em>seemed</em> you could make images without alpha channels before, they were always 4 RGBA bytes per pixel.  It just gave the UI impression that it had only RGB bytes if all the alpha pixels were zero.  (It should have been 255, because that's opaque, but whatever.)</p>
<p>So if you create a helper like MAKE-RGB-IMAGE which produces a binary that adds the alpha channel, or fills in any missing data because your binary is too short...that helper won't really be substantially less efficient than what the core could have done.</p>
<h2>In return, you get a cool new feature: BYTES OF image</h2>
<pre><code>&gt;&gt; img: make image! 2x2

&gt;&gt; for-each [r g b a] bytes of img [print [r g b a]]
0 0 0 255
0 0 0 255
0 0 0 255
0 0 0 255

&gt;&gt; img/(2x1): 1.2.3.4
&gt;&gt; img/(2x2): 128.128.128

&gt;&gt; img
== make image! [2x2 #{
000000FF01020304000000FF808080FF
}]

&gt;&gt; for-each [r g b a] bytes of img [print [r g b a]]
0 0 0 255
1 2 3 4
0 0 0 255
128 128 128 255
</code></pre>
<h2>For now, NEXT/SKIP/FOR-EACH won't work on IMAGE! itself</h2>
<p>Moving IMAGE! out of the core takes away its participation in the ANY-SERIES! category, and puts it on its own.  And while extension types can add support for anything declared as a GENERIC (e.g. APPEND or COPY) as well as TO or MAKE, they can't (easily) inject themselves as having behaviors for native functions <em>(technically they could HIJACK and now RESKIN parameters if you were desperate, but we really need a better answer than that.)</em></p>
<p>Anyway, the priority was not to add features to images, but rather to make them optional in the build.  But as it's hard to know if things work or not unless you run tests, that means things are getting better in the process, <a href="https://github.com/rebol/rebol-issues/issues/2361" rel="nofollow noopener">even fixing bugs</a>.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/image-being-moved-to-an-extension-backed-with-binary/1056">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/image-being-moved-to-an-extension-backed-with-binary/1056</link>
          <pubDate>Tue, 05 Feb 2019 22:49:26 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1056</guid>
          <source url="https://forum.rebol.info/t/image-being-moved-to-an-extension-backed-with-binary/1056.rss">IMAGE! being moved to an extension, backed with BINARY!</source>
        </item>
        <item>
          <title>How to cope without a GUI in Ren-c</title>
          <dc:creator><![CDATA[gchiu]]></dc:creator>
          <category>GUI</category>
          <description><![CDATA[
            <p>As we all frustratingly know there's no GUI being developed for Ren-c, which is the only actively developed branch of Rebol3.  Atronix do have a GUI build on their website, but it's an old build which lacks many of the changes that exist in the <a href="http://metaeducation.s3.amazonaws.com/index.html" rel="nofollow noopener">current builds</a>.  We did discuss this <a href="https://forum.rebol.info/t/running-r3-gui-with-ren-c/181/43">before</a> but that ended with the view that r3/view was imminent.  Unfortunately it seems Atronix don't have the time to prioritize the move to Ren-c.</p>
<p>So, I was thinking how one could usefully build something with what we have, and I thought back to my <a href="https://github.com/gchiu/Rebol3/blob/master/scripts/gui-server.reb" rel="nofollow noopener">GUI demo</a>.  So, I am thinking that there's a common set of functions which each client knows about.  It could be a script present on the local file, or it could be embedded in the server.  Each client then polls the server for a task. The server marks off each task as it is collected by a client so that another client can't take that task.  A callback to update the GUI is attached to that task.  The client then posts the results back to the server which marks the task as completed, executes the callback with the resulting data, and then removes the task.  So, this would be totally asynchronous as the hard lifting is done by the clients of the GUI based server.</p>
<p>This means that the GUI could be Rebol2, R3/View or even Red when it gets TCP working.  But how much more work would this create? Is it a feasible way of creating an application?</p>
            <p><small>16 posts - 3 participants</small></p>
            <p><a href="https://forum.rebol.info/t/how-to-cope-without-a-gui-in-ren-c/628">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/how-to-cope-without-a-gui-in-ren-c/628</link>
          <pubDate>Wed, 16 May 2018 08:12:53 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-628</guid>
          <source url="https://forum.rebol.info/t/how-to-cope-without-a-gui-in-ren-c/628.rss">How to cope without a GUI in Ren-c</source>
        </item>
        <item>
          <title>About the GUI category</title>
          <dc:creator><![CDATA[gchiu]]></dc:creator>
          <category>GUI</category>
          <description><![CDATA[
            <p>Developing GUI based applications in Rebol</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/about-the-gui-category/627">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/about-the-gui-category/627</link>
          <pubDate>Wed, 16 May 2018 07:56:53 +0000</pubDate>
          <discourse:topicPinned>Yes</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-627</guid>
          <source url="https://forum.rebol.info/t/about-the-gui-category/627.rss">About the GUI category</source>
        </item>
        <item>
          <title>Running r3-gui with Ren-C?</title>
          <dc:creator><![CDATA[darrencruse]]></dc:creator>
          <category>GUI</category>
          <description><![CDATA[
            <p>I tried to run r3-gui with Ren-C but got a syntax error as follows:</p>
<blockquote>
<p>do <br>
== _</p>
</blockquote>
<blockquote>
<p>do %r3-gui.r3<br>
** Syntax Error: invalid "time" -- ""<br>
** Where: transcode case load --anonymous-- --anonymous-- apply either do<br>
** Near: (line 299) circle 5.5x5.5 7.8<br>
** File: ../src/core/l-scan.c<br>
** Line: 1908</p>
</blockquote>
<p>The same error occurs whether I do the  line or not.</p>
<p>Though I just remembered - I built Ren-C on my macbook - maybe that's my problem?<br>
(r3-gui isn't technically supported on Macs right?)</p>
<p>Prior to this thought I was going to ask for clarification about a <a href="https://github.com/metaeducation/ren-c/wiki/FAQ#is-ren-c-compatible-with-r3-alpha" rel="nofollow noopener">line here</a> which says:</p>
<blockquote>
<p>and (for instance) an experimental R3-GUI is already running under Ren-C in the compatibility mode.</p>
</blockquote>
<p>Is the "experimental R3-GUI" referred diffierent than the atronix or saphirion r3-gui.r3 files?</p>
<p>Is it available somewhere?</p>
            <p><small>45 posts - 6 participants</small></p>
            <p><a href="https://forum.rebol.info/t/running-r3-gui-with-ren-c/181">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/running-r3-gui-with-ren-c/181</link>
          <pubDate>Sun, 02 Jul 2017 18:57:19 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-181</guid>
          <source url="https://forum.rebol.info/t/running-r3-gui-with-ren-c/181.rss">Running r3-gui with Ren-C?</source>
        </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Help System - AltRebol</title>
    <link>https://forum.rebol.info/c/domains/discoverability/51</link>
    <description>Topics in the &#39;Help System&#39; category This section is for discussing commands like HELP and SOURCE.</description>
    
      <lastBuildDate>Sun, 18 Jul 2021 09:02:16 +0000</lastBuildDate>
      <atom:link href="https://forum.rebol.info/c/domains/discoverability/51.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>Dropping the NATIVE/BODY Feature From Core</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Help System</category>
          <description><![CDATA[
            <p>Rather early on in hacking around on Rebol I had an interesting (to me) idea.</p>
<p>It seemed that quite often, native functions were really nothing that couldn't be done in usermode...they were just written as natives because they were supposed to be faster.  I thought it might be interesting to preserve or define the original code as part of the native spec.</p>
<p>A very simple example, this explains how DID might be made to force any value to its truthy status by applying NOT twice:</p>
<pre><code>//
//  did: native/body [
//
//  "Synonym for TO-LOGIC"
//
//      return: "true if value is NOT a LOGIC! false, BLANK!, or NULL"
//          [logic!]
//      optional [&lt;opt&gt; any-value!]
//  ][
//      not not :optional
//  ]
//
REBNATIVE(_did_)  // see TO-C-NAME
{
    INCLUDE_PARAMS_OF__DID_;

    return Init_Logic(D_OUT, IS_TRUTHY(ARG(optional)));
}
</code></pre>
<h2>There's A Good Idea In Here...But</h2>
<p>Expressing what natives do as usermode code is a good way of understanding what that code does.</p>
<p>However it needs to be tested or it's doomed to get out of sync.  I had the idea that natives would swap out their behavior for their usermode equivalents every now and again and we'd run the tests.  But if you're actually intercept calls to natives and implement them with other natives, what happens when two of them use interdependent definitions?</p>
<h2>This Testing And Documentation Doesn't Belong In The Core</h2>
<p>It's nice to be able to see it there with the native spec.  But compiling these bodies into the executable just makes it unnecessarily bigger.</p>
<p>There's a lot of other testing and documentation enhancements that are higher priority, and the complexity incurred from this feature suggests dropping it.</p>
<p>It was a neat idea from a long time ago that has been superseded in importance by many other neat ideas.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/dropping-the-native-body-feature-from-core/1635">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/dropping-the-native-body-feature-from-core/1635</link>
          <pubDate>Sun, 18 Jul 2021 09:02:16 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1635</guid>
          <source url="https://forum.rebol.info/t/dropping-the-native-body-feature-from-core/1635.rss">Dropping the NATIVE/BODY Feature From Core</source>
        </item>
        <item>
          <title>Help on Port</title>
          <dc:creator><![CDATA[rgchris]]></dc:creator>
          <category>Help System</category>
          <description><![CDATA[
            <p>A very first stab at improving <a href="https://gist.github.com/rgchris/67106926e3005b7308392efaa70025b4">HELP on a PORT! value</a>.</p>
<p>To test, this can be used in ReplPad:</p>
<pre><code class="lang-nohighlight">&gt;&gt; do https://gist.githubusercontent.com/rgchris/67106926e3005b7308392efaa70025b4/raw
== #[action! [port]]

&gt;&gt; help-port log/info
Kind  Console.log Scheme
Ref   log::info
Mode  Sync
Actor   
   write           action!  
   append          action!  
</code></pre>
<hr>
<p>Source:</p>
<pre><code class="lang-nohighlight">summarize-port: function [
    {Returns a block of information about a port}
    return: "Block of short lines (fitting in roughly 80 columns)"
        [&lt;opt&gt; block!]
    port [port!]
][
    return collect [
        keep join "Kind  " port/spec/title
        keep join "Ref   " mold any [match [file! url!] :port/spec/ref [...]]
        keep join "Mode  " pick ["Async" "Sync"] action? :port/awake

        switch type-of :port/actor [
            object! [
                keep "Actor   "
                keep summarize-obj port/actor
            ]

            handle! [
                ; internal port
                keep "    actor           handle!    "
            ]
        ]
    ]
]
</code></pre>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/help-on-port/1513">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/help-on-port/1513</link>
          <pubDate>Thu, 18 Feb 2021 04:16:07 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1513</guid>
          <source url="https://forum.rebol.info/t/help-on-port/1513.rss">Help on Port</source>
        </item>
        <item>
          <title>About the Help System category</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Help System</category>
          <description><![CDATA[
            <p>This section is for discussing commands like HELP and SOURCE.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/about-the-help-system-category/1462">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/about-the-help-system-category/1462</link>
          <pubDate>Fri, 08 Jan 2021 03:59:24 +0000</pubDate>
          <discourse:topicPinned>Yes</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1462</guid>
          <source url="https://forum.rebol.info/t/about-the-help-system-category/1462.rss">About the Help System category</source>
        </item>
        <item>
          <title>Function Spec Dialect: Who Should Analyze It, And How?</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Help System</category>
          <description><![CDATA[
            <p>When you supplied a function spec block in R3-Alpha, it would <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/include/sys-value.h#L920">preserve that spec</a> as a copy of whatever was passed to the low-level MAKE FUNCTION! call.  You could get it back with SPEC-OF.  (If your code was abstract and the FUNC call was generated by code, this spec might not look familiar to you--since it wouldn't line up directly with what you'd written in source.)</p>
<p>This spec was preserved as commentary only: used by SOURCE and HELP.  The MAKE FUNCTION! operation would create a second array as a cache--that was a summary of just what the evaluator needed to know: the order, types, and conventions of the parameters (normal argument, quoted argument, refinement).  R3-Alpha called this the <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/include/sys-value.h#L921">"args"</a> array of the function, but Ren-C named the summary array the <strong>paramlist</strong>.</p>
<h2>Redundant Interpretations of the Spec</h2>
<p>If you wanted to know the order of parameters and their conventions in R3-Alpha, you could use WORDS-OF:</p>
<pre><code>r3-alpha&gt;&gt; words-of :append
== [series value /part length /only /dup count]
</code></pre>
<p>This information was extracted from the cache (the "paramlist"), not from the spec block.  Same for getting the accepted types (which is not very readable when the ANY-TYPE! renders expanded as all the types, for each parameter...!)</p>
<pre><code>r3-alpha&gt;&gt; types-of :append
== [make typeset! [binary! string! file! email! url! tag! bitset! image! vector!
block! paren! path! set-path! get-path! lit-path! map! object! port! gob!]
make typeset! [unset! none! logic! integer! decimal! percent! money! char!
pair! tuple! time! date! binary! string! file! email! url! tag! bitset! image!
vector! block! paren! path! set-path! get-path! lit-path! map! datatype!
typeset! word! set-word! get-word! lit-word! refinement! issue! native!
action! rebcode! command! op! closure! function!...
</code></pre>
<p>The description strings--however--were skipped over by MAKE FUNCTION!.  It only looked at ANY-WORD!s for the parameter names, and BLOCK!s for the typeset definitions.  So anyone who wanted to extract help would have to do it from the saved SPEC-OF block.</p>
<p>This was made more dubious by the lack of a formal specification for what exactly the legitimate formats were:</p>
<pre><code>func [arg [type!] {doc string}] [...]
func [arg {doc string} [type!]] [...]
func [arg {doc string1} {doc string2} [type!]] [...]
func [arg {doc string1} [type!] {doc string2}] [...]
</code></pre>
<p>Ren-C had some ambitions to define this, and even to let the help information that were broken up into multiple strings be merged together into a single string, so you could say things like:</p>
<pre><code>func [
     {Some description you write}
     {that spans multiple lines}
     arg1 "description of arg1"
     ...
][
    ...
]
</code></pre>
<p>This led to the idea of <strong>centralizing the code for function spec analysis so that the block was turned into structured information in one place</strong>.  It wouldn't just be the argument names and types that would be processed at function creation time.  Each parameter would be mapped to a completed description string as well.</p>
<p><em>And then the spec block wouldn't be stored at all.</em>  All queries about the function would go through to the structured information.  If it wasn't part of what the evaluator needed (and hence didn't wind up in the paramlist), it would have to be stowed away in an object associated with the function known as the META.</p>
<h2>What's Been Good About It?</h2>
<p>The best aspect that I think has come out of this is the idea that <strong>the core focuses on function mechanics and is relatively unconcerned with how much or little information is maintained for HELP</strong>.  This has empowered and enabled a large number of function derivation operations, that are critical to the operation of the system today.</p>
<p>In fact, I think saying the core focuses on mechanics should be pushed even further, to establish that <strong>the core does not ever see a function SPEC BLOCK! at all</strong>.  So no description strings ever get passed in.  Instead, whatever we think of as MAKE ACTION! takes a distilled parameter order and convention definition...essentially a FRAME!.</p>
<p>I've written about an idea approaching this concept in <a href="https://forum.rebol.info/t/seeing-all-action-s-as-variadic-frame-makers/1002">"Seeing All ACTION!s as Variadic FRAME!-Makers"</a>.  And I think something like this is basically the future.</p>
<p>So in this coming future, not only are <a href="https://forum.rebol.info/t/abbreviations-as-synonyms/1211">FUNC and FUNCTION synonyms</a>, but the logic which transforms BLOCK!s into parameter lists and conventions lives in those generators.  If you want to write a generator that uses the spec block logic, you build it on top of FUNCTION.  Because if you are going to make a raw ACTION! on your own, you will need to speak a more "core" protocol...and you'll also be responsible for managing the information tied to HELP, which the core does not care about at all.</p>
<h2>What's Been Bad About It?</h2>
<p>I mentioned that there has always been a problem with using higher level generators that translate down to calls to FUNC, as R3-Alpha would only preserve what it got at the FUNC level:</p>
<p>Imagine if you come up with a relatively simple function generator, that takes a WORD! and gives you two variables corresponding to that one WORD!:</p>
<pre><code>r3-alpha&gt;&gt; var-doubling-func: func ['var body] [
    func compose [(to word! join var 1) (to word! join var 2)] body
]

r3-alpha&gt;&gt; f: var-doubling-func 'x [
     print ["x1 is" x1]
     print ["x2 is" x2]
]

r3-alpha&gt;  f 10 20
x1 is 10
x2 is 20
</code></pre>
<p>But SOURCE will not give you back your "source" as written with the VAR-DOUBLING-FUNC.  It will just give you what MAKE FUNCTION! ultimately saw:</p>
<pre><code>&gt;&gt; source f
f: make function! [
     [x1 x2]
     [print ["x1 is" x1] print ["x2 is" x2]]
]
</code></pre>
<p>That's the tip of the iceberg.  But because Ren-C is factoring so much out into a generalized "language construction kit", the idea of being able to get at "source" is becoming more difficult.  People who are doing what they used to feel were "simple" things are actually doing complex things.</p>
<p>There are some tools we can use here, one of the best ones is <a href="https://forum.rebol.info/t/use-the-source/1212/2">mapping back to real source in files via line numbers and file names</a>.  This would mean that in the <code>f: var-doubling-func</code> example above, the function that is generated would be able to locate that invocation and point you back at it.  There might be dozens of functions generated by an abstraction--all pointing back to that origin--but this could still be very helpful if you are inspecting one of them to see where it all kicked off from.</p>
<hr>
<p>Another problem has been that as Ren-C's sophistication as an evaluator has gone up...with things like <strong><code>&lt;skip&gt;</code></strong>-able parameters and variadics and such...the ability to detect and interpret that from the outside has gone down.</p>
<p>Even a simplifying change like the refinements-are-their-own-arguments now makes things a little harder for those doing spec analysis.  Compare:</p>
<pre><code>r3-alpha&gt;&gt; words-of :append
== [series value /part length /only /dup count]

ren-c&gt;&gt; parameters of :append
== [series value /part /only /dup /line]
</code></pre>
<p>There was a bit of effort involved in parsing out which refinements took arguments or not before.  But at least you could tell, just from the word list, without consulting the types.  Now there's no way of knowing.</p>
<p>I stand by the change of unifying refinements and their names 100%.  But maybe there are moves that should be made here to distinguish the argument-taking refinements?  Random brainstorms:</p>
<pre><code>&gt;&gt; parameters of :append
== [series value part/ /only dup/ /line]

&gt;&gt; parameters of :append
== [series value /part/ /only /dup/ /line]

&gt;&gt; parameters of :append
== [series value /[part] /only /[dup] /line]
</code></pre>
<p>I don't know.  But maybe this is kind of a losing battle; and really the only meaningful piece of information you should be concerned about is <strong>words of make frame! :append</strong>, and the parameter conventions are really between the evaluator and HELP.</p>
<h2>This is more thinking-out-loud than anything...</h2>
<p>But what I think the central point is, is that the interpreter core and "function spec blocks" are getting an increasingly distant relationship.  I think that's a good thing, and I foresee something more like the post I made where parameter descriptions and HELP information are completely divorced from the language used to ask the core to make a function.</p>
<p>It's just going to require a much different way of thinking about SOURCE.  It might mean more tricks <a>like what @IngoHohmann was looking into</a>, but do bear in mind my VAR-DOUBLING-FUNC above...which leads me to think that rather than snapshotting a certain level of abstraction, that backtracking through generated code to the "actual source" might be the more useful direction long term.  But you might also make requests, e.g.:</p>
<pre><code> &gt;&gt; snapshot f: 1 + 2
 == 3

 &gt;&gt; get-snapshot 'f
 == "1 + 2"  ; expression that made f</code></pre>
            <p><small>3 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/function-spec-dialect-who-should-analyze-it-and-how/1223">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/function-spec-dialect-who-should-analyze-it-and-how/1223</link>
          <pubDate>Sun, 06 Oct 2019 08:44:49 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1223</guid>
          <source url="https://forum.rebol.info/t/function-spec-dialect-who-should-analyze-it-and-how/1223.rss">Function Spec Dialect: Who Should Analyze It, And How?</source>
        </item>
        <item>
          <title>Pruning Complexity: Letting Go of &quot;Derived Help&quot;</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Help System</category>
          <description><![CDATA[
            <p><a href="https://github.com/metaeducation/ren-c/pull/241">Almost exactly 3 years ago, the first Ren-C function derivation mechanism showed up</a>: SPECIALIZE.</p>
<p>And with it came a question.  <strong>What would the HELP for such functions say?</strong>  The HELP string for PICK had historically been different from the help string for FIRST, and now FIRST was just a specialization of PICK.</p>
<p>Under the tentative name "REDESCRIBE" an idea was sketched out for updating just the parts of a function spec that you wanted to change.  It took two arguments: a BLOCK! (that looked like a subset of an ordinary function spec), and a function to mutate the description of.  Which could be a specialization, or not:</p>
<pre><code> first: redescribe [
      {Get the first item of a series if available, otherwise NULL}
 ](
      specialize 'pick [picker: 1]
 )
</code></pre>
<h2>Concerns About Copying Parameter Descriptions</h2>
<p>Early Ren-C development feared increasing the number of cells in code by too much.  So if you had a function like APPEND which took 7 arguments and refinements, then making a "meta OBJECT!" which captured that as a mapping from parameter to object would be 7 cells of storage (rounded to 8 in a pool).</p>
<p>This object would be convenient and save people from having to parse the spec block to rediscover Rebol's interpretation of the information to implement HELP.  And by making it a FRAME! it could use the function's own parameter description array as its "keylist" (a fundamental trick used by Ren-C), so it really would only be the 8 cells...not 16.</p>
<p>Then, if you run the code to create a function and then don't run it again, the original BLOCK from which the parameters were created would be GC'd.  Assuming you had a description for every parameter (more or less) you'd pretty much break even.</p>
<h2>How Many Copies in a Derivation?</h2>
<p>If you derive functions like FIRST, SECOND, THIRD, all the way through TENTH off of PICK, then should each one have a duplicate of PICK's information?  Or is it enough to have meta information that points and says "FIRST is a specialization of PICK", and then follow that link through to get the parameter descriptions from PICK?</p>
<p>Plus, having the meta information say "FIRST is a specialization of PICK" may provide useful knowledge.</p>
<h2>Oh, what a tangled web...</h2>
<p>This led to the existence of <strong>dig-action-meta-fields</strong> and other rather convoluted code.  Every function that wants to do surgery on the HELP information gets burned by it.  And if you ever do want to do surgery, you have to flatten it all anyway.  Not to mention that it's only an object the size of the parameter cells involved...the actual description strings can appear multiple places without being copied.  And if someone changes the help information on a base function, it will change the help information on derived functions--which you might want, but you also might not.</p>
<p>Because the routines were complex and early in the bootstrap, they have been good examples of generalized Rebol code that has had to weather core changes.  It has been educational to have them.  But the complexity represented gets in the way of the most basic things people want to do with manipulating HELP on derived functions...while not truly providing the intended value.</p>
<h2>New Plan: Fundamental Derivations, Flat Help</h2>
<p>Rather than investing deeper in this tangential design: <em>help information will now be flat</em>.  The META information will be captured from the function being derived from at the time of function creation.</p>
<p>But to make things easier to understand, the derivations will be userspace code.  Fundamental operations which do not create any HELP or META information at all will be available as <strong><code>SPECIALIZE*</code></strong>, <strong><code>ADAPT*</code></strong>, <strong><code>CHAIN*</code></strong>, <strong><code>ENCLOSE*</code></strong>, <strong><code>AUGMENT*</code></strong>.  Performance-sensitive code (or functions that aren't meant to have their own HELP) can use these, and avoid the overhead.</p>
<p>As for being able to tell how a function is implemented, that seems to be a problem for SOURCE.  We'll have to work on the rendering there to make that informative enough to show you that something is a CHAIN or a SPECIALIZE-ation of another function.  That seems the right place to be conveying the information.</p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/pruning-complexity-letting-go-of-derived-help/1222">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/pruning-complexity-letting-go-of-derived-help/1222</link>
          <pubDate>Sat, 05 Oct 2019 06:39:29 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1222</guid>
          <source url="https://forum.rebol.info/t/pruning-complexity-letting-go-of-derived-help/1222.rss">Pruning Complexity: Letting Go of &quot;Derived Help&quot;</source>
        </item>
        <item>
          <title>Use the Source ...</title>
          <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
          <category>Help System</category>
          <description><![CDATA[
            <p>I've had a discussion with <a class="mention" href="/u/hostilefork">@hostilefork</a> about this topic a while ago in chat, but I think it is better if it is in a more permanent medium.</p>
<h1>So the questions are:</h1>
<ul>
<li>should it be possible to get the source of functions from within Rebol?</li>
<li>what should be displayed, when viewed?</li>
</ul>
<h1>Possible answer:</h1>
<p>You should be able to get the source as it was written.</p>
<h2>Pros:</h2>
<ul>
<li>this is the best way to learn and understand the language.</li>
</ul>
<h2>Cons:</h2>
<ul>
<li>if taken out of context, you will never know what it really does, because of binding, etc.<br>
(But, the same is true when you copy/paste source-code, and textual representation is still how humans and computers understand source code. I'm pretty sure there is C-code out there where it depends on the version of the compiler, what it does.)</li>
</ul>
<h1>Examples</h1>
<h2>Rebol 2</h2>
<pre><code>; function
&gt;&gt; f: func [a][a * 2]

&gt;&gt; source f
f: func [a][a * 2]

; object
&gt;&gt; o: make object! [a: 1 f: func[][a * 2]]

&gt;&gt; mold o
== {make object! [
    a: 1
    f: func [][a * 2]
]}
</code></pre>
<h2>Ren-C</h2>
<pre><code>; function
&gt;&gt; f: func [a][a * 2]

&gt;&gt; source f 
f: make action! [ [
    a
][
    return: make action! [
        ["Returns a value from an action" value [&lt;opt&gt; &lt;end&gt; any-value!]]
        [unwind/with (binding of 'return) either end? 'value [] [:value]]
    ] (a * 2)
] ]

; object
&gt;&gt; o: make object! [a: 1 f: func[][a * 2]]

&gt;&gt; mold o
== {make object! [
    a: 1
    f: 'make action! [[] [...]]
]}
</code></pre>
<p>I, personally, like the Rebol 2 way better. (Well, that's the only thing where I like the Rebol 2 way better).</p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://forum.rebol.info/t/use-the-source/1212">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/use-the-source/1212</link>
          <pubDate>Thu, 19 Sep 2019 18:00:10 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1212</guid>
          <source url="https://forum.rebol.info/t/use-the-source/1212.rss">Use the Source ...</source>
        </item>
        <item>
          <title>Idea: test the output of help command for each topic</title>
          <dc:creator><![CDATA[LkpPo]]></dc:creator>
          <category>Help System</category>
          <description><![CDATA[
            <p>Idea: test the output of help command for each topic</p>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/idea-test-the-output-of-help-command-for-each-topic/1123">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/idea-test-the-output-of-help-command-for-each-topic/1123</link>
          <pubDate>Mon, 18 Mar 2019 14:09:58 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1123</guid>
          <source url="https://forum.rebol.info/t/idea-test-the-output-of-help-command-for-each-topic/1123.rss">Idea: test the output of help command for each topic</source>
        </item>
        <item>
          <title>Abusing HELP with &#39;literals?</title>
          <dc:creator><![CDATA[draegtun]]></dc:creator>
          <category>Help System</category>
          <description><![CDATA[
            <p>Following on from adding <code>help #some-topic</code> in <a href="https://forum.rebol.info/t/abusing-help-with-tags/155">Abusing help with tags?</a> I was wondering about adding literals like <code>help 'bugs</code> ??</p>
<p>At the moment HELP with literals doesn't provide much enlightenment...</p>
<pre><code>&gt;&gt; help 'bugs
'bugs is a lit-word
</code></pre>
<p>I was wondering we could hijack literals do same thing as (in this example) the BUGS function currently does?</p>
<p>My thinking is that all these HELP functions (except UPGRADE, but also add in DOCS) could be converted to HELP literals?...</p>
<pre><code> Other information:

      about - see general product info
      bugs - open GitHub issues website
      changes - show changelog
      chat - open GitHub developer forum
      install - install (when applicable)
      license - show user license
      topics - open help topics website
      upgrade - check for newer versions
      usage - program cmd line options
</code></pre>
<p>Then i add console shortcut for each one (so no need for functions as they are all console related).</p>
<p>Thoughts on above?   I believe by adding this I can also do some additional refactoring on the code in <code>mezz-help.r</code></p>
            <p><small>13 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/abusing-help-with-literals/205">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/abusing-help-with-literals/205</link>
          <pubDate>Fri, 14 Jul 2017 14:19:53 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-205</guid>
          <source url="https://forum.rebol.info/t/abusing-help-with-literals/205.rss">Abusing HELP with &#39;literals?</source>
        </item>
        <item>
          <title>Abusing help with tags?</title>
          <dc:creator><![CDATA[gchiu]]></dc:creator>
          <category>Help System</category>
          <description><![CDATA[
            <p>We already have source  and do/import  which looks up values on github repo.</p>
<p>I'm suggesting that we can also provide functionality such as</p>
<pre><code> help &lt;compile&gt;
</code></pre>
<p>And instead of just saying it's a tag, it returns a list of urls to documents on here or trello that give instructions on how to compile the interpreter.</p>
<p>Or, <code>help &lt;void&gt;</code> would take us to the threads on handling voids.</p>
<p>The problem is we don't have the resources that were on <a href="http://rebol.com">rebol.com</a> to provide information indexed all in one place.  Instead we can create a user index set of documents with the index held on github.</p>
<p>Comments?</p>
            <p><small>10 posts - 3 participants</small></p>
            <p><a href="https://forum.rebol.info/t/abusing-help-with-tags/155">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/abusing-help-with-tags/155</link>
          <pubDate>Thu, 22 Jun 2017 05:45:56 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-155</guid>
          <source url="https://forum.rebol.info/t/abusing-help-with-tags/155.rss">Abusing help with tags?</source>
        </item>
  </channel>
</rss>

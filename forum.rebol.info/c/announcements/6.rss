<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Announcements - AltRebol</title>
    <link>https://forum.rebol.info/c/announcements/6</link>
    <description>Topics in the &#39;Announcements&#39; category Low traffic category for important announcements, latest roadmaps and status checks.  Start here!</description>
    
      <lastBuildDate>Tue, 01 Feb 2022 04:49:12 +0000</lastBuildDate>
      <atom:link href="https://forum.rebol.info/c/announcements/6.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>Belated 2021 Post-Mortem + New Years 2022 Vision ðŸ¤¹</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Announcements</category>
          <description><![CDATA[
            <h1>Happy 2022!</h1>
<p><strong>...and I Hope Your New Year's Was Better Than Mine...</strong> <img src="https://forum.rebol.info/images/emoji/twitter/man_facepalming.png?v=9" title=":man_facepalming:" class="emoji" alt=":man_facepalming:"></p>
<p>Though I've spent most of the last few New Years Days (and this last one) traveling and in some hotel...I've usually gotten myself a nice supply of beer, and worked start-to-finish through a post.  I talk about what worked and didn't work, and where things might go next.  Although it generally takes the greater part of a day to write those, it's in some ways kind of a fun thing to write...and I was always pleased to beat Red to the punch with accomplishments I found more impressive.</p>
<p><em>This year felt unfortunately different.</em>  I had a big wave of pessimism for all kinds of reasons--ranging from personal relationships, to my new laptop screen getting cracked when it was in my bag...to just a general feeling that the world is going to hell in a handbasket.</p>
<p><strong><img src="https://forum.rebol.info/images/emoji/twitter/skull.png?v=9" title=":skull:" class="emoji" alt=":skull:"> ...But It's Not As Grim As All That... <img src="https://forum.rebol.info/images/emoji/twitter/potato.png?v=9" title=":potato:" class="emoji" alt=":potato:"></strong></p>
<p>After eating a ridiculous potato from <a href="https://stpeterising.com/home/2021/9/16/a-loaded-baked-potato-restaurant-the-half-baked-potato-is-coming-soon-to-downtown-st-pete">A Hipster Potato Restaurant In St. Petersburg</a>--and inadvisedly drinking 2 Sugar-Free Red Bulls--my stomach and brain weren't going to sleep for a long time.</p>
<p>Though traveling makes retrieving a repaired laptop on an extended warranty difficult, I still had my old laptop with me.  So I dug it out, and found an unfinished post about a seemingly-esoteric point about invisible evaluations and void isotopes.  <a href="https://forum.rebol.info/t/pure-vs-impure-invisibility-do-we-need-both/1782">Some deep realizations clicked into place</a>.  Those realizations led to a proud thought:</p>
<p><strong>2021 was the year of invention for BAD-WORD!s, "isotopes", and ^META.  While the older invention of NULL was akin to mathematicians inventing zero to solve previously hard problems... <em>isotopes and meta-transformations are like the invention of imaginary numbers</em>.</strong></p>
<p>Having that energy boost put me on a slight incline toward positive thinking.  Enough so that I'm pushing out a New Year's post before the calendar ticks over to February... here goes:</p>
<h2>UPARSE Is Already a Big Success Story</h2>
<p>Many who use Rebol got addicted because of PARSE.  But people who work with other languages and parser combinators have wondered what the big deal is.  Though Rebol's PARSE is a literate alternative to simple RegEx scenarios, it's weak at building high level structures from smaller simpler parsers--<em>there are too many inconveniences in writing reusable rules</em>.</p>
<p>UPARSE stands for <a href="https://github.com/metaeducation/ren-c/blob/26752e701d9585a7dd5bb1c4cb2e78c901908c5b/src/mezz/uparse.reb"><em>(U)sermode PARSE</em></a> and to me it deals Rebol back in the parsing game:</p>
<ul>
<li>
<p>It keeps the classic feel of PARSE alive, while bringing its power up to the level of combinators in other languages.  Arbitrary values can be synthesized from processing the input, instead of just data captures at the level of the input series.</p>
</li>
<li>
<p>You can come up with "new keywords" without waiting for someone to do so.  These are expressed as ordinary functions with multiple return values, and hence can be optimized as natives.</p>
</li>
<li>
<p>The behavior of values of certain datatypes themselves can be overridden, to bend parsing to entirely different meanings.</p>
</li>
<li>
<p>It has a <a href="https://github.com/metaeducation/ren-c/blob/26752e701d9585a7dd5bb1c4cb2e78c901908c5b/tests/parse/examples/maxmatch.parse.test.reb">generic architecture for rolling back the effects of combinators</a>, with a default behavior that lets the average combinator author avoid the details if they just want any failure to roll back everything in the order it was done.</p>
</li>
<li>
<p>As a proof of its flexibility, a Rebol2/Red-compatible combinator set is defined.</p>
</li>
</ul>
<p><strong>But besides the combinators, the usermode implementation of the UPARSE engine itself that composes and runs them is as much of the story as anything else.</strong>  Rebol has had a shaky history of giving usermode code the same perceptive power as what could be done from C...and that can be as basic as how to tell the difference between <strong>[a b #[none]]</strong> and <strong>[a b]</strong> with looking at the result of THIRD of the block.  All these upgrades come into the mix in UPARSE...from FRAME! mechanics and specializations to ^META and isotopes and generic quoting.</p>
<p>On the downside: it hasn't been optimized much yet, so the performance is abysmal...and a lot of work is left to do on error messages.  But seeing how to build a dialect in this way--where it's not like you have to be a C programmer, but you can wire together the pieces--is the "Minecraft of Programming" I talk about.</p>
<h2>The <a href="https://forum.rebol.info/t/the-new-ren-c-github-action-run-natively-run-on-web/1562">Ren-C GitHub Action</a> Has Been Amazing</h2>
<p>Although it required me gritting my teeth through some JavaScript programming, we now have a turnkey way to install an up to date interpreter with a line of code on a cloud runner for Mac, Linux, and Windows...as well as run automation of the latest web build.</p>
<p>It's a big force multiplier, and it's helped with testing the <a href="https://forum.rebol.info/t/whitespace-interpreter-revisited/1482">Whitespace Interpreter Dialect</a> and the <a href="https://forum.rebol.info/t/uscii-seen-with-new-eyes/1713">USCII Dialect</a>...both of which received major updates this year.  When Redbol examples are given they often risk merely showing the language is capable of generic computation and if you put enough hours into it then you might get something that sort-of-works.  But I feel these are approaching good examples of the form--where they lay out the particular power and composability that Ren-C has been angling for.</p>
<h2>
<a href="https://forum.rebol.info/t/devices-are-gone-but-what-were-they/1692">Devices are Gone</a> and <a href="https://forum.rebol.info/t/libuv-integration-has-started-an-i-o-renaissance/1694">now it's all libUV</a>
</h2>
<p>I think that libUV pretty much represents the objectives of what Carl might have wanted a device layer to be.  Not only is it pure C code that can be built with things like the TinyC compiler, it compiles for esoteric platforms like Haiku.  It's something Rebol might well have used had it been around.</p>
<p>And the web build doesn't use libUV at all--accomplishing its network reads and such through completely different mechanisms.  So it shows the language is staying pure and repurposeable on platforms that don't have threads or whatever dependencies libUV requires.  A simple stripped down version could just offer C stdio (for instance).</p>
<p>There's a long way to go for our usage of libUV to live up to its potential.  But it gives the foundations for doing things like a <a href="https://forum.rebol.info/t/semantics-of-read-and-tcp-streams-past-and-future/1733">good version of async IO, where you code in a synchronous style</a>.  (I've explained that I think the old WAIT/AWAKE model really <a href="https://forum.rebol.info/t/the-weirdness-of-wait/1703">represented a dead end</a>, and so it had to be ripped out).</p>
<h2>
<a href="https://forum.rebol.info/t/the-sea-of-words/1564"><em>Sea of Words</em></a> and Customizable Modularization Arrives</h2>
<p>What was supposed to be unique about Rebol's modules was that the code that processed headers would be like a dialect.  That dialect was processed by usermode code, and you could write your own spin on it if you had some other idea of how you wanted modularization to work.</p>
<p>It's early yet to really say for sure how the mechanics behind this will evolve.  But there have been big steps taken--and the personal success I feel is how the test dialect can create modules out of individual tests.  So the test files are really making thousands upon thousands of isolating contexts, and when the tests are done running the user context is not contaminated at all.  This makes the tests less subject to weird side effects from each other...keeps things tidy...and is overall good for the garbage collector as well.</p>
<p>Disconnecting the use of words from the creation of variables is good for all the reasons I cite.  I've been very happy with that idea, though what "attachment" to a context means has design work to do.  Make no mistake--this is a process of invention--and so it's going to be weird and take time.</p>
<h2>
<a href="https://forum.rebol.info/t/get-set-vs-pick-poke-whats-the-difference/1719">PICK and POKE and Pathing Are Resolved</a> (I Think)</h2>
<p>I've struggled since very early on to tame "path dispatch", which was very oddly shaped.  I'm not going to rehash all of the thought process.  But I'm pleased with the outcome, and I think it will generalize well to extension types.</p>
<h2>First Try At String Binding + Interpolation</h2>
<p>It isn't there yet, but it has been prototyped.  I've written up a post about where I think binding/scoping has to go:</p>
<p><a href="https://forum.rebol.info/t/rebol-and-scopes-well-why-not/1751" class="inline-onebox">Rebol And Scopes: Well, Why Not?</a></p>
<p>There are still no easy answers.  But there's good news about having so many complex codebases in play (like UPARSE, whitespace dialect, etc.) that are not throwing softballs at the language.  If new binding concepts add functionality but don't break any of that, that's a good sign it may be good.</p>
<h2>...A Lot Of Other Stuff Happened...</h2>
<p>This is just a mini list of some of the things I find most notable to call out. As usual, you can scroll through posts or commit logs to see more.</p>
<p>But I also got the chance to visit <a class="mention" href="/u/blackattr">@BlackATTR</a> and meet his family and dogs, so that was fun.  We got some work done on his QUERY dialect, but more to go.</p>
<p>I managed to get ODBC and webserver bugs fixed for <a class="mention" href="/u/gchiu">@gchiu</a> so he could do a demo, and to put it on GitHub Actions with tests.</p>
<hr>
<h1>What Hangs in the Balance for 2022?</h1>
<p>I mentioned my bad New Years, and reading <a href="https://www.red-lang.org/2021/12/2021-winding-down.html">Red's New Years post</a> did not help, because it felt so incredibly <em>cyclic</em>.  Seeing them start a New Year by long-windedly plagiarizing <a href="https://forum.rebol.info/t/back-to-personal-computing/186">Back to Personal Computing</a>... <em>again</em>... made me fear their man-years of toil without heeding advice or warnings has grown no audience for either their work, nor Ren-C's inventions.  Their formerly active YCombinator group had a collective yawn about it...<a href="https://news.ycombinator.com/item?id=29758024">one comment</a> at time of writing, so they seem to be slipping off the radar...even though they are much less research-oriented and more "give-the-people-what-they-want-right-now" oriented (in theory).</p>
<p>Apologies to Gregg Irwin for ranting at him.  <strong>But we/I sadly can't count on Red to keep an audience alive for Redbols, as the old guard moves on and new people aren't there to replace them.</strong>  And I'm not a marketer, especially since I fundamentally disagree with the way social media power structures work.  So Ren-C's cool creations are at high risk of not even making it to <a class="mention" href="/u/blackattr">@BlackATTR</a>'s "bad"-case outcome of becoming <em>"a museum piece like the Antikythera mechanism."</em></p>
<p><em>(Makes me think of the <a href="https://en.wikipedia.org/wiki/Conservation_status">species extinction risk scale</a>.  Sure, the source code is on GitHub, and the topic list of this forum seems to be on the Internet Archive...but if you click through to individual pages there's nothing about the post contents.  Should we do a scrape of the data here and put it elsewhere?)</em></p>
<p>I have always been able to consider the notion that Rebol's fundamental idea is flawed and it <em>should</em> die out.  In fact: I started out getting involved in Rebol <em>to prove to Reichart that it was bad</em>, and using it for Qtask was misguided.  My attempts to construct that proof ran up against the fact that its odd plasticity and choice to throw out the rulebook on what a computer language is-or-should-be gave it a slippery yet timeless nature...like English itself.</p>
<p><strong>But given the bus-factor-of-one nature of Ren-C, I should probably be thinking more about how to communicate that to new audiences, vs. going too deeply into an engineering project where I try to re-graft Ren-C onto a Go-like runtime model.</strong></p>
<p>So maybe I need to be better about making YouTube videos, packaging demos, and showing off the existing infrastructure.  <strong>When I look at other WebAssembly language projects, we actually still compare favorably.</strong>  And maybe I'm too quiet about it for fear of looking a fool for all the things that I know aren't working right.  Still...my confidence increases as I've been moving the architecture around to try and steer away from the obviously bad ideas, in a way that new people coming in would be able to shore up missing pieces.</p>
<h2>...Predictions Are Hard To Make</h2>
<p>It probably looks as if I've been notoriously bad at predicting what things are going to get accomplished.  I'd wanted 2021 to hopefully be when stacklessness got integrated, and I wanted to see progress on debugging.  And it may seem like none of that happened.</p>
<p>But sometimes progress is subtle.  There were major barriers to making R3-Alpha's PARSE architecture stackless, but the UPARSE design is much more amenable to it.  So I think the answer will just be that we'll skip stackless PARSE3 and just assume UPARSE is the future of PARSE.</p>
<p>And when it comes to debugging, I demonstrated some <a href="https://forum.rebol.info/t/getting-hooks-into-events-during-parse/1640/5">impressive tracing in UPARSE</a> that works today...which is the sort of thing a user can customize.  Understanding how dialect authors are going to be able to hook and trace their dialects ties in a lot to seeing a big picture of how the evaluator itself might be traced, so all of this really does plug together.</p>
<p>Nevertheless, I feel skeptical of making new predictions.  Especially because here in 2022: <em>Realistically speaking, so long as I'm traveling and trying to find a new home base it's hard to get very much done.</em>  I've chosen to travel in Florida because things are open for business despite the existence of coronavirii...and that aligns with my belief that being vaccinated and boostered is enough to have a social life.  That means I am out maskless indoors doing a fair number of things with people...and changing locations every few days.  It may be a while before I can really focus on coding.</p>
<h2>So Let's Put Predictions On Hold, at least until I have a <img src="https://forum.rebol.info/images/emoji/twitter/derelict_house.png?v=9" title=":derelict_house:" class="emoji" alt=":derelict_house:">
</h2>
<p>One thing that's been working so far, it's my mandate on continuous integration and keeping all the things that are supposed to work, working, as new experiments are tried.  This is not a natural habit for the personality type that programs in Rebol.  People drawn to the language are not <em>"correct-by-construction"</em> folks, more like Larry The Cable Guy "Git-R-Done" mentality.</p>
<p>I want to keep developing <a class="mention" href="/u/blackattr">@BlackATTR</a>'s QUERY and make it part of that "everything is kept working" strategy.</p>
<p>All of <a class="mention" href="/u/gchiu">@gchiu</a>'s projects, as well.  And my USCII, Whitespacers, <code>hostilefork.com</code> itself, etc.  Anything I can convince <a class="mention" href="/u/giuliolunati">@giuliolunati</a> to put in a GitHub workflow, as well!</p>
<p>I want to re-commit to <a href="http://rebmu.hostilefork.com/">Rebmu</a>, also, and make it part of the CI tests.  It might seem like I am always putting this off--even though I claim to say it's one of the big motivators, the <em>"great code golf game in the sky"</em> that I say I'm pursuing.  (When have you seen me solve a puzzle or develop it lately?)  But it's actually in the back of my mind, always.</p>
<p>It was nice with Whitespace to actually draw some attention from a curator of <a href="https://github.com/wspace/corpus">collections of implementations of whitespace</a>... <a class="mention" href="/u/aarchi">@aarchi</a>.  He said he found it to be one of the more interesting examples, and that's always been my goal with this.  To build on the novelty of the medium and give people a new tool to think.  (Recently re-watching that movie <a href="https://www.youtube.com/watch?v=8Fc-7SuebTQ">"Arrival"</a> and the "language/weapon/tool" bit.)</p>
<p>I'm a few minutes from February so I'll just close by saying: continue automating, continue examples, and maybe do a bit more YouTube evangelism.  I'll keep frittering with the mechanics.  And get my laptop fixed (!)</p>
            <p><small>5 posts - 4 participants</small></p>
            <p><a href="https://forum.rebol.info/t/belated-2021-post-mortem-new-years-2022-vision/1786">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/belated-2021-post-mortem-new-years-2022-vision/1786</link>
          <pubDate>Tue, 01 Feb 2022 04:49:12 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1786</guid>
          <source url="https://forum.rebol.info/t/belated-2021-post-mortem-new-years-2022-vision/1786.rss">Belated 2021 Post-Mortem + New Years 2022 Vision ðŸ¤¹</source>
        </item>
        <item>
          <title>Third Of The Way Through 2021 Status Report</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Announcements</category>
          <description><![CDATA[
            <p>So here we are, 1/3 of the way through 2021 already.  How can things seem so long and yet time pass quickly at the same time?</p>
<p>One element of good news is that today marks my 2-weeks-since-second-coronvirus vaccination shot.  I'm pretty sure this means I'm immortal now.</p>
<p>Having been cooped up too long, I'm going to get back to my traveling lifestyle--once I take care of some necessary business, like seeing the dentist and stuff.</p>
<p>So it seems a good moment to quickly take stock of what's happened since January.</p>
<h2>Despite Downtime And Distractions, Lots Of Good News</h2>
<p>I've been involved in some other things (I've mentioned Rust programming, for instance).  And given the monotony of staying in all the time, there have been stretches of time where I didn't feel like looking at code and just watching <a href="https://www.youtube.com/watch?v=Sdn8SNYyjxc">animal videos on YouTube all day</a>.</p>
<p>Especially harrowing is trying to make progress on fundamental issues of binding and modules.  There's not some map to follow, and there may be no answer.  It can turn into a death spiral pretty easily.</p>
<p>So I wasn't necessarily all that optimistic I'd have a good roster of things to report before I pack up and leave my island prison.  <strong>But as luck would have it...a lot of things started working out and clicking into place!</strong></p>
<h2>Most Obvious Major Success Story: <a href="https://forum.rebol.info/t/introducing-uparse-the-hackable-usermode-parse/1529">UPARSE</a>
</h2>
<p>Rebol PARSE boasts a nice gimmick of the mixture of BLOCK!s for rules and GROUP!s for imperative code.  The groups have sequencing of rules implicit just by having one follow another...no special operator or function calls required.</p>
<p>But I'd been lamenting for a while that it really wasn't packing the punch it should, especially when compared to things like Haskell parser combinators.  You couldn't make new PARSE keywords, and it was too locked down in terms of extracting little bits of series without being able to leverage abstraction to build bigger things.</p>
<p>When I started writing a combinator-based UPARSE--the way someone who didn't know C might try writing it within the language--I didn't know how successful it would be.  The only thing I knew was that it would be very slow (so long as none of the combinators were written as natives).  But what emerged is very, very good!</p>
<p>The backbone of difference in UPARSE surrounds rules not only knowing how much input they consume, but also having a "synthesized product".  Especially satisfying is how this uses multiple-return values, which had some progress on improving their performance and hardening their feature set.</p>
<p>There are still many open questions.  But what is clear is that leveraging the evaluator and frame mechanics is a <em>HUGE</em> win...as opposed to trying to write some limited and super-optimized state machine.  This is truly code that vindicates my attention to the design how action invocations can be reified, reflected, and manipulated as FRAME! objects.</p>
<p><em>(I'm sure that some of the hesitance people have had to try writing their own PARSE in Rebol is related to speed when it runs.  But it's also the case that historical Rebol2/Red/R3-Alpha just don't have good bones for doing a generic combinator parse dialect.  The code would be a nightmare.<br>
But Ren-C is far more powerful, so it is actually looking quite legible and good!)</em></p>
<p>As I tried to build in abilities like dealing with invisible combinators inside of the UPARSE engine, this drew out the fact that we didn't have good mechanics for that.  The ideas that had been simmering and percolating around things like modal parameters finally clicked... into a <strong><a href="https://forum.rebol.info/t/emergent-behavior-of-x-x-y-x-y/1596">comprehensive plan for how @ forms could let code deal with invisibility and null isotopes</a></strong>.</p>
<h2>Less Obvious Major Success Story: <a href="https://forum.rebol.info/t/the-sea-of-words/1564">"Sea Of Words"</a>
</h2>
<p>Commits related to this haven't made it to master yet.  But the results are very, very promising...and it means we shouldn't have to worry about binding-to-typos in the future.  Something like JavaScript's "strict mode" will be within our grasp.</p>
<p>The observation I made in <a href="https://forum.rebol.info/t/dont-fear-the-word/1549">Don't Fear the WORD!</a> really seems like it is poignant to realizing what the difference of this medium is.  Ren-C has been putting together the mechanics to make this feasible...being able to GC word spellings just as strings are GC'd.  We just need to make the binding model account for it.</p>
<h2>Priority Adjustments</h2>
<p>Top priority for this year was: "Kick the tires of virtual binding, optimize and clean it up as necessary".  That kind of got subsumed into the module work and sea of words, which will continue to be <em>the</em> major issue.</p>
<p>I talked stacklessness getting integrated.  Given that stackless is written, the major point of it has been made...I know how to design for it, and bits of it have been grafted in.  Our real question remains about locking, and the language's general lack of destructors and lifetime management.  What I've seen in Rust makes me think we might want to use something similar...to distinguish reference-counted objects to ones that are managed by an implicit borrowing protocol.  I don't think there's really any other solution if we want any kind of destructors for things like iterators.</p>
<p>Debugging...well...the best I can say on that front is that the shape of UPARSE is very friendly to debugging.  And the protocol surrounding @ is adding new smart ideas on how return results can go "meta" when doing something like a usermode TRACE.</p>
<p>As I said above, I'll have to see how much other stuff I get involved in before I can get a sense of how much to realistically expect to get done this year.  But there is a lot going on, and a lot to get excited about--if one is the sort of person who is excited by this sort of thing.  <img src="https://forum.rebol.info/images/emoji/twitter/tophat.png?v=9" title=":tophat:" class="emoji" alt=":tophat:"></p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/third-of-the-way-through-2021-status-report/1599">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/third-of-the-way-through-2021-status-report/1599</link>
          <pubDate>Fri, 07 May 2021 11:00:16 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1599</guid>
          <source url="https://forum.rebol.info/t/third-of-the-way-through-2021-status-report/1599.rss">Third Of The Way Through 2021 Status Report</source>
        </item>
        <item>
          <title>A Brighter 2021 With Virtual Binding (+ Good Riddance 2020)</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Announcements</category>
          <description><![CDATA[
            <p><img src="https://forum.rebol.info/uploads/default/original/1X/e95dd55a84658d2f53e0c3485ff0b6857407b461.png" alt="happy-2021" data-base62-sha1="xishQcvieKuVetTBkegag0ZVPr3" width="600" height="338"></p>
<p><sub>(hmm, something's wrong with those fireworks <img src="https://forum.rebol.info/images/emoji/twitter/microbe.png?v=9" title=":microbe:" class="emoji" alt=":microbe:"> <img src="https://forum.rebol.info/images/emoji/twitter/microscope.png?v=9" title=":microscope:" class="emoji" alt=":microscope:">)</sub></p>
<hr>
<p>There's no better way to push 2020 out the door than to hit the ground running for the new year...so...</p>
<p><strong><a href="https://github.com/metaeducation/ren-c/blob/master/tests/context/virtual-bind.test.reb">I've Committed The Initial Virtual Binding Implementation To Master!</a></strong></p>
<p><em>Please</em> try throwing it some hardballs, in the web build or elsewhere.  Some code paths trigger panics because I don't think they can happen in practice...so if you find out a way to make them happen, that's important to know.  But so far it seems to be holding up, and performance is actually pretty decent--even though it's an early draft with basically no optimization.  I'm betting it can get much better.</p>
<p><strong>Why have I thought this is so important for so long?</strong>  Virtual binding is to address the <em>foundational</em> problems of bindings being changed out from under users...when they should reasonably assume the arrays were under their control.  I've pointed out catastrophic flaws like this one:</p>
<pre><code>obj1: make object! [num: 10]
some-rule: [... num ...]
bind some-rule obj1  ; the context you intentionally want for the rule

obj2: make object! compose/only [
    rule: (some-rule),  ; mutably binds SOME-RULE to this object (!!!)
    some-field ...,
    num: ...  ; if any of these fields appear in SOME-RULE, you break it
]

some-rule  ; the bindings in this block are altered!
</code></pre>
<p>Historically, such code <em>changes the global SOME-RULE itself</em>--without you asking--and that's a recipe for disaster.  This was pervasive in any construct that did binding behind-your-back (including USE and FOR-EACH).</p>
<p>Even with virtual binding stopping the worst of this as it is now, we should ask if obj2/rule should be viewed distinctly from SOME-RULE.  I don't think viewing it differently by default is a great idea (which incidentally makes it CONST), and I've put forth <a href="https://forum.rebol.info/t/breaking-make-object-into-component-operations/1442">some ideas for how to apply virtual binding to build different constructs to address the different meanings</a>.  The big picture isn't all put together yet...but reasonable answers seem well within reach, if we are persistent.</p>
<p>It's a major development, for which the foundations were laid over many steps...and seeing it come together is a fitting way to start the year.</p>
<h2>Tech Aside, About the rest of that 2020 year...</h2>
<p>By just about every metric available, this has been 365 days we could have done without.  And after 2019's disappointment with the once-reliable StackOverflow, faceless robo-corporatism destroyed another guiding star... Travis CI poisoning itself with no voice to explain why it cut the line... forcing our scrappy efforts to bear the burden of adapting to a replacement.  <a href="https://forum.rebol.info/t/goodbye-travis-but-its-not-all-despair/1421">I've explained why this is not entirely bad, however.</a></p>
<p>With December hitting, I committed myself to working on virtual binding ("Virtual Binding's Last Stand") in the hopes of having something notable to announce today.  That announcement could have been <em>"None of this is going to work, so we should just give up on this broken language, and do something more productive with our lives."</em>  Unfortunately the efforts gave promising results, so we'll be here for at least a while longer.  <img src="https://forum.rebol.info/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>Another good thing that has happened here in the end of 2020 is there's been a notable uptick in design engagement.  <a class="mention" href="/u/gchiu">@gchiu</a> attributes this to the fact that he's called <a>webconference meetings</a>--which may or may not be true.  Either way, it makes all the difference in the world if experienced hands are around and committed to working through the details.  Hence I hope <a class="mention" href="/u/rgchris">@rgchris</a> remains motivated enough to dot i's and cross t's...because we really can act swiftly on things, once we know what we want.  <sub><a href="https://forum.rebol.info/t/the-naming-of-null-and-void/1427/9">Please let's finalize the issue regarding the VOID naming.</a></sub></p>
<p>Besides what's gone down in the last month, more happened in 2020 than you might think...</p>
<h3>Stackless May Not Have Been Merged, But It Was Quite Fleshed Out!</h3>
<p>When <a href="https://forum.rebol.info/t/foresight-in-2020-and-2019-retrospective/1258">setting directions for 2020</a>, I sounded the alarm that stackless was a critical technical point.  If each recursion in the interpreter corresponds to a recursion of the underlying machine stack, even non-"pathological" cases will run out of machine stack on "novel" platforms.  WebAssembly is such a platform.</p>
<p>In fact: just this week, I wanted to point <a class="mention" href="/u/okram">@okram</a> at Graham's chess demo...but <strong><code>do &lt;chess&gt;</code></strong> called <strong><code>do &lt;popupdemo&gt;</code></strong>, and <a href="https://github.com/hostilefork/replpad-js/issues/64#issuecomment-752435266">this level of nesting was enough to break the default stack settings</a> with the new-ish "Asyncify" emscripten build.  (DO is a complex function which layers on top of LOAD, which is a lot of usermode code, so nesting it inside of another DO/LOAD inside of a DO from the Replpad stack becomes quite a lot...if you realize each interpreter call is several C functions, producing several Wasm functions, multiplying to be much deeper than corresponding JavaScript recursions would be.)</p>
<p>So stackless is a critical change.  There's no going back on it...the branch will be merged, but some of the experiments using it will not be mainlined yet.  Whether that means we'll be condoning use of the <a href="https://forum.rebol.info/t/yielder-and-generator-and-thinking-about-coroutines/1311">generators and yielders</a> in the near term is another matter.  Hopefully so.</p>
<p><strong>Stackless was a lot of where this year's energy went.  That energy hasn't been wasted, and it has already had several bits integrated in phases...which will be an ongoing process.</strong></p>
<h2>A Lot Of Other Things Happened, Too.</h2>
<p>There have been no shortage of interesting new behaviors.</p>
<ul>
<li>
<p><a href="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387">We got a new COMMA! type</a>, which I have come to think is really great.</p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/more-comprehensible-errors-with-per-cell-labeling/1357">ACTION!s and FRAME!s cache the known label in the cell</a>, leading to better understandable stack traces and errors in APPLY-like situations.  (Might seem a small thing, but it's a big win!)</p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/null-blank-void-history-under-scrutiny/1249/11">NULL Isotopes</a> solve the off-putting corruption of conditional branches that evaluate to NULL, while still allowing the existence ELSE and THEN and ALSO to work.</p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/opportunistic-invisibility/1362">Invisibles ("void functions"?) are opportunistic</a>, so you can make a function that decides while it's running to opt out of returning any value at all.</p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/issuechar-token-is-hitting-it-out-of-the-park/1364">CHAR! and ISSUE! are unified, to the type that is likely to be named TOKEN!</a>.  I really want <a class="mention" href="/u/rgchris">@rgchris</a> to weigh in here, because I think this is a very solid direction for the type.</p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/testing-generic-tuple-and-path-structuring/1353">Generic TUPLE! is here</a>, turning the previously kind-of-useless TUPLE! type into something that can be applied for interesting effects in dialects and the interpreter alike.</p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/mirrored-type-bytes-explained/1008">refinement-like PATH!s are now compressed</a>, which solves one of the potential objections to the idea that <strong>/A</strong> be considered a "path", as it costs no more than a WORD! to represent.</p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271">Multiple-Return Values arrived as an application for SET-BLOCK!</a>.  While they aren't completely worked out, they have been working quite well as syntactic sugar over passing refinements WORD!s or PATH!s.</p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/binary-dialected-encoding-decoding-instead-of-to-conversions/1270">ENBIN and DEBIN arrived</a>, and while they didn't take much to implement, I think they are a good beacon of how we can explain what's truly <em>different</em> about the kinds of solutions you might make in Ren-C vs. a traditional language.</p>
</li>
<li>
<p><a href="https://github.com/metaeducation/ren-c/commit/06e110235efb68500700fead3478a3216899d780#diff-c9ee23cd2da767086a77c9fe3d0b8c3a7aa4db2ea683fefe93350883c7938765">All crypto and hashing transitioned to MBEDTLS</a>.  Mbedtls is pure C,  philosophically aligned with our project goals, and modularized admirably.  This gives us access to more algorithms with up-to-date vetting.</p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/semantics-of-predicates/1404">Predicates are starting to be implemented</a>, which help parameterize algorithmic functions by means of a clever notation, taking advantage of generic TUPLE!.  It's a novel approach to the idea which should hopefully help put more of the sometimes-arbitrary-seeming internal decision-making of generic code in the hands of the user.</p>
</li>
<li>
<p><strong>BigNum and BITSET! Research</strong>.  I haven't committed any of it into Ren-C, but I spent a good bit of time working on it (and becoming a contributor to a bitset library to prepare it for integration).  I think we have interesting angles on both of these in the works.</p>
</li>
</ul>
<p>I could go through the commit log and list a lot of other internal things...some of which are rather consequential (like using clever C++-build mechanisms to check at compile time to make sure the CONST/PROTECT bits are honored in cells, so that there aren't systemic bugs where C code forgets to check it and lets you mutate things you asked not to).  But suffice to say there's a lot of little things, and just the maintenance of <em>"another year passed and it still compiles and runs on the ever-evolving systems"</em>.</p>
<h2>So What's In Store For 2021?</h2>
<ul>
<li>
<p>Kick the tires of virtual binding, optimize and clean it up as necessary</p>
</li>
<li>
<p>Hammer out MAKE OBJECT! / CLASS / METHOD and their variants in a way that satisfies the peoples and makes computational sense.</p>
</li>
<li>
<p>Integrate the stackless branch so the web build can breathe easier, and come up with satisfying answers to how suspended stacks interact with locking.  <a href="https://forum.rebol.info/t/modifying-while-iterating-crash-nonsense-predictable-or-illegal/1317">Anyone with something to say about mutating while iterating</a> needs to say it.</p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/new-build-executables-new-build-strategy/1432">A renewed build system</a>, with the outcome of being able to load Wasm "side-modules" as the WebAssembly equivalent to DLLs.</p>
</li>
<li>
<p><strong>Debugging</strong>, stylized such that it can be done remotely between processes--even if one of those processes is running in Wasm in a browser, and one is not.</p>
</li>
</ul>
<p>One of the big reasons I wanted to get stackless thought out is because of how much it impacted the idea of designing a good debugger.  I thought stackless would help write a debugger (by letting you put the debugger on one stack and the user code on another).  But any assistance you get from that is completely undermined by the problem of trying to write a debugger for stackless code.</p>
<p>So like I've been saying, I now think our first true debugger needs to be a remote debugger.  It may seem to be rather constraining to say the debugger can't share memory with the debugged process...but if the debugger is written with that discipline, it can be run in-process as well as out-of-process.  I think it's the right way to go.</p>
<p>In any case, I think the bets overall are the right ones.  And I can feel more comfortable with Virtual Binding running, to think we might be able to mitigate some of the more egregious aspects of Rebol's Rube-Goldberg design.</p>
            <p><small>3 posts - 3 participants</small></p>
            <p><a href="https://forum.rebol.info/t/a-brighter-2021-with-virtual-binding-good-riddance-2020/1451">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/a-brighter-2021-with-virtual-binding-good-riddance-2020/1451</link>
          <pubDate>Fri, 01 Jan 2021 16:09:29 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1451</guid>
          <source url="https://forum.rebol.info/t/a-brighter-2021-with-virtual-binding-good-riddance-2020/1451.rss">A Brighter 2021 With Virtual Binding (+ Good Riddance 2020)</source>
        </item>
        <item>
          <title>Re-Meet Agendas</title>
          <dc:creator><![CDATA[gchiu]]></dc:creator>
          <category>Announcements</category>
          <description><![CDATA[
            <p>We are having our second video meeting on 13th December, 11:00 NZDST (GMT+13), or 12th December, 17:00 EST.</p>
<p><strong>Location</strong>: <a href="https://meet.google.com/rfp-znwr-xni">https://meet.google.com/rfp-znwr-xni</a></p>
<p><strong>Agenda</strong> (times are in GMT+13:00)<br>
11:00 Graham Chiu - automating PDF forms, and negotiating endless government bureaucracy<br>
11:20 Brian Dickens - debrief on adding the TLS protocol for those forms for Graham's Birthday <img src="https://forum.rebol.info/images/emoji/twitter/cake.png?v=9" title=":cake:" class="emoji" alt=":cake:"><br>
11:40 Open discussion<br>
12:00 Discussion formally ends</p>
<p>Speakers, and participating audience should ensure that they have a dedicated microphone for best clarity of speech.  Your laptop mic may not do the job.</p>
<p>Recording: <a href="https://youtu.be/AeayMEmh7Bs">https://youtu.be/AeayMEmh7Bs</a> (formal part only)</p>
            <p><small>5 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/re-meet-agendas/1431">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/re-meet-agendas/1431</link>
          <pubDate>Fri, 11 Dec 2020 20:49:56 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1431</guid>
          <source url="https://forum.rebol.info/t/re-meet-agendas/1431.rss">Re-Meet Agendas</source>
        </item>
        <item>
          <title>Ren-C License Changed to LGPL 3.0</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Announcements</category>
          <description><![CDATA[
            <p>I've gone ahead and <a href="https://github.com/metaeducation/ren-c/blob/master/README.md" rel="nofollow noopener">made the long-planned change to the license</a>.</p>
<p>I'd originally thought I'd wait until <a href="https://forum.rebol.info/t/switching-to-stackless-why-this-why-now/1247">stackless</a> and launching a new project site/etc.  But things have meandered a bit, and too many significant things are happening.  So going ahead and doing it now makes the most sense.</p>
<h2>Is It Legal To Change Apache 2 to LGPL 3</h2>
<p><em>Yes.</em></p>
<p>Apache 2 code may be subsumed into LGPL 3 projects.  For esoteric technical reasons you can't relicense Apache 2 code as LGPL 2, <a href="https://www.apache.org/licenses/GPL-compatibility.html" rel="nofollow noopener">but they worked that out in version 3</a>.</p>
<p>Of course, Ren-C's license changing doesn't apply to anything in the Rebol repository Carl released in 2012.  And it doesn't retroactively apply to commits I authored between then and now.  It only applies to what gets written in Ren-C (or its derivatives) from this day forward.</p>
<p>Hence anyone who wants to use any of the code from before today as Apache 2 need only go to <a href="https://github.com/metaeducation/ren-c/commit/be8956c696dc0caee685ea4f4a04ba9841892084" rel="nofollow noopener">commit be8956c</a>.  The new license doesn't apply to that commit, or any of the ones prior to it.</p>
<h2>What Files Are Affected?</h2>
<p><em>This is mostly only applying to C files, and native extension code.</em></p>
<p>I'm not changing the license of the mezzanine routines.  So anyone finding a Rebol snippet in that source can still use derived versions of that under Apache2, without being bound to the obligations of the LGPL3 for shipping a Rebol program using it.</p>
<h2>Does The LGPL Change Affect Anyone We Know Of?</h2>
<p><em>If anyone, just Oldes.</em></p>
<ul>
<li>
<p><a href="https://www.youtube.com/watch?v=dCSR658VHa8" rel="nofollow noopener">Atronix</a> doesn't mind.  The parts of Ren-C they've borrowed from were from fairly early versions (when in was more R3-Alpha compatile)...and it's unfortunately not on their schedule to incorporate any "modern" Ren-C components at this time anyway.  But even if they did, it wouldn't matter <em>(they give their customers their source code, which is then under NDA, so LGPL or not is irrelevant)</em>.</p>
</li>
<li>
<p><a href="https://github.com/Oldes/Rebol3" rel="nofollow noopener">Oldes</a> is the only other "outside person" who has looked at Ren-C code and borrowed from it.  But I borrow from his patches as well.  So if he wants to take small ideas or fixes out and apply them to his branch while keeping it Apache2, I don't have a problem with that.  His lack of interest in the bigger ideas means there's zero odds he'll take anything substantial.</p>
</li>
<li>
<p>Everyone on forum and chat is fine with it.</p>
</li>
</ul>
<h2>Will a Strings-Attached License Scare Away (Useful) Users?</h2>
<p><em>Almost certainly not.</em></p>
<p>First of all, LGPL doesn't ask much (e.g. compared to the GPL).  If you look back at Carl's initial announcement about open-sourcing Rebol in 2012, <a href="http://www.rebol.com/article/0511.html" rel="nofollow noopener">he planned to use <strong>GPL 2</strong></a>.  It worked for Linux, so why not a language?</p>
<p>Those with business interests lobbied him to use a license that did not require modified versions of the interpreter to be open and free.  They didn't want to have to give away whatever "secret sauce" they added, and sold to their customers.  It also keeps them from worrying about how it might interfere with license obligations coming from any components they used.</p>
<p>The angle was <em>"if your license makes life harder for us commercial users, we'll have to use something else...which will reduce the attention the language has and it won't grow"</em>.</p>
<p>But after all that, they vanished.  Guess they got what they wanted and never intend to give back (or just lost interest and wandered off...)</p>
<p>The moral of the story is not to worry about losing the kind of people who would be opposed to the modest rules of the LGPL.  <em>The license doesn't mean your whole project becomes GPL by using the interpreter...you only have to share the changes you make to the interpreter itself.</em>  People who don't feel it's just good manners to give back to something they're getting for free are probably not worth listening to.</p>
<h2>A Creator's Promise to Keep the Project Open</h2>
<p><em>LGPL means there's no intention from the project team to become "dark and secretive".</em></p>
<p>Those with dollar-signs in their eyes might think it's a great thing to find code with a license allowing secret modifications, and imagine selling the results for great profit.</p>
<p>But y'know who else has the "freedom" to do that?  The original people who made and distributed the project.  After your buy-in, they could go off on their own...stop patching bugs...and try to sell you back the thing you started using for free.</p>
<p><a href="https://www.reddit.com/r/redlang/comments/ahucdg/what_is_redpro/" rel="nofollow noopener"><strong>That's the direction Red decided to go with "Red/Pro".</strong></a>  While the vision statement in the "What is Red?" talk pointed to closed-source as a stumbling block, it seems they fell back into very much the same pattern as the Rebol2 it sought to replace.  When people ask in chat about things the answer is often "that's on a private branch" or "that will be in the commercial version" or "we're not at liberty to discuss that".</p>
<p>So the biggest element of committing to the LGPL is a way of signaling "we're not like that".  This is a project that will receive bug fixes publicly, and improvements will be shared with everyone without them having to pay.</p>
<h2>Is A Closed-Source Hijacking of The Project Likely?</h2>
<p><em>Not at all likely today.  But tomorrow, who knows?</em></p>
<p>Some days I see the parts fitting together in a way that would push it into the irresistible category.  We're all here because at some points we've felt that.</p>
<p>At those times, I can imagine someone grabbing it and incorporating it into a closed-source product, adding enhancements and profiting from all the hard work without giving back.  But then there's the saying: "Don't worry about people stealing your ideas.  If your ideas are actually any good, you'll have to ram them down people's throat."</p>
<p>Also: if I'm ever feeling too good about things, I can just wait 10 minutes and run into something from the inexhaustible pit of Rebol's incomplete design points.  Then the whole language seems like something everyone should run from like the plague.  <img src="https://forum.rebol.info/images/emoji/twitter/running_man.png?v=9" title=":running_man:" class="emoji" alt=":running_man:"> <img src="https://forum.rebol.info/images/emoji/twitter/microbe.png?v=9" title=":microbe:" class="emoji" alt=":microbe:"></p>
<p>:-/</p>
<p>So really this isn't likely to make a huge difference.  It's just about putting those promises in place about keeping the code open, and signaling agreements with Stallman about the <a href="https://www.gnu.org/philosophy/shouldbefree.en.html" rel="nofollow noopener">premises of software freedom</a>.  Our lives are run so much by software...and embracing a moral framework that legitimizes excuses to push that into the dark is not a philosophy that will end well...</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/ren-c-license-changed-to-lgpl-3-0/1342">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/ren-c-license-changed-to-lgpl-3-0/1342</link>
          <pubDate>Fri, 25 Sep 2020 10:01:27 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1342</guid>
          <source url="https://forum.rebol.info/t/ren-c-license-changed-to-lgpl-3-0/1342.rss">Ren-C License Changed to LGPL 3.0</source>
        </item>
        <item>
          <title>The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Announcements</category>
          <description><![CDATA[
            <p><a class="mention" href="/u/rgchris">@rgchris</a> has been between a rock and a hard place... being a Rebol-style code believer with a large corpus, who hasn't been particularly served by either Red or Ren-C.  Unwilling to jump ship for Python or other non-Rebol languages, this has kept him rather stuck in a Rebol2 world.</p>
<p>To make the best of a bad situation, he has put forth the idea of branching Ren-C circa two years ago.  The intent is not to stay there long term, but to believe that the dynamism of Ren-C is such that future versions will be able to emulate this point if desired (considering I've stated that emulation of Rebol2 is a goal, this would be even easier).</p>
<p>I have mixed feelings about this plan, but his participation is valuable enough to be worth compromising to try it out.  So I've <a href="https://github.com/metaeducation/ren-c/commit/aa15391754346c4d318262c4f326f33024917e21" rel="nofollow noopener">patched R3C to be buildable with more up-to-date compilers</a> in "rigorous" mode (I don't like building without all warnings on, and don't feel like having to install old GCC or MSVC to build an older branch).</p>
<p>I've also done a few patches to try and make R3C closer to mainline.  So far:</p>
<ul>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c/commit/c2e0405513322cc6d8006e34d8ea95072d007639" rel="nofollow noopener">COLLECT and KEEP in PARSE</a></strong> - This was a strongly-requested feature by <a class="mention" href="/u/rgchris">@rgchris</a>, and as such it doesn't make sense to have implemented it and leave it out of R3C.  The syntax is different than Red's version, per his request, and it does rollback...which Red also does not.</p>
</li>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c/commit/99378cda9c2c317568ac46dfeedbdebcecf13e1f" rel="nofollow noopener">Permissive Group Invisibility</a></strong> - At first I thought this idea wouldn't be useful.  But the more I used "invisibles", the more I wanted to be able to group them like any other value.  <a href="https://forum.rebol.info/t/permissive-group-invisibility/1153">forum post</a></p>
</li>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c/commit/a690320b4072e691d379b5f0d790dcf8ed6c2bc4" rel="nofollow noopener">ENBIN and DEBIN</a></strong> - There are many ways to encode integers as binary or decode them.  Rebol's attempt to have a "standard" TO BINARY! for integers and TO INTEGER! of a binary wound up being a major pain point in the 32-bit to 64-bit conversion for integers.  This would only get worse with arbitrary precision numbers...the next frontier.  These dialects may not be the perfect design, but their weird names make them easy to find...and they're pretty good power tools for the purpose.  <a href="https://forum.rebol.info/t/binary-dialected-encoding-decoding-instead-of-to-conversions/1270">forum post</a></p>
</li>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c/commit/e88ee79d9d0fea4ea0ca3605a7c5b1f5b0602b61" rel="nofollow noopener">TAKE returning NULL</a></strong> - originally TAKE of an empty block was an error in Ren-C, to try and be "safe"... so you had to use a lower-level <code>TAKE*</code> that allowed it.  While it was one of the earliest examples of CHAIN mechanics--and offered benefit by testing that--it was probably not so great.  <a href="https://forum.rebol.info/t/can-take-just-return-null/1265">forum post</a></p>
</li>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c/commit/2054d94f6f414b57a52c8760562bc741d359e4e1" rel="nofollow noopener">PRINT NEWLINE is allowed</a></strong> - PRINT's attempt to avoid people getting blindsided by <strong>print value</strong> where value turns out to be something like <strong>[format hard drive]</strong> led it to be more prickly, so you know it's not the kind of thing to be used with ANY-VALUE!.  The compromise of only taking BLOCK! and TEXT! helped keep it from being a generic debug utility...making it a known quantity.  Regardless of this, being able to say PRINT NEWLINE looks nice...and have that mean printing one (and only one) newline.  <a href="https://forum.rebol.info/t/limiting-print-to-block-text-perhaps-blank-to-opt-out/855/2">forum post</a></p>
</li>
</ul>
<hr>
<p>One of the big goals is having feedback.  Here are a few things I pointed out that I haven't patched in yet, but consider review of the issues to be important:</p>
<ul>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c/commit/a2ff82017f13fe8c1526b0df96c3e53c28c51620" rel="nofollow noopener">THEN returns its branch result unmodified</a></strong> - While this is a fairly minor change, it's probably more significant than it seems.  <a href="https://forum.rebol.info/t/regarding-mutual-exclusivity-of-then-and-else/1174">forum post</a></p>
</li>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c/commit/24d1b4d87e9d1729ce31ce46ce62c8c6a390da46" rel="nofollow noopener">VOID! assignments allowed in SET-WORD! and SET-PATH!</a></strong> - This was debated by the Rebol community historically (and has come up on the Red Gitter).  It's one of those things where the fundamental "safety" value is debatable, while it creates a very clear inconvenience.  Ren-C's rethinking of VOID! as a "hot potato" that hangs around and isn't really a problem unless you try to actually use it helps distinguish it from truly "unsetting" a variable, so the verbal paradox of "setting to an unset" isn't as jarring.  <a href="https://forum.rebol.info/t/when-has-stopping-void-or-old-unset-assignments-helped-you/1206/">forum post</a></p>
</li>
<li>
<p><strong>Skippable COMPOSE marking</strong> - Chris hasn't liked this, but I think the convolutions you have to do to avoid it are bad.  One need not use it if one doesn't like it, but I think you shoot yourself in the foot by not having it.  <a href="https://forum.rebol.info/t/requirements-list-for-the-redbol-compatibility-module/722/21">forum post</a></p>
</li>
</ul>
<hr>
<p>Really here, the idea is to get engagement on the design...and find out what answers would be satisfying to all involved for the main branch.  So the measure of that engagement will drive how much I can afford to work on accommodating bugfixes and feature patches onto the branch.  But it seems that this is more useful than Redbol--at least to him--at this point in time.</p>
            <p><small>9 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284</link>
          <pubDate>Wed, 01 Jul 2020 19:47:14 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1284</guid>
          <source url="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284.rss">The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</source>
        </item>
        <item>
          <title>Upcoming Announcements</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Announcements</category>
          <description><![CDATA[
            <p>I've been taking a meditative retreat...finding some solace in being able to code in peace, and think.  I have more to do on that.</p>
<p>But I have come to some clarity about what has to happen.  A lot of things are in the plan... including <a href="https://www.youtube.com/watch?v=gvY_XQWHlzc&amp;feature=youtu.be&amp;t=226" rel="nofollow noopener">apologizing to Nick</a>.  Yet that impasse is under the umbrella of a shift which has been a long time coming, but kept being put off.  It's time to take the necessary actions to put it into place...</p>
<p>That is to basically say goodbye-for-good to the "historical" Rebol community (by which I am referring to <code>rebolforum.com</code>, <code>rebol.org</code>, <code>rebol.com</code>, etc... not the attendees of the Philadelphia conference or users of this site who choose to participate).  It means re-launching Ren-C under a formal project name... where it will build on its merits fully independent of association with Rebol.</p>
<p><strong>I'm also going to merge in a major critical feature I've been working on, that will only be incorporated once a license change is in effect.</strong>  The new license will be my favored one for a project of this nature: Lesser GPL (LGPL) 3...which is compatible with subsuming Apache 2 code due to incorporating its patent clauses (<a href="https://www.apache.org/licenses/GPL-compatibility.html" rel="nofollow noopener">note that LGPL 2 is not compatible</a>).</p>
<p>The license change is obviously not retroactive.  So Ren-C as developed prior to the new feature will remain Apache 2 <em>(except for the JavaScript extension, which was LGPL...note the web Repl was not developed in the Ren-C repository and was made LGPL as well)</em>.  It goes without saying that the Ren-C codebase will be frozen in time--as I will no longer make contributions under Apache 2.  But if someone like Carl (or Oldes) wanted to pick over the code for ideas from 2015-2019 to copy/paste bits into R3-Alpha without concern, that's where they would look.</p>
<p>While LGPL may be a license that inhibits some forms of commercial adoption, I'm not concerned about those cases or users.  I (re-)learned my lesson sufficiently from dealing with the <a href="http://www.rebol.com/cgi-bin/blog.r?view=0512" rel="nofollow noopener">Rebol open sourcing discussion</a>--everyone who barked about how much they wanted their ability for closed-source use vanished.  The only reason not to change the license would be to slog on with Ren-C's five year hope for unity with Rebol and facilitating code to be taken back under R3-Alpha's license.</p>
<p><em>(When it comes to the license, I'm not blaming Carl.  Do note in his initial announcement about open-sourcing <a href="http://www.rebol.com/cgi-bin/blog.r?view=0511" rel="nofollow noopener">he said he would "most likely" use GPL2</a>, which is more restrictive than LGPL3 for most practical purposes.  It was listening to his community that gave the result.  Now it's too late to go back--note I'm not choosing v.3 because I particularly care about the anti-"Tivoization" clauses, but because I can't make an Apache 2 project (L)GPL2 due to the patent clauses, which are truthfully more important.)</em></p>
<p><strong>There are other changes in process and procedure that will be coming with this.</strong>  I'm more certain about what those changes will be than I am about what timeline they will be on.  So it's really just going to be a matter of seeing what happens, in what order.  Really, here in the end times, we have to focus on where we can actually have an impact.</p>
<p>So everyone be sure to thank <a class="mention" href="/u/gchiu">@gchiu</a> for his efforts on the coronavirus, in NZ <a href="https://medicalsciences.stackexchange.com/search?q=user:3414+%5Bcovid-19%5D" rel="nofollow noopener">and globally</a>.</p>
            <p><small>4 posts - 4 participants</small></p>
            <p><a href="https://forum.rebol.info/t/upcoming-announcements/1274">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/upcoming-announcements/1274</link>
          <pubDate>Sun, 19 Apr 2020 11:52:48 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1274</guid>
          <source url="https://forum.rebol.info/t/upcoming-announcements/1274.rss">Upcoming Announcements</source>
        </item>
        <item>
          <title>Foresight in 2020 (and 2019 Retrospective)</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Announcements</category>
          <description><![CDATA[
            <h1>
<img src="https://forum.rebol.info/images/emoji/twitter/partying_face.png?v=9" title=":partying_face:" class="emoji" alt=":partying_face:">  <strong>Happy Belated New Years to the People Who Matter!</strong>
</h1>
<p><sub>(I'm talking of course, about the people who read this forum :P)</sub></p>
<blockquote>
<p>If you're wondering why I'm a month late making a New Year's post...it's because I've been a month late making good on getting the 2019 conference videos edited by end of the year they were filmed in.  But they're finally finished!</p>
<p><a href="https://2019.reb4.me/talks" rel="nofollow noopener">https://2019.reb4.me/talks</a></p>
<p><em>(Note: If you enjoy the videos and didn't attend the conference, please consider sending a contribution to <a class="mention" href="/u/rgchris">@rgchris</a> to offset the venue rental cost.)</em></p>
</blockquote>
<h2>...Are We Amazed, Yet?</h2>
<p>In December I forced myself to put all development on hold (besides critical bugfixes) until the videos were done.  Transforming real-life talks into something that has online watchable appeal is focused work that is very iterative--and takes days for each.  So I've fit it in around my life <em>(even dragging the computer to a <a href="https://www.facebook.com/events/marriott-hotel-ann-arbor-ypsilanti-at-eagle-crest/spotlight-new-years-celebration-2019-2020/2215596472017261/" rel="nofollow noopener">4-day New Years event</a>, and sneaking back to the room to edit whenever I could...)</em></p>
<p>I had my doubts sometimes while doing it, but after seeing the wall of well-tuned talks I feel the time spent on the videos was <strong>totally worth it.</strong></p>
<p>It's a fun reminder of an eventful summer.  I was in Philadelphia for the month before -and- after the conference.  And it's hard to imagine how any of the interesting things in my life that have occurred since would have happened, if not for getting out to take that trip!</p>
<p>But the videos also stand as an easy-to-absorb testimony to the <strong>arsenal of tools and design</strong> which we have been patiently steering toward.  I've been adamant that there's no point in writing "Rebol 2, II".<br>
So I've consciously avoided whipping out my mad Win32 skills to write yet another "80s cash register".  It's been all about forming a solid core and library that would be a <a href="https://en.wikipedia.org/wiki/Parable_of_the_Wise_and_the_Foolish_Builders" rel="nofollow noopener">lasting foundation</a> for the future... regardless of what that future held.</p>
<p>The accomplishments have been formidable:</p>
<ul>
<li>A WebAssembly build...that can even run the same usermode console code in the browser that is used in the desktop builds.</li>
<li>32-bit and 64-bit builds on all platforms (enabling us to run on even the latest OS X), with alignments meticulously heeded to facilitate the Wasm compilation.</li>
<li>
<a href="https://youtu.be/PT3GOe1pj9I?t=185" rel="nofollow noopener">Complete bootstrap requiring only a single Rebol executable</a> (statically linked with libtcc), that can pull source from GitHub...unzip it...run the make process...and compile the C files to make a new r3.</li>
<li>
<a href="https://youtu.be/r5kccBehMMg?t=531" rel="nofollow noopener">An Android client/server system and "app store"</a>, running a native Bionic-linked executable on the phone, serving its interface through httpd to get UI through a Wasm build in a local browser.</li>
<li>A system for <a href="https://github.com/BrianOtto/rebol-pwa" rel="nofollow noopener">building and packaging a "PWA"</a> (<a href="https://developers.google.com/web/progressive-web-apps" rel="nofollow noopener">Progressive Web App</a>) out of a Wasm-built application.</li>
<li>An interoperability API with a level of design that I have not seen matched for C systems, that is seeming to apply with equal strength to JavaScript.  <a href="https://youtu.be/6nsKTpArTCE?t=252" rel="nofollow noopener">My tech talk on it lays out just how clever libRebol is</a>.</li>
</ul>
<p>...and that's just a <em>small</em> list of what we've got going for us.</p>
<h2>Web Framework 2021, and Redbol</h2>
<p>I'd proposed at the beginning of 2019 to pin down Ren-C with enough committed to so we could declare a Beta status: Beta/One.  It would be acceptable even if it was a small subset of the language.<br>
Just as long as there was enough to teach at least a couple concepts in an online tutorial, without people having to unlearn anything later.</p>
<p>But... to the extent people voted with their time and attention... I was overruled.  Once web embedding came online, that's what captured the imagination.  No one chipped in on design posts, but went off writing huge applications for the web... entirely in Rebol.  Whether I approved or not, that's what happened.</p>
<p>So I <a href="https://forum.rebol.info/t/beta-one-goals-vs-web-framework-goals/1146">pivoted in mid-year</a> to say that we'd be better off building a solid Rebol2/Red emulation mode (the so-called <a href="https://forum.rebol.info/t/requirements-list-for-the-redbol-compatibility-module/722">"Redbol" module</a>).  Then give Ren-C more time to remain an evolving internal framework, by which Rebol-like systems were built.</p>
<p>Rather than be upset about it, I decided Redbol would make a good technical challenge of Ren-C's pliability.</p>
<h2>2019 Had Plenty of Technical Achievements</h2>
<p>The first half of 2019 was extremely productive from a development point of view, which was good since it gave us a lot to show off at the conference.  The second half didn't see quite as much happening... because I had a lot of things going on in life.  Taken as a whole, a lot still happened:</p>
<ul>
<li>
<p><a href="https://forum.rebol.info/t/the-beta-one-enfix-covenant/1023"><strong>Beta/One Enfix Covenant</strong></a> - The desire to have constructs like ELSE in the language led down a complicated path.  Trying to accomplish the distinction with parameter conventions brought up questions of what would happen if you used those parameter conventions on the right hand side.  Reasoning ultimately led to what feels like the answer that eliminates the new parameter class.</p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/the-beta-one-mutability-manifesto/1062"><strong>Beta/One Mutability Manifesto</strong></a> - Rebol's fast-and-fluid attitude toward mutability is something people take for granted in small scripts, but bites new users and experts alike.  The simplest examples like <strong>loop 2 [x: [] | append x ...]</strong> leads to confusion when the <strong>x: []</strong> does not cause a reset on each iteration.  For starters, Ren-C had tried unconditionally locking source series--which helped plug oversights in PROTECT, but caused vocal objections from users on how it affected casual scripting.  Using a new and versatile technical approach, the out-of-the-box default provides something that no one has complained about yet...and that can empower the creation of Rebol2-compatible constructs.</p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/pure-and-refined-simplifying-refinements-to-one-or-zero-args/1120"><strong>Refinements As Their Own Arguments</strong></a> - Whether people appreciate it or not yet, this change is cross-cutting and benefits users and the evaluator alike.  The trend in Ren-C has usually been one of increased nuance to bolster the claims of the "most freeform language ever designed"*, <em>so it's a gratifying thing to have a sea change of simplification over historical Rebol</em>!  You can take my word about the benefits inside the interpreter, but as <a href="https://forum.rebol.info/t/augment-add-parameters-and-refinements-after-the-fact/1216">features like AUGMENT</a> come online, I bet everyone will come to appreciate how critical this was.</p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/quoted-arrives-formerly-known-as-lit-bit/995"><strong>Generalized Quoting Of Any Value Arrives</strong></a> - This is another case where not everyone appreciates the importance of being able to add an arbitrary number of quote levels to any value.  Yet this is something the average user will come to appreciate when <strong>switch block ['[a b] [print "matching blocks in switch"] ...]</strong> or when <strong>append block '("appending" "groups")</strong>.  And again you'll have to take my word for it that it has ripples of consequences which enable API features you haven't appreciated yet.  As Hans and Franz would say: <em>"Hear me now, and believe me later."</em></p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374/5"><strong>UTF-8 Everywhere Has Been Running Since March</strong></a> - Whether we're serving a <a href="https://github.com/metaeducation/rebol-httpd/blob/c6e180d41233a6ef596bf3245189cec80bf30ce3/tests/stress.reb#L32" rel="nofollow noopener">HighCodepointCat(<img src="https://forum.rebol.info/images/emoji/twitter/smiley_cat.png?v=9" title=":smiley_cat:" class="emoji" alt=":smiley_cat:">) over rebol-httpd</a> or perhaps a <a href="https://github.com/metaeducation/ren-c/blob/9166dff4ba74ded7024d001980af480b593cf91d/tests/string/utf8.test.reb#L16" rel="nofollow noopener">full-spectrum test with Braille and such</a>, Ren-C has the full Unicode support R3-Alpha lacked.  While Red supports high codepoints as well, it does it in a way I do not think is "future-forward"...and Ren-C joins Rust as one of the few languages to truly only represent strings internally as UTF-8.  We still hit a bump here and there...<a class="mention" href="/u/giuliolunati">@giuliolunati</a> found a bug some weeks ago, but it's running and there's no going back.</p>
</li>
<li>
<p><strong>Viable ODBC Functionality</strong> - The ODBC extension was ported at one point, but not maintained.  But we <a href="https://github.com/metaeducation/rebol-odbc/blob/master/tests/odbc-test.reb" rel="nofollow noopener">have a Travis CI test being run</a>...to keep it working with MySQL, SQLite, and Excel (among others).</p>
</li>
</ul>
<p>Those are some big ones, but you can dig through commit logs or forum posts for more.</p>
<h2>Onward...!</h2>
<p>Now that the videos are finished, I'm ready to get back to coding.</p>
<p>I've moved to a new living situation <em>(curiously, a mere 15 minute drive from the <a href="https://i.stack.imgur.com/e3zjd.jpg" rel="nofollow noopener">Rebol Cafe</a>)</em>.  There, I'm setting up a more monk-like existence, and have cut out most of the fun-but-distracting stuff I was doing.  No more partying every night. <img src="https://forum.rebol.info/images/emoji/twitter/slightly_frowning_face.png?v=9" title=":slightly_frowning_face:" class="emoji" alt=":slightly_frowning_face:">  It's days of tea and typing again, so hopefully we'll see a repeat of the productivity from early 2019.</p>
<p>So what's on the radar, now?</p>
<ul>
<li>
<p>The <strong>Redbol Module</strong> is going to be a big focus.  We've already had some success with my blog generator and Gabriele's PDF maker.  I'm going to start a separate repository for it, and begin a framework through which we can run Red's tests against it.  This is going to be a long road, but a very deep stress test and proving ground for Ren-C.  There will be bugs in the emulation to work on, and there will be bugs brought out in the core, so no shortage of work to do.  I hope people can get on board with contributing to the userspace definitions, so I can tend to the C code and design that needs doing.</p>
</li>
<li>
<p>We're moving away from StackOverflow for chat and Q&amp;A, and <a href="https://forum.rebol.info/t/migration-from-stackoverflow-chat/1256"><strong>We Might Pick to Build a Rebol Solution</strong></a>.  I don't want to be hasty in saying that we jump into that burden.  But I've had something of a revelation that I can no longer be complicit in the "keeping things on some guy's website"...or even trusting the DNS system itself.  Whether it's through Rebol or not, I want my remaining time as a user of the Internet to be spent as an activist for removing central control by fiat.  I've <em>talked</em> about it for decades... but it's time to put my money where my mouth is, and find a way to participate with the people who've actually been walking the talk in the meantime.  <a class="mention" href="/u/gchiu">@gchiu</a> has already started tinkering here, and I'll support those efforts as well as doing my own research.</p>
</li>
<li>
<p>Somewhat tied in with the above, cryptography is rather critical... and we should be providing an arbitrary precision INTEGER! type.  So I want to see <a href="https://forum.rebol.info/t/planning-ahead-for-bignum-arithmetic/623">BigNum</a> support as a foundational service sooner rather than later.</p>
</li>
<li>
<p>We need to become <strong><a href="https://forum.rebol.info/t/switching-to-stackless-why-this-why-now/1247">"Stackless"</a></strong>.  Wasm has forced our hand here, but it is a good idea regardless.  Early experiments are promising, but putting this together won't happen overnight... it's by no means trivial.</p>
</li>
<li>
<p>I'm proud of how libRebol is working in C and JavaScript, but I'd like to see some forward-looking work into binding with Rust and .NET... as well as revisiting the C++ binding.  The "RenCpp" interface was the primary design influence on libRebol, and I want to turn that around and see how to rethink the C++.  Getting Ren Garden to build against the new "Qt Lite" would be a good test that would bring me up to date on that.  <a class="mention" href="/u/szeng">@szeng</a> did some exploratory work on Rust binding, and I'd like to see that and see what I think.</p>
</li>
<li>
<p>Would be cool to get Ren-C on the <a href="https://forum.rebol.info/t/rebol-on-embedded-systems-stm32/1246">STM32 board donated by @jhgorse</a>, just to do a bit of a check on our ability to run in truly resource-constrained environments and be useful there.</p>
</li>
</ul>
<p>Of course there's a ton more to do.  I guess a lot of what order we do things depends on you all.</p>
<p>Let's get to it.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/foresight-in-2020-and-2019-retrospective/1258">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/foresight-in-2020-and-2019-retrospective/1258</link>
          <pubDate>Sat, 08 Feb 2020 17:46:23 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1258</guid>
          <source url="https://forum.rebol.info/t/foresight-in-2020-and-2019-retrospective/1258.rss">Foresight in 2020 (and 2019 Retrospective)</source>
        </item>
        <item>
          <title>Philadelphia Conference 2019 Video links</title>
          <dc:creator><![CDATA[iArnold]]></dc:creator>
          <category>Announcements</category>
          <description><![CDATA[
            <p>All talks (and Conference Info) are now on the <a href="http://2019.reb4.me/talks" rel="nofollow noopener">Conference site</a></p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/philadelphia-conference-2019-video-links/1254">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/philadelphia-conference-2019-video-links/1254</link>
          <pubDate>Sun, 12 Jan 2020 15:13:06 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1254</guid>
          <source url="https://forum.rebol.info/t/philadelphia-conference-2019-video-links/1254.rss">Philadelphia Conference 2019 Video links</source>
        </item>
        <item>
          <title>The Final Third of 2019: Status and Adjustments</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Announcements</category>
          <description><![CDATA[
            <p>Hello from Cleveland...home of REBoL (The Cafe), <a href="https://i.stack.imgur.com/e3zjd.jpg">where I just had a smoothie</a> moments ago.  What more appropriate time to write a status report, eh?  <img src="https://forum.rebol.info/images/emoji/twitter/tropical_drink.png?v=9" title=":tropical_drink:" class="emoji" alt=":tropical_drink:"></p>
<hr>
<p>For those of you who made it to the Philadelphia conference: it was quite the memorable experience.  (For people our age, this sort of thing is usually the closest we have to a "party"...  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">  So if you missed it, you missed out!!)</p>
<p><a class="mention" href="/u/rgchris">@rgchris</a> put together a stylish website, and updated it during the conference to show the schedule as we figured out what it was.  For anyone who didn't see that site, check it out:</p>
<p><a href="http://2019.reb4.me/" class="onebox" target="_blank" rel="noopener">http://2019.reb4.me/</a></p>
<p>I spent the June before the conference in Philadelphia, and then all of July as well.  Now, my August has been more traveling, and basically all non-Rebol-related business.  This means development has been on the backburner, and so has video editing..and for those who don't realize it, editing videos (or at least, doing it well) <a href="https://i.stack.imgur.com/JWKGv.jpg">is very complex work</a>!</p>
<h2>But, Back to Work!</h2>
<p>My non-Rebol business has concluded for the moment.  And though I don't want <em>all</em> my programming time to be Rebol...I have no question in my mind that there's enough original and interesting work in Ren-C to justify investing in it.</p>
<p>(Though...I kind of want to muck around with some of the modern machine learning tools, too.  And I've mentioned interest in other things like the <a href="https://rise4fun.com/z3/tutorial">Z3 Theorem Prover</a>, and how we might dialect that underlying engine with something besides its Lispy interface.)</p>
<h2>What We Learned from the Conference</h2>
<p>From my end: I hadn't originally planned on showing off anything people there wouldn't know about.  I was mostly aiming to introduce the WASM build to future-users on Hackernews/Reddit etc.--so they could come up to speed on what it's all about.  But at the last minute, I decided we were close enough to having Rebol <a href="https://github.com/metaeducation/ren-c/blob/5bec5270f88fa4a93b2b9ee12ba26396543ac50c/extensions/tcc/ext-tcc-init.reb#L399">act like a c99 compiler</a> that we could actually <a href="https://github.com/metaeducation/ren-c/blob/5bec5270f88fa4a93b2b9ee12ba26396543ac50c/extensions/tcc/ext-tcc-init.reb#L549">implement a bootstrap command</a>.  So I did!</p>
<p>Atronix had already made videos about <a href="https://www.atronixengineering.com/zoe">ZOE</a> for their PR, though David's demo went through the actual experience of what it's like to configure it for a particular industrial site.  <a class="mention" href="/u/szeng">@szeng</a> went over the FFI (which is now an extension in Ren-C vs. part of the core, and needs some love to get it back in shape--but it's not far from being back in form).   <a class="mention" href="/u/mark-hi">@Mark-hi</a> went through his lexical study of Rebol in a way that seems like it could probably serve dual purposes just as a general introduction to the language, so I'll probably bias the edit to focus on that.  <a class="mention" href="/u/rgchris">@rgchris</a> pulled out a few demos of his work--old and new--including not-shown-before ways to involve Rebol in his sports playing and coaching.</p>
<p>In some ways, it was the remote presentations by <a class="mention" href="/u/giuliolunati">@giuliolunati</a> and <a class="mention" href="/u/brianotto">@BrianOtto</a> that seemed to get people's imaginations running the most.  Not everyone had seen BrianO's work, and I really didn't quite get the depth to which Giulio had put together a sort of "Rebol App Store"!  What he's done is combine a native Android build of Rebol that runs a web server and has access to all the phone's resources (like filesystem, could be camera, etc.) and then serves it to a WASM web build for UI.  So the web page--running Rebol under WASM--can delegate anything it wants the phone to do that the browser can't do natively to a request to Rebol running on ARM.  Pretty mindblowing!</p>
<p><a class="mention" href="/u/blackattr">@BlackATTR</a> took a while to concretize his point <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> but when he did, it finally clicked what he's been talking about in making SQL-like dialects for messing with filesystems.  What he is proposing looks like a win on par with PARSE beating RegEx...except this time he's going after bash, to sideline learning estoeric command line switches in find and grep tools.  I would use this.</p>
<h2>Main Takeaway: The Farm is Being Bet on WASM</h2>
<p>Giulio and BrianOtto's talks about the direction of the web made me even more sure that we do not want to be in the native UI business anytime soon; and things are on the right track.  Atronix's UI code should likely thus stay tailored to their purposes entirely, without burden them with providing anyone else with a /View.</p>
<p>Love browsers or hate them: they are the platform now.  What we can do is to stick to our guns--as per the "Amish Programming" theme of my talk--and try to keep the language core pure and small enough to throw on an IoT device with a tiny chip...or build on a fresh Ubuntu system with no installed compilers, make tools, or fetch utilities besides a Rebol executable.</p>
<p>So lucky Red: native UI work will be exclusively their game for the near term.  If there's any gold in them thar hills...e.g. linking up GTK, they can be the guinea pigs and find it.  (<a href="https://en.wikipedia.org/wiki/Guinea_(coin)">That's not necessarily a mixed metaphor</a>).  Their experience can inform whatever we might try with <a href="https://vuejs.org/">vue.js</a>.</p>
<h2>...and Speaking of Red...</h2>
<p>Red did wind up with a presence at the conference, as Gregg Irwin came.  It was a meaningful gesture in my book.  I wore one of their shirts to dinner, even.</p>
<p>Anyway, it's something to keep an eye on--as we bring the work to more people via the WASM build, and how it <em>might</em> be possible to frame it as a non-zero-sum game.  <img src="https://forum.rebol.info/images/emoji/twitter/man_shrugging.png?v=9" title=":man_shrugging:" class="emoji" alt=":man_shrugging:"></p>
<h2>Adjustments to the Beta One Plan</h2>
<p>The first third of the year showed levels of progress and participation that I'm pretty sure exceeded most people's expectations.  The next four months basically flatlined as far as the <em>code</em> went...but I think we're going to get some very good videos out of it.</p>
<p>So...what can be expected in the final third?  I'll start with these focal points:</p>
<ul>
<li>
<p><strong>Anything we care about keeping running needs to be under continuous integration, so we know if changes to the system break it.</strong>  This means people have to be firm about what's important and what is not.</p>
</li>
<li>
<p><strong>You need to be able to use a module written to Rebol2/Red-like conventions with code that is written to Ren-C conventions.</strong>  Maintenance costs for "Redbol" code will be less than the Ren-C parts, so it may be that some existing Ren-C code that people don't have the attention span to keep up to date are retroactively backported to Redbol.  (I did this with my blog generator.)</p>
</li>
<li>
<p><strong>Binding has to be pushed further and understood in terms of basic practical cases of composition.</strong>  You can't shortcut this and have the language live up to the hype; it will let people down once they get to any level of sophistication.  I just got another reminder of it realizing the <a href="https://forum.rebol.info/t/compatibility-map-each-and-problems-therewith/1192">problems of abstracting loops</a></p>
</li>
<li>
<p><strong>Pitching Rebol the language should be for the cleverness (esp. of Ren-C features).  To the practically-minded, it should arrive via Trojan horse of a tool that is built with Rebol.</strong>  So code golf and explaining FizzBuzz would be for the language people, while <a class="mention" href="/u/blackattr">@BlackAttr</a>'s SQL-like find tool would be for the "what can it do for me people" who can appreciate the cleverness after-the-fact.</p>
</li>
</ul>
<p>For year-end, I think it may be more realistic to say we have some cool videos and a somewhat Rebol2-compatible language in the browser, maybe even with a vue.js VID.  But it will have the mechanics of Ren-C underneath it.  Anyone whose project is in active use needs to be on Travis or another continuous integration so we know it stays working (that includes my blog generator...)</p>
<p>A tutorial which teaches Ren-C concepts may have to hedge and say it's a work in progress, and people are free to come join in the design.</p>
<p>Anyway, there are my thoughts...expect the commits and activity to resume a decent pace shortly!</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/the-final-third-of-2019-status-and-adjustments/1196">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/the-final-third-of-2019-status-and-adjustments/1196</link>
          <pubDate>Sat, 24 Aug 2019 03:58:04 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1196</guid>
          <source url="https://forum.rebol.info/t/the-final-third-of-2019-status-and-adjustments/1196.rss">The Final Third of 2019: Status and Adjustments</source>
        </item>
        <item>
          <title>Beta/One Goals vs. Web Framework Goals</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Announcements</category>
          <description><![CDATA[
            <p>Things are currently going quite well with the JavaScript extension.  It's an interesting case where we're actually on the bleeding edge of what <em>anyone</em> is doing--and our needs are feeding back into the design of Emscripten.  So by comparison to our usual Amish tech modality, it's fun to feel somewhat relevant.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<ul>
<li>
<p>The <a href="http://hostilefork.com/media/shared/replpad-js/" rel="nofollow noopener">"ReplPad" console</a> is coming along.  It has a <a href="https://github.com/hostilefork/replpad-js/blob/master/watchlist/main.reb" rel="nofollow noopener">rudimentary Watchlist</a>.  It even has its own <a href="http://hostilefork.com/media/shared/replpad-js/?do=test-repl" rel="nofollow noopener">interactivity test</a>.  So hopefully we'll enter a virtuous cycle of improving it and being able to make sure it stays improved and does not break.</p>
</li>
<li>
<p><a class="mention" href="/u/brianotto">@BrianOtto</a> has made an ambitious Rebol-powered application in <a href="https://brianotto.github.io/ui-builder/web/" rel="nofollow noopener">UI Builder</a>.  You use a forms-building dialect to make a page that you can actually download as a folder you can put somewhere and statically serve on the web.  <a href="https://github.com/hostilefork/replpad-js/issues/35" rel="nofollow noopener">Here's a tutorial</a>...and you can see that it's a pretty intense first application!</p>
</li>
<li>
<p><a class="mention" href="/u/giuliolunati">@giuliolunati</a> and <a class="mention" href="/u/gchiu">@gchiu</a> have been making it so that we can serve and get our hosted builds from S3, and we've done the magic so you really can make a jsfiddle and get yourself a Rebol, via one script with browser detection and wires everything up: <a href="https://github.com/metaeducation/ren-c/blob/master/extensions/javascript/load-r3.js" rel="nofollow noopener">load-r3.js</a></p>
</li>
<li>
<p><a class="mention" href="/u/gchiu">@gchiu</a> is putting together some experiments <a href="https://metaeducation.s3.amazonaws.com/chess.html" rel="nofollow noopener">embedding chess in the browser</a>, or doing calculations for <a href="http://hostilefork.com/media/shared/replpad-js/?do=nzpower" rel="nofollow noopener">power bills in New Zealand</a>.</p>
</li>
</ul>
<p>I've mentioned that it's truly remarkable that <strong>the JavaScript code is all an extension</strong>.  It adds nothing to the core build if you don't pick it out of the extensions during rebmake.  It is an example of delivering what hostkit was <em>trying</em> to do but couldn't really: to make the core embeddable in an arbitrarily foreign host.</p>
<p>On top of all this, big technical steps have come down the pipe.  Eliminating "hostkit" and factoring things into extensions slimmed the release JavaScript build by more than 100k (and the debug build by almost 200k).  UTF-8 Everywhere made it in, and the system hasn't exploded yet.  The Redbol emulation is still a very rudimentary effort, but it does build the static pages behind <a href="http://hostilefork.com" rel="nofollow noopener">hostilefork.com</a>, and it managed to generate a test PDF while running Gabriele's Rebol2 <a href="http://www.rebol.org/view-script.r?script=pdf-maker.r" rel="nofollow noopener">pdf-maker.r dialect</a>.</p>
<h2>...but in another month we'll be halfway through 2019</h2>
<p>I'm trying somewhat to keep my eye on the clock.</p>
<p>In March I posted <strong><a href="https://forum.rebol.info/t/web-build-dangers-and-opportunities/1113">Web Build: Dangers and Opportunities</a></strong>.  I said it was exciting there's interest in all these applications.  And I've also encouraged people to do what's fun...it's better than being bored and wandering off.  (When people are volunteering their time, they should do what they want to do.)  But it means we're not really getting multi-person efforts--and keeping all these projects running has a cost.</p>
<p>It's an inescapable fact: <strong>these efforts are expanding the scope of the project--not focusing it</strong>.  Reading between the lines, there is nothing metrically suggesting we are getting closer to any specific milestone of a language deliverable.</p>
<p>Open questions on GitHub and in forum posts are growing vs. contracting.  There are some successes: there's nice solid "clicking" of things regarding the WORD!-ness of ISSUE!s and how ANY-STRING!s relate to ANY-WORD!s.  But there's little in the way of historical question-marks being taken off the table.</p>
<p>Here's something that isn't a problem unique to Rebol in the world of software, but still a problem: if you sit down and try to write something real, you'll instantly face a paralyzing question with no compass.  <em>("should the keys in a JSON object be SET-WORD!s...do you use MAP! or OBJECT!", "if you use a MAP! what would the literal form be", "how do module exports work", ...)</em></p>
<h2>Should The Mission Be Changed: Web Framework 2021?</h2>
<p>The pressures that have come down the pipe are to deliver more modularity for the construction of web apps.</p>
<p><em>This will consume all available resources.</em></p>
<p>My direction in thinking was different.  I thought that a tutorial--and the vetting for what would go in the tutorial--would be a good thing to rally around.  We could look at the script of what we were trying to teach people, and be asking <em>"Hm, is that true?"</em>.  This would provoke the writing of tests and specs...the closing of issues.</p>
<p>The tutorial itself would be feeding back into the definition of the artifact.  When a tutorial point came to seem too much of a gray issue, we simply strike the feature from Beta One.</p>
<p>And having this tutorial selling 24/7 would hopefully bring on board new people, to feed back into the design and revive the effort of defining the language.</p>
<p>But if there's no common vision, we don't have to call this out as a priority.  It can be a thing that happens on its own time--when and if it happens.  So we can call it off if people think something more exciting is afoot.  I just don't want to run into that trap of what I said in my other post: <em>"If expectations aren't managed, then even Herculean successes can look like failures."</em></p>
            <p><small>28 posts - 6 participants</small></p>
            <p><a href="https://forum.rebol.info/t/beta-one-goals-vs-web-framework-goals/1146">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/beta-one-goals-vs-web-framework-goals/1146</link>
          <pubDate>Mon, 22 Apr 2019 08:41:46 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1146</guid>
          <source url="https://forum.rebol.info/t/beta-one-goals-vs-web-framework-goals/1146.rss">Beta/One Goals vs. Web Framework Goals</source>
        </item>
        <item>
          <title>2018 Retrospective: Elevating the Art</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Announcements</category>
          <description><![CDATA[
            <p>It seems like only a year ago that I was in a hotel in San Antonio <a href="https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443">doing a write-up</a> that summarized Ren-C from its beginnings in early 2015, up until January 2018.</p>
<p>That's because it <em>was</em> a year ago.  Here we are again.  Whether you're here frequently, or only poke in when you can find the time...Happy New Year to you!!!</p>
<hr>
<p>I joked the other day to someone about why I worked on Rebol.  Said I: "well, Forth was just TOO popular.  It wasn't cool anymore once everyone was doing it.  I wanted to go more indie/underground, away from all those <em>crowds</em>."  <img src="https://forum.rebol.info/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>But on the positive side of being such a small group, <strong>I hope you feel like you're getting to play an important part in defining something you can be proud of--that makes you happy and makes you think--that will hopefully bring that same feeling to others one day.</strong>  And you <em>are</em> making a difference.  You're making a difference to <em>me</em> (hopefully it's bigger than just that, but I can promise it's at <em>least</em> that!)</p>
<hr>
<h2>First thing's first: a Vision Statement and Motto Re-cap</h2>
<p>In film school they emphasized the importance of finding a short essential summary of your project.  When people wanted to make the movie "Alien", they were pitching it around Hollywood simply as <em>"Jaws...IN SPACE"</em>.  Having an almost cartoonishly short vision statement was a touchstone for everyone working on it to be on the same page; what defines success, <em>how will we even know if we did succeed</em>.</p>
<p>So I've dug my heels in on <strong>"The Minecraft of Programming"</strong>.  Because I want people to feel that sense of uniformity and texture.  A visceral relationship between you and the evaluator that feels like a wide open world, with all the satisfaction of <a href="https://www.reddit.com/r/DesignPorn/comments/7td00q/xpost_this_lego_ad/" rel="nofollow noopener">LEGO back when LEGO cared about design</a> or <a href="https://www.fatbraintoys.com/toy_companies/kahootz/the_original_spirograph_deluxe_set.cfm" rel="nofollow noopener">a spirograph</a>.  (It was actually DocKimbel who sent me that LEGO ad, so there should be some level at which we are all on the same page about this kind of thing.)</p>
<p>So that's my version of a vision statement.  I don't think this is at odds with Carl's "putting the personal back in personal computing" phraseology.  It's complementary.</p>
<p>But I noticed also this year, that my catch-phrase <a href="https://trello.com/c/EeObOLam" rel="nofollow noopener">from circa 2015</a>..."Modify With Confidence", wasn't something I was saying anymore.  But I don't say it for the best of reasons: we take it for granted that the interpreter can adapt and change without exploding.</p>
<p>So moving on...the new motto I've used in 2018 is <strong>"Elevating the Art"</strong>.</p>
<p>The tail end of 2017 introduced a fledgling concept called "invisibles".  I was egged on by <a class="mention" href="/u/markeye">@MarkEye</a> to implement something I'd flirted with as a concept to make COMMENTs evaluator-neutral.  Little did I know it would open doors to solutions to problems that seemed nothing to do with commenting.  When you looked closer you realized the mechanism was generic and extremely powerful, it is a gift that keeps giving.</p>
<p>I bring up invisibles as a watershed event--but not just for their functionality.  Also <em>that it was profound and could happen overnight</em>.  A conversation in chat was followed not by more weeks of chat and then nothing.  It went from thought to action immediately.</p>
<p>2018 followed suit, with features that moved at the speed of thought.  I said that Ren-C's development was planned so it could speed up vs. slow down.  Our limitations are the limits of our ability to fully articulate what we want...not the limits of a codebase <a href="https://forum.rebol.info/t/back-to-personal-computing/186/5">that had been stretched too far beyond its means</a>.</p>
<p>Things would "just happen":</p>
<ul>
<li>
<p>A first cut of <a href="https://forum.rebol.info/t/source-mutability-const-and-mutable/976">CONST and MUTABLE</a> was committed just a couple weeks ago.</p>
</li>
<li>
<p>Right after that, doubled groups gave <a href="https://forum.rebol.info/t/double-your-pleasure-double-your-fun/968">neat new powers to COMPOSE</a>, and solved a whole branch of issues related to conditionality in PARSE.</p>
</li>
<li>
<p>COLLECT-LINES and COLLECT-TEXT <a href="https://forum.rebol.info/t/collect-lines-an-adaptation-story/945">showed up in an afternoon</a>, demonstrating a creative use of ADAPT.</p>
</li>
<li>
<p>At one point SHOVE <strong>-&gt;</strong> came on the scene to <a href="https://forum.rebol.info/t/letting-go-of-enfix-path-dreams-but-fixing-it-with-magic/794">settle enfix dispatch for paths</a>...an old problem that had been a concern for me since the beginning of looking at the evaluator.</p>
</li>
</ul>
<p>I don't want to keep going with a blow-by-blow of every interesting thing that happened, just read the posts or the commit log.  But there's a pattern here.  And it's a pattern that is showing no signs of slowing: just last week, I came up with a scheme to implement "lit bit", the arbitrary level of escaping per value.  <em>(not quite finished, but it's remarkably close.)</em></p>
<p>Time and again, things that once perhaps we could talk about--but have no clue how it could be done--those things are being done what seems like overnight.  I swear the changes are <strong>elevating the art</strong> of programming in Rebol.  Once people start using these features, they will realize they won't want to go back.</p>
<p>To me, the most interesting things that happened were things I didn't see coming.  So I wanted to talk about how well that's gone before hitting some of the bullet points from last year's post.  But, those bullet points were written down, so let's go over them.</p>
<h2>libRebol</h2>
<p>Progress here has been <em>very</em> notable.  I don't think there's any C-based API out there quite like it, letting you mix up values and strings so smoothly.</p>
<p>I've kind of outdone myself.  It's actually giving me a bit (just a bit) of empathy for those who are skeptics of C++, because just about every positive feature of RenCpp has been rethought in plain old C...and done even better.  The limitations forced it to a kind of simplicity and elegance that I think is going to please people.</p>
<p>Some big cloudy questions have been hammered out...and the biggest thing was engineering a solution to JavaScript promises in order to get <a href="https://forum.rebol.info/t/on-giving-librebol-js-more-powers-than-javascript/849">the illusion of synchronous interaction with the browser DOM</a>.  We have "javascript natives" now...functions whose specs are BLOCK!s and whose bodies are TEXT! of JS code using the API, including the "AWAITER" for simulated synchronous-ness.</p>
<blockquote>
<p><strong>UPDATE:</strong> <a href="https://forum.rebol.info/t/web-repl-now-uses-console-extension/1064">A WASM-based web console has been implemented</a>, and is now considered the most critical build for the near future!</p>
</blockquote>
<p>The weakest areas are in exception handling and throws.  Part of what makes that hard is that it's an intrinsically hard problem in languages.  But I want to see it get shored up so we're at least no worse than any other language about this.</p>
<h2>UTF-8 Everywhere</h2>
<p>While the branch has only been partially committed with some of the groundwork for it, I actually got <a href="https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374/4">rather far with this</a>.  There are some hitches regarding what it does to performance in PARSE, that I want to get straight.</p>
<p>Every time I have to merge this branch it's a pain.  I'd like to get it committed, and maybe I can if we are willing to say that during a PARSE, the only way you can modify the input series is if you use parse instructions (CHANGE, INSERT, REMOVE) to do it, vs. code in a GROUP! changing it arbitrarily.  We need to talk about that.</p>
<p>Point is: Yes, it's still happening.  And the API has been strongly influenced by experience gained developing it so far.</p>
<h2>Derived Binding</h2>
<p>Unless someone tells me otherwise, it seems to work. Code that would be intractable in Rebol2/R3-Alpha/Red can be quite zippy.  If you want to put your head around the following, be my guest:</p>
<pre><code>o-big: make object! collect [
    repeat n 256 [
        ;
        ; var-1: 1
        ; var-2: 2
        ; ...
        ; var-256: 256
        ;
        keep compose/only [
            (to set-word! unspaced ["var-" n]) (n)
        ]
    ]
    repeat n 256 [
        ;
        ; fun-1: method [] [var-1]
        ; fun-2: method [] [var-1 + var-2]
        ; ...
        ; fun-256: method [] [var-1 + var-2 ... + var-256]
        ;
        keep compose/only [
            (to set-word! unspaced ["meth-" n]) method [] (collect [
                keep 'var-1
                repeat i n - 1 [
                    keep compose [
                        + (to word! unspaced ["var-" i + 1])
                    ]
                ]
            ])
        ]
    ]
]

repeat i 2048 [
    derived: make o-big [var-1: 100000 + i]
    if derived/meth-255 &lt;&gt; 132639 + i [
        fail "This should not happen."
    ]
]

print "Success!"
</code></pre>
<p>The techniques that make this tractable are very clever--and are another example of the "art being elevated".  And I hope the mechanics open doors to solutions to other kinds of problems...like threading context through the stack for parse rules, etc.</p>
<h2>Rebmu</h2>
<p>Honestly, Rebmu didn't get the attention I'd wanted to give it.  You'd think it would be the "fun" thing--so it would be like goofing off, and I'd do it before other more "serious" work.  But in truth, every time I get going on a feature there it shifts my attention back to developing some feature on the interpreter.</p>
<p>Bits of it feed back a little at a time.  For instance, there's some interesting functionality in DOES now that grabs the word after it and specializes that function:</p>
<pre><code>x: 1
foo: does catch [
     if x = 1 [throw &lt;one&gt;]
     print "Foo!"
     throw &lt;other&gt;
]

&gt;&gt; foo
&lt;one&gt;

&gt;&gt; x: 2

&gt;&gt; foo
Foo!
&lt;other&gt;
</code></pre>
<p>That came directly from work on Rebmu.  Maybe this seems like a frivolous way to avoid one pair of brackets (e.g. two less characters than <strong>does [catch [...]]</strong>).  But as you see with it being used with CATCH here, it actually eases the burden of DOES not having its own RETURN.  It makes that more palatable, and there's good reasons why it <em>shouldn't</em> have its own return.</p>
<p>So I haven't forgotten about Rebmu--these points feed back into the system design.  I'll try and set aside more time for it in 2019--it's one of the things I want you to be able to boot up easily in the browser console.</p>
<h2>Debugging</h2>
<p>Sadly, stepwise debugging didn't come online this year.  <img src="https://forum.rebol.info/images/emoji/twitter/bug.png?v=9" title=":bug:" class="emoji" alt=":bug:"></p>
<p>It's critical that whatever methodology the debugger uses, it needs to be able to reuse 90% of it based on whether it's in the browser or in a native console.  I don't want to write <em>two</em> debuggers.  :-/  Pushing us a little further down the road was one important accomplishment: the console has been factored into an extension.  That's good news, as one of the big debugger issues is how to reuse the console in a nested way when a breakpoint happens.</p>
<p>I want to see the debugger and console and such be in usermode as much as possible, so I'm trying to fit the pieces together so that can be the case.  Rushing it and doing it wrong wouldn't be very prudent.  But there's enough pieces of it there that are close to working that the concerns it brings up are always in mind.</p>
<h2>TLS 1.2</h2>
<p>This wasn't on the list, and I'd really hoped someone else would do it.  But the payment processing association deprecated TLS 1.0 this year, threatening any website that still used 1.0 with a negative security rating score.  That created an extremely strong incentive for people to update, and it was getting to where Rebol couldn't talk to very many sites anymore.</p>
<p>So I read the darn crypto spec and patched it up.  Super special thanks to <a class="mention" href="/u/blackattr">@BlackATTR</a> for sponsoring the work, making me feel less grumpy about having had to do it.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">  <a class="mention" href="/u/iarnold">@iArnold</a> chipped in a few dollars as well.</p>
<h2>... and what will 2019 be ... ?  BETA/ONE</h2>
<p>I don't make promises often (ever?) but here we go: Beta/One will release in 2019.</p>
<p>Clearly it won't be this month.  And I actually could have a lot of non-Rebol things to do in Q1, so who knows exactly when.</p>
<p>But we've got to get a demo/tutorial online that can be selling itself 24 hours a day...worldwide.  That's the deliverable, and this is the year for it.  Anything that anyone can do to help get there would be greatly appreciated!  And one of the biggest things you can do is help think through things right here, on this forum (or in chat).</p>
<p>Happy 2019!  Let's do this!</p>
            <p><small>6 posts - 4 participants</small></p>
            <p><a href="https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992</link>
          <pubDate>Wed, 02 Jan 2019 22:30:26 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-992</guid>
          <source url="https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992.rss">2018 Retrospective: Elevating the Art</source>
        </item>
        <item>
          <title>The Path to Beta/One</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Announcements</category>
          <description><![CDATA[
            <p>My vision for Beta/One is a running in-web tutorial that is unleashed to the world.  This will teach the language, show off features, and be able to automate some browser functionality.</p>
<p>I'm not sure exactly what it would be able to automate.  A good first step along the way will be a turtle-graphics style "pen up, pen down" kind of thing, but I don't know if that will be the most compelling demo.  Consider drawing to be the worst-case scenario domain...and something more useful like <a href="https://regexr.com/" rel="nofollow noopener">PARSE-based RegExr</a> to be a shoot-the-moon kind of target.</p>
<p>Expecting this before the end of the year would be naive.  But I'm hoping not to miss January by much.</p>
<ul>
<li>libRebol has some big issues to sort out on binding, but as I've said, it's going pretty darn well...and the JavaScript version should be just as good as the C version--if not better--to power the demo app.</li>
<li>We may not have UTF-8 Everywhere merged in by then, but its effects are already accounted for in the API...and I'm confident it's the right answer.</li>
<li>The debugger might not be fantastic, but stepwise debugging should work.</li>
<li>I'll have all the Rebmu puzzles updated and running, so Rebmu will be one of the things you can do in the browser version.</li>
</ul>
<h3>Should there be a release earlier than that?</h3>
<p>If a version of the code works for someone for some purpose, then they may take that build and use it as-is for as long as they like.  This is how R3-Alpha and Rebol2 worked, after all...it froze on one day and then that's what you had with no support thereafter.  That's always an option.</p>
<p>And if you report a bug that gets a patch to the mainline, you can apply that patch and rebuild your executable.  That is fine.</p>
<p>But I can't promise to commit bugfixes to your version and the master, and worry about how to build the releases, etc.  I realize this may not fit everyone's wishful timelines.  But I'm sorry, I don't have the bandwidth for anything else.</p>
<h3>A Rebol by any other name...</h3>
<p>In addition to combining the browser release with the stable release is that Beta One will be when to decide whether or not to keep calling the project Rebol.  This decision will be made by essentially offering Carl a time-boxed proposal: the GitHub <code>rebol/rebol</code> repo gets the current code of the "Ren-C library" with a voting structure that can outvote any one person (including Carl or me), the community gets control of <a href="http://rebol.org" rel="nofollow noopener">rebol.org</a> and <a href="http://rebol.net" rel="nofollow noopener">rebol.net</a> and have the ability to launch documentation and a module repository there, and he keeps <a href="http://rebol.com" rel="nofollow noopener">rebol.com</a> for whatever he feels like.  He may join in development or not, as he wishes.</p>
<p>If the time-box is not met, we very simply <em>adopt a new project name, and stop mentioning "Rebol".</em>  Resources we control (such as this forum) will move under the new name.  Resources we don't control will be forked as licensing permits, which it generally does.</p>
<p>Why haven't we done this yet?  Firstly, because I don't think it's fair to be pressuring about a project that hasn't completely proven itself, see <a href="https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443/6">my remarks about R3-Alpha parity</a>.  Plus, it would be premature to make some "big announcement" about a newly-named project that still has major decisions to work out.  You don't get a second chance to make a first announcement.  Note just how drastic the <a href="https://trello.com/c/rmsTJueg" rel="nofollow noopener">null change was</a>.  We do not want to drop something like that on normal users after they've painstakingly written a bunch of code.</p>
<p>Existing Rebol users are different.  They are used to being the guinea pigs and having the rug yanked out from under them (<a href="https://www.youtube.com/watch?v=qCde1GVbMfs" rel="nofollow noopener">hopefully a mixed metaphor</a> :P)  But people who've been using the language for decades are worn out, and I think that's why I've really not been counting on old-school Rebol users as being the target audience for any "products".</p>
<p>In a sense, keeping the Rebol name is probably more a liability than anything else.  Certainly Red used to see association in that way...and wanted to distance itself from the somewhat spotty track record, and <em>"weird"</em> community reputation.  The reason to do it is to aim for holding up the standard of what the project's objectives and ground rules were...and if Carl believed it were doing so, that would be a particular accomplishment.  But we can't be held hostage to it if that's not going to pan out.</p>
<p>Hence the name "Beta/One".  When it's unleashed to the world, it will either be <strong>Rebol 3 Beta</strong> or <strong>Something-Else version One</strong>.</p>
<h3>Feature Lock</h3>
<aside class="quote no-group" data-post="2" data-topic="189">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/draegtun/40/230_2.png" class="avatar"><a href="//forum.rebol.info/t/criteria-for-stable-r3-ren-c-releases/189/2">Criteria for stable r3/ren-c releases</a>
</div>
<blockquote>
<p>The main criteria for me would be a feature freeze.</p>
</blockquote>
</aside>
<p>I am starting to tag Trello issues with "Beta/One Locked" to indicate that the behavior in that card is considered, with fair confidence, to not be changing.  The concept of this lock/freeze is that any code samples on that card should be vetted and work as written...and that the text of the card be basically all truthy.</p>
<p>As a show of seriousness about this, the card describing the new null behavior is Beta/One Locked.  That might seem pretty cocky considering the behavior on that card just changed this week.  But I know when something is right.  I may get excited over a new behavior, but that excitement is different from when you know you have <em>found the solution</em>.  And that is the solution.</p>
<p>Still, there are a lot of cards, and a lot of work, and a lot of big question marks all over the place.</p>
<h3>Participation Matters</h3>
<p>In a prior discussion thread on stable releases, I said:</p>
<aside class="quote no-group quote-modified" data-post="7" data-topic="189">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="//forum.rebol.info/t/criteria-for-stable-r3-ren-c-releases/189/7">Criteria for stable r3/ren-c releases</a>
</div>
<blockquote>
<p>So rather than declaring stable builds just yet, Iâ€™d prefer it if everyone got on board with helping hammer down things that are known-unknowns.  Weâ€™ve got many more to go.  And to get READMEs and the build process as streamlined as it can be.</p>
</blockquote>
</aside>
<p>I know people are off on other things and can't devote their lives to a strange volunteer project.  I don't hold anyone to the standard that they can't go AWOL if something more important comes up.  If you don't make any specific promises, you don't have any specific responsibilities.</p>
<p>And I allow myself that too.  I was more or less on vacation last month, and didn't do a whole lot of programming--though I did do some, and I've always got a couple of things in my mind.  I'll probably be back on the road again shortly after a foot sprain heals up (it's doing pretty well).  If I find something more interesting to do with my time, development may slow down, and that's just the breaks.</p>
<p>But this comes down to a you-get-what-you-give situation.  If people want to get to Beta/One faster, they'll put in time to discuss and work and help lock down more of the issues.  If you are happy to see it happen whenever it happens, then just wait and see.  Odds are cool things will happen, just not on any particular timeline.</p>
            <p><small>8 posts - 4 participants</small></p>
            <p><a href="https://forum.rebol.info/t/the-path-to-beta-one/690">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/the-path-to-beta-one/690</link>
          <pubDate>Fri, 15 Jun 2018 18:19:53 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-690</guid>
          <source url="https://forum.rebol.info/t/the-path-to-beta-one/690.rss">The Path to Beta/One</source>
        </item>
        <item>
          <title>The About-1/3-Of-2018-is-Over Report</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Announcements</category>
          <description><![CDATA[
            <p>Here in late April, how are things going <a href="https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443/6">on the list</a>?  Well..</p>
<ul>
<li>
<p><strong>UTF-8 Everywhere</strong> - Being depressingly realistic/conservative, despite having spent quite a lot of time on this in January/February, I'm going to call it <em>half done</em>.  There's a level at which it <a href="https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374/4?u=hostilefork">does work...just slowly</a>.  Though a lot of progress in other tangential areas needed to be made to get that much going.  For instance the relationship between the "device layer" and strings and the core, had to begin using the currency of STRING! values via libRebol.  Much of that is now committed with <a href="https://github.com/metaeducation/ren-c/pull/773" rel="nofollow noopener">Latin-1 Nowhere</a>.</p>
</li>
<li>
<p><strong>libRebol</strong> - There's been a lot of progress on this, though it is a huge design space.  As just mentioned, parts of the system that used to speak in terms of weird structs and protocols are starting to exchange data as opaque REBVAL*.  I think philosophically, things have shaped up a bit in terms of direction on when a "new API entry point" is justified vs. asking users to use string-based imports...and doing something like a prepared statement for performance.  This is a vast task that isn't easy to say when it's "finished"; a lot of hard things have been looked at, there are a lot more.</p>
</li>
<li>
<p><strong>Derived Binding</strong> - This got committed and I thought it was done, because it had mechanically solved the problem of making copies.  Seemingly it was working great.  Yet despite that I know it's not making deep copies of function bodies, the memory profile of a pathological example I tried did not have significantly less memory use than R3-Alpha, and it ran slower.  :-/  I'm confident it was "working" but something is going on that will require profiling to figure out, so I'll have to do that.  I bet/hope it's something dumb that will be easily fixed.</p>
</li>
<li>
<p><strong>Bring Rebmu Up To Date:</strong> I've brought my old projects up to running condition, but Rebmu is going to take a while.  It's not just a toy--it has sparked real questions, and it's a way of looking at all the constructs as an organized package.  I've realized that one thing it really needs is a kind of macro facility, as I need things like <code>IE: macro [] [if equal?]</code> which are executable but do not get involved with worrying about proxying any arguments...rather just splice their material into the evaluator stream and let arguments be picked up as-is.  We already need this for other reasons, and I've discussed the likes of <code>1 inline [+ 2]</code> being able to produce 3.  That's probably the biggest missing mechanic, and while I'm certain it can be done these things always end up being trickier than they sound, when all is taken into account.</p>
</li>
<li>
<p><strong>Userspace Stepwise-Debugging and Tracing</strong> - I've done a little work on this but the issues involved here are substantial.  Some of the biggest problems involve basic questions of how resigned we should be to a single thread, single-Rebol-isolate model.  If you say that your debugger is always running on the same thread--in the same userspace as your program--that creates certain limitations.  I'm not sure which of those limitations to accept, which to build scaffolding to help make them be understood as more temporary, or whether to try and solve isolates/threading in some more general way.  This is kind of the biggest unknown on this list, and it hasn't gotten much more known.  <em>(But I do believe FRAME! and other pieces of infrastructure are done quite well for debugging)</em></p>
</li>
</ul>
<hr>
<p><strong>EMSCRIPTEN</strong> wasn't in the forefront of my mind at first, but despite my natural aversion to webthings--it should be priority <span class="hashtag">#1</span>.  I still think an interactive online tutorial--where people don't need to download anything and can play with it--is probably the most relevant artifact we could have around.</p>
<p>We got a big step in progress on that from <a class="mention" href="/u/giuliolunati">@giuliolunati</a>, with turnkey emscripten builds.  That includes one on Travis-CI, so we don't let it fall by the wayside (as the experiments from previous years kept doing).  We can call Rebol from JavaScript, but that's not all that useful compared to <em>calling JavaScript from Rebol and having it react without the Rebol code having to finish all its functions off the stack</em>.  So what Giulio has been looking at is how we can:</p>
<ul>
<li>fire up Rebol under JavaScript</li>
<li>have it run a Rebol script that wants to have an effect in the browser (but not yield its state)</li>
<li>put the Rebol interpreter into a state of "suspended animation", where it is waiting on a result</li>
<li>while Rebol is in suspension, do arbitrary JavaScript manipulations--post timer messages, get callbacks, return control to the browser</li>
<li>when the browser gives back control with the effects/information gathered, take Rebol out of suspended animation, so that the interpreter wakes up in the middle of whatever function was running before...but with the effects and information it requested accomplished.</li>
</ul>
<p>Even if this is done in an ugly way, it would be like <a href="https://www.extremetech.com/extreme/175004-the-genesis-of-the-transistor-the-single-greatest-discovery-in-the-last-100-years" rel="nofollow noopener">the first transistor</a>...a proof of concept, so we'd just work on making it prettier after that.  Or as pretty as JavaScript can be.  <img src="//forum.rebol.info/images/emoji/twitter/slight_smile.png?v=7" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>I'd been trying to work on a particular aspect of the emscripten build, which is integration with JavaScript exceptions; and getting the part of the debugger that depends on exceptions to work is the hardest bit.  So I get distracted, but, it's still what we're aiming for as the <em>"should probably be more important than everything else"</em> thing.</p>
<hr>
<p>Other neat things have been happening in the meantime, too.</p>
<ul>
<li>
<p>We got a <a href="https://github.com/metaeducation/ren-c/pull/766" rel="nofollow noopener">New Test Format</a> from <a class="mention" href="/u/brett">@Brett</a>, and I actually went through trying to get all the tests triaged that were hanging around.  <em>(Left to add are <a href="https://forum.rebol.info/t/how-to-deal-with-users-mutating-date-and-time-to-be-invalid/240/6?u=hostilefork">his date tests</a> and work through the bugs they represent, which were the inspiration for the format change.)</em>  A lot of little bugs got fixed, or at least documented somewhere, in that process.  And all the test that are committed pass.</p>
</li>
<li>
<p><a href="https://trello.com/c/snnG8xwW" rel="nofollow noopener">ELIDE and the "invisibles" mechanic</a> has been pretty much the gift that keeps on giving.  A feature I once thought of little benefit beyond "making comments truly invisible" has turned out to have wide-ranging impacts and ramifications on the design.  Whether it's being able to <a href="https://github.com/metaeducation/ren-c/pull/770" rel="nofollow noopener">splice unconditional code in the middle of a CASE</a>, or <a href="https://github.com/metaeducation/ren-c/pull/769" rel="nofollow noopener">lay the foundation for having voids in plain ANY and ALL be errors</a>, or <a href="https://trello.com/c/pGhk9EbV" rel="nofollow noopener">retake the name ALSO for higher purposes</a>, or letting you DUMP variables wherever you want... it's great.  I mention that it's the regular discovery of these kinds of things that keeps me interested.  So thanks to <a class="mention" href="/u/markeye">@MarkEye</a> for provoking me to do it.</p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/how-to-use-else-and-or-and-knowing-the-difference/527">OR and AND got awesome</a>, and actually motivated a design shift in enfix.  There's some real cleverness I think in the way they work, and how they handle GROUP! and BLOCK! on the right.</p>
</li>
<li>
<p><a href="https://trello.com/c/KgwJRlyj/208-does-invokes-do-for-string-url-etc-can-fully-specialize-any-function-doesnt-intercept-return" rel="nofollow noopener">DOES got awesome</a>, <a href="https://forum.rebol.info/t/the-now-even-more-special-specialize/588">SPECIALIZE got awesomer</a>, and finally things like <code>:append/dup/part</code> <a href="https://trello.com/c/adIrsQNl" rel="nofollow noopener">create <em>efficient</em> specializations</a>, vs just be an error or act weird.</p>
</li>
<li>
<p><a href="https://trello.com/c/8Bmwvwya/185-me-and-my-operators-replace-and-by-allowing-a-variable-to-update-relative-to-itself" rel="nofollow noopener">ME and MY</a> came about, and are good ways of avoiding repeating a variable name.</p>
</li>
<li>
<p>A nifty new generalized COMPOSE (that might need another name) <a href="https://trello.com/c/ko89tF2Y/210-concoct-lets-you-choose-your-own-delimiter-pattern-to-compose-with" rel="nofollow noopener">called CONCOCT</a> was assembled rather rapidly, and is working very well.  The increasing speed with which we can take feature ideas and put them into action--while having them play well with other features--is exactly what I hoped to see under the <em>"modify with confidence"</em> mantra.</p>
</li>
</ul>
<hr>
<p>So a lot can happen in not-quite 4 months.  I'm going to be traveling a bit, but will have computer(s) with me, so hopefully a lot will still happen, anyway.</p>
<p>I realize not everything coming down the pipe appears to affect everyone's bottom line...in terms of practicalities of apps one is trying to write.  But I think the issues of the language core are <em>the bottom line</em>.  There are a lot of languages out there that people can use to "just get things done".</p>
<p>I'm not that worried that a working and meaningful language core could be hooked up to some C++ code (or otherwise) to use Rebol to script something.  If you look at what the Node.JS guy did, it wouldn't be that hard to copy.  IF the language and interfaces were right.  But if the language isn't something <em>really</em>-<strong>really</strong>-special, then today's world is just too saturated for it to get attention.</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/the-about-1-3-of-2018-is-over-report/595">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/the-about-1-3-of-2018-is-over-report/595</link>
          <pubDate>Fri, 20 Apr 2018 02:48:21 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-595</guid>
          <source url="https://forum.rebol.info/t/the-about-1-3-of-2018-is-over-report/595.rss">The About-1/3-Of-2018-is-Over Report</source>
        </item>
        <item>
          <title>Ren Garden / Status / Future</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Announcements</category>
          <description><![CDATA[
            <p>Ren Garden is a project which was originally written in about a month, when I was trying to feel out what a client of the C++ API might look like.  It has been periodically brought up to date so that it runs.  Recently I brought it up to date so it would build, and made a debug drop for Windows:</p>
<p><a href="http://hostilefork.com/media/shared/garden/garden-6-Jan-2018.zip" class="onebox" target="_blank" rel="nofollow noopener">http://hostilefork.com/media/shared/garden/garden-6-Jan-2018.zip</a></p>
<p>We pretty much have Ren Garden to thank for the existence of Ren-C at all.  If I hadn't tried to wire up a Rebol evaluator to Qt and a C++ API, I'd not have learned enough about how Rebol was written to start fixing it up.</p>
<p>I think it is a neat demo, and I like to use it when giving presentations (as opposed to just typing in an ordinary console).  But while it is a promising application, it has no shortage of flaws and difficulties in its design.</p>
<p>One smart thing Ren Garden does is build on Qt.  Qt is a nice, fluid, well-documented layer of abstraction across operating systems.  It is true that the DLLs for Qt are somewhat large (the debug ones in particular, and I'd rather people be running debug builds for now).  When the pieces Ren Garden wants are put together (Core, GUI, Network) the release build size w/DLLs is going to be in the ~10mb range.  Doing a static build which only takes the parts of Qt that you use and puts them into the executable is a labor-intensive process--and not one that sufficient incentive has been around to do.  But even then you're not going to see less than ~5mb for that exe.</p>
<p>I'm not too concerned about that.  And if you're using KDE on Linux, you already have Qt--so long as you build for the same version as the shell is using, you shouldn't need any separate libraries.  <em>(Linux distributions try to build all the KDE apps to use the same library versions as the shell is using, and a packaged Ren Garden would do the same.)</em></p>
<p>Yet what it does is apply a <a href="http://doc.qt.io/qt-5/qtextedit.html" rel="nofollow noopener">QTextEdit widget</a> in a somewhat creative way.  I was trying not to pull in a full WebKit browser, being a bit size-conscious...and not wanting to make something like an Electron app.  This was probably short-sighted, as with the emscripten build we would probably want to make an in-browser experience like Ren Garden, and it would be more able to share code.  In either case, since it's a text editor, there has to be some amount of logic to prune off the old history if you have a long-running/long-printing process, because it just gets slower and slower as you add more lines.  That's one of the many things that haven't been attended to yet.</p>
<p>The INPUT command doesn't currently work, and it goes through some rather experimental I/O code that works with C++ classes.  Writing a C++ "iostream" turned out to be kind of more of a hassle than I realized, and I'm not sure if it's the right direction to be going.  PORT!s in general need a major design review, and then thinking about how such ports will interact with C (or if it will have a special C++ interface) is something that needs to be thought about.</p>
<p>Having Ren Garden around helps stress the API a bit.  It shows weak points, one weak point of which is still threading... it has a separate GUI thread from the evaluator thread, but even that treads on some dodgy territory.</p>
<p>Because it is basically the largest (only?) app that uses Rebol in an embedded way, it is a good test of new ideas and catching design problems...and so I'm glad it's there.  But how to prioritize bug fixes?  What features or experiments should be done with it?  What is the likelihood that having honed drops of it would expand usage?  Who would help, and how?</p>
<p>These are questions people have to answer.  <a class="mention" href="/u/szeng">@szeng</a> has brought up an interest in whether or not Rebol a Rebol/Qt linkup could supplant the AGG-based /View code... and <a class="mention" href="/u/gchiu">@gchiu</a> keeps bringing that up too.  I've been hesitant to invest more in this because I don't want to be the only one doing it.</p>
<p>Where do other people see this standing, and is anyone willing to commit anything to it?  Or is it just another "if I develop it you <em>might</em> use it" situation?</p>
            <p><small>6 posts - 3 participants</small></p>
            <p><a href="https://forum.rebol.info/t/ren-garden-status-future/455">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/ren-garden-status-future/455</link>
          <pubDate>Mon, 08 Jan 2018 22:31:38 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-455</guid>
          <source url="https://forum.rebol.info/t/ren-garden-status-future/455.rss">Ren Garden / Status / Future</source>
        </item>
        <item>
          <title>Ren-C 2018 Roadmap and Retrospective</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Announcements</category>
          <description><![CDATA[
            <p>Though there is the <a href="https://trello.com/b/l385BE7a/rebol3-porting-guide-ren-c-branch" rel="nofollow noopener">Trello to track progress</a>...</p>
<p>...since a New Year is upon us, I thought I'd reflect on what we've accomplished and what we plan to do.</p>
<h2>The Past</h2>
<p>The Ren-C effort started perhaps a month or so prior to the Pull Request <span class="hashtag">#1:</span> <a href="https://github.com/metaeducation/ren-c/pull/1" rel="nofollow noopener">Coherence One</a>, on Jun 16, 2015.  Having invested a bit into modeling what a C++ API for Red might look like to use, I found it easier to test that API linked to Rebol <em>(since it was C, and given that many things in Red were incomplete)</em>.</p>
<p>Not wanting the work on understanding I'd done to go to waste, I wanted to un-fork the divergence between Atronix and earl's "community" build.  It seemed to make sense to couple that with using compiler warnings to maximum advantage, getting the codebase on solid ground with Valgrind and Address Sanitizer...and then not letting it slip back again.</p>
<p>So it's been going on for 2 1/2 years.  If you <a href="https://github.com/metaeducation/ren-c/graphs/contributors" rel="nofollow noopener">look at GitHub's commit graphs</a>, it hasn't been exactly <em>continuous</em> work since the start date.  But it hasn't gone away.  In that time there have been many accomplishments, to name a few:</p>
<ul>
<li>
<p><a class="mention" href="/u/brett">@Brett</a>'s work on getting the native specs into the C code, along with accessing arguments by name instead of number (with no degradation in performance by doing so) made a night vs. day difference in how the code looks.</p>
</li>
<li>
<p><a class="mention" href="/u/szeng">@szeng</a>'s rewrite of how extensions work and move of the build system to be completely Rebol-based has pointed toward how things should fit together, though we need to do everything we can to reign in growing complexity (there and elsewhere)</p>
</li>
<li>
<p>The console's move to userspace...including for processing command line parameters...was another night vs. day difference. <a class="mention" href="/u/draegtun">@draegtun</a>'s work--one of the <a href="https://github.com/r3n/reboldocs/wiki/User-and-Console" rel="nofollow noopener">few places we actually have documentation</a> <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> was an inspiration to continue pushing on it.</p>
</li>
<li>
<p>Thanks to the initial work of earl for adding 64-bit support and Travis building 32 and 64 bit variants of Linux and Windows, plus that of <a class="mention" href="/u/giuliolunati">@giuliolunati</a> on Android and <a class="mention" href="/u/szeng">@szeng</a> on Mac, we have an <a href="https://travis-ci.org/metaeducation/ren-c/builds/322785759" rel="nofollow noopener">aggressive build matrix</a> on Travis that works for us every day.</p>
</li>
<li>
<p><a class="mention" href="/u/gchiu">@gchiu</a> has been amazingly resourceful in stepping into earl's big shoes...linking those builds up to <a href="http://metaeducation.s3.amazonaws.com/index.html" rel="nofollow noopener">a download page</a> and organizing other community resources (like this forum, of course)...staying present and keeping the chat lively.</p>
</li>
<li>
<p><a class="mention" href="/u/rgchris">@rgchris</a>, <a class="mention" href="/u/markeye">@MarkEye</a>, <a class="mention" href="/u/kealist">@kealist</a> and everyone else have been there to talk out the big or small technical questions through the days, as we mull over what this language can and can't become.</p>
</li>
<li>
<p><a class="mention" href="/u/johnk">@johnk</a> managed to <a href="https://github.com/rebol/rebol-issues" rel="nofollow noopener">save institutional knowledge from CureCode</a> with a massive migration to GitHub, which is <em>especially</em> helpful as the rift with Red means no support keeping Rebol bugs alive would be expected.</p>
</li>
<li>
<p>BlackATTR, IngoHohmann, JacobGood1, GeekyI and everyone all coming to participate on chat and the forum help keep me interested and perhaps, even, a little bit grounded...you too, pekr, and even iArnold.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
</li>
<li>
<p>rebolek and everyone on the Red team have kept me irritated enough to need to finish my vision to prove them all wrong.  <img src="https://forum.rebol.info/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:">  <em>(Oh fine, put yourself in the previous bullet point if you feel like it.)</em></p>
</li>
</ul>
<p>Hopefully I haven't left anyone off.  <em>But of course we all know who the real hero is!</em></p>
<p>Just kidding. <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">  Yet one thing that I must realistically confront is that if I stopped working on the system, the odds aren't too good at this juncture that anyone else would step in to push it forward.  And nothing would make Red happier than if I gave up.</p>
<p>So it's worth mentioning I've certainly had moments of doubt if I wanted to continue.  Life is short, I have a lot of interests, and this seems to have grabbed a lot more of my time than I would have ever imagined.</p>
<p>My stance--as many people know--is that Rebol is a language that is both very deep, and deeply flawed as a tool for generalized software development.  We see moments where it does things no other tool does, and other moments where it fails...and there's not exactly a clear map of the space of application for the language.  But it seems every time I've thought of sending it to my digital dustbin, some new innovation pops up to give me faith that it's something worth doing: definitional returns, specific binding, specialize/hijack/chain/adapt/enclose, void semantics, enfix, FRAME!s, redo, elide/comment... the list of design accomplishments is getting quite long.</p>
<p>Now with Red's recent doings--it would seem responsibility for delivering the vision of the original Rebol has fallen even more squarely into our hands.  Everything I've seen so far in the reaction to the crypto announcement indicates that regardless of if they raise the desired money, they're going to be attracting what I'd call "the wrong element".  A different kind of get-rich obfuscating crypto crowd, who wouldn't be  truly moved by <a href="https://forum.rebol.info/t/back-to-personal-computing/186">Carl's initial vision statement</a> <em>(or even be moved by Nenad's own "What is Red" presentation, which I actually quite liked)</em></p>
<h2>The Future</h2>
<p>As some of you know, I've traveled extensively the last couple of years.  It's hard for me to envision life a year from now--in more ways than one--it seems almost unfathomable that as the clock ticks 2019 I'd be writing something along  the lines of <em>"hmmm, we still haven't changed the <a href="http://www.rebol.com/cgi-bin/blog.r?view=0507" rel="nofollow noopener">%.r files in the repo to be %.reb</a>"</em>.  Groan.</p>
<p>I'm in this because I've said I want to build <em>the Minecraft of programming</em>.  Something intuitive, composable, and visceral.  More intrinsically flawed than pure functional programming--but accessible to a wider audience with similarly pleasing ergonomics (perhaps even to the point of feeling <em>toy-like</em>).  But get people hooked to where they're having so much fun they'll forget that the particular task they're doing could be done more rigorously--or even more easily--in some other language.</p>
<p><a href="https://youtu.be/0exDvv5WEv4?t=251" rel="nofollow noopener">Ren Garden</a> showed a glimpse of what this could be, and Qt is still very much how <em>I</em> would do things cross-platform, if it were just me.  Yet I would like to remind people that it was really written in only about a month...and at a very early time in my understanding of Rebol's implementation, while the API was being hammered out.  I'll also mention that while it's <em>cool</em>...I would nearly guarantee that undertaking such an effort so it ran through a browser interface would be a more strategic choice.  Even if it used something horrible like Electron.  Groan again.</p>
<p>In any case, I have mixed feelings of investing too heavily in Ren Garden.  Yes: I do still want us to be able to have automatic Travis drops for Windows/Mac/Linux.  But it's probably less useful as a tool in its own right than it is a showcase of how to embed Rebol in a C++ application.  It has been a great test for that, and because of its general ambition helped me to avoid some design mistakes in the API</p>
<p>The technical things I want to get hammered out in the next several months are:</p>
<ul>
<li>
<p><strong>UTF-8 Everywhere:</strong> This isn't so much that I feel pressured to solve the problem of emoji in code, as needing to solve the API-level behavior of strings in Rebol.  It's quite a gargantuan task, affecting the entire system (when we say "everywhere", we mean "everywhere").  It is unbelievably difficult--probably the single most difficult change to date, rivaled only by specific binding.  If not for the debug build, its noisy alerts, and the ability to <em>choose</em> to build the code as C++ I would call it impossible...for all practical purposes.  But not only is it crucial, I think it could make a good marketing tool for the language being built on foundations that are future-forward...which would appeal to the <a href="http://utf8everywhere.org/" rel="nofollow noopener">UTF-8 Everywhere Manifesto</a> crowd.</p>
</li>
<li>
<p><strong>libRebol:</strong> I want it to be in working order, with full variadic support with C string runs, and built as a target in Travis.  Yes, I mean <code>rebDo("print [", rebInteger(x), "+ (2 *", rebEval(negate_function), "3)]", END);</code>...forming blocks and groups across spans, going even further than RenCpp did but with pure ANSI C.  Once libRebol can be brought in, that should make the Ren Garden build "more or less trivial" (to the extent configuring Travis is trivial)</p>
</li>
<li>
<p><strong>Derived Binding:</strong> freeing us from the situation where 1000 instances of an object with 100 methods means making 1000 * 100 deep copies of function bodies.  That's the kind of serious flaw that you would think it would be flashing in big bright letters on the description of OBJECT!, because people <em>will</em> run into this.  Atronix did, and it was a very big deal.  I don't have the solution completely worked out, but enough of it seems to work that I'm confident.  <em>(UPDATE: <a href="https://github.com/metaeducation/ren-c/commit/f6767f2f7c0449aa9fce8db21d6a1e1781b04d97" rel="nofollow noopener">committed February 3rd</a>, and no bugs reported...yet.)</em></p>
</li>
<li>
<p><strong>Bring Rebmu Up To Date:</strong> Since I talk about wanting programming in Rebol to feel like you're playing a fun game, there is one gaming community that actually plays with their code: Code Golfers.  Not only do I think it's probably the most intriguing golfing language people have invented yet--and a good marketing tool--I think it could be the language used to win a lot, if sufficient care is put into it.</p>
</li>
<li>
<p><strong>Userspace Stepwise-Debugging and Tracing:</strong> The userspace console is already--in my opinion--pushing a lot of boundaries for how a console works.  My recent <a href="https://forum.rebol.info/t/monitoring-a-single-function-with-enclose-and-hijack/425">ENCLOSE/HIJACK example</a> shows a glimpse of how this is going to go even wilder, in the form of a very-hackable debugger, where most all of its logic is written in Rebol.  To say there are a lot of open questions is an understatement, but I feel optimistic.</p>
</li>
</ul>
<p>I can't easily see too far past these "near-term" goals (they're actually all huge things).  And I don't know how much anyone else can help me with those...or other deep things that I <em>don't</em> feel design confidence about--like "arbitrary" virtual binding, user-defined types, modules, multiple dispatch, port design...</p>
<p>But we'll need project growth to take the continuation-of-Rebol mantel away from Red, where it was previously hoped to be <em>(<strong>especially</strong> hoped by me, because I didn't want to be in the position of making a product)</em>.  So that means we'll have to start publishing.  And downloads.rebol.info should look a lot like <a href="http://www.red-lang.org/p/download.html" rel="nofollow noopener">Red's download page</a>.  Maybe start writing some cool articles.  Or pay a company to make a press release we write about ourselves.  <img src="https://forum.rebol.info/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>I also think selling a language is quite difficult, so any ideas people have for products that can sneak-attack people is a good idea.  Whether that's something like Graham's lighting router, or an in-browser PARSE tool that looks something like <a href="https://regexr.com/" rel="nofollow noopener">RegExr</a>, I don't know.</p>
<p>In any case, Happy New Year to everyone.  Thank you for your help so far, thank you for putting up with me.  I hope something can come out of all this collective effort that makes people happy--even if it's just a few of us!</p>
            <p><small>6 posts - 3 participants</small></p>
            <p><a href="https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443</link>
          <pubDate>Sat, 30 Dec 2017 23:28:05 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-443</guid>
          <source url="https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443.rss">Ren-C 2018 Roadmap and Retrospective</source>
        </item>
        <item>
          <title>About the Announcements category</title>
          <dc:creator><![CDATA[asampal]]></dc:creator>
          <category>Announcements</category>
          <description><![CDATA[
            <p>Low traffic category for important announcements, latest roadmaps and status checks.  Start here!</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/about-the-announcements-category/19">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/about-the-announcements-category/19</link>
          <pubDate>Thu, 18 May 2017 04:41:56 +0000</pubDate>
          <discourse:topicPinned>Yes</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-19</guid>
          <source url="https://forum.rebol.info/t/about-the-announcements-category/19.rss">About the Announcements category</source>
        </item>
  </channel>
</rss>

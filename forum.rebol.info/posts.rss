<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>AltRebol - Latest posts</title>
    <link>https://forum.rebol.info</link>
    <description>Latest posts</description>
      <item>
        <title>Belated 2021 Post-Mortem + New Years 2022 Vision 🤹</title>
        <dc:creator><![CDATA[@iArnold Arnold]]></dc:creator>
        <description><![CDATA[ <p>Like it is said, "if you do what everyone else is doing, you will get the same as all of them".<br>
The lack of continuity on the posts of the f00 team is legendary, and combined with the prioritised goals it is encouraging many to wander on.<br>
The dynamics of REN-C, changing even core behavior if seen as a promising experiment is on the complete other end of the spectrum. Not suitable for many seeking an alternative to the library madness, where using even for standard functionality refuge is sought in external API's, for their stable project needs.</p>
<p>Fortunately I am very busy with my new career, but as a downside almost no devtime. But still like what I am doing, so must do more now ... <img src="https://forum.rebol.info/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p> ]]></description>
        <link>https://forum.rebol.info/t/belated-2021-post-mortem-new-years-2022-vision/1786/3</link>
        <pubDate>Thu, 03 Feb 2022 19:56:09 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5757</guid>
      </item>
      <item>
        <title>Belated 2021 Post-Mortem + New Years 2022 Vision 🤹</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>A little addendum from one of my recent favorite YouTubers, Joel Haver, on doing what you love:</p>
<div class="onebox lazyYT lazyYT-container" data-youtube-id="BizvIhp5clM" data-youtube-title="Some Scattered Thoughts on Doing What You Love" data-parameters="feature=oembed&amp;wmode=opaque">
  <a href="https://www.youtube.com/watch?v=BizvIhp5clM" target="_blank" rel="noopener">
    <img class="ytp-thumbnail-image" src="https://i.ytimg.com/vi/BizvIhp5clM/maxresdefault.jpg" title="Some Scattered Thoughts on Doing What You Love" width="480" height="360">
  </a>
</div>

<p>And I think that is a good meditation on not really deviating from the parts of this that I find interesting, but staying that course...even if it takes time.</p>
<p>So I'll try and promise to keep doing the parts that impress me.  And someday, it might find an audience.</p> ]]></description>
        <link>https://forum.rebol.info/t/belated-2021-post-mortem-new-years-2022-vision/1786/2</link>
        <pubDate>Tue, 01 Feb 2022 07:16:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5756</guid>
      </item>
      <item>
        <title>Belated 2021 Post-Mortem + New Years 2022 Vision 🤹</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <h1>Happy 2022!</h1>
<p><strong>...and I Hope Your New Year's Was Better Than Mine...</strong> <img src="https://forum.rebol.info/images/emoji/twitter/man_facepalming.png?v=9" title=":man_facepalming:" class="emoji" alt=":man_facepalming:"></p>
<p>Though I've spent most of the last few New Years Days (and this last one) traveling and in some hotel...I've usually gotten myself a nice supply of beer, and worked start-to-finish through a post.  I talk about what worked and didn't work, and where things might go next.  Although it generally takes the greater part of a day to write those, it's in some ways kind of a fun thing to write...and I was always pleased to beat Red to the punch with accomplishments I found more impressive.</p>
<p><em>This year felt unfortunately different.</em>  I had a big wave of pessimism for all kinds of reasons--ranging from personal relationships, to my new laptop screen getting cracked when it was in my bag...to just a general feeling that the world is going to hell in a handbasket.</p>
<p><strong><img src="https://forum.rebol.info/images/emoji/twitter/skull.png?v=9" title=":skull:" class="emoji" alt=":skull:"> ...But It's Not As Grim As All That... <img src="https://forum.rebol.info/images/emoji/twitter/potato.png?v=9" title=":potato:" class="emoji" alt=":potato:"></strong></p>
<p>After eating a ridiculous potato from <a href="https://stpeterising.com/home/2021/9/16/a-loaded-baked-potato-restaurant-the-half-baked-potato-is-coming-soon-to-downtown-st-pete">A Hipster Potato Restaurant In St. Petersburg</a>--and inadvisedly drinking 2 Sugar-Free Red Bulls--my stomach and brain weren't going to sleep for a long time.</p>
<p>Though traveling makes retrieving a repaired laptop on an extended warranty difficult, I still had my old laptop with me.  So I dug it out, and found an unfinished post about a seemingly-esoteric point about invisible evaluations and void isotopes.  <a href="https://forum.rebol.info/t/pure-vs-impure-invisibility-do-we-need-both/1782">Some deep realizations clicked into place</a>.  Those realizations led to a proud thought:</p>
<p><strong>2021 was the year of invention for BAD-WORD!s, "isotopes", and ^META.  While the older invention of NULL was akin to mathematicians inventing zero to solve previously hard problems... <em>isotopes and meta-transformations are like the invention of imaginary numbers</em>.</strong></p>
<p>Having that energy boost put me on a slight incline toward positive thinking.  Enough so that I'm pushing out a New Year's post before the calendar ticks over to February... here goes:</p>
<h2>UPARSE Is Already a Big Success Story</h2>
<p>Many who use Rebol got addicted because of PARSE.  But people who work with other languages and parser combinators have wondered what the big deal is.  Though Rebol's PARSE is a literate alternative to simple RegEx scenarios, it's weak at building high level structures from smaller simpler parsers--<em>there are too many inconveniences in writing reusable rules</em>.</p>
<p>UPARSE stands for <a href="https://github.com/metaeducation/ren-c/blob/26752e701d9585a7dd5bb1c4cb2e78c901908c5b/src/mezz/uparse.reb"><em>(U)sermode PARSE</em></a> and to me it deals Rebol back in the parsing game:</p>
<ul>
<li>
<p>It keeps the classic feel of PARSE alive, while bringing its power up to the level of combinators in other languages.  Arbitrary values can be synthesized from processing the input, instead of just data captures at the level of the input series.</p>
</li>
<li>
<p>You can come up with "new keywords" without waiting for someone to do so.  These are expressed as ordinary functions with multiple return values, and hence can be optimized as natives.</p>
</li>
<li>
<p>The behavior of values of certain datatypes themselves can be overridden, to bend parsing to entirely different meanings.</p>
</li>
<li>
<p>It has a <a href="https://github.com/metaeducation/ren-c/blob/26752e701d9585a7dd5bb1c4cb2e78c901908c5b/tests/parse/examples/maxmatch.parse.test.reb">generic architecture for rolling back the effects of combinators</a>, with a default behavior that lets the average combinator author avoid the details if they just want any failure to roll back everything in the order it was done.</p>
</li>
<li>
<p>As a proof of its flexibility, a Rebol2/Red-compatible combinator set is defined.</p>
</li>
</ul>
<p><strong>But besides the combinators, the usermode implementation of the UPARSE engine itself that composes and runs them is as much of the story as anything else.</strong>  Rebol has had a shaky history of giving usermode code the same perceptive power as what could be done from C...and that can be as basic as how to tell the difference between <strong>[a b #[none]]</strong> and <strong>[a b]</strong> with looking at the result of THIRD of the block.  All these upgrades come into the mix in UPARSE...from FRAME! mechanics and specializations to ^META and isotopes and generic quoting.</p>
<p>On the downside: it hasn't been optimized much yet, so the performance is abysmal...and a lot of work is left to do on error messages.  But seeing how to build a dialect in this way--where it's not like you have to be a C programmer, but you can wire together the pieces--is the "Minecraft of Programming" I talk about.</p>
<h2>The <a href="https://forum.rebol.info/t/the-new-ren-c-github-action-run-natively-run-on-web/1562">Ren-C GitHub Action</a> Has Been Amazing</h2>
<p>Although it required me gritting my teeth through some JavaScript programming, we now have a turnkey way to install an up to date interpreter with a line of code on a cloud runner for Mac, Linux, and Windows...as well as run automation of the latest web build.</p>
<p>It's a big force multiplier, and it's helped with testing the <a href="https://forum.rebol.info/t/whitespace-interpreter-revisited/1482">Whitespace Interpreter Dialect</a> and the <a href="https://forum.rebol.info/t/uscii-seen-with-new-eyes/1713">USCII Dialect</a>...both of which received major updates this year.  When Redbol examples are given they often risk merely showing the language is capable of generic computation and if you put enough hours into it then you might get something that sort-of-works.  But I feel these are approaching good examples of the form--where they lay out the particular power and composability that Ren-C has been angling for.</p>
<h2>
<a href="https://forum.rebol.info/t/devices-are-gone-but-what-were-they/1692">Devices are Gone</a> and <a href="https://forum.rebol.info/t/libuv-integration-has-started-an-i-o-renaissance/1694">now it's all libUV</a>
</h2>
<p>I think that libUV pretty much represents the objectives of what Carl might have wanted a device layer to be.  Not only is it pure C code that can be built with things like the TinyC compiler, it compiles for esoteric platforms like Haiku.  It's something Rebol might well have used had it been around.</p>
<p>And the web build doesn't use libUV at all--accomplishing its network reads and such through completely different mechanisms.  So it shows the language is staying pure and repurposeable on platforms that don't have threads or whatever dependencies libUV requires.  A simple stripped down version could just offer C stdio (for instance).</p>
<p>There's a long way to go for our usage of libUV to live up to its potential.  But it gives the foundations for doing things like a <a href="https://forum.rebol.info/t/semantics-of-read-and-tcp-streams-past-and-future/1733">good version of async IO, where you code in a synchronous style</a>.  (I've explained that I think the old WAIT/AWAKE model really <a href="https://forum.rebol.info/t/the-weirdness-of-wait/1703">represented a dead end</a>, and so it had to be ripped out).</p>
<h2>
<a href="https://forum.rebol.info/t/the-sea-of-words/1564"><em>Sea of Words</em></a> and Customizable Modularization Arrives</h2>
<p>What was supposed to be unique about Rebol's modules was that the code that processed headers would be like a dialect.  That dialect was processed by usermode code, and you could write your own spin on it if you had some other idea of how you wanted modularization to work.</p>
<p>It's early yet to really say for sure how the mechanics behind this will evolve.  But there have been big steps taken--and the personal success I feel is how the test dialect can create modules out of individual tests.  So the test files are really making thousands upon thousands of isolating contexts, and when the tests are done running the user context is not contaminated at all.  This makes the tests less subject to weird side effects from each other...keeps things tidy...and is overall good for the garbage collector as well.</p>
<p>Disconnecting the use of words from the creation of variables is good for all the reasons I cite.  I've been very happy with that idea, though what "attachment" to a context means has design work to do.  Make no mistake--this is a process of invention--and so it's going to be weird and take time.</p>
<h2>
<a href="https://forum.rebol.info/t/get-set-vs-pick-poke-whats-the-difference/1719">PICK and POKE and Pathing Are Resolved</a> (I Think)</h2>
<p>I've struggled since very early on to tame "path dispatch", which was very oddly shaped.  I'm not going to rehash all of the thought process.  But I'm pleased with the outcome, and I think it will generalize well to extension types.</p>
<h2>First Try At String Binding + Interpolation</h2>
<p>It isn't there yet, but it has been prototyped.  I've written up a post about where I think binding/scoping has to go:</p>
<p><a href="https://forum.rebol.info/t/rebol-and-scopes-well-why-not/1751" class="inline-onebox">Rebol And Scopes: Well, Why Not?</a></p>
<p>There are still no easy answers.  But there's good news about having so many complex codebases in play (like UPARSE, whitespace dialect, etc.) that are not throwing softballs at the language.  If new binding concepts add functionality but don't break any of that, that's a good sign it may be good.</p>
<h2>...A Lot Of Other Stuff Happened...</h2>
<p>This is just a mini list of some of the things I find most notable to call out. As usual, you can scroll through posts or commit logs to see more.</p>
<p>But I also got the chance to visit <a class="mention" href="/u/blackattr">@BlackATTR</a> and meet his family and dogs, so that was fun.  We got some work done on his QUERY dialect, but more to go.</p>
<p>I managed to get ODBC and webserver bugs fixed for <a class="mention" href="/u/gchiu">@gchiu</a> so he could do a demo, and to put it on GitHub Actions with tests.</p>
<hr>
<h1>What Hangs in the Balance for 2022?</h1>
<p>I mentioned my bad New Years, and reading <a href="https://www.red-lang.org/2021/12/2021-winding-down.html">Red's New Years post</a> did not help, because it felt so incredibly <em>cyclic</em>.  Seeing them start a New Year by long-windedly plagiarizing <a href="https://forum.rebol.info/t/back-to-personal-computing/186">Back to Personal Computing</a>... <em>again</em>... made me fear their man-years of toil without heeding advice or warnings has grown no audience for either their work, nor Ren-C's inventions.  Their formerly active YCombinator group had a collective yawn about it...<a href="https://news.ycombinator.com/item?id=29758024">one comment</a> at time of writing, so they seem to be slipping off the radar...even though they are much less research-oriented and more "give-the-people-what-they-want-right-now" oriented (in theory).</p>
<p>Apologies to Gregg Irwin for ranting at him.  <strong>But we/I sadly can't count on Red to keep an audience alive for Redbols, as the old guard moves on and new people aren't there to replace them.</strong>  And I'm not a marketer, especially since I fundamentally disagree with the way social media power structures work.  So Ren-C's cool creations are at high risk of not even making it to <a class="mention" href="/u/blackattr">@BlackATTR</a>'s "bad"-case outcome of becoming <em>"a museum piece like the Antikythera mechanism."</em></p>
<p><em>(Makes me think of the <a href="https://en.wikipedia.org/wiki/Conservation_status">species extinction risk scale</a>.  Sure, the source code is on GitHub, and the topic list of this forum seems to be on the Internet Archive...but if you click through to individual pages there's nothing about the post contents.  Should we do a scrape of the data here and put it elsewhere?)</em></p>
<p>I have always been able to consider the notion that Rebol's fundamental idea is flawed and it <em>should</em> die out.  In fact: I started out getting involved in Rebol <em>to prove to Reichart that it was bad</em>, and using it for Qtask was misguided.  My attempts to construct that proof ran up against the fact that its odd plasticity and choice to throw out the rulebook on what a computer language is-or-should-be gave it a slippery yet timeless nature...like English itself.</p>
<p><strong>But given the bus-factor-of-one nature of Ren-C, I should probably be thinking more about how to communicate that to new audiences, vs. going too deeply into an engineering project where I try to re-graft Ren-C onto a Go-like runtime model.</strong></p>
<p>So maybe I need to be better about making YouTube videos, packaging demos, and showing off the existing infrastructure.  <strong>When I look at other WebAssembly language projects, we actually still compare favorably.</strong>  And maybe I'm too quiet about it for fear of looking a fool for all the things that I know aren't working right.  Still...my confidence increases as I've been moving the architecture around to try and steer away from the obviously bad ideas, in a way that new people coming in would be able to shore up missing pieces.</p>
<h2>...Predictions Are Hard To Make</h2>
<p>It probably looks as if I've been notoriously bad at predicting what things are going to get accomplished.  I'd wanted 2021 to hopefully be when stacklessness got integrated, and I wanted to see progress on debugging.  And it may seem like none of that happened.</p>
<p>But sometimes progress is subtle.  There were major barriers to making R3-Alpha's PARSE architecture stackless, but the UPARSE design is much more amenable to it.  So I think the answer will just be that we'll skip stackless PARSE3 and just assume UPARSE is the future of PARSE.</p>
<p>And when it comes to debugging, I demonstrated some <a href="https://forum.rebol.info/t/getting-hooks-into-events-during-parse/1640/5">impressive tracing in UPARSE</a> that works today...which is the sort of thing a user can customize.  Understanding how dialect authors are going to be able to hook and trace their dialects ties in a lot to seeing a big picture of how the evaluator itself might be traced, so all of this really does plug together.</p>
<p>Nevertheless, I feel skeptical of making new predictions.  Especially because here in 2022: <em>Realistically speaking, so long as I'm traveling and trying to find a new home base it's hard to get very much done.</em>  I've chosen to travel in Florida because things are open for business despite the existence of coronavirii...and that aligns with my belief that being vaccinated and boostered is enough to have a social life.  That means I am out maskless indoors doing a fair number of things with people...and changing locations every few days.  It may be a while before I can really focus on coding.</p>
<h2>So Let's Put Predictions On Hold, at least until I have a <img src="https://forum.rebol.info/images/emoji/twitter/derelict_house.png?v=9" title=":derelict_house:" class="emoji" alt=":derelict_house:">
</h2>
<p>One thing that's been working so far, it's my mandate on continuous integration and keeping all the things that are supposed to work, working, as new experiments are tried.  This is not a natural habit for the personality type that programs in Rebol.  People drawn to the language are not <em>"correct-by-construction"</em> folks, more like Larry The Cable Guy "Git-R-Done" mentality.</p>
<p>I want to keep developing <a class="mention" href="/u/blackattr">@BlackATTR</a>'s QUERY and make it part of that "everything is kept working" strategy.</p>
<p>All of <a class="mention" href="/u/gchiu">@gchiu</a>'s projects, as well.  And my USCII, Whitespacers, <code>hostilefork.com</code> itself, etc.  Anything I can convince <a class="mention" href="/u/giuliolunati">@giuliolunati</a> to put in a GitHub workflow, as well!</p>
<p>I want to re-commit to <a href="http://rebmu.hostilefork.com/">Rebmu</a>, also, and make it part of the CI tests.  It might seem like I am always putting this off--even though I claim to say it's one of the big motivators, the <em>"great code golf game in the sky"</em> that I say I'm pursuing.  (When have you seen me solve a puzzle or develop it lately?)  But it's actually in the back of my mind, always.</p>
<p>It was nice with Whitespace to actually draw some attention from a curator of <a href="https://github.com/wspace/corpus">collections of implementations of whitespace</a>... <a class="mention" href="/u/aarchi">@aarchi</a>.  He said he found it to be one of the more interesting examples, and that's always been my goal with this.  To build on the novelty of the medium and give people a new tool to think.  (Recently re-watching that movie <a href="https://www.youtube.com/watch?v=8Fc-7SuebTQ">"Arrival"</a> and the "language/weapon/tool" bit.)</p>
<p>I'm a few minutes from February so I'll just close by saying: continue automating, continue examples, and maybe do a bit more YouTube evangelism.  I'll keep frittering with the mechanics.  And get my laptop fixed (!)</p> ]]></description>
        <link>https://forum.rebol.info/t/belated-2021-post-mortem-new-years-2022-vision/1786/1</link>
        <pubDate>Tue, 01 Feb 2022 04:49:12 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5755</guid>
      </item>
      <item>
        <title>Understanding Definitional Scoping</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>Hello there... thanks for your question, and no need to be sorry.  Questions are well warranted.</p>
<p>(Note that I take no responsibility for the madness that is Rebol--I just happen to hack on a derivative of the open source codebase because I have found various interesting aspects about it.  :-P)</p>
<aside class="quote no-group" data-username="DefinitionalUsername" data-post="1" data-topic="1785">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/letter_avatar_proxy/v4/letter/d/aeb1de/40.png" class="avatar"> DefinitionalUsername:</div>
<blockquote>
<p>First, when the code is compiled</p>
</blockquote>
</aside>
<p>Rebol is interpreted--not compiled.  (Red attempts to do some compilation, and I'm unclear on how that works...you will have to ask them.)</p>
<aside class="quote no-group" data-username="DefinitionalUsername" data-post="1" data-topic="1785">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/letter_avatar_proxy/v4/letter/d/aeb1de/40.png" class="avatar"> DefinitionalUsername:</div>
<blockquote>
<p><strong>Load-time:</strong> When the code is loaded, context <strong>A</strong> is created with those symbols as members.</p>
</blockquote>
</aside>
<p>It's probably dumber than you think.  Not only is there no "compile-time", "load-time" isn't where the binding happens.  It all happens at run time.</p>
<aside class="quote no-group" data-username="DefinitionalUsername" data-post="1" data-topic="1785">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/letter_avatar_proxy/v4/letter/d/aeb1de/40.png" class="avatar"> DefinitionalUsername:</div>
<blockquote>
<p>if <code>a: 2</code> didn't exist, will it still create the slot for <code>a</code> due to <code>a: 3</code> deep inside?</p>
</blockquote>
</aside>
<p>CONTEXT is an alias in historical Rebol for MAKE OBJECT! and the behavior of that is that it only searches one level of depth symbolically for SET-WORD!s to gather.</p>
<p>Deeper walks are possible.  The concept behind R3-Alpha and Red's FUNCTION is that it searches deeply the body for any SET-WORD!s and assumes they should be local variables.  This creates the problems you would expect: a nested function's locals will be picked up as locals in the outer function, and SET-WORD!s used in the body incidentally as object members or for dialect purposes will also be picked up.  This is why Ren-C has LET and does runtime variable instantiation which runs in a wave (virtual binding), you can't sensibly calculate a static concept of what symbols are variables or not.</p>
<p>Ren-C is quite different from Rebol, and so answers will vary significantly, if you find that you care about the difference.</p>
<aside class="quote no-group" data-username="DefinitionalUsername" data-post="1" data-topic="1785">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/letter_avatar_proxy/v4/letter/d/aeb1de/40.png" class="avatar"> DefinitionalUsername:</div>
<blockquote>
<p>Did <code>context</code> bind <code>a</code> in <code>[/local a]</code> too, before <code>func</code> was executed?</p>
</blockquote>
</aside>
<p>No, CONTEXT was merely looking for symbolic SET-WORD! tokens at one level of depth underneath it.  <strong><code>a</code></strong> is a plain WORD!, and it's in a block one level deep, so that's two strikes.</p>
<aside class="quote no-group" data-username="DefinitionalUsername" data-post="1" data-topic="1785">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/letter_avatar_proxy/v4/letter/d/aeb1de/40.png" class="avatar"> DefinitionalUsername:</div>
<blockquote>
<p>Is there a parent-child relationship between contexts, or are they free-standing? Given a context, can I chase some pointer to its parent or child?</p>
</blockquote>
</aside>
<p>Contexts inherit keylists as an implementation detail for efficiency, and it's weaker than v8 hidden classes.</p>
<p><a href="https://richardartoul.github.io/jekyll/update/2015/04/26/hidden-classes.html" class="inline-onebox">Javascript Hidden Classes and Inline Caching in V8</a></p>
<p>I have thought hidden classes might be better, at times, but then again that would complicate the code.  And part of the point is to let everyone understand the stack.  It's a thought experiment.</p>
<p>Rebol was written to be a brutishly simple C '89 codebase and a lot of the "interesting" aspects were higher-order studies on top of an interpreter that worked better than you would think for how dumb it was.</p>
<p>My take is to call it "Amish Programming", you may find my talk at the 2019 conference useful if you're getting your bearings.</p>
<p><a href="http://2019.reb4.me/talks" class="inline-onebox">Talks | Rebol [2019]</a></p> ]]></description>
        <link>https://forum.rebol.info/t/understanding-definitional-scoping/1785/2</link>
        <pubDate>Mon, 24 Jan 2022 12:11:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5754</guid>
      </item>
      <item>
        <title>Understanding Definitional Scoping</title>
        <dc:creator><![CDATA[@DefinitionalUsername]]></dc:creator>
        <description><![CDATA[ <p>I just started learning Red/Rebol, and I was having trouble understanding the scoping rules. I did read the <a href="https://stackoverflow.com/a/21964858" rel="noopener nofollow ugc">Stack Overflow</a> and <a href="https://en.wikibooks.org/wiki/Rebol_Programming/Advanced/Bindology" rel="noopener nofollow ugc">Bindology</a>, and I think I somewhat understand, but I'm not sure! I'd be grateful if someone can confirm the my deductions about the following code from the SE post:</p>
<pre><code class="lang-auto">rebol []

a: 1

func-1: func [] [a]

inner: context [
    a: 2
    func-2: func [] [a]
    func-3: func [/local a] [a: 3 func-1]
]

reduce [func-1 inner/func-2 inner/func-3]
</code></pre>
<ol>
<li>
<strong>Compile-time:</strong> First, when the code is compiled, a list of top-level names is created. <em>(<code>a</code>, <code>func-1</code>, <code>inner</code>)</em>
</li>
<li>
<strong>Load-time:</strong> When the code is loaded, context <strong>A</strong> is created with those symbols as members. Also, the entire code is walked through, and every occurrence of those symbols is bound to these entries. <em>(e.g., <code>a</code> inside <code>func-2</code> would be bound to the top-level <code>a</code>)</em>
</li>
<li>
<strong>Run-time:</strong> When <code>a: 1</code> is executed, the value <code>1</code> is stored in the <code>a</code>'s slot in the context.</li>
<li>The <code>func</code> keyword after <code>func-1:</code> creates a new function, and assigns it to <code>func-1</code>. However, it leaves the binding of <code>a</code> intact.</li>
<li>The <code>context</code> keyword after <code>inner:</code> creates a new context <strong>B</strong>, walks over all the block, collecting all new symbols, and inserts those in the new object.</li>
<li>
<code>a: 2</code> assigns value <code>2</code> in <code>a</code>'s slot in the new context.</li>
<li>
<code>func</code> after <code>func-2:</code> creates a function while keeping <code>a</code>'s new binding intact, and assigns it to <code>func-2</code>'s slot.</li>
<li>
<code>func</code> after <code>func-3:</code> creates a function and creates a new context <strong>C</strong> in which <code>a</code> is inserted and bound.</li>
<li>Upon execution of <code>reduce</code>, <code>func-1</code> returns <code>1</code> from context <strong>A</strong>, <code>func-2</code> return <code>2</code> from context <strong>B</strong>, and <code>func-3</code> executes <code>func-1</code> which returns <code>1</code> from context <strong>A</strong> again.</li>
</ol>
<p>So, now,  a few questions:</p>
<ul>
<li>Is the above correct? If it is,</li>
<li>How does the <code>context</code> keyword determine which set-words it should create a slot for? i.e.,
<ul>
<li>if <code>a: 2</code> didn't exist, will it still create the slot for <code>a</code> due to <code>a: 3</code> deep inside?</li>
<li>What about if <code>a:3</code> didn't exist either? Will the new context contain a slot for <code>a</code> just due to <code>a</code> inside <code>func-2</code>'s body?</li>
</ul>
</li>
<li>Did <code>context</code> bind <code>a</code> in <code>[/local a]</code> too, before <code>func</code> was executed?</li>
<li>When a new context is created, does it copy existing symbols or bindings from the older context? If not,</li>
<li>Is there a parent-child relationship between contexts, or are they free-standing? Given a context, can I chase some pointer to its parent or child?</li>
</ul>
<p>Sorry for so many questions, I think I am getting extra confused since I already have programming experience and need to unlearn some stuff before being able to grok Rebol.</p>
<p>Thank you.</p> ]]></description>
        <link>https://forum.rebol.info/t/understanding-definitional-scoping/1785/1</link>
        <pubDate>Sat, 22 Jan 2022 08:13:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5734</guid>
      </item>
      <item>
        <title>Should END-able constructs all use ^META parameters?</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>R3-Alpha and Rebol2 could only have functions that were "endable" if the argument they took was quoted.  This feature was added primarily for HELP, so that you could say either:</p>
<pre><code>&gt;&gt; help
; (would display generic HELP usage information)

&gt;&gt; help topic
; (would display help for the given topic)
</code></pre>
<p>It was a <em>very limited form of variadic-ness</em>...generally used only in console-oriented commands (HELP, LS).  You couldn't write a function that was evaluative, like:</p>
<pre><code>redbol&gt;&gt; printer 1 + 2
3

redbol&gt;&gt; printer
You called the PRINTER function with no arguments
    ; ^-- not possible to accomplish with an otherwise evaluative argument!
</code></pre>
<p>Being able to handle getting to the end of input was entwined with taking quoted arguments.</p>
<h2>Ren-C added <code>&lt;end&gt;</code>-able Evaluative Parameters</h2>
<p>To facilitate certain demos in Ren Garden, Ren-C could mark an ordinary parameter as being <code>&lt;end&gt;</code>-able.  This would mean that the argument would show up as being NULL if the end was reached before an argument was seen.</p>
<p>This was--however--ambiguous with if you actually passed an evaluative NULL.</p>
<pre><code>ren-c&gt;&gt; printer 1 + 2
3

ren-c&gt;&gt; printer
You called the PRINTER function with no arguments

ren-c&gt;&gt; printer null  
You called the PRINTER function with no arguments  ; d'oh
</code></pre>
<p><strong>This kind of ambiguity wasn't new...the Redbol version had it.</strong>  The signal for quoted parameters that were endable-and-missing was to make the parameter an UNSET!.  Which meant they couldn't tell the difference between <strong>help #[unset!]</strong> and just-plain-help:</p>
<pre><code>red&gt;&gt; help #[unset!]
To use HELP, supply a word or value as its
argument:

    help insert
    help system
    help system/script

To view all words that...
</code></pre>
<p><strong>Interestingly enough, Ren-C has a solution for this with quoted parameters, because NULL cannot appear literally in source...so it can't be at the callsite.  Thus NULL can represent a missing quoted argument.</strong>  Which is neat.</p>
<h2>^META parameters can do <code>&lt;end&gt;</code> another way...</h2>
<p>A meta parameter is quoted, but will be a plain non-quoted BAD-WORD! if the callsite was passing an isotope.  With the <a href="https://forum.rebol.info/t/pure-vs-impure-invisibility-do-we-need-both/1782">recent design concept that suggests ~void~ isotopes are "pure" and equivalent to the full absence of a value</a>, you get evaluative endability without needing a separate feature.</p>
<p>So if our PRINTER took a ^META argument:</p>
<pre><code>&gt;&gt; printer 1 + 2
3
; (it actually received '3, quoted)

&gt;&gt; printer
You called the PRINTER function with no arguments
; (it actually received ~void~, not quoted)
</code></pre>
<p>The ambiguity is still there, though...</p>
<pre><code>&gt;&gt; printer ~void~
You called the PRINTER function with no arguments
; (again, it actually received ~void~, not quoted)
</code></pre>
<p>If you're following the details then I pointed out that supermeta parameters would be necessary to implement something that would know the difference in the suggested model.</p>
<p><strong>But at least you could differentiate NULL from an end.</strong>  The conflation of an invisible argument with the end doesn't seem that troubling to me, as the problem with HELP is fixed since it quotes and can tell when you say <strong>help ~void~</strong> vs. plain <strong>help</strong></p>
<h2>Killing off <code>&lt;end&gt;</code> as a core parameter flag would simplify things...</h2>
<ul>
<li>
<p>If a quoted parameter tolerates NULL as one of its legal types that's sufficient to say it is "endable"</p>
</li>
<li>
<p>If an evaluative parameter needs to detect endability, it could be your job to make it a ^META parameter and look for void, and unquote it to handle other results.</p>
</li>
</ul>
<p>The code and typeset flags for <code>&lt;end&gt;</code> could then be scrapped.</p>
<p>If someone really liked the NULL conflating version of endability they could write something to do it in usermode.</p>
<p><strong>You'd have to see the code to understand why I would think throwing away <strong><code>&lt;end&gt;</code></strong> is worth it.</strong> The way the type checking is done frames have to be filled first, which means if a function doesn't want an actual null but wants just ends to reflect as null... or wants an actual null but doesn't want ends reflected as null... hidden bits need to be grafted onto these nulls at the time of frame fulfillment to say whether it's an "endish" null or a regular null.  Various parts of the system then need to test a NULL for this invisible property.  <strong>^META parameters pull such invisible state into the light.</strong></p>
<p><strong>Basically take my word for it: meta is much cleaner, and offers a way to expose these distinctions to the user--so I think the odds are that <code>&lt;end&gt;</code> and its current mechanics need to die.</strong></p> ]]></description>
        <link>https://forum.rebol.info/t/should-end-able-constructs-all-use-meta-parameters/1783/1</link>
        <pubDate>Fri, 21 Jan 2022 17:01:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5732</guid>
      </item>
      <item>
        <title>Pure vs. Impure Invisibility: Do We Need Both?</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>"Invisibles" <a href="https://forum.rebol.info/t/issues-with-invisibles-a-truly-disappearing-comment/405">were conceived 4 years ago</a>...long before BAD-WORD!s, isotopes, ^META parameters, etc.</p>
<p>The terminology needs a bit of an update, because I want to make a distinction between two different kinds:</p>
<ul>
<li>
<p><strong>IMPURE INVISIBLITY</strong> is when a special state (like a ~void~ isotope) is discarded in contexts where it's assumed to represent an invisible intent.</p>
<p>Remember that plain BAD-WORD!s (unevaluated) are normal values and can be in blocks.</p>
<pre><code>&gt;&gt; first [~void~]
== ~void~
</code></pre>
<p>But an evaluated ~void~ becomes an isotope, and operations like ALL are willing to tolerate that as a signal of invisible intent it should discard:</p>
<pre><code>&gt;&gt; ~void~
== ~void~  ; isotope

&gt;&gt; all [10 + 20, ~void~]
== 30
</code></pre>
<p>Unfortunately, this is extra work that ALL must do, since ~void~ isotopes are valid evaluative products.  Every construct that wants to integrate impure invisibility bears the burden.</p>
</li>
<li>
<p><strong>PURE INVISIBILITY</strong> is an evaluator feature when a function call can truly erase arbitrary code, such as to the right of a SET-WORD!:</p>
<pre><code>&gt;&gt; y: elide (1 + 2 print "Erased!" 3 + 4) 10 + 20
Erased!
== 30

&gt;&gt; y
== 30
</code></pre>
<p>This can only be done when a function like ELIDE specially says that it is not expected to return any result at all.  Otherwise it's not clear whether <strong>y:</strong> is supposed to get the <code>~void~</code> isotope or something after it.</p>
<p>(Over time I embraced the odd idea that just saying RETURN and not giving it an argument would be the way of being purely invisible...which has the interesting property that <strong><code>(return some-other-function ...)</code></strong> can actually chain cases where the other function is sometimes purely invisible and sometimes not!  This insight arose because of the frustrating fact that C/C++ cannot do such chains... if you say <strong><code>return some_other_function(...);</code></strong> and then change the other function from returning <code>int</code> to <code>void</code>, it will complain that you cannot use <code>return</code> with an argument inside of void functions...even if that function itself returns void.)</p>
</li>
</ul>
<h2>Why Not Make "Impure" Invisibility Act "Pure" ("Semipure?")</h2>
<p>The existence of the ^META types and operators raises an interesting theoretical option...that a ~void~ isotope could be treated as pure by the evaluator, and it's your responsibility to use meta operations if you wanted to see it:</p>
<pre><code>&gt;&gt; 1 + 2 ~void~
== 1 + 2

&gt;&gt; x: ~void~ 1 + 2
== 3

&gt;&gt; x
== 3

&gt;&gt; y: ^ ~void~ 1 + 2
== 3

&gt;&gt; y
== ~void~
    ; ^-- not an isotope
</code></pre>
<p>Pondering the potential implications of this form of thinking, it would mean there wouldn't be a form of invisibility that could beat a ^META operation:</p>
<pre><code>&gt;&gt; z: ^ comment ["hi"] ~something~
== ~something~  ; isotope

&gt;&gt; z
== ~void~
   ; ^-- the COMMENT was seen by the ^META, instead of bypassed
   ; (today COMMENT's status as a purely invisible construct means you
   ; would get Z as a non-isotope ~something~)
</code></pre>
<p><strong>Note that since parameters to functions are allowed to be meta if they need to be, changing a parameter from normal to meta would break commenting constructs.</strong>  This is not too surprising, as if you have <code>my-function comment "hi" 1 + 2</code> and change MY-FUNCTION's argument to be quoted instead of evaluated, that's another kind of parameter change that would break the commenting feature.</p>
<p>Meta parameters should be used very sparingly--far more sparingly than quoted parameters--so this may not be a problem.  I notice that a function like RETURN (which takes its argument meta so it can return isotopes) could still chain an invisible function, as it would receive ~void~ as a measure of what an isotope was.</p>
<h2>If Truly Pure Invisibility Is Not Implemented, Would People Just Reinvent it with Variadics in a Less Efficient Way Than The Current Evaluator Internals Do It?</h2>
<p>Let's say someone writes:</p>
<pre><code>foo: func [] [return comment "hi" 1 + 2]
</code></pre>
<p>Today this returns 3 due to comment's "purely invisible" status, RETURN takes its argument as a ^META parameter.  If we decide meta parameters are allowed to see the "semipure" void isotopes described above, then it would just be like you'd written:</p>
<pre><code>foo: func [] [return comment "hi"]
</code></pre>
<p><strong>That would make it seem like COMMENT is unreliable.</strong>  True, if you take a quoted argument you expect COMMENT to break in such cases as well...but meta parameters are evaluative and so it's a bit different.</p>
<p>Perhaps it should be just the <strong>^</strong> operator at the callsite that has the special vision, and meta parameters are evaluated and discard the void isotopes.  This would mean you only have to learn the rule that <strong>^ comment "hi"</strong> breaks the invisibility.</p>
<p><em>(Here we wind up with <strong>^</strong> either being a built-in thing the user has no way to write themselves, or invent a "supermeta" parameter flag to say "I can see void isotopes, too".)</em></p>
<h2>Either way, "Impure Invisibility" Is MUCH Easier To Work With</h2>
<p>The easy meta-transformations between ~void~ isotopes and plain ~void~ BAD-WORD! allow you to work with an invisible function gracefully...even when you don't know if it's invisible or not.</p>
<p>Early problems cropped up with pure invisible COMMENT like this:</p>
<pre><code>&gt;&gt; f: make frame! :comment
&gt;&gt; f.discarded: "Ignore Me"

&gt;&gt; x: do f   y: 1 + 2
== 3

&gt;&gt; x
== 3  ; this could seem surprising, but maybe not?
</code></pre>
<p>But the new world does have at least <em>an</em> answer, meta your result and you can test for void cases and handle them as you wish.</p>
<pre><code>&gt;&gt; x: ^ do f  y: 1 + 2
== 3

&gt;&gt; x
== ~void~

; alternately could have said `[^x]: do f  y: 1 + 2`
</code></pre>
<p>Yet it's still uncomfortable to imagine that an operation like DO could vanish, which is why DO tried to use void isotopes as a proxy for its return value.  A ~void~ isotope could then be semantically interpreted or converted to pure invisibility on an as-needed basis.</p>
<h2>"If You Don't Know What You're Doing, Then Do It Meta"</h2>
<p>My urge to build safety into the system is driven by wanting to enable people to write generic code.</p>
<p>...but... trying to protect people from <strong><code>do f</code></strong> from vanishing when <strong><code>f</code></strong> is a FRAME! for the COMMENT function may be misguided.  That protection could be breaking the very cool trick they are trying to perform.</p>
<p>And there's a real complexity cost to having a distinction between pure and impure invisibility.  If you allow that distinction then impure invisibility has a meta form (a plain ~void~ BAD-WORD!) while pure invisibility doesn't have one.  The powerful tool of META therefore offers no answers for a purely invisible function.</p>
<p>Maybe things like DO should have a switch to say <strong>do/vanishable</strong> and that's the right protection, otherwise they error if they could vanish.  Same with <strong>unmeta</strong>?</p>
<p>Or maybe there's a better finesse, to say that the evaluator has some generalized protection which notices when you might have meant for an invisible result to be used, and there's generic mitigation for such cases.  Like with <strong><code>x: do f  y: 1 + 2</code></strong>, if it notices the potential for misunderstanding you can say <strong><code>x: vanishable do f y: 1 + 2</code></strong>...and you'd be provoked to decide if you wanted to use VANISHABLE or ^ based on what you were actually trying to accomplish.</p>
<p><em>That actually sounds like a really clever mitigation, if a word or symbol were picked for it!</em></p>
<hr>
<p><strong>This post has been in draft form for a while, as I let it turn over in my head.  But I think I am turning to feeling that void isotopes cannot be stored in variables but are something whose existence can only be philosophically imagined by seeing a meta state register as a plain ~void~ BAD-WORD!.  This is bolstered by the idea that function frames cannot receive isotopes, and parallels to the idea that ~null~ isotopes cannot be stored in variables either (though they decay to ordinary NULL)</strong></p> ]]></description>
        <link>https://forum.rebol.info/t/pure-vs-impure-invisibility-do-we-need-both/1782/1</link>
        <pubDate>Fri, 21 Jan 2022 09:19:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5731</guid>
      </item>
      <item>
        <title>Cggong</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <aside class="quote no-group" data-username="cggong" data-post="17" data-topic="1776">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/letter_avatar_proxy/v4/letter/c/71c47a/40.png" class="avatar"> cggong:</div>
<blockquote>
<p>Is there a way to run multiple instances of Ren-C interpreter in the same process?</p>
</blockquote>
</aside>
<p><em>At one time</em> I thought we'd try doing what the JavaScript V8 engine behind Chrome/Node/etc. uses, something called "isolates":</p>
<p><a href="https://stackoverflow.com/questions/29299397/whats-the-role-of-isolate-in-v8-and-how-can-it-be-possible-to-make-isolate" class="inline-onebox">javascript - What's the role of "Isolate" in V8? and how can it be possible to make "Isolate" isolately? - Stack Overflow</a></p>
<p>But the direction I imagine going in now is more like Go, e.g. "green threads" as a more cooperative way of letting the interpreter shuffle state around:</p>
<p><a href="https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/" class="inline-onebox">What Color is Your Function? – journal.stuffwithstuff.com</a><br>
<a href="https://forum.rebol.info/t/switching-to-stackless-why-this-why-now/1247" class="inline-onebox">Switching to Stackless: Why this, Why now?</a></p>
<p>So concurrency would be managed within the interpreter "service" itself--not as something that you'd have to do "locks" in native C code to surround on different threads.  This would allow for concurrency...though (probably) only one CPU core would be running the interpreter code; just shuffling between whichever tasks/threads that were requesting to use it.</p>
<p>I'm in constant transit, currently in a search for a new place to live, and that's taking up a lot of time.  So I don't really know what the timetable is on stackless, or much of anything at this point <img src="https://forum.rebol.info/images/emoji/twitter/hourglass_flowing_sand.png?v=9" title=":hourglass_flowing_sand:" class="emoji" alt=":hourglass_flowing_sand:"> <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=9" title=":frowning:" class="emoji" alt=":frowning:">  I'll see about getting around to my New Years status post shortly.</p> ]]></description>
        <link>https://forum.rebol.info/t/cggong/1776/18</link>
        <pubDate>Mon, 10 Jan 2022 23:52:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5730</guid>
      </item>
      <item>
        <title>Cggong</title>
        <dc:creator><![CDATA[@cggong Chengguang Gong]]></dc:creator>
        <description><![CDATA[ <blockquote>
<p>I'd really like to see us package up a "libRebol" .lib and .so as one of the build products made on GitHub Actions.</p>
</blockquote>
<p>Let me see how to add that when I have some time.</p>
<blockquote>
<p>use the existing TCC extension</p>
</blockquote>
<p>TCC does not support M1 chip. However, building libRebol to build a DSL interpreter is convenient and fits my needs. I'm very happy with this and I would like to try this approach for iOS game development as well.</p>
<p>There was a question I was thinking about yesterday... Is there a way to run multiple instances of Ren-C interpreter in the same process? This is easy in Lua but hard in Python. If I have multiple DSLs in my app, I might (or might not) want multiple instances of Ren-C interpreter. I haven't thought about it deeply enough to make sure whether this is desirable; if there is multiple instances of Ren-C, it creates the problem how to interoperate among them. I haven't come up with any situation that particularly requires multiple Ren-C instances, so just asking to see if this has been considered before.</p> ]]></description>
        <link>https://forum.rebol.info/t/cggong/1776/17</link>
        <pubDate>Fri, 07 Jan 2022 02:39:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5729</guid>
      </item>
      <item>
        <title>Cggong</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <aside class="quote no-group" data-username="cggong" data-post="14" data-topic="1776">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/letter_avatar_proxy/v4/letter/c/71c47a/40.png" class="avatar"> cggong:</div>
<blockquote>
<p>To support calling GTK from Ren-C, I'm planning to implement this following mechanism that allows a C program to define functions that can be called from Ren-C</p>
</blockquote>
</aside>
<p>I'm glad you've been able to be a self-starter with the codebase while I've been away!   <img src="https://forum.rebol.info/images/emoji/twitter/building_construction.png?v=9" title=":building_construction:" class="emoji" alt=":building_construction:"></p>
<p>Hopefully there are enough comments sprinkled around to give you a sense of what's going on, but don't hesitate to ask questions.</p>
<p><strong>I really, really want people to be thinking along the lines of automated builds and tests for their projects that use Ren-C.</strong></p>
<p>And I'd really like to see us package up a "libRebol" .lib and .so as one of the build products made on GitHub Actions.</p> ]]></description>
        <link>https://forum.rebol.info/t/cggong/1776/16</link>
        <pubDate>Wed, 05 Jan 2022 16:12:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5728</guid>
      </item>
      <item>
        <title>Cggong</title>
        <dc:creator><![CDATA[@cggong Chengguang Gong]]></dc:creator>
        <description><![CDATA[ <p>Instead of putting the above code into a new extension, another possible way would be to use the existing TCC extension to compile the code dynamically. It would be great to leverage existing features without having to fork / extend Ren-C.</p> ]]></description>
        <link>https://forum.rebol.info/t/cggong/1776/15</link>
        <pubDate>Tue, 04 Jan 2022 09:45:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5727</guid>
      </item>
      <item>
        <title>Cggong</title>
        <dc:creator><![CDATA[@cggong Chengguang Gong]]></dc:creator>
        <description><![CDATA[ <p>I have linked libPython into my program to take care of some networking task. Moving on to the GUI part.<br>
To support calling GTK from Ren-C, I'm planning to implement this following mechanism that allows a C program to define functions that can be called from Ren-C, provided that</p>
<ul>
<li>the function symbol is not stripped in the executable, so that it can be found by <a href="https://man7.org/linux/man-pages/man3/dlsym.3.html" rel="noopener nofollow ugc"><code>dlsym()</code></a> from libRen-C</li>
<li>the function takes a Rebol block as argument</li>
</ul>
<p>The mechanism is implemented by adding a Ren-C native extension function <code>extension-custom</code>. It's callable from Rebol and implemented in C. From Rebol, it takes  2 arguments,</p>
<ol>
<li>function name as string,</li>
<li>arguments as block.</li>
</ol>
<p>The implementation simply calls <code>dlsym()</code> to get the function pointer by function name and call it with arguments.</p> ]]></description>
        <link>https://forum.rebol.info/t/cggong/1776/14</link>
        <pubDate>Mon, 03 Jan 2022 01:14:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5721</guid>
      </item>
      <item>
        <title>Cggong</title>
        <dc:creator><![CDATA[@gchiu]]></dc:creator>
        <description><![CDATA[ <p>Historically, Rebol/View used the <a href="https://github.com/ghaerr/agg-2.6">AGG</a> 2-D graphics library but Maxim, the author, died in 2013 apparently during an epileptic seizure.  So, a replacement library was sought.  Zeng Shixin, who seemed to be the lead developer for Atronix, was doing some work to port to GTK and it's in a different <a href="https://github.com/zsx/c2r3/tree/master/demos/gtk-demos">repo</a></p>
<p>Feel free to share your projects!</p> ]]></description>
        <link>https://forum.rebol.info/t/cggong/1776/13</link>
        <pubDate>Tue, 28 Dec 2021 03:16:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5719</guid>
      </item>
      <item>
        <title>Cggong</title>
        <dc:creator><![CDATA[@cggong Chengguang Gong]]></dc:creator>
        <description><![CDATA[ <p>I tried some simple GUI with the Atronix branch before. It worked but the GUI doesn't look too nice. I would like a more aesthetically pleasing GUI. For now it seems GTK would make sense.<br>
I just built Ren-C for my M1 MacBook and linked my GTK app with Ren-C. It works! I used the x86_64 Mac Ren-C binary for bootstrapping; Rosetta2 would run it. The script produced x86_64 object files and executable. I manually ran the gcc commands again and it was able to produce arm64 object files and executables, and I was able to link it to my application.</p> ]]></description>
        <link>https://forum.rebol.info/t/cggong/1776/12</link>
        <pubDate>Mon, 27 Dec 2021 03:11:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5718</guid>
      </item>
      <item>
        <title>Cggong</title>
        <dc:creator><![CDATA[@gchiu]]></dc:creator>
        <description><![CDATA[ <p>I don't know how familiar you are with the gui but only atronix have an active branch</p>
<aside class="onebox githubfolder">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">
      <a href="https://github.com/zsx/r3-gui/tree/master/source" target="_blank" rel="noopener">github.com</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/345;"><img src="https://opengraph.githubassets.com/902f7f5e4a15ff9d90e9fadfd24bb4f96481e70c4cd98059538e598132045a89/zsx/r3-gui" class="thumbnail" width="690" height="345"></div>

<h3><a href="https://github.com/zsx/r3-gui/tree/master/source" target="_blank" rel="noopener">r3-gui/source at master · zsx/r3-gui</a></h3>

<p><a href="https://github.com/zsx/r3-gui/tree/master/source" target="_blank" rel="noopener">master/source</a></p>

  <p><span class="label1">Saphirion's R3-GUI source mainline. Contribute to zsx/r3-gui development by creating an account on GitHub.</span></p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>But they never kept up the the changes made to renc so that's we don't have a GUI in ren-c.  Also Brian excised all the code that supported the GUI to make it cleaner.</p> ]]></description>
        <link>https://forum.rebol.info/t/cggong/1776/11</link>
        <pubDate>Thu, 23 Dec 2021 07:26:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5717</guid>
      </item>
      <item>
        <title>Cggong</title>
        <dc:creator><![CDATA[@gchiu]]></dc:creator>
        <description><![CDATA[ <p>Do you mean r2 view?  Because r2 VID's sources are readily available for inspection.</p>
<p>And although r2 View C sources weren't available, more likely than not a lot of it was used by Carl for the r3 View which is open source.</p> ]]></description>
        <link>https://forum.rebol.info/t/cggong/1776/10</link>
        <pubDate>Thu, 23 Dec 2021 02:25:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5716</guid>
      </item>
      <item>
        <title>Cggong</title>
        <dc:creator><![CDATA[@cggong Chengguang Gong]]></dc:creator>
        <description><![CDATA[ <p>Thanks all for the welcome <img src="https://forum.rebol.info/images/emoji/twitter/smile.png?v=9" title=":smile:" class="emoji" alt=":smile:"></p>
<p>I still find myself missing Rebol2-GUI. It does not work on macOS Catalina or above. I was trying to migrate it to work on newer macOS. Unfortunately, the license of Rebol2-GUI mentions that "You may not reverse engineer, decompile, or disassemble the software," let alone the IP and redistribution clauses <img src="https://forum.rebol.info/images/emoji/twitter/cry.png?v=9" title=":cry:" class="emoji" alt=":cry:"> I'll probably submit a contact form to figure out the legal aspects of migrating it to newer macOS.</p> ]]></description>
        <link>https://forum.rebol.info/t/cggong/1776/9</link>
        <pubDate>Thu, 23 Dec 2021 01:14:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5715</guid>
      </item>
      <item>
        <title>Cggong</title>
        <dc:creator><![CDATA[@iArnold Arnold]]></dc:creator>
        <description><![CDATA[ <p>There could be a difference here. When making just an application you know what fields to use and you can build this in C right away. In my case I want all to be done dynamically from within the Rebol code. But that discussion can be continued in a better place than the introductions here.</p>
<p>Again welcome cggong <img src="https://forum.rebol.info/images/emoji/twitter/grinning_face_with_smiling_eyes.png?v=9" title=":grinning_face_with_smiling_eyes:" class="emoji" alt=":grinning_face_with_smiling_eyes:"></p> ]]></description>
        <link>https://forum.rebol.info/t/cggong/1776/8</link>
        <pubDate>Wed, 22 Dec 2021 06:56:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5714</guid>
      </item>
      <item>
        <title>Cggong</title>
        <dc:creator><![CDATA[@gchiu]]></dc:creator>
        <description><![CDATA[ <p>Maybe <a class="mention" href="/u/cggong">@cggong</a>  can share his code?</p> ]]></description>
        <link>https://forum.rebol.info/t/cggong/1776/7</link>
        <pubDate>Wed, 22 Dec 2021 00:06:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5713</guid>
      </item>
      <item>
        <title>Cggong</title>
        <dc:creator><![CDATA[@iArnold Arnold]]></dc:creator>
        <description><![CDATA[ <p>Welcome cggong!</p>
<aside class="quote no-group" data-username="cggong" data-post="1" data-topic="1776">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/letter_avatar_proxy/v4/letter/c/71c47a/40.png" class="avatar"> cggong:</div>
<blockquote>
<p>I'm building a C GUI application with GTK and Ren-C</p>
</blockquote>
</aside>
<p>Some time ago I started working on adding GTK3 for view to Ren-C . Got a bit stuck on the callbacks and since I started my new job I practically have had no time to spend looking into it <img src="https://forum.rebol.info/images/emoji/twitter/weight_lifting_man.png?v=9" title=":weight_lifting_man:" class="emoji" alt=":weight_lifting_man:">‍♀</p> ]]></description>
        <link>https://forum.rebol.info/t/cggong/1776/6</link>
        <pubDate>Tue, 21 Dec 2021 21:02:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5712</guid>
      </item>
      <item>
        <title>JS testing with Cypress.io</title>
        <dc:creator><![CDATA[@gchiu]]></dc:creator>
        <description><![CDATA[ <p>I will eventually have to port my Red GUI database front end and so I was looking for testing tools.  I came across <a href="https://cypress.io">https://cypress.io</a> which seems to be fully featured though it may be more demanding of JS knowledge than I have.</p>
<p>Anyway, here's a short script to open up the replpad, and start the chess demo though I had to increase the default timeout from 4 to 5 seconds</p>
<blockquote>
<p>describe('Test the replpad', () =&gt; {<br>
it('Visits Replpad', () =&gt; {<br>
cy.visit(<code>'http://hostilefork.com/media/shared/replpad-js/'</code>)<br>
cy.get('.input').type('do &lt;chess&gt;{enter}')<br>
})<br>
})</p>
</blockquote>
<p>So, it opens a browser instance to the replpad, waits until loading is complete, and then waits until the dom has the <code>.input</code> element present.  It then types the chess command.  The chess board then pops up.</p>
<p>Here's a quick <a href="https://filiphric.com/cypress-basics-selecting-elements">tutorial</a> on how to select elements.</p>
<p>Installation is just simply</p>
<pre><code>npm install cypress --save-dev
</code></pre>
<p>but of course on Windows, you'll need to install node.js</p>
<p>And there's <a href="https://docs.cypress.io/guides/continuous-integration/github-actions#Basic-Setup">information</a> on how to use with GitHub actions</p> ]]></description>
        <link>https://forum.rebol.info/t/js-testing-with-cypress-io/1778/1</link>
        <pubDate>Tue, 21 Dec 2021 06:56:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5711</guid>
      </item>
      <item>
        <title>Cggong</title>
        <dc:creator><![CDATA[@gchiu]]></dc:creator>
        <description><![CDATA[ <aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1776">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Indeed. Well if you have time at some point, I'd be willing to do a web-screen-sharing meeting where I could do a bit of demo'ing of high points and rapid Q&amp;A to bring you up to speed on anything you're curious about.</p>
</blockquote>
</aside>
<p>It's about time we had another Re-Meet where this could be conducted under the auspices but sadly youtube is blocked in China.</p>
<p>But if you have a decent VPN, the playlist is here</p>
<p>            <iframe width="480" height="360" src="https://www.youtube.com/embed/videoseries?list=PLv-UC_v9RqgHAZBa4C1geV7QiNoTQGX-S&amp;wmode=transparent&amp;rel=0&amp;autohide=1&amp;showinfo=1&amp;enablejsapi=1" frameborder="0" allowfullscreen="" seamless="seamless" sandbox="allow-same-origin allow-scripts allow-forms allow-popups allow-popups-to-escape-sandbox allow-presentation"></iframe>
</p> ]]></description>
        <link>https://forum.rebol.info/t/cggong/1776/5</link>
        <pubDate>Tue, 21 Dec 2021 06:46:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5710</guid>
      </item>
      <item>
        <title>Cggong</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <aside class="quote no-group" data-username="cggong" data-post="3" data-topic="1776">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/letter_avatar_proxy/v4/letter/c/71c47a/40.png" class="avatar"> cggong:</div>
<blockquote>
<p>I have saved enough money and the cost of living here is not high, so I don't have to worry about money. I can afford to do things right instead of trying to get a task done. I'm a Buddhism practitioner and programming (as well as any other aspect of my life) needs to adhere to Buddhism.</p>
</blockquote>
</aside>
<p>Maybe a good fit, then!  Hopefully you got a chance to look at the 2019 conference videos, but I gave a couple of talks on the "Amish" nature of programming, as well as the pursuit of "Timeless" character:</p>
<p><a href="http://2019.reb4.me/talks" class="inline-onebox">Talks | Rebol [2019]</a></p>
<p>(and my detailed talk there with slides has some mostly-up-to-date information, which is a good place to look if you're going to be trying to understand any of the C.)</p>
<aside class="quote no-group" data-username="cggong" data-post="3" data-topic="1776">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/letter_avatar_proxy/v4/letter/c/71c47a/40.png" class="avatar"> cggong:</div>
<blockquote>
<p>I discovered that definitional scoping is right, so I choose to express my thought in languages with definitional scoping.</p>
</blockquote>
</aside>
<p>Binding has been one of the big enigmas, and Ren-C has been exploring a lot of techniques.  A good recent summary of things is in <strong><a href="https://forum.rebol.info/t/rebol-and-scopes-well-why-not/1751">Rebol and Scopes: Why Not?</a></strong></p>
<aside class="quote no-group" data-username="cggong" data-post="3" data-topic="1776">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/letter_avatar_proxy/v4/letter/c/71c47a/40.png" class="avatar"> cggong:</div>
<blockquote>
<p>Yes, I'm aware that Rebol derived languages are a less treaded space.</p>
</blockquote>
</aside>
<p>Indeed.  Well if you have time at some point, I'd be willing to do a web-screen-sharing meeting where I could do a bit of demo'ing of high points and rapid Q&amp;A to bring you up to speed on anything you're curious about.</p> ]]></description>
        <link>https://forum.rebol.info/t/cggong/1776/4</link>
        <pubDate>Thu, 16 Dec 2021 13:47:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5708</guid>
      </item>
  </channel>
</rss>

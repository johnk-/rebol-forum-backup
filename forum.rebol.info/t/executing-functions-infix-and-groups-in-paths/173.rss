<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Executing Functions, Infix, and Groups in Paths</title>
    <link>https://forum.rebol.info/t/executing-functions-infix-and-groups-in-paths/173</link>
    <description>Historically it is not possible to dispatch infix functions from a path.  In Ren-C it&#39;s very nearly technically possible, with one problem: so long as PATH! can contain a GROUP!, it can&#39;t be &quot;sniffed&quot; for whether it looks up to an infix function without potentially having side effects.

Consider, for example:

    do/next [1 foo/(print &quot;Hi&quot; &#39;bar) 2]

Let&#39;s say we want to think that if foo/bar looks up to something like infix addition, that should print &quot;Hi&quot; and be 3.  If it is some prefix arity one function, it should print nothing and return 1.

The evaluator isn&#39;t designed to be able to predict the future in this way; you can&#39;t find out what `foo/(print &quot;Hi&quot; &#39;bar)` will look up to without evaluating the GROUP!.  You don&#39;t want pure lookahead to have side effects. And really this is the technical dilemma in having paths dispatch enfixed functions.

One possibility I&#39;ve suggested is to disallow GROUP! under DO in paths unless you use a GET-PATH! or SET-PATH!.  Since a GET-PATH! cannot dispatch a function, the problem goes away.  If you needed function dispatch you could still get it with EVAL:

    do/next [1 eval :foo/(print &quot;Hi&quot; &#39;bar) 2]

But since there&#39;s only one FUNCTION! type and its only variables that hold enfixedness, that would not be enfix.

&gt; Note: We could have an `enval` operation (possibly bad name), which is an enfixed variadic, and would gather its left hand argument and then use its first right hand argument to determine how to interpret its parameters...effectively letting you signal an enfix execution.   e.g. `1 enval :add 2` =&gt; 3

**So how bad would it be if you could not--in the DO dialect--use a GROUP! in a path unless it was a GET-PATH! or SET-PATH!?**  Is it worth it to allow a regular PATH! to honor the enfix bit of its target?</description>
    
    <lastBuildDate>Thu, 29 Jun 2017 16:57:17 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/executing-functions-infix-and-groups-in-paths/173.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Executing Functions, Infix, and Groups in Paths</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Historically it is not possible to dispatch infix functions from a path.  In Ren-C it's very nearly technically possible, with one problem: so long as PATH! can contain a GROUP!, it can't be "sniffed" for whether it looks up to an infix function without potentially having side effects.</p>
<p>Consider, for example:</p>
<pre><code>do/next [1 foo/(print "Hi" 'bar) 2]
</code></pre>
<p>Let's say we want to think that if foo/bar looks up to something like infix addition, that should print "Hi" and be 3.  If it is some prefix arity one function, it should print nothing and return 1.</p>
<p>The evaluator isn't designed to be able to predict the future in this way; you can't find out what <code>foo/(print "Hi" 'bar)</code> will look up to without evaluating the GROUP!.  You don't want pure lookahead to have side effects. And really this is the technical dilemma in having paths dispatch enfixed functions.</p>
<p>One possibility I've suggested is to disallow GROUP! under DO in paths unless you use a GET-PATH! or SET-PATH!.  Since a GET-PATH! cannot dispatch a function, the problem goes away.  If you needed function dispatch you could still get it with EVAL:</p>
<pre><code>do/next [1 eval :foo/(print "Hi" 'bar) 2]
</code></pre>
<p>But since there's only one FUNCTION! type and its only variables that hold enfixedness, that would not be enfix.</p>
<blockquote>
<p>Note: We could have an <code>enval</code> operation (possibly bad name), which is an enfixed variadic, and would gather its left hand argument and then use its first right hand argument to determine how to interpret its parameters...effectively letting you signal an enfix execution.   e.g. <code>1 enval :add 2</code> =&gt; 3</p>
</blockquote>
<p><strong>So how bad would it be if you could not--in the DO dialect--use a GROUP! in a path unless it was a GET-PATH! or SET-PATH!?</strong>  Is it worth it to allow a regular PATH! to honor the enfix bit of its target?</p>
          <p><a href="https://forum.rebol.info/t/executing-functions-infix-and-groups-in-paths/173/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/executing-functions-infix-and-groups-in-paths/173/1</link>
        <pubDate>Thu, 29 Jun 2017 16:57:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-173-1</guid>
        <source url="https://forum.rebol.info/t/executing-functions-infix-and-groups-in-paths/173.rss">Executing Functions, Infix, and Groups in Paths</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should the C sources say `++foo` or `++ foo` ?</title>
    <link>https://forum.rebol.info/t/should-the-c-sources-say-foo-or-foo/1200</link>
    <description>Generally speaking, the Ren-C sources try to adhere to the same kind of rules that Rebol uses.  So instead of writing `(x+y)` the code uses `(x + y)`, believing this is more legible.

It also embraces the idea of macros that define `and` for `&amp;&amp;`, and `not` for `!`.  In addition to these being defined in C++ since the original C++98 standard as &quot;alternative tokens&quot;, the C track has an ISO standard header for it, so you can `#include &lt;iso646.h&gt;` if you like:

[https://en.wikipedia.org/wiki/C_alternative_tokens](https://en.wikipedia.org/wiki/C_alternative_tokens)

In the C++ world, there are good reasons for preferring pre-increment and pre-decrement to post (all things being equal).  While it doesn&#39;t matter in C it&#39;s good to stay in a good habit:

https://stackoverflow.com/questions/30036749/is-it-still-better-to-prefer-pre-increment-over-post-increment

So I&#39;ve habitually changed `foo++` to `++foo` when I see it, assuming it doesn&#39;t change the semantics.

But another maybe-seemingly-frivolous question arises, of if it would be better to put a space there?  `++ foo`?  Is it a readability advantage that C programmers have been missing out on?  Or is it wasteful and out of touch?

Hard to tell, as many people do like to say `x=y+1020;`, where we say `x = y + 1020;`.  It seems natural that the sources for a language that believes in space significance would do so, I&#39;m just curious what the operating rule for why this wouldn&#39;t apply to `++` and `--` would come from.</description>
    
    <lastBuildDate>Thu, 29 Aug 2019 18:04:55 +0000</lastBuildDate>
    <category>Foreign Inspiration</category>
    <atom:link href="https://forum.rebol.info/t/should-the-c-sources-say-foo-or-foo/1200.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should the C sources say `++foo` or `++ foo` ?</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>Even better redefine every C++ into its Rebol counterpart. We could then write Rebol programs and compile all using gcc.</p>
          <p><a href="https://forum.rebol.info/t/should-the-c-sources-say-foo-or-foo/1200/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-the-c-sources-say-foo-or-foo/1200/5</link>
        <pubDate>Thu, 29 Aug 2019 18:04:55 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1200-5</guid>
        <source url="https://forum.rebol.info/t/should-the-c-sources-say-foo-or-foo/1200.rss">Should the C sources say `++foo` or `++ foo` ?</source>
      </item>
      <item>
        <title>Should the C sources say `++foo` or `++ foo` ?</title>
        <dc:creator><![CDATA[Mark-hi]]></dc:creator>
        <description><![CDATA[
            <p>Why not: <span class="hashtag">#define</span> up ++</p>
          <p><a href="https://forum.rebol.info/t/should-the-c-sources-say-foo-or-foo/1200/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-the-c-sources-say-foo-or-foo/1200/4</link>
        <pubDate>Thu, 29 Aug 2019 12:02:09 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1200-4</guid>
        <source url="https://forum.rebol.info/t/should-the-c-sources-say-foo-or-foo/1200.rss">Should the C sources say `++foo` or `++ foo` ?</source>
      </item>
      <item>
        <title>Should the C sources say `++foo` or `++ foo` ?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="1200">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/iarnold/40/226_2.png" class="avatar"> iArnold:</div>
<blockquote>
<p>it will not so much be improved with x = ++ y + 2 over x = ++y + 2.</p>
</blockquote>
</aside>
<p>Agreed, however, I don't like expresions like that.  So all the instances are on lines by themselves:</p>
<pre><code>SomeFunction(a, b, c);
++ b;
SomeOtherFunction(b);
</code></pre>
<p>Or they are increments in loops:</p>
<pre><code>for (; x &lt; 10; ++ x) {
    ...
}
</code></pre>
<p>Anyway, I'm not going on a crusade to change it at the moment.  But I did have a few places where I'd tried it to see what I thought about it.  For a C programmer it's very hard to see that as "correct", I'm just wondering how much of that is habit.</p>
          <p><a href="https://forum.rebol.info/t/should-the-c-sources-say-foo-or-foo/1200/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-the-c-sources-say-foo-or-foo/1200/3</link>
        <pubDate>Thu, 29 Aug 2019 10:30:08 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1200-3</guid>
        <source url="https://forum.rebol.info/t/should-the-c-sources-say-foo-or-foo/1200.rss">Should the C sources say `++foo` or `++ foo` ?</source>
      </item>
      <item>
        <title>Should the C sources say `++foo` or `++ foo` ?</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>The source is C++ code, so where readability for us as REBOL developers is improved by writing x = y + 2<br>
it will not so much be improved with x = ++ y + 2 over x = ++y + 2.<br>
Personally I prefer to have y = y + 1; x = y + 2; because I always doubt if y will be updated after x = ++y + 2 or that only the result of ++y has been used to calculate x.</p>
          <p><a href="https://forum.rebol.info/t/should-the-c-sources-say-foo-or-foo/1200/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-the-c-sources-say-foo-or-foo/1200/2</link>
        <pubDate>Thu, 29 Aug 2019 10:05:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1200-2</guid>
        <source url="https://forum.rebol.info/t/should-the-c-sources-say-foo-or-foo/1200.rss">Should the C sources say `++foo` or `++ foo` ?</source>
      </item>
      <item>
        <title>Should the C sources say `++foo` or `++ foo` ?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Generally speaking, the Ren-C sources try to adhere to the same kind of rules that Rebol uses.  So instead of writing <code>(x+y)</code> the code uses <code>(x + y)</code>, believing this is more legible.</p>
<p>It also embraces the idea of macros that define <code>and</code> for <code>&amp;&amp;</code>, and <code>not</code> for <code>!</code>.  In addition to these being defined in C++ since the original C++98 standard as "alternative tokens", the C track has an ISO standard header for it, so you can <code>#include &lt;iso646.h&gt;</code> if you like:</p>
<p><a href="https://en.wikipedia.org/wiki/C_alternative_tokens">https://en.wikipedia.org/wiki/C_alternative_tokens</a></p>
<p>In the C++ world, there are good reasons for preferring pre-increment and pre-decrement to post (all things being equal).  While it doesn't matter in C it's good to stay in a good habit:</p>
<aside class="onebox stackexchange">
  <header class="source">
      <a href="https://stackoverflow.com/questions/30036749/is-it-still-better-to-prefer-pre-increment-over-post-increment" target="_blank" rel="noopener">stackoverflow.com</a>
  </header>
  <article class="onebox-body">
      <a href="https://stackoverflow.com/users/315052/jxh" target="_blank" rel="noopener">
    <img alt="jxh" src="https://i.stack.imgur.com/AB5ST.png?s=128&amp;g=1" class="thumbnail onebox-avatar" width="128" height="128">
  </a>
<h4>
  <a href="https://stackoverflow.com/questions/30036749/is-it-still-better-to-prefer-pre-increment-over-post-increment" target="_blank" rel="noopener">Is it still better to prefer pre-increment over post-increment?</a>
</h4>

<div class="tags">
  <strong>c++, optimization</strong>
</div>

<div class="date">
  asked by
  
  <a href="https://stackoverflow.com/users/315052/jxh" target="_blank" rel="noopener">
    jxh
  </a>
  on <a href="https://stackoverflow.com/questions/30036749/is-it-still-better-to-prefer-pre-increment-over-post-increment" target="_blank" rel="noopener">05:59PM - 04 May 15 UTC</a>
</div>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>So I've habitually changed <code>foo++</code> to <code>++foo</code> when I see it, assuming it doesn't change the semantics.</p>
<p>But another maybe-seemingly-frivolous question arises, of if it would be better to put a space there?  <code>++ foo</code>?  Is it a readability advantage that C programmers have been missing out on?  Or is it wasteful and out of touch?</p>
<p>Hard to tell, as many people do like to say <code>x=y+1020;</code>, where we say <code>x = y + 1020;</code>.  It seems natural that the sources for a language that believes in space significance would do so, I'm just curious what the operating rule for why this wouldn't apply to <code>++</code> and <code>--</code> would come from.</p>
          <p><a href="https://forum.rebol.info/t/should-the-c-sources-say-foo-or-foo/1200/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-the-c-sources-say-foo-or-foo/1200/1</link>
        <pubDate>Thu, 29 Aug 2019 08:53:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1200-1</guid>
        <source url="https://forum.rebol.info/t/should-the-c-sources-say-foo-or-foo/1200.rss">Should the C sources say `++foo` or `++ foo` ?</source>
      </item>
  </channel>
</rss>

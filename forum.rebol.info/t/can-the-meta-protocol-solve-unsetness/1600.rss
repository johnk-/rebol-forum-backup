<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Can The ^Meta Protocol Solve Unsetness?!?!</title>
    <link>https://forum.rebol.info/t/can-the-meta-protocol-solve-unsetness/1600</link>
    <description>Just had a flash :cloud_with_lightning: of inspiration, by thinking about a potential difference between these two things:

    x: &#39;~unset~
    y: ~unset~

The first is legal and puts a BAD-WORD! into the variable x.

Right now, the second is an error...because the evaluator doesn&#39;t like executing BAD-WORD!s.  

But what if the second did not put a typical BAD-WORD! into y, but put it into a distinctly &quot;unset&quot; state?  And what if many contexts couldn&#39;t tell the difference...but ^-based detection could tell the difference?

    &gt;&gt; ^x
    == &#39;~unset~

    &gt;&gt; ^y
    == ~unset~

It&#39;s very much parallel to how ~void~ is shaping up as having a kind of dual nature.  Some functions are invisible, and some modes of calling those invisible functions give ~void~ when it needs a reified result.  Other functions are not invisible, but return ~void~ as a way of saying that they don&#39;t have a meaningful result.  When you flip into modes where you care which it is...you shift into a quoted domain, where the unquoted ~void~ is a special non-valued signal.  *Void isotopes, basically.*

I&#39;ll have to turn this over in my head a few times, but on the surface of it... *this feels like the solution we&#39;ve been waiting for*.  Unset isotopes.

Stay tuned.</description>
    
    <lastBuildDate>Wed, 07 Jul 2021 21:54:16 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/can-the-meta-protocol-solve-unsetness/1600.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Can The ^Meta Protocol Solve Unsetness?!?!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Just had a flash <img src="https://forum.rebol.info/images/emoji/twitter/cloud_with_lightning.png?v=9" title=":cloud_with_lightning:" class="emoji" alt=":cloud_with_lightning:"> of inspiration, by thinking about a potential difference between these two things:</p>
<pre><code>x: '~unset~
y: ~unset~
</code></pre>
<p>The first is legal and puts a BAD-WORD! into the variable x.</p>
<p>Right now, the second is an error...because the evaluator doesn't like executing BAD-WORD!s.</p>
<p>But what if the second did not put a typical BAD-WORD! into y, but put it into a distinctly "unset" state?  And what if many contexts couldn't tell the difference...but ^-based detection could tell the difference?</p>
<pre><code>&gt;&gt; ^x
== '~unset~

&gt;&gt; ^y
== ~unset~
</code></pre>
<p>It's very much parallel to how ~void~ is shaping up as having a kind of dual nature.  Some functions are invisible, and some modes of calling those invisible functions give ~void~ when it needs a reified result.  Other functions are not invisible, but return ~void~ as a way of saying that they don't have a meaningful result.  When you flip into modes where you care which it is...you shift into a quoted domain, where the unquoted ~void~ is a special non-valued signal.  <em>Void isotopes, basically.</em></p>
<p>I'll have to turn this over in my head a few times, but on the surface of it... <em>this feels like the solution we've been waiting for</em>.  Unset isotopes.</p>
<p>Stay tuned.</p>
          <p><a href="https://forum.rebol.info/t/can-the-meta-protocol-solve-unsetness/1600/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/can-the-meta-protocol-solve-unsetness/1600/1</link>
        <pubDate>Fri, 07 May 2021 11:32:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1600-1</guid>
        <source url="https://forum.rebol.info/t/can-the-meta-protocol-solve-unsetness/1600.rss">Can The ^Meta Protocol Solve Unsetness?!?!</source>
      </item>
  </channel>
</rss>

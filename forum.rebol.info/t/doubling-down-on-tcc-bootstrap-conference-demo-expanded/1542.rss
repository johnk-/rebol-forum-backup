<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Doubling-Down on TCC Bootstrap: Conference Demo Expanded!</title>
    <link>https://forum.rebol.info/t/doubling-down-on-tcc-bootstrap-conference-demo-expanded/1542</link>
    <description>*cc: interested irregular forum readers, or, at least irregular posters... (e.g. @MarkI, @giluiolunati)*

In doing some prioritization, I posted about putting aside FFI, ZeroMQ, and the Serial port...since none of those are particularly mission-critical.  They did exercise some code, but they no longer represented any particular exercise that wasn&#39;t already covered elsewhere.  Limited efforts are better focused on things that will matter to more people (e.g. the web build).

**But one effort that is a big deal that I wanted to preserve is the TCC Extension, as well as the concept of being able to build the interpreter itself with TCC.**  As I demonstrated in July 2019, those two things add up to being able to download the source code and bootstrap a new interpreter with no build tools on your system besides a single &quot;r3-with-tcc&quot; executable&lt;sup&gt;**1**&lt;/sup&gt;.

*(1) Well, you need the libc headers and include files and libs for your OS.  Things we require like `&lt;string.h&gt;`.  If we wanted to be masochistic, we could get into the business of zipping those up and either pulling them off the web via TLS/HTTPS/Unzip.reb or encapping them into the executable.  If we were to do this, we should look into doing it with [musl](https://musl.libc.org/about.html) and not the likes of GNU&#39;s glibc.*

So I slogged through to make a turnkey version of [the conference demo](https://youtu.be/PT3GOe1pj9I?t=163).  It&#39;s new and improved, and you can run it right from your Linux desktop, if you feel like it.

## Single-EXE Bootstrap...Now Reproduced As A GitHub Action!

It&#39;s now more streamlined...automated, reproducible, and broken into sections.  You can see these sections in the GitHub continuous integration run:

**[https://github.com/metaeducation/ren-c/runs/2044725810](https://github.com/metaeducation/ren-c/runs/2044725810)**

The script behind this is really just doing a few basic steps, which I will paraphrase here:

     # Install TCC and the libraries for embedding TCC services into C programs
     sudo apt install tcc libtcc-dev

     # Use TCC (and prebuilt R3 as make tool) to build a TCC-capable interpreter
     $R3_MAKE make.r config=configs/tcc.r extensions=&quot;TCC +&quot;

     # Keep just the executable we made (call it r3-with-tcc for clarity)
     cp build/r3 ./r3-with-tcc

     # Now, you can throw away the prebuilt R3_MAKE tool and TCC executable
     rm $R3_MAKE
     sudo apt remove tcc  # keep the `libtcc-dev` for embedding TCC in C programs

     # Delete the source code that was cloned via git
     rm &lt;all the sources&gt;

     # Now use the sole executable to bootstrap itself, pulling the source code
     # down from GitHub over HTTPS as a .ZIP, unzipping it with the embedded
     # unzip.r, and rigging up the r3-with-tcc executable to act as an impromptu
     # interpreter of C99 command lines.
     ./r3-with-tcc &quot;bootstrap&quot;

After doing basically just that, your build/r3 is now a newly minted r3-with-tcc...which could continue doing this bootstrap process indefinitely!

You can read the actual workflow script here: [%tcc-build.yml](https://github.com/metaeducation/ren-c/blob/master/.github/workflows/tcc-build.yml)

It does a few more things, including using the &quot;build matrix&quot; to do one run with `debug=none` and another with `debug=normal`.  It runs a few tests, but the real big test here is just the build in and of itself!  That exercises an insane amount of code.

## More Rigorous Than The Conference Demo

This took a couple days of pretty intense work.  I&#39;d sort of hacked the demo together the day before the conference, so it needed to be made less ad-hoc.  But also, there have been some changes which needed to be worked through...mbedTLS wasn&#39;t being used in 2019, so it hadn&#39;t been run through this.  There are little issues that come up with new things.

Plus, I started the presentation with a prebuilt r3-with-tcc that I used...but I had built that using GCC (not TCC).  And I didn&#39;t build the TCC extension into the bootstrapped executable, so it would not be capable of continuing the process.  There wasn&#39;t any demo of this being a &quot;sustainable&quot; bootstrap.

But here it is, done legit.

## Lots Still To Do...

We&#39;re well aware that Rebmake is a beast, [and something needs to be done about that](https://forum.rebol.info/t/new-build-executables-new-build-strategy/1432).  But seeing one make tool written entirely in Ren-C points to the idea that it could be improved.  It sets a baseline and we can just keep aiming for it.

Performance is getting pretty bad, due to virtual binding and LET and other things that are still getting hammered out.  And that needs to be attacked, but the user experience has to be reasoned through completely first.  Once we decide something is simply not the way things should work--like FUNCTION auto-gathering SET-WORD!s deeply through the body--then trying other approaches is the only sane response.  *(If there&#39;s advantages to plunging forward with known broken things just for the sake of being first-to-market, Rebol2 would have found them...or Red will be finding them... #goodluckwiththat)*.  Outside of the performance issues, LET is looking mostly promising.

But the more we can hone this experience, I think the better the system coheres on its message, and so I&#39;m comfortable with pushing this through and taking the time to do it.</description>
    
    <lastBuildDate>Sat, 06 Mar 2021 05:53:42 +0000</lastBuildDate>
    <category>Language Bridging</category>
    <atom:link href="https://forum.rebol.info/t/doubling-down-on-tcc-bootstrap-conference-demo-expanded/1542.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Doubling-Down on TCC Bootstrap: Conference Demo Expanded!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em>cc: interested irregular forum readers, or, at least irregular posters... (e.g. <span class="mention">@MarkI</span>, <span class="mention">@giluiolunati</span>)</em></p>
<p>In doing some prioritization, I posted about putting aside FFI, ZeroMQ, and the Serial port...since none of those are particularly mission-critical.  They did exercise some code, but they no longer represented any particular exercise that wasn't already covered elsewhere.  Limited efforts are better focused on things that will matter to more people (e.g. the web build).</p>
<p><strong>But one effort that is a big deal that I wanted to preserve is the TCC Extension, as well as the concept of being able to build the interpreter itself with TCC.</strong>  As I demonstrated in July 2019, those two things add up to being able to download the source code and bootstrap a new interpreter with no build tools on your system besides a single "r3-with-tcc" executable<sup><strong>1</strong></sup>.</p>
<p><em>(1) Well, you need the libc headers and include files and libs for your OS.  Things we require like <code>&lt;string.h&gt;</code>.  If we wanted to be masochistic, we could get into the business of zipping those up and either pulling them off the web via TLS/HTTPS/Unzip.reb or encapping them into the executable.  If we were to do this, we should look into doing it with <a href="https://musl.libc.org/about.html">musl</a> and not the likes of GNU's glibc.</em></p>
<p>So I slogged through to make a turnkey version of <a href="https://youtu.be/PT3GOe1pj9I?t=163">the conference demo</a>.  It's new and improved, and you can run it right from your Linux desktop, if you feel like it.</p>
<h2>Single-EXE Bootstrap...Now Reproduced As A GitHub Action!</h2>
<p>It's now more streamlined...automated, reproducible, and broken into sections.  You can see these sections in the GitHub continuous integration run:</p>
<p><strong><a href="https://github.com/metaeducation/ren-c/runs/2044725810">https://github.com/metaeducation/ren-c/runs/2044725810</a></strong></p>
<p>The script behind this is really just doing a few basic steps, which I will paraphrase here:</p>
<pre><code> # Install TCC and the libraries for embedding TCC services into C programs
 sudo apt install tcc libtcc-dev

 # Use TCC (and prebuilt R3 as make tool) to build a TCC-capable interpreter
 $R3_MAKE make.r config=configs/tcc.r extensions="TCC +"

 # Keep just the executable we made (call it r3-with-tcc for clarity)
 cp build/r3 ./r3-with-tcc

 # Now, you can throw away the prebuilt R3_MAKE tool and TCC executable
 rm $R3_MAKE
 sudo apt remove tcc  # keep the `libtcc-dev` for embedding TCC in C programs

 # Delete the source code that was cloned via git
 rm &lt;all the sources&gt;

 # Now use the sole executable to bootstrap itself, pulling the source code
 # down from GitHub over HTTPS as a .ZIP, unzipping it with the embedded
 # unzip.r, and rigging up the r3-with-tcc executable to act as an impromptu
 # interpreter of C99 command lines.
 ./r3-with-tcc "bootstrap"
</code></pre>
<p>After doing basically just that, your build/r3 is now a newly minted r3-with-tcc...which could continue doing this bootstrap process indefinitely!</p>
<p>You can read the actual workflow script here: <a href="https://github.com/metaeducation/ren-c/blob/master/.github/workflows/tcc-build.yml">%tcc-build.yml</a></p>
<p>It does a few more things, including using the "build matrix" to do one run with <code>debug=none</code> and another with <code>debug=normal</code>.  It runs a few tests, but the real big test here is just the build in and of itself!  That exercises an insane amount of code.</p>
<h2>More Rigorous Than The Conference Demo</h2>
<p>This took a couple days of pretty intense work.  I'd sort of hacked the demo together the day before the conference, so it needed to be made less ad-hoc.  But also, there have been some changes which needed to be worked through...mbedTLS wasn't being used in 2019, so it hadn't been run through this.  There are little issues that come up with new things.</p>
<p>Plus, I started the presentation with a prebuilt r3-with-tcc that I used...but I had built that using GCC (not TCC).  And I didn't build the TCC extension into the bootstrapped executable, so it would not be capable of continuing the process.  There wasn't any demo of this being a "sustainable" bootstrap.</p>
<p>But here it is, done legit.</p>
<h2>Lots Still To Do...</h2>
<p>We're well aware that Rebmake is a beast, <a href="https://forum.rebol.info/t/new-build-executables-new-build-strategy/1432">and something needs to be done about that</a>.  But seeing one make tool written entirely in Ren-C points to the idea that it could be improved.  It sets a baseline and we can just keep aiming for it.</p>
<p>Performance is getting pretty bad, due to virtual binding and LET and other things that are still getting hammered out.  And that needs to be attacked, but the user experience has to be reasoned through completely first.  Once we decide something is simply not the way things should work--like FUNCTION auto-gathering SET-WORD!s deeply through the body--then trying other approaches is the only sane response.  <em>(If there's advantages to plunging forward with known broken things just for the sake of being first-to-market, Rebol2 would have found them...or Red will be finding them... <span class="hashtag">#goodluckwiththat</span>)</em>.  Outside of the performance issues, LET is looking mostly promising.</p>
<p>But the more we can hone this experience, I think the better the system coheres on its message, and so I'm comfortable with pushing this through and taking the time to do it.</p>
          <p><a href="https://forum.rebol.info/t/doubling-down-on-tcc-bootstrap-conference-demo-expanded/1542/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/doubling-down-on-tcc-bootstrap-conference-demo-expanded/1542/1</link>
        <pubDate>Sat, 06 Mar 2021 04:34:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1542-1</guid>
        <source url="https://forum.rebol.info/t/doubling-down-on-tcc-bootstrap-conference-demo-expanded/1542.rss">Doubling-Down on TCC Bootstrap: Conference Demo Expanded!</source>
      </item>
  </channel>
</rss>

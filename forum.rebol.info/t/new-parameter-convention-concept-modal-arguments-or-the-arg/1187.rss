<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>New Parameter Convention Concept: Modal Arguments (or &quot;the @arg&quot;)</title>
    <link>https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187</link>
    <description>*This is a vision statement for using the new **@word**, **@pa/th**, **@[bl o ck]** and **@(gr o up)** datatypes for an interesting purpose.*

The idea is to have a way to mark an argument conveniently as controlling a refinement--without mentioning that refinement at the callsite, or needing a specialization of the function dispatched through a different name.

Perhaps it&#39;s easiest to see by example:

     demo: function [@a /mode-a @b /mode-b] [
         print [&quot;a:&quot; mold a]
         print [&quot;mode-a:&quot; mold mode-a]
         print [&quot;b:&quot; mold b]
         print [&quot;mode-b:&quot; mold mode-b]
     ]

Using literal (non-quoted) @-arguments will automatically turn on the associated mode refinement.  The argument itself will be the appropriate value for the non-@ version of the argument.  (WORD! and PATH! will fetch, GROUP! will evaluate, BLOCK! will be unevaluated).

     &gt;&gt; demo 1 + 2 10 + 20
     a: 3
     mode-a: _
     b: 30
     mode-b: _

     &gt;&gt; demo @(1 + 2) 10 + 20
     a: 3
     mode-a: /mode-a
     b: 30
     mode-b: _

     &gt;&gt; foo: &quot;foo&quot; | demo @[x y z] @foo
     a: [x y z]
     mode-a: /mode-a
     b: &quot;foo&quot;
     mode-b: /mode-b
   
     &gt;&gt; foo: [10 @bar] | demo &#39;@[x y z] second foo
     a: @[x y z]
     mode-a: _
     b: @bar 
     mode-b: _

The refinements are available to invoke independently as normal.  This means that from a specialization or APPLY standpoint the parameter convention would be as-is.

This is provably feasible as [it can be implemented today in a somewhat awkward manner](https://forum.rebol.info/t/an-append-for-a-dont-splice-by-default-world/1185?u=hostilefork).</description>
    
    <lastBuildDate>Mon, 18 Nov 2019 00:24:40 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>New Parameter Convention Concept: Modal Arguments (or &quot;the @arg&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="8" data-topic="1187">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>Ia there a reason not to have <span class="mention">@234</span>, @"text", ... apart from it being a no-op?</p>
</blockquote>
</aside>
<p>The reasoning is that <span class="mention">@xxx</span> is categorized as an ANY-WORD! and not an ANY-STRING! (with ISSUE! returned to an ANY-STRING!).  An operating rule is that all legal ANY-WORD! can be transformed to each other.  So if <span class="mention">@234</span> was valid there'd have to be a way to have a plain WORD! form, a SET-WORD! form, etc. etc.</p>
<p>I used to subscribe to the idea that the way to do this was with "construction syntax", something like <strong>#[set-word! "234"]</strong> (or at least no worse than that).  But with time I felt like it was better to avoid this, and move to things like <strong>[234]:</strong> ... the question is where the sweet spot is.  We've had a lot of unification with UTF-8 everywhere, e.g. that every ANY-WORD! can be aliased as an ANY-STRING! and use the same bytes of memory for the data...but not necessarily vice versa; and I'm feeling like mechanically it starts getting messy if we try to push that further.</p>
<p>Here I write about the shift in mindset, so if you want to discuss it add your comments there: <a href="https://forum.rebol.info/t/any-word-and-any-string-the-limits-of-unification/1127" class="inline-onebox">ANY-WORD! and ANY-STRING!: The Limits of Unification</a></p>
          <p><a href="https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187/9</link>
        <pubDate>Mon, 18 Nov 2019 00:24:40 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1187-9</guid>
        <source url="https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187.rss">New Parameter Convention Concept: Modal Arguments (or &quot;the @arg&quot;)</source>
      </item>
      <item>
        <title>New Parameter Convention Concept: Modal Arguments (or &quot;the @arg&quot;)</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>Ia there a reason not to have <span class="mention">@234</span>, @"text", ... apart from it being a no-op?<br>
With modal arguments it would be nice to have these.</p>
          <p><a href="https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187/8</link>
        <pubDate>Sat, 16 Nov 2019 06:40:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1187-8</guid>
        <source url="https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187.rss">New Parameter Convention Concept: Modal Arguments (or &quot;the @arg&quot;)</source>
      </item>
      <item>
        <title>New Parameter Convention Concept: Modal Arguments (or &quot;the @arg&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've <a href="https://github.com/metaeducation/ren-c/commit/22cb168c17bca6ed390e072333a02de153ea84b2" rel="nofollow noopener">committed a starting implementation of modal parameters</a>, and went ahead with the <a href="https://github.com/metaeducation/ren-c/commit/239a48661c45f11370ed69a39efef7f9c98f09bf" rel="nofollow noopener">MAP-EACH example</a> to get people thinking...</p>
<p>If this goes forward, it seems to me the best plan for transition would be to require every APPEND where the thing-being-appended is an ANY-ARRAY! to either have an /ONLY -or- an @-parameter (or a /SPLICE if you want, but that's ugly).  Basically, we go through a period of time where "naked" append is not allowed for array values...which will be irritating, but then one day all the /ONLYs will become plain APPEND.</p>
<p>I was wondering what the implications would be for path selection, since there's nowhere obvious to put a refinement there.  As it happens, it appears historically the /ONLY was presumed...in Rebol2 and R3-Alpha:</p>
<pre><code>rebol2&gt;&gt; data: [[a b] c]
== [[a b] c]

rebol2&gt;&gt; item: [a b]
== [a b]

rebol2&gt;&gt; data/(item)
== c

rebol2&gt;&gt; select data item
== none

rebol2&gt;&gt; select/only data item
== c
</code></pre>
<p>So no trouble there.</p>
<p>!!! <strong>We need to be strategic about which codebases are held back as "Redbol" and which are committed to going future-y.</strong>  The hope is that the core will be able to serve both purposes, and that you can mix and match modules written to Redbol conventions with modern Ren-C.  I've already decided to hold my blog back on Redbol for a while, Atronix's aim in a ZOE port would be Redbol--at least for starters...and people should decide on a codebase-by-codebase basis.  So, let's strategize. !!!</p>
          <p><a href="https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187/7</link>
        <pubDate>Mon, 29 Jul 2019 04:42:53 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1187-7</guid>
        <source url="https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187.rss">New Parameter Convention Concept: Modal Arguments (or &quot;the @arg&quot;)</source>
      </item>
      <item>
        <title>New Parameter Convention Concept: Modal Arguments (or &quot;the @arg&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Mechanical question: should <span class="mention">@foo</span> when used as a modal parameter act like a WORD! or a GET-WORD!?  Or a bit of both?</p>
<p>Acting like a GET-WORD! would mean not running functions and being willing to give NULL back if a variable is unset.</p>
<pre><code> x: null
 append data @x  ; adds nothing with no error if acts a GET-WORD!

 f: func [] [return "zero arity function"]
 append data @f  ; adds function value (doesn't call) if GET-WORD!
</code></pre>
<p>Supporting the idea that it should be a GET-WORD! would be that if you wanted a function call, you could say <strong>@(f)</strong>, which looks better than <strong>@(:f)</strong>...which you'd have to use if it were biased the other way.</p>
<p>Not wanting to accidentally use an unset variable might suggest requiring <strong>@(:x)</strong> if it can be null, however.  It seems too risky to have <strong>append data value</strong> error if you have a null, but then <strong>append data <span class="mention">@value</span></strong> suddenly silently allows nulls...when all you meant to say was different was "treat as multiple items if a block!"</p>
          <p><a href="https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187/6</link>
        <pubDate>Sun, 28 Jul 2019 18:20:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1187-6</guid>
        <source url="https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187.rss">New Parameter Convention Concept: Modal Arguments (or &quot;the @arg&quot;)</source>
      </item>
      <item>
        <title>New Parameter Convention Concept: Modal Arguments (or &quot;the @arg&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The main question I have at the moment is how to tie the refinement to the argument.  Forcing them to be sequential in the frame feels imperfect but may be best.</p>
<p>Rebol is already a bit of a slame to sequentiality for normal (non-refinement) arguments, it's not like this would be introducing a new aspect on that.</p>
          <p><a href="https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187/5</link>
        <pubDate>Wed, 24 Jul 2019 18:10:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1187-5</guid>
        <source url="https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187.rss">New Parameter Convention Concept: Modal Arguments (or &quot;the @arg&quot;)</source>
      </item>
      <item>
        <title>New Parameter Convention Concept: Modal Arguments (or &quot;the @arg&quot;)</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Hope we get some good input here. I prefer the principle of splicing with a single character/token. /ONLY and /SPLICE don't make the code more clean or literate, in my opinion.</p>
          <p><a href="https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187/3</link>
        <pubDate>Wed, 24 Jul 2019 14:00:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1187-3</guid>
        <source url="https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187.rss">New Parameter Convention Concept: Modal Arguments (or &quot;the @arg&quot;)</source>
      </item>
      <item>
        <title>New Parameter Convention Concept: Modal Arguments (or &quot;the @arg&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The motivation is to get rid of /ONLY, and instead have a very brief notation for differentiating the treatment of a block as either one or multiple things...one of the key issues in Rebol.  Having to pay more than a single character for this runs against the grain of the language principles.</p>
<pre><code>&gt;&gt; map-each x [1 2 3] [
    reduce [x x + 1]
]
== [[1 2] [2 3] [3 4]]

&gt;&gt; map-each x [1 2 3] @[
    reduce [x x + 1]
]
== [1 2 2 3 3 4]
</code></pre>
<p>If we can avoid it, I think that none of us want to see MAP-EACH/SPLICE or MAP-EACH/ONLY spreading throughout the code.  Attaching the notation of the "special" argument to the argument itself--instead of warping the name of the function--has value.  Otherwise you'd have to be constantly making specializations to get MAP-EACH*, etc.  It doesn't look as good, doesn't generalize to multiple arguments, and means making another word each time.</p>
<p>Being able to solve it with a nice generic part that is free for other dialect purposes seems a good idea.  Casting it in terms of an interface that still works with APPLY, FRAME!s, and specialization seems a good idea.</p>
<p>The proposal is based in something actually practical in the evaluator, as the part is kind of designed for it, and I have high confidence this can be accomplished.</p>
          <p><a href="https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187/2</link>
        <pubDate>Wed, 24 Jul 2019 10:42:08 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1187-2</guid>
        <source url="https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187.rss">New Parameter Convention Concept: Modal Arguments (or &quot;the @arg&quot;)</source>
      </item>
      <item>
        <title>New Parameter Convention Concept: Modal Arguments (or &quot;the @arg&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em>This is a vision statement for using the new <strong><span class="mention">@word</span></strong>, <strong><span class="mention">@pa</span>/th</strong>, <strong>@[bl o ck]</strong> and <strong>@(gr o up)</strong> datatypes for an interesting purpose.</em></p>
<p>The idea is to have a way to mark an argument conveniently as controlling a refinement--without mentioning that refinement at the callsite, or needing a specialization of the function dispatched through a different name.</p>
<p>Perhaps it's easiest to see by example:</p>
<pre><code> demo: function [@a /mode-a @b /mode-b] [
     print ["a:" mold a]
     print ["mode-a:" mold mode-a]
     print ["b:" mold b]
     print ["mode-b:" mold mode-b]
 ]
</code></pre>
<p>Using literal (non-quoted) @-arguments will automatically turn on the associated mode refinement.  The argument itself will be the appropriate value for the non-@ version of the argument.  (WORD! and PATH! will fetch, GROUP! will evaluate, BLOCK! will be unevaluated).</p>
<pre><code> &gt;&gt; demo 1 + 2 10 + 20
 a: 3
 mode-a: _
 b: 30
 mode-b: _

 &gt;&gt; demo @(1 + 2) 10 + 20
 a: 3
 mode-a: /mode-a
 b: 30
 mode-b: _

 &gt;&gt; foo: "foo" | demo @[x y z] @foo
 a: [x y z]
 mode-a: /mode-a
 b: "foo"
 mode-b: /mode-b

 &gt;&gt; foo: [10 @bar] | demo '@[x y z] second foo
 a: @[x y z]
 mode-a: _
 b: @bar 
 mode-b: _
</code></pre>
<p>The refinements are available to invoke independently as normal.  This means that from a specialization or APPLY standpoint the parameter convention would be as-is.</p>
<p>This is provably feasible as <a href="https://forum.rebol.info/t/an-append-for-a-dont-splice-by-default-world/1185">it can be implemented today in a somewhat awkward manner</a>.</p>
          <p><a href="https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187/1</link>
        <pubDate>Wed, 24 Jul 2019 10:31:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1187-1</guid>
        <source url="https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187.rss">New Parameter Convention Concept: Modal Arguments (or &quot;the @arg&quot;)</source>
      </item>
  </channel>
</rss>

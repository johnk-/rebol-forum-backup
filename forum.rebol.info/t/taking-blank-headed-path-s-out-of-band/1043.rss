<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Taking BLANK!-headed PATH!s Out-Of-Band</title>
    <link>https://forum.rebol.info/t/taking-blank-headed-path-s-out-of-band/1043</link>
    <description>DELIMIT is the engine behind a family of functions (UNSPACED, SPACED, FAIL, PRINT, anything that uses that null/blank collapsing logic, forms things cleanly, understands not to put spaces at the ends of newlines, etc).  It&#39;s stuff you don&#39;t want to redo if you can avoid it.

One thing about using it as the basis of these functions is that it doesn&#39;t leave a whole lot of room for dialecting.  Let&#39;s say you have an idea for using TAG! to specify printing a number in hexadecimal:

    &gt;&gt; x: 15
    &gt;&gt; print [&lt;hex&gt; x]
    0F

Trying to take TAG! for this purpose not going to please people who were building a string with **`unspaced [&lt;div&gt; stuff &lt;/div&gt;]`**  And if you get the idea that FAIL is going to extract errors via URL!:

    fail [http://rebol.org/e/invalid-arg some-arg]

Then you&#39;re going to bother someone who wanted to just have a textual error message and point you to a URL in a string-like way that prints as part of a message...not an ID:

    fail [&quot;Must be a unit type&quot; https://en.wikipedia.org/wiki/Unit_type]

If it evaluates everything, and *everything* is game to be PRINT-ed, anything using this as a basis isn&#39;t going to have much of an opportunity to dialect.

No one has really spoken to the importance of printing ISSUE!s literally.  So unlike TAG!, they are a possibility for some kind of instruction.

But I think the blank-headed path would make an excellent choice!

##  You can now put &lt;strike&gt;anything&lt;/strike&gt; many things in these paths...

    &gt;&gt; text: &quot;Some really long string&quot;

    &gt;&gt; print [&quot;Integer could be a limit:&quot; /10 text]
    Integer could be a limit: Some reall

    &gt;&gt; print [&quot;Path length &gt; 1:&quot; /10/&quot;...&quot; text]
    Path length &gt; 1: Some re...

    &gt;&gt; n: 5
    &gt;&gt; print [&quot;GROUP!s legal too:&quot; /(n + 5) text]
    GROUP!s legal too: Some re...

You could use pairs to give a min-size and max-size, 10x20.  *(PAIR! actually has the guts to do (n)x20 now and similar things, by the way, it just hasn&#39;t done it yet.)*

## Skippable parameters plus PATH! is a missing link

People have long had things they wanted to say up front, vs tack at the end of function calls.  [Tagged COMPOSE](https://forum.rebol.info/t/tag-compose-is-it-tag-specific-composition/979) now lets you do **`compose &lt;*&gt; [...]`** which is neater to look at your tag up front than with a refinement and throwing the tag to the end.

But what about skippable paths?  They can be both refinement and parameter.

Consider PRINT with the integer above.  Compare:

    mold/limit data 50

    mold /50 data

MOLD isn&#39;t necessarily the best example, as it&#39;s foundational and has to be able to mold everything including (PATH!s).  But it shows a really powerful idea, and one where you can do those calculations if you want:

    mold /(10 + n) data

More stuff to file under &quot;you&#39;re not going to miss REFINEMENT! one bit&quot;.  :-)</description>
    
    <lastBuildDate>Wed, 30 Jan 2019 11:47:39 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/taking-blank-headed-path-s-out-of-band/1043.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Taking BLANK!-headed PATH!s Out-Of-Band</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>DELIMIT is the engine behind a family of functions (UNSPACED, SPACED, FAIL, PRINT, anything that uses that null/blank collapsing logic, forms things cleanly, understands not to put spaces at the ends of newlines, etc).  It's stuff you don't want to redo if you can avoid it.</p>
<p>One thing about using it as the basis of these functions is that it doesn't leave a whole lot of room for dialecting.  Let's say you have an idea for using TAG! to specify printing a number in hexadecimal:</p>
<pre><code>&gt;&gt; x: 15
&gt;&gt; print [&lt;hex&gt; x]
0F
</code></pre>
<p>Trying to take TAG! for this purpose not going to please people who were building a string with <strong><code>unspaced [&lt;div&gt; stuff &lt;/div&gt;]</code></strong>  And if you get the idea that FAIL is going to extract errors via URL!:</p>
<pre><code>fail [http://rebol.org/e/invalid-arg some-arg]
</code></pre>
<p>Then you're going to bother someone who wanted to just have a textual error message and point you to a URL in a string-like way that prints as part of a message...not an ID:</p>
<pre><code>fail ["Must be a unit type" https://en.wikipedia.org/wiki/Unit_type]
</code></pre>
<p>If it evaluates everything, and <em>everything</em> is game to be PRINT-ed, anything using this as a basis isn't going to have much of an opportunity to dialect.</p>
<p>No one has really spoken to the importance of printing ISSUE!s literally.  So unlike TAG!, they are a possibility for some kind of instruction.</p>
<p>But I think the blank-headed path would make an excellent choice!</p>
<h2>You can now put <strike>anything</strike> many things in these paths...</h2>
<pre><code>&gt;&gt; text: "Some really long string"

&gt;&gt; print ["Integer could be a limit:" /10 text]
Integer could be a limit: Some reall

&gt;&gt; print ["Path length &gt; 1:" /10/"..." text]
Path length &gt; 1: Some re...

&gt;&gt; n: 5
&gt;&gt; print ["GROUP!s legal too:" /(n + 5) text]
GROUP!s legal too: Some re...
</code></pre>
<p>You could use pairs to give a min-size and max-size, 10x20.  <em>(PAIR! actually has the guts to do (n)x20 now and similar things, by the way, it just hasn't done it yet.)</em></p>
<h2>Skippable parameters plus PATH! is a missing link</h2>
<p>People have long had things they wanted to say up front, vs tack at the end of function calls.  <a href="https://forum.rebol.info/t/tag-compose-is-it-tag-specific-composition/979">Tagged COMPOSE</a> now lets you do <strong><code>compose &lt;*&gt; [...]</code></strong> which is neater to look at your tag up front than with a refinement and throwing the tag to the end.</p>
<p>But what about skippable paths?  They can be both refinement and parameter.</p>
<p>Consider PRINT with the integer above.  Compare:</p>
<pre><code>mold/limit data 50

mold /50 data
</code></pre>
<p>MOLD isn't necessarily the best example, as it's foundational and has to be able to mold everything including (PATH!s).  But it shows a really powerful idea, and one where you can do those calculations if you want:</p>
<pre><code>mold /(10 + n) data
</code></pre>
<p>More stuff to file under "you're not going to miss REFINEMENT! one bit".  <img src="//forum.rebol.info/images/emoji/twitter/slight_smile.png?v=7" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://forum.rebol.info/t/taking-blank-headed-path-s-out-of-band/1043/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/taking-blank-headed-path-s-out-of-band/1043/1</link>
        <pubDate>Wed, 30 Jan 2019 10:56:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1043-1</guid>
        <source url="https://forum.rebol.info/t/taking-blank-headed-path-s-out-of-band/1043.rss">Taking BLANK!-headed PATH!s Out-Of-Band</source>
      </item>
  </channel>
</rss>

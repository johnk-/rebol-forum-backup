<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Generic Looping: Cutting FOR Back a Bit</title>
    <link>https://forum.rebol.info/t/generic-looping-cutting-for-back-a-bit/1310</link>
    <description>Trying to convert code to be stackless is difficult, and the more fiddly code you have the harder it can be.

The implementation of FOR loops is rather complex, because it tries to support FOR looping over a series...which I&#39;m vaguely aware it can do, but have never used.  I&#39;ll point out that Red doesn&#39;t even *have* a FOR construct, much less one that iterates series.  :-/

Anyway, here are some of the tests that there were for the feature:

        success: true | x: &quot;a&quot;
        for i x tail of x 1 [continue | success: false]
        success = true
        ---
        out: copy &quot;&quot;
        for i s: &quot;abc&quot; back tail of s 1 [append out i]
        out = &quot;abcbcc&quot;
        ---
        out: copy []
        for i b: [1 2 3] back tail of b 1 [append out i]
        out = [1 2 3 2 3 3]
        ---
        success: true
        for i b: [1] tail of :b -1 [success: false]
        success = true
        ---
        num: 0
        for i (b: next [1]) (back b) 1 [num: num + 1 | break]
        num = 0
        ---
        ([] = for i b: tail of [1] head of b -2 [i])


It seems to me this is mostly covered by FOR-SKIP, which has specializations FOR-NEXT and FOR-BACK when you just want to skip by 1 or -1.  It doesn&#39;t include the stopping point as part of the loop definition, but I don&#39;t know how often it really comes up...and not too hard to do yourself.  I don&#39;t see there being all that many instances where the polymorphic nature of FOR is useful because &quot;sometimes you&#39;re counting integers, and sometimes you&#39;re skipping in series&quot;.

So to expedite FOR becoming stackless, I&#39;m cutting it down to just numeric types.

**But if there are cases where a looping construct that spans integers and series is actually useful, I&#39;d be interested to know what it is.**</description>
    
    <lastBuildDate>Mon, 27 Jul 2020 12:30:11 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/generic-looping-cutting-for-back-a-bit/1310.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Generic Looping: Cutting FOR Back a Bit</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I'll also mention that I feel like REPEAT for integers is more clearly covered by COUNT-UP, which suggests the existence of its complement COUNT-DOWN.  And for series it is more clearly covered by FOR-NEXT (which suggests the existence of its complements FOR-BACK and FOR-SKIP).</p>
<p>This brings back an age old debate about terminology.  Repeating something doesn't really suggest a direction, just "do this thing a certain number of times".  Thus I (still) think that REPEAT is a better fit for what LOOP does today:</p>
<pre><code>repeat 5 [
    print "Not needing a variable makes sense...repeat 5 times."
]
</code></pre>
<p>Whereas the word LOOP is one of those highly general overarching terms that is short and easy to type, that seems better used for a much more general dialect (like how we think of PARSE and now QUERY).</p>
<p>For precedent, see the <a href="http://www.gigamonkeys.com/book/loop-for-black-belts.html" rel="nofollow noopener">Lisp LOOP macro</a>.</p>
          <p><a href="https://forum.rebol.info/t/generic-looping-cutting-for-back-a-bit/1310/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/generic-looping-cutting-for-back-a-bit/1310/2</link>
        <pubDate>Mon, 27 Jul 2020 12:30:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1310-2</guid>
        <source url="https://forum.rebol.info/t/generic-looping-cutting-for-back-a-bit/1310.rss">Generic Looping: Cutting FOR Back a Bit</source>
      </item>
      <item>
        <title>Generic Looping: Cutting FOR Back a Bit</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Trying to convert code to be stackless is difficult, and the more fiddly code you have the harder it can be.</p>
<p>The implementation of FOR loops is rather complex, because it tries to support FOR looping over a series...which I'm vaguely aware it can do, but have never used.  I'll point out that Red doesn't even <em>have</em> a FOR construct, much less one that iterates series.  :-/</p>
<p>Anyway, here are some of the tests that there were for the feature:</p>
<pre><code>    success: true | x: "a"
    for i x tail of x 1 [continue | success: false]
    success = true
    ---
    out: copy ""
    for i s: "abc" back tail of s 1 [append out i]
    out = "abcbcc"
    ---
    out: copy []
    for i b: [1 2 3] back tail of b 1 [append out i]
    out = [1 2 3 2 3 3]
    ---
    success: true
    for i b: [1] tail of :b -1 [success: false]
    success = true
    ---
    num: 0
    for i (b: next [1]) (back b) 1 [num: num + 1 | break]
    num = 0
    ---
    ([] = for i b: tail of [1] head of b -2 [i])
</code></pre>
<p>It seems to me this is mostly covered by FOR-SKIP, which has specializations FOR-NEXT and FOR-BACK when you just want to skip by 1 or -1.  It doesn't include the stopping point as part of the loop definition, but I don't know how often it really comes up...and not too hard to do yourself.  I don't see there being all that many instances where the polymorphic nature of FOR is useful because "sometimes you're counting integers, and sometimes you're skipping in series".</p>
<p>So to expedite FOR becoming stackless, I'm cutting it down to just numeric types.</p>
<p><strong>But if there are cases where a looping construct that spans integers and series is actually useful, I'd be interested to know what it is.</strong></p>
          <p><a href="https://forum.rebol.info/t/generic-looping-cutting-for-back-a-bit/1310/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/generic-looping-cutting-for-back-a-bit/1310/1</link>
        <pubDate>Mon, 27 Jul 2020 12:00:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1310-1</guid>
        <source url="https://forum.rebol.info/t/generic-looping-cutting-for-back-a-bit/1310.rss">Generic Looping: Cutting FOR Back a Bit</source>
      </item>
  </channel>
</rss>

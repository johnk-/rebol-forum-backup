<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Ren-C 2018 Roadmap and Retrospective</title>
    <link>https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443</link>
    <description>Though there is the [Trello to track progress](https://trello.com/b/l385BE7a/rebol3-porting-guide-ren-c-branch)...

...since a New Year is upon us, I thought I&#39;d reflect on what we&#39;ve accomplished and what we plan to do.  

## The Past

The Ren-C effort started perhaps a month or so prior to the Pull Request #1: [Coherence One](https://github.com/metaeducation/ren-c/pull/1), on Jun 16, 2015.  Having invested a bit into modeling what a C++ API for Red might look like to use, I found it easier to test that API linked to Rebol *(since it was C, and given that many things in Red were incomplete)*.

Not wanting the work on understanding I&#39;d done to go to waste, I wanted to un-fork the divergence between Atronix and earl&#39;s &quot;community&quot; build.  It seemed to make sense to couple that with using compiler warnings to maximum advantage, getting the codebase on solid ground with Valgrind and Address Sanitizer...and then not letting it slip back again.

So it&#39;s been going on for 2 1/2 years.  If you [look at GitHub&#39;s commit graphs](https://github.com/metaeducation/ren-c/graphs/contributors), it hasn&#39;t been exactly *continuous* work since the start date.  But it hasn&#39;t gone away.  In that time there have been many accomplishments, to name a few:

* @Brett&#39;s work on getting the native specs into the C code, along with accessing arguments by name instead of number (with no degradation in performance by doing so) made a night vs. day difference in how the code looks.

* @szeng&#39;s rewrite of how extensions work and move of the build system to be completely Rebol-based has pointed toward how things should fit together, though we need to do everything we can to reign in growing complexity (there and elsewhere)

* The console&#39;s move to userspace...including for processing command line parameters...was another night vs. day difference. @draegtun&#39;s work--one of the [few places we actually have documentation](     https://github.com/r3n/reboldocs/wiki/User-and-Console) :-) was an inspiration to continue pushing on it.

* Thanks to the initial work of earl for adding 64-bit support and Travis building 32 and 64 bit variants of Linux and Windows, plus that of @giuliolunati on Android and @szeng on Mac, we have an [aggressive build matrix](https://travis-ci.org/metaeducation/ren-c/builds/322785759) on Travis that works for us every day.

* @gchiu has been amazingly resourceful in stepping into earl&#39;s big shoes...linking those builds up to [a download page](http://metaeducation.s3.amazonaws.com/index.html) and organizing other community resources (like this forum, of course)...staying present and keeping the chat lively.

* @rgchris, @MarkEye, @kealist and everyone else have been there to talk out the big or small technical questions through the days, as we mull over what this language can and can&#39;t become.

* @johnk managed to [save institutional knowledge from CureCode](https://github.com/rebol/rebol-issues) with a massive migration to GitHub, which is *especially* helpful as the rift with Red means no support keeping Rebol bugs alive would be expected.

* BlackATTR, IngoHohmann, JacobGood1, GeekyI and everyone all coming to participate on chat and the forum help keep me interested and perhaps, even, a little bit grounded...you too, pekr, and even iArnold.  :-)

* rebolek and everyone on the Red team have kept me irritated enough to need to finish my vision to prove them all wrong.  :stuck_out_tongue:  *(Oh fine, put yourself in the previous bullet point if you feel like it.)*

Hopefully I haven&#39;t left anyone off.  *But of course we all know who the real hero is!*

Just kidding. :-)  Yet one thing that I must realistically confront is that if I stopped working on the system, the odds aren&#39;t too good at this juncture that anyone else would step in to push it forward.  And nothing would make Red happier than if I gave up.

So it&#39;s worth mentioning I&#39;ve certainly had moments of doubt if I wanted to continue.  Life is short, I have a lot of interests, and this seems to have grabbed a lot more of my time than I would have ever imagined.

My stance--as many people know--is that Rebol is a language that is both very deep, and deeply flawed as a tool for generalized software development.  We see moments where it does things no other tool does, and other moments where it fails...and there&#39;s not exactly a clear map of the space of application for the language.  But it seems every time I&#39;ve thought of sending it to my digital dustbin, some new innovation pops up to give me faith that it&#39;s something worth doing: definitional returns, specific binding, specialize/hijack/chain/adapt/enclose, void semantics, enfix, FRAME!s, redo, elide/comment... the list of design accomplishments is getting quite long.

Now with Red&#39;s recent doings--it would seem responsibility for delivering the vision of the original Rebol has fallen even more squarely into our hands.  Everything I&#39;ve seen so far in the reaction to the crypto announcement indicates that regardless of if they raise the desired money, they&#39;re going to be attracting what I&#39;d call &quot;the wrong element&quot;.  A different kind of get-rich obfuscating crypto crowd, who wouldn&#39;t be  truly moved by [Carl&#39;s initial vision statement](https://forum.rebol.info/t/back-to-personal-computing/186) *(or even be moved by Nenad&#39;s own &quot;What is Red&quot; presentation, which I actually quite liked)*

## The Future

As some of you know, I&#39;ve traveled extensively the last couple of years.  It&#39;s hard for me to envision life a year from now--in more ways than one--it seems almost unfathomable that as the clock ticks 2019 I&#39;d be writing something along  the lines of *&quot;hmmm, we still haven&#39;t changed the [%.r files in the repo to be %.reb](http://www.rebol.com/cgi-bin/blog.r?view=0507)&quot;*.  Groan.

I&#39;m in this because I&#39;ve said I want to build *the Minecraft of programming*.  Something intuitive, composable, and visceral.  More intrinsically flawed than pure functional programming--but accessible to a wider audience with similarly pleasing ergonomics (perhaps even to the point of feeling *toy-like*).  But get people hooked to where they&#39;re having so much fun they&#39;ll forget that the particular task they&#39;re doing could be done more rigorously--or even more easily--in some other language.

[Ren Garden](https://youtu.be/0exDvv5WEv4?t=251) showed a glimpse of what this could be, and Qt is still very much how *I* would do things cross-platform, if it were just me.  Yet I would like to remind people that it was really written in only about a month...and at a very early time in my understanding of Rebol&#39;s implementation, while the API was being hammered out.  I&#39;ll also mention that while it&#39;s *cool*...I would nearly guarantee that undertaking such an effort so it ran through a browser interface would be a more strategic choice.  Even if it used something horrible like Electron.  Groan again.

In any case, I have mixed feelings of investing too heavily in Ren Garden.  Yes: I do still want us to be able to have automatic Travis drops for Windows/Mac/Linux.  But it&#39;s probably less useful as a tool in its own right than it is a showcase of how to embed Rebol in a C++ application.  It has been a great test for that, and because of its general ambition helped me to avoid some design mistakes in the API

The technical things I want to get hammered out in the next several months are:

* **UTF-8 Everywhere:** This isn&#39;t so much that I feel pressured to solve the problem of emoji in code, as needing to solve the API-level behavior of strings in Rebol.  It&#39;s quite a gargantuan task, affecting the entire system (when we say &quot;everywhere&quot;, we mean &quot;everywhere&quot;).  It is unbelievably difficult--probably the single most difficult change to date, rivaled only by specific binding.  If not for the debug build, its noisy alerts, and the ability to *choose* to build the code as C++ I would call it impossible...for all practical purposes.  But not only is it crucial, I think it could make a good marketing tool for the language being built on foundations that are future-forward...which would appeal to the [UTF-8 Everywhere Manifesto](http://utf8everywhere.org/) crowd.

* **libRebol:** I want it to be in working order, with full variadic support with C string runs, and built as a target in Travis.  Yes, I mean `rebDo(&quot;print [&quot;, rebInteger(x), &quot;+ (2 *&quot;, rebEval(negate_function), &quot;3)]&quot;, END);`...forming blocks and groups across spans, going even further than RenCpp did but with pure ANSI C.  Once libRebol can be brought in, that should make the Ren Garden build &quot;more or less trivial&quot; (to the extent configuring Travis is trivial)

* **Derived Binding:** freeing us from the situation where 1000 instances of an object with 100 methods means making 1000 * 100 deep copies of function bodies.  That&#39;s the kind of serious flaw that you would think it would be flashing in big bright letters on the description of OBJECT!, because people *will* run into this.  Atronix did, and it was a very big deal.  I don&#39;t have the solution completely worked out, but enough of it seems to work that I&#39;m confident.  *(UPDATE: [committed February 3rd](https://github.com/metaeducation/ren-c/commit/f6767f2f7c0449aa9fce8db21d6a1e1781b04d97), and no bugs reported...yet.)*

* **Bring Rebmu Up To Date:** Since I talk about wanting programming in Rebol to feel like you&#39;re playing a fun game, there is one gaming community that actually plays with their code: Code Golfers.  Not only do I think it&#39;s probably the most intriguing golfing language people have invented yet--and a good marketing tool--I think it could be the language used to win a lot, if sufficient care is put into it.

* **Userspace Stepwise-Debugging and Tracing:** The userspace console is already--in my opinion--pushing a lot of boundaries for how a console works.  My recent [ENCLOSE/HIJACK example](https://forum.rebol.info/t/monitoring-a-single-function-with-enclose-and-hijack/425) shows a glimpse of how this is going to go even wilder, in the form of a very-hackable debugger, where most all of its logic is written in Rebol.  To say there are a lot of open questions is an understatement, but I feel optimistic.

I can&#39;t easily see too far past these &quot;near-term&quot; goals (they&#39;re actually all huge things).  And I don&#39;t know how much anyone else can help me with those...or other deep things that I *don&#39;t* feel design confidence about--like &quot;arbitrary&quot; virtual binding, user-defined types, modules, multiple dispatch, port design...

But we&#39;ll need project growth to take the continuation-of-Rebol mantel away from Red, where it was previously hoped to be *(**especially** hoped by me, because I didn&#39;t want to be in the position of making a product)*.  So that means we&#39;ll have to start publishing.  And downloads.rebol.info should look a lot like [Red&#39;s download page](http://www.red-lang.org/p/download.html).  Maybe start writing some cool articles.  Or pay a company to make a press release we write about ourselves.  :-P

I also think selling a language is quite difficult, so any ideas people have for products that can sneak-attack people is a good idea.  Whether that&#39;s something like Graham&#39;s lighting router, or an in-browser PARSE tool that looks something like [RegExr](https://regexr.com/), I don&#39;t know.

In any case, Happy New Year to everyone.  Thank you for your help so far, thank you for putting up with me.  I hope something can come out of all this collective effort that makes people happy--even if it&#39;s just a few of us!</description>
    
    <lastBuildDate>Fri, 15 Jun 2018 19:05:56 +0000</lastBuildDate>
    <category>Announcements</category>
    <atom:link href="https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Ren-C 2018 Roadmap and Retrospective</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="5" data-topic="443">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/iarnold/40/226_2.png" class="avatar"> iArnold:</div>
<blockquote>
<p>ren-c.rebol.info</p>
</blockquote>
</aside>
<p>Just a reminder that Ren-C is not a name I really want to stick.</p>
<p>The hope--however vague it may be--is still that this <em>is</em> Rebol.  If Carl has another agenda for what he thinks Rebol4 should be, or whatever, then that's not going to work.  But I'd like to be able to make a case for why Ren-C should be the evaluator behind rebol.exe, and what I once called Ren-C would be "libRebolCore"...while what used to be called "The RL_API" would be called "libRebol".</p>
<p>But I don't want to make that pitch until several criteria are met:</p>
<ul>
<li>
<p>I want near parity in performance with R3-Alpha.  We've got a big back of tricks now, and when a codebase is really under control you don't have to guess about whether an optimization is "safe" or not...you know it's safe.  It is my belief that despite a tremendous number of new features of the evaluator, changes have fundamentally been balanced in such a way that it will be competitive--notably faster at some things, even.  There has to be some reasonable metrics taken and any creeping performance regressions have to be fixed.</p>
</li>
<li>
<p>I want near parity in <em>size</em> with R3-Alpha, when the same set of features are included.  We should remember things like that R3-Alpha had no HTTPS or related crypto.  For a truly fair comparison we might modularize it so that things like the function composition tools are in an extension as well, and have a rough idea of what they cost.</p>
</li>
<li>
<p>I'd like the source to be fewer characters, as well.  Comments need to be reviewed and brought down to essentials that convey the same information.  Any comments that are actually GitHub issues in disguise need to be <a href="http://blog.hostilefork.com/comments-vs-web-links-2014/" rel="nofollow noopener">moved out and referred to by their issue number</a>.  Overly paranoid asserts that have never triggered--or are redundantly being checked by callers and callees--need to be pared down.</p>
</li>
<li>
<p>The build system needs to be reigned in.  To get there we'll need to rethink this all-Rebol build system so that it uses an order of magnitude less code...it has to get much more declarative.</p>
</li>
</ul>
<p>These are the sorts of things that if they are not done, there might be a perception that in some ways--despite all its advances--Ren-C has taken some steps back.  I want <em>no steps back</em>.</p>
<p>Unlike other work, this is stuff that other people can--actually--help with.</p>
          <p><a href="https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443/6</link>
        <pubDate>Sun, 31 Dec 2017 13:51:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-443-6</guid>
        <source url="https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443.rss">Ren-C 2018 Roadmap and Retrospective</source>
      </item>
      <item>
        <title>Ren-C 2018 Roadmap and Retrospective</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>Very well summarized. Also adding ren-c.rebol.info or just r3.rebol.info and getting an elevator pitch on that site. Introducing articles getting people on various platforms on speed in using REN-C and after that in helping the development.<br>
A VID like addition will also attract a lot of attention and is a must for the GUI minded youngsters out there (like myself <img src="//forum.rebol.info/images/emoji/twitter/wink.png?v=7" title=":wink:" class="emoji" alt=":wink:"> ).<br>
Completeness of the 'product' will help 'our' cause a lot in the acceptance of the Rebol language as a serious alternative over the products used in businesses over the world these days.</p>
          <p><a href="https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443/5</link>
        <pubDate>Sun, 31 Dec 2017 12:10:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-443-5</guid>
        <source url="https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443.rss">Ren-C 2018 Roadmap and Retrospective</source>
      </item>
      <item>
        <title>Ren-C 2018 Roadmap and Retrospective</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="3" data-topic="443" data-full="true">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/gchiu/40/22_2.png" class="avatar"> gchiu:</div>
<blockquote>
<p>So, the reason for Ren Garden is just to test libRebol?  And not to give talks on Amish programming?</p>
</blockquote>
</aside>
<p>I hope it can be improved to the point of being the casual console of choice for most users...moreso than a traditional r3.exe.  It should be good enough to load and execute most programs.  It should make a good "Rebmu Workbench" if it has a bit of graphical debugging.  I'll see what I can do.</p>
<p>It's nice to have a lot of options based on what needs to be done.  <a class="mention" href="/u/szeng">@szeng</a> has expressed desire to jettison much of the existing R3/View code and use Qt plus their custom zoomable control.  Someone who wants to put a Rebol-powered app on Android, like yourself, might be served by making the UI in Qt with its designer tools and Qt Quick, but then much of the program logic in Rebol and bundle it into the APK.</p>
<p>I don't know exactly what the future holds for Rebol and Qt/C++ integration, but it's good to have a test case which happens to do something useful for us.</p>
          <p><a href="https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443/4</link>
        <pubDate>Sun, 31 Dec 2017 04:13:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-443-4</guid>
        <source url="https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443.rss">Ren-C 2018 Roadmap and Retrospective</source>
      </item>
      <item>
        <title>Ren-C 2018 Roadmap and Retrospective</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>So, the reason for Ren Garden is just to test libRebol?  And not to give talks on Amish programming?</p>
          <p><a href="https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443/3</link>
        <pubDate>Sun, 31 Dec 2017 04:01:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-443-3</guid>
        <source url="https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443.rss">Ren-C 2018 Roadmap and Retrospective</source>
      </item>
      <item>
        <title>Ren-C 2018 Roadmap and Retrospective</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Note: it only lets you <code>@</code> 10 people per post, so workaround I'll quote the relevant portion here:</p>
<blockquote>
<ul>
<li>
<p><a class="mention" href="/u/blackattr">@BlackATTR</a>, <a class="mention" href="/u/ingohohmann">@IngoHohmann</a>, <a class="mention" href="/u/jacobgood1">@JacobGood1</a>, <span class="mention">@GeekyI</span> and everyone all coming to participate on chat and the forum help keep me interested and perhaps, even, a little bit grounded...you too, <a class="mention" href="/u/pekr">@pekr</a>, and even <a class="mention" href="/u/iarnold">@iArnold</a> .  <img src="//forum.rebol.info/images/emoji/twitter/slight_smile.png?v=7" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
</li>
<li>
<p><a class="mention" href="/u/rebolek">@rebolek</a> and everyone on the Red team have kept me irritated enough to need to finish my vision to prove them all wrong.  <img src="//forum.rebol.info/images/emoji/twitter/stuck_out_tongue.png?v=7" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:">  <em>(Oh fine, put yourself in the previous bullet point if you feel like it.)</em></p>
</li>
</ul>
</blockquote>
          <p><a href="https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443/2</link>
        <pubDate>Sat, 30 Dec 2017 23:33:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-443-2</guid>
        <source url="https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443.rss">Ren-C 2018 Roadmap and Retrospective</source>
      </item>
      <item>
        <title>Ren-C 2018 Roadmap and Retrospective</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Though there is the <a href="https://trello.com/b/l385BE7a/rebol3-porting-guide-ren-c-branch" rel="nofollow noopener">Trello to track progress</a>...</p>
<p>...since a New Year is upon us, I thought I'd reflect on what we've accomplished and what we plan to do.</p>
<h2>The Past</h2>
<p>The Ren-C effort started perhaps a month or so prior to the Pull Request <span class="hashtag">#1:</span> <a href="https://github.com/metaeducation/ren-c/pull/1" rel="nofollow noopener">Coherence One</a>, on Jun 16, 2015.  Having invested a bit into modeling what a C++ API for Red might look like to use, I found it easier to test that API linked to Rebol <em>(since it was C, and given that many things in Red were incomplete)</em>.</p>
<p>Not wanting the work on understanding I'd done to go to waste, I wanted to un-fork the divergence between Atronix and earl's "community" build.  It seemed to make sense to couple that with using compiler warnings to maximum advantage, getting the codebase on solid ground with Valgrind and Address Sanitizer...and then not letting it slip back again.</p>
<p>So it's been going on for 2 1/2 years.  If you <a href="https://github.com/metaeducation/ren-c/graphs/contributors" rel="nofollow noopener">look at GitHub's commit graphs</a>, it hasn't been exactly <em>continuous</em> work since the start date.  But it hasn't gone away.  In that time there have been many accomplishments, to name a few:</p>
<ul>
<li>
<p><a class="mention" href="/u/brett">@Brett</a>'s work on getting the native specs into the C code, along with accessing arguments by name instead of number (with no degradation in performance by doing so) made a night vs. day difference in how the code looks.</p>
</li>
<li>
<p><a class="mention" href="/u/szeng">@szeng</a>'s rewrite of how extensions work and move of the build system to be completely Rebol-based has pointed toward how things should fit together, though we need to do everything we can to reign in growing complexity (there and elsewhere)</p>
</li>
<li>
<p>The console's move to userspace...including for processing command line parameters...was another night vs. day difference. <a class="mention" href="/u/draegtun">@draegtun</a>'s work--one of the <a href="https://github.com/r3n/reboldocs/wiki/User-and-Console" rel="nofollow noopener">few places we actually have documentation</a> <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> was an inspiration to continue pushing on it.</p>
</li>
<li>
<p>Thanks to the initial work of earl for adding 64-bit support and Travis building 32 and 64 bit variants of Linux and Windows, plus that of <a class="mention" href="/u/giuliolunati">@giuliolunati</a> on Android and <a class="mention" href="/u/szeng">@szeng</a> on Mac, we have an <a href="https://travis-ci.org/metaeducation/ren-c/builds/322785759" rel="nofollow noopener">aggressive build matrix</a> on Travis that works for us every day.</p>
</li>
<li>
<p><a class="mention" href="/u/gchiu">@gchiu</a> has been amazingly resourceful in stepping into earl's big shoes...linking those builds up to <a href="http://metaeducation.s3.amazonaws.com/index.html" rel="nofollow noopener">a download page</a> and organizing other community resources (like this forum, of course)...staying present and keeping the chat lively.</p>
</li>
<li>
<p><a class="mention" href="/u/rgchris">@rgchris</a>, <a class="mention" href="/u/markeye">@MarkEye</a>, <a class="mention" href="/u/kealist">@kealist</a> and everyone else have been there to talk out the big or small technical questions through the days, as we mull over what this language can and can't become.</p>
</li>
<li>
<p><a class="mention" href="/u/johnk">@johnk</a> managed to <a href="https://github.com/rebol/rebol-issues" rel="nofollow noopener">save institutional knowledge from CureCode</a> with a massive migration to GitHub, which is <em>especially</em> helpful as the rift with Red means no support keeping Rebol bugs alive would be expected.</p>
</li>
<li>
<p>BlackATTR, IngoHohmann, JacobGood1, GeekyI and everyone all coming to participate on chat and the forum help keep me interested and perhaps, even, a little bit grounded...you too, pekr, and even iArnold.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
</li>
<li>
<p>rebolek and everyone on the Red team have kept me irritated enough to need to finish my vision to prove them all wrong.  <img src="https://forum.rebol.info/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:">  <em>(Oh fine, put yourself in the previous bullet point if you feel like it.)</em></p>
</li>
</ul>
<p>Hopefully I haven't left anyone off.  <em>But of course we all know who the real hero is!</em></p>
<p>Just kidding. <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">  Yet one thing that I must realistically confront is that if I stopped working on the system, the odds aren't too good at this juncture that anyone else would step in to push it forward.  And nothing would make Red happier than if I gave up.</p>
<p>So it's worth mentioning I've certainly had moments of doubt if I wanted to continue.  Life is short, I have a lot of interests, and this seems to have grabbed a lot more of my time than I would have ever imagined.</p>
<p>My stance--as many people know--is that Rebol is a language that is both very deep, and deeply flawed as a tool for generalized software development.  We see moments where it does things no other tool does, and other moments where it fails...and there's not exactly a clear map of the space of application for the language.  But it seems every time I've thought of sending it to my digital dustbin, some new innovation pops up to give me faith that it's something worth doing: definitional returns, specific binding, specialize/hijack/chain/adapt/enclose, void semantics, enfix, FRAME!s, redo, elide/comment... the list of design accomplishments is getting quite long.</p>
<p>Now with Red's recent doings--it would seem responsibility for delivering the vision of the original Rebol has fallen even more squarely into our hands.  Everything I've seen so far in the reaction to the crypto announcement indicates that regardless of if they raise the desired money, they're going to be attracting what I'd call "the wrong element".  A different kind of get-rich obfuscating crypto crowd, who wouldn't be  truly moved by <a href="https://forum.rebol.info/t/back-to-personal-computing/186">Carl's initial vision statement</a> <em>(or even be moved by Nenad's own "What is Red" presentation, which I actually quite liked)</em></p>
<h2>The Future</h2>
<p>As some of you know, I've traveled extensively the last couple of years.  It's hard for me to envision life a year from now--in more ways than one--it seems almost unfathomable that as the clock ticks 2019 I'd be writing something along  the lines of <em>"hmmm, we still haven't changed the <a href="http://www.rebol.com/cgi-bin/blog.r?view=0507" rel="nofollow noopener">%.r files in the repo to be %.reb</a>"</em>.  Groan.</p>
<p>I'm in this because I've said I want to build <em>the Minecraft of programming</em>.  Something intuitive, composable, and visceral.  More intrinsically flawed than pure functional programming--but accessible to a wider audience with similarly pleasing ergonomics (perhaps even to the point of feeling <em>toy-like</em>).  But get people hooked to where they're having so much fun they'll forget that the particular task they're doing could be done more rigorously--or even more easily--in some other language.</p>
<p><a href="https://youtu.be/0exDvv5WEv4?t=251" rel="nofollow noopener">Ren Garden</a> showed a glimpse of what this could be, and Qt is still very much how <em>I</em> would do things cross-platform, if it were just me.  Yet I would like to remind people that it was really written in only about a month...and at a very early time in my understanding of Rebol's implementation, while the API was being hammered out.  I'll also mention that while it's <em>cool</em>...I would nearly guarantee that undertaking such an effort so it ran through a browser interface would be a more strategic choice.  Even if it used something horrible like Electron.  Groan again.</p>
<p>In any case, I have mixed feelings of investing too heavily in Ren Garden.  Yes: I do still want us to be able to have automatic Travis drops for Windows/Mac/Linux.  But it's probably less useful as a tool in its own right than it is a showcase of how to embed Rebol in a C++ application.  It has been a great test for that, and because of its general ambition helped me to avoid some design mistakes in the API</p>
<p>The technical things I want to get hammered out in the next several months are:</p>
<ul>
<li>
<p><strong>UTF-8 Everywhere:</strong> This isn't so much that I feel pressured to solve the problem of emoji in code, as needing to solve the API-level behavior of strings in Rebol.  It's quite a gargantuan task, affecting the entire system (when we say "everywhere", we mean "everywhere").  It is unbelievably difficult--probably the single most difficult change to date, rivaled only by specific binding.  If not for the debug build, its noisy alerts, and the ability to <em>choose</em> to build the code as C++ I would call it impossible...for all practical purposes.  But not only is it crucial, I think it could make a good marketing tool for the language being built on foundations that are future-forward...which would appeal to the <a href="http://utf8everywhere.org/" rel="nofollow noopener">UTF-8 Everywhere Manifesto</a> crowd.</p>
</li>
<li>
<p><strong>libRebol:</strong> I want it to be in working order, with full variadic support with C string runs, and built as a target in Travis.  Yes, I mean <code>rebDo("print [", rebInteger(x), "+ (2 *", rebEval(negate_function), "3)]", END);</code>...forming blocks and groups across spans, going even further than RenCpp did but with pure ANSI C.  Once libRebol can be brought in, that should make the Ren Garden build "more or less trivial" (to the extent configuring Travis is trivial)</p>
</li>
<li>
<p><strong>Derived Binding:</strong> freeing us from the situation where 1000 instances of an object with 100 methods means making 1000 * 100 deep copies of function bodies.  That's the kind of serious flaw that you would think it would be flashing in big bright letters on the description of OBJECT!, because people <em>will</em> run into this.  Atronix did, and it was a very big deal.  I don't have the solution completely worked out, but enough of it seems to work that I'm confident.  <em>(UPDATE: <a href="https://github.com/metaeducation/ren-c/commit/f6767f2f7c0449aa9fce8db21d6a1e1781b04d97" rel="nofollow noopener">committed February 3rd</a>, and no bugs reported...yet.)</em></p>
</li>
<li>
<p><strong>Bring Rebmu Up To Date:</strong> Since I talk about wanting programming in Rebol to feel like you're playing a fun game, there is one gaming community that actually plays with their code: Code Golfers.  Not only do I think it's probably the most intriguing golfing language people have invented yet--and a good marketing tool--I think it could be the language used to win a lot, if sufficient care is put into it.</p>
</li>
<li>
<p><strong>Userspace Stepwise-Debugging and Tracing:</strong> The userspace console is already--in my opinion--pushing a lot of boundaries for how a console works.  My recent <a href="https://forum.rebol.info/t/monitoring-a-single-function-with-enclose-and-hijack/425">ENCLOSE/HIJACK example</a> shows a glimpse of how this is going to go even wilder, in the form of a very-hackable debugger, where most all of its logic is written in Rebol.  To say there are a lot of open questions is an understatement, but I feel optimistic.</p>
</li>
</ul>
<p>I can't easily see too far past these "near-term" goals (they're actually all huge things).  And I don't know how much anyone else can help me with those...or other deep things that I <em>don't</em> feel design confidence about--like "arbitrary" virtual binding, user-defined types, modules, multiple dispatch, port design...</p>
<p>But we'll need project growth to take the continuation-of-Rebol mantel away from Red, where it was previously hoped to be <em>(<strong>especially</strong> hoped by me, because I didn't want to be in the position of making a product)</em>.  So that means we'll have to start publishing.  And downloads.rebol.info should look a lot like <a href="http://www.red-lang.org/p/download.html" rel="nofollow noopener">Red's download page</a>.  Maybe start writing some cool articles.  Or pay a company to make a press release we write about ourselves.  <img src="https://forum.rebol.info/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>I also think selling a language is quite difficult, so any ideas people have for products that can sneak-attack people is a good idea.  Whether that's something like Graham's lighting router, or an in-browser PARSE tool that looks something like <a href="https://regexr.com/" rel="nofollow noopener">RegExr</a>, I don't know.</p>
<p>In any case, Happy New Year to everyone.  Thank you for your help so far, thank you for putting up with me.  I hope something can come out of all this collective effort that makes people happy--even if it's just a few of us!</p>
          <p><a href="https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443/1</link>
        <pubDate>Sat, 30 Dec 2017 23:28:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-443-1</guid>
        <source url="https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443.rss">Ren-C 2018 Roadmap and Retrospective</source>
      </item>
  </channel>
</rss>

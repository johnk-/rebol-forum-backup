<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>OR as a Branching Construct (Deprecated) Compared to ELSE</title>
    <link>https://forum.rebol.info/t/or-as-a-branching-construct-deprecated-compared-to-else/527</link>
    <description>ELSE and OR can be used for *similar-looking* purposes, but they have an important difference.

ELSE runs its right hand side when there&#39;s a *void* on its left:

    &gt;&gt; () else [print &quot;left hand side is void, branch runs&quot; 10]
    left hand side is void, branch runs
    == 10

    &gt;&gt; false else [print &quot;left hand side is not void, branch skipped&quot; 10]
    ;-- no result

Whereas OR doesn&#39;t tolerate voids on its left, and reacts to *conditionally false* things on its left:

    &gt;&gt; false or [print &quot;left hand side is &#39;falsey&#39;, branch runs&quot; 10]
    left hand side is &#39;falsey&#39;, branch runs
    == 10

    &gt;&gt; 20 or [print &quot;left hand side is &#39;truthy&#39;, left hand returned&quot; 10]
    == 20

    &gt;&gt; false or [print &quot;both false means blank! result&quot; false]
    == _

    &gt;&gt; () or [print &quot;left hand can&#39;t be void&quot;]
    ** Error: left hand side of OR can&#39;t be void

Here we see the behavior of OR when a BLOCK! is used as its right hand side.  It is similar to an ANY, because it will give back the first value it calculates or a BLANK!.  However, if you use a GROUP! for the right hand side, the result will be forced to a LOGIC!:

    &gt;&gt; 1 or (2)
    == #[true]

    &gt;&gt; false or (_)
    == #[false]

    &gt;&gt; 1 or [2]
    == 1

    &gt;&gt; false or [2]
    == 2

    &gt;&gt; false or [false]
    == _

*(An additional constraint is that if you use a GROUP! on the right hand side, then should the right hand side be evaluated--e.g. it wasn&#39;t a short circuit--it cannot be void.  A BLOCK! on the right tolerate voids, treating them like blanks.)*

In any case, if you have some kind of truthy-or-falsey producing thing...like ANY or ALL or PARSE, it&#39;s a good candidate for OR.  It can improve flow and readability, consider:

    unless parse skip executable e_phoff [
        e_phnum [
            (mode: &#39;read) pos: program-header-rule
            (if p_offset &gt;= offset [p_offset: p_offset + delta])
            (mode: &#39;write) :pos program-header-rule
        ]
        to end
    ][
        fail &quot;Error updating offsets in program headers&quot;
    ]

This starts looking a little better when OR is used:

    parse skip executable e_phoff [
        e_phnum [
            (mode: &#39;read) pos: program-header-rule
            (if p_offset &gt;= offset [p_offset: p_offset + delta])
            (mode: &#39;write) :pos program-header-rule
        ]
        to end
    ] or [
        fail &quot;Error updating offsets in program headers&quot;
    ]

For starters, it&#39;s a little shorter.  But more importantly, it lets PARSE stay at the forefront so this line of code looks primarily like a *parse operation*, as opposed to an *unless operation*.  The infix OR helps contextualize things later, more than just seeing an unadorned block.  You don&#39;t have to mentally track whether it was an IF or an UNLESS when you&#39;re reading at that point.

ELSE is for interacting with the outcome of conditionals, where the desirability of being able to return blanks or false is just too high:

     flag: if condition [
         false
     ] else [
         true
     ]

This couldn&#39;t work with OR, because it would assume the successful condition check which produced FALSE would require triggering the next branch, and returning TRUE.  So IF returns void when its condition fails, as a cue to tell ELSE that it should run.  But more generally, it&#39;s useful for making a failed conditional &quot;opt out&quot;.</description>
    
    <lastBuildDate>Wed, 14 Feb 2018 12:20:09 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/or-as-a-branching-construct-deprecated-compared-to-else/527.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>OR as a Branching Construct (Deprecated) Compared to ELSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The idea of making AND and OR "conditional" as opposed to bitwise was fairly old, formally published as a "wish" <a href="https://github.com/rebol/rebol-issues/issues/1879" rel="nofollow noopener">on CureCode in 2011</a>.</p>
<p>Implementing it required coming to terms with the fact that to be actually useful, it would have to be short-circuit.  That happened fairly recently.</p>
<p>Being able to force an AND or OR to give back a LOGIC! is a fairly important feature.  The last tweak of making the result behavior driven by the use of a BLOCK! or a GROUP! on the right was made today.  I think this kills two birds with one stone.  It gives a rule that can be predicted just by looking at the shape of the source.  And it addresses that it looked a bit unnatural to write:</p>
<pre><code> all [
     ...
 ] or (
     ...
 )
</code></pre>
<p>...since all the other "branching" constructs used BLOCK!s.</p>
          <p><a href="https://forum.rebol.info/t/or-as-a-branching-construct-deprecated-compared-to-else/527/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/or-as-a-branching-construct-deprecated-compared-to-else/527/2</link>
        <pubDate>Wed, 14 Feb 2018 12:20:09 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-527-2</guid>
        <source url="https://forum.rebol.info/t/or-as-a-branching-construct-deprecated-compared-to-else/527.rss">OR as a Branching Construct (Deprecated) Compared to ELSE</source>
      </item>
      <item>
        <title>OR as a Branching Construct (Deprecated) Compared to ELSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>ELSE and OR can be used for <em>similar-looking</em> purposes, but they have an important difference.</p>
<p>ELSE runs its right hand side when there's a <em>void</em> on its left:</p>
<pre><code>&gt;&gt; () else [print "left hand side is void, branch runs" 10]
left hand side is void, branch runs
== 10

&gt;&gt; false else [print "left hand side is not void, branch skipped" 10]
;-- no result
</code></pre>
<p>Whereas OR doesn't tolerate voids on its left, and reacts to <em>conditionally false</em> things on its left:</p>
<pre><code>&gt;&gt; false or [print "left hand side is 'falsey', branch runs" 10]
left hand side is 'falsey', branch runs
== 10

&gt;&gt; 20 or [print "left hand side is 'truthy', left hand returned" 10]
== 20

&gt;&gt; false or [print "both false means blank! result" false]
== _

&gt;&gt; () or [print "left hand can't be void"]
** Error: left hand side of OR can't be void
</code></pre>
<p>Here we see the behavior of OR when a BLOCK! is used as its right hand side.  It is similar to an ANY, because it will give back the first value it calculates or a BLANK!.  However, if you use a GROUP! for the right hand side, the result will be forced to a LOGIC!:</p>
<pre><code>&gt;&gt; 1 or (2)
== #[true]

&gt;&gt; false or (_)
== #[false]

&gt;&gt; 1 or [2]
== 1

&gt;&gt; false or [2]
== 2

&gt;&gt; false or [false]
== _
</code></pre>
<p><em>(An additional constraint is that if you use a GROUP! on the right hand side, then should the right hand side be evaluated--e.g. it wasn't a short circuit--it cannot be void.  A BLOCK! on the right tolerate voids, treating them like blanks.)</em></p>
<p>In any case, if you have some kind of truthy-or-falsey producing thing...like ANY or ALL or PARSE, it's a good candidate for OR.  It can improve flow and readability, consider:</p>
<pre><code>unless parse skip executable e_phoff [
    e_phnum [
        (mode: 'read) pos: program-header-rule
        (if p_offset &gt;= offset [p_offset: p_offset + delta])
        (mode: 'write) :pos program-header-rule
    ]
    to end
][
    fail "Error updating offsets in program headers"
]
</code></pre>
<p>This starts looking a little better when OR is used:</p>
<pre><code>parse skip executable e_phoff [
    e_phnum [
        (mode: 'read) pos: program-header-rule
        (if p_offset &gt;= offset [p_offset: p_offset + delta])
        (mode: 'write) :pos program-header-rule
    ]
    to end
] or [
    fail "Error updating offsets in program headers"
]
</code></pre>
<p>For starters, it's a little shorter.  But more importantly, it lets PARSE stay at the forefront so this line of code looks primarily like a <em>parse operation</em>, as opposed to an <em>unless operation</em>.  The infix OR helps contextualize things later, more than just seeing an unadorned block.  You don't have to mentally track whether it was an IF or an UNLESS when you're reading at that point.</p>
<p>ELSE is for interacting with the outcome of conditionals, where the desirability of being able to return blanks or false is just too high:</p>
<pre><code> flag: if condition [
     false
 ] else [
     true
 ]
</code></pre>
<p>This couldn't work with OR, because it would assume the successful condition check which produced FALSE would require triggering the next branch, and returning TRUE.  So IF returns void when its condition fails, as a cue to tell ELSE that it should run.  But more generally, it's useful for making a failed conditional "opt out".</p>
          <p><a href="https://forum.rebol.info/t/or-as-a-branching-construct-deprecated-compared-to-else/527/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/or-as-a-branching-construct-deprecated-compared-to-else/527/1</link>
        <pubDate>Wed, 14 Feb 2018 01:53:09 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-527-1</guid>
        <source url="https://forum.rebol.info/t/or-as-a-branching-construct-deprecated-compared-to-else/527.rss">OR as a Branching Construct (Deprecated) Compared to ELSE</source>
      </item>
  </channel>
</rss>

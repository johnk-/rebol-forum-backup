<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Remove-each x [for-each map-each remove-each] [x = &#39;remove-each]</title>
    <link>https://forum.rebol.info/t/remove-each-x-for-each-map-each-remove-each-x-remove-each/262</link>
    <description>**TL;DR** =&gt; How do people feel about REMOVE-EACH locking the array which is to be removed from during the removal process (so it appears unmodified while running the loop body, even if removals have been indicated).  Then all the removals would be effected at the end.  Else, we are going to have to get rid of it as a native, and it will be written as a mezzanine with FOR-NEXT or something.  I explain below.

---

Most iterating constructs in Ren-C apply protections to the iterated series.  This ranges from DO, to PARSE, to CASE, etc.  While it may seem &quot;more flexible&quot; to not put a temporary lock on a series during such iterations, this introduces quite a number of headaches.

Lack of a lock means the code doing the iterating must have some kind of safety across modifications, and that&#39;s not free.  If you&#39;re *lucky enough not to crash*, you still wind up with a hodgepodge of semantics.

For instance, what should this do?

    cases: [
        true [
            print &quot;hi&quot;
            loop 10000 [insert cases [true [print &quot;expanded&quot;]]]
        ]
        true [
            print &quot;tail&quot;
        ]
    ]

    case/all cases

R3-Alpha [did not cache the series tail](https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/core/n-control.c#L336) at the beginning of the CASE, nor is it caching pointers to values in the block.  It rereads the series length each time through the loop after user code has run (which has a &quot;cost&quot;), and compares the current index to that.  Then, Do_Next() has to speak in terms of the index and block, re-fetching it each time.  Hence you get `hi hi hi hi...` until you run out of memory.

Those wacky folks over at Red [do cache the length](https://github.com/red/red/blob/60ee23ba8e5765fa28e964088b2263fd12fa2c8c/runtime/natives.reds#L481).  Which means you get `hi` and `expanded` and that&#39;s it.  If you&#39;re curious about what happens when you *shorten* the array being iterated, well...

    &gt;&gt; cases: [1 [print &quot;1&quot; clear cases] 2 [print &quot;2&quot;] 3 [print &quot;3&quot;]]

    &gt;&gt; case/all cases
    1
    2
    3

    &gt;&gt; cases
    == []

And yes...there it goes, reading beyond the tail, into essentially invalid memory.  If they had a garbage collector and it ran, it would presumably not protect the values beyond the tail...and these stale reads could crash on GC&#39;d pointers inside those values.  These kinds of bugs [were everywhere](https://github.com/rebol/rebol-issues/issues/2214) in R3-Alpha.  My crystal ball suggests Red will probably try patching with something that fetches the length each time--but again, each such patch adds a bit of cost, to preserve a nonsensical invariant, and... I&#39;ll just stop before I get on too much of a rant here.

I&#39;m glad to say that the workings of frames in Ren-C do the right locking and permit caching, plus generally having workarounds for getting the dynamism people were seeking with the above kinds of manipulations.

But this brings me to the topic of the question: the problematic primitive **remove-each**.  By its very definition it removes things from a series without creating another series.  That means that series can&#39;t be &quot;locked&quot; during the enumeration...at least not if you expect to see the effect of the removals during the enumeration.

Moreover, if you&#39;re going to see the effects during the enumeration it is *very* inefficient, effectively O(N^2).  Each time you do a removal, you have to slide all the data in the underlying array to fill in the gap and leave a coherent array.

Basically, the native&#39;s hands are tied to where it gets nearly no benefit from being a native at all.  One might as well implement it as a FOR-NEXT, and then at least the fact that the construct is all usermode would mean that one isn&#39;t fiddling with trying to write it in C and do all the bookkeeping of caches.

It is technically possible that the array could be locked during enumeration, flip some bits on the values in the array as it went, and then when REMOVE-EACH is finished do a compaction all in one step.  That means that you would not see the effects of the removals until after the loop was done.  We don&#39;t exactly have a ton of bits we can use for this inside the values themselves; so you might wind up with a parallel dynamic allocation of a bit array to do this.</description>
    
    <lastBuildDate>Wed, 23 Aug 2017 03:52:20 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/remove-each-x-for-each-map-each-remove-each-x-remove-each/262.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Remove-each x [for-each map-each remove-each] [x = &#39;remove-each]</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="262">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>The deferment does introduce some semantics questions though.  What should happen if there is a BREAK mid-way through?  What about a FAIL?</p>
</blockquote>
</aside>
<p>We have options here, but I went ahead with "go ahead and do the removals" for all exit paths...failing included:</p>
<aside class="onebox githubcommit">
  <header class="source">
      <a href="https://github.com/metaeducation/ren-c/commit/2f6ac057f8e9123ae99b59a3a5fd609120059d42" target="_blank" rel="noopener">github.com/metaeducation/ren-c</a>
  </header>
  <article class="onebox-body">
    <div class="github-row">
  <div class="github-icon-container" title="Commit">
    <svg width="60" height="60" class="github-icon" viewBox="0 0 14 16" aria-hidden="true"><path d="M10.86 7c-.45-1.72-2-3-3.86-3-1.86 0-3.41 1.28-3.86 3H0v2h3.14c.45 1.72 2 3 3.86 3 1.86 0 3.41-1.28 3.86-3H14V7h-3.14zM7 10.2c-1.22 0-2.2-.98-2.2-2.2 0-1.22.98-2.2 2.2-2.2 1.22 0 2.2.98 2.2 2.2 0 1.22-.98 2.2-2.2 2.2z"></path></svg>
  </div>

  <div class="github-info-container">
    <h4>
      <a href="https://github.com/metaeducation/ren-c/commit/2f6ac057f8e9123ae99b59a3a5fd609120059d42" target="_blank" rel="noopener">REMOVE-EACH locks series until end, performs all removes atomically</a>
    </h4>

    <div class="github-info">
      <div class="date">
        committed <span class="discourse-local-date" data-format="ll" data-date="2017-08-23" data-time="02:56:09" data-timezone="UTC">02:56AM - 23 Aug 17 UTC</span>
      </div>

      <div class="user">
        <a href="https://github.com/hostilefork" target="_blank" rel="noopener">
          <img alt="hostilefork" src="https://avatars1.githubusercontent.com/u/20440?v=4" class="onebox-avatar-inline" width="20" height="20">
          hostilefork
        </a>
        
      </div>

      <div class="lines" title="changed 11 files with 472 additions and 98 deletions">
        <a href="https://github.com/metaeducation/ren-c/commit/2f6ac057f8e9123ae99b59a3a5fd609120059d42" target="_blank" rel="noopener">
          <span class="added">+472</span>
          <span class="removed">-98</span>
        </a>
      </div>
    </div>

  </div>
</div>


  <div class="github-row">
    <pre class="github-content" style="white-space: normal;">The REMOVE-EACH primitive was unusual because it would perform mutation
on the very series it was iterating, based on the results of...</pre>
  </div>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          <p><a href="https://forum.rebol.info/t/remove-each-x-for-each-map-each-remove-each-x-remove-each/262/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/remove-each-x-for-each-map-each-remove-each-x-remove-each/262/5</link>
        <pubDate>Wed, 23 Aug 2017 03:52:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-262-5</guid>
        <source url="https://forum.rebol.info/t/remove-each-x-for-each-map-each-remove-each-x-remove-each/262.rss">Remove-each x [for-each map-each remove-each] [x = &#39;remove-each]</source>
      </item>
      <item>
        <title>Remove-each x [for-each map-each remove-each] [x = &#39;remove-each]</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="3" data-topic="262">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/brett/40/177_2.png" class="avatar"> Brett:</div>
<blockquote>
<p>I don't recall writing code to add items during a remove-each, possible but probably not.  Seems like something that would be likely to break with an implementation change (funnily enough), and it seems contrary in sense to the operation.</p>
</blockquote>
</aside>
<p>Indeed, you can't use it effectively unless the semantics are pinned down.  And pinning down the semantics means making a commitment to something that ties the hands of the implementation in some ways.</p>
<p>Immutability is conservative in terms of the semantic burden on the construct.  The only thing it requires is maintaining and checking a locked bit (well, doesn't <em>require</em>, some systems say "don't change it or all bets are off", which given the lack of commitment from R3-Alpha and Red is effectively what you're winding up with).  But if we were going to have any locking at all (e.g. PROTECT) then checking those bits was a sunk cost systemically.</p>
<aside class="quote no-group" data-post="3" data-topic="262">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/brett/40/177_2.png" class="avatar"> Brett:</div>
<blockquote>
<p>should a remove-each like operation take a bitset as an argument for which elements should be removed?</p>
</blockquote>
</aside>
<p>I think it's probably best to just generate a new series for the strings and binaries, and it may even be better in general for the arrays...to push kept elements to the data stack, and build an array from them.  Because it would mean the new allocation would be an exact right size for the data.  This bias of trying to size data exactly right when possible exists elsewhere in the system.  But there are several options once we go with the immutability during, and it plugs the holes I'm looking to plug.</p>
<p>The deferment does introduce some semantics questions though.  What should happen if there is a BREAK mid-way through?  What about a FAIL?</p>
          <p><a href="https://forum.rebol.info/t/remove-each-x-for-each-map-each-remove-each-x-remove-each/262/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/remove-each-x-for-each-map-each-remove-each-x-remove-each/262/4</link>
        <pubDate>Tue, 22 Aug 2017 21:00:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-262-4</guid>
        <source url="https://forum.rebol.info/t/remove-each-x-for-each-map-each-remove-each-x-remove-each/262.rss">Remove-each x [for-each map-each remove-each] [x = &#39;remove-each]</source>
      </item>
      <item>
        <title>Remove-each x [for-each map-each remove-each] [x = &#39;remove-each]</title>
        <dc:creator><![CDATA[Brett]]></dc:creator>
        <description><![CDATA[
            <p>I don't recall writing code to add items during a remove-each, possible but probably not.  Seems like something that would be likely to break with an implementation change (funnily enough), and it seems contrary in sense to the operation.</p>
<p>Hm, idle thought having read your explanation: should a remove-each like operation take a bitset as an argument for which elements should be removed? It's an idle thought, because I don't really use bitset for anything other than what charset returns.</p>
          <p><a href="https://forum.rebol.info/t/remove-each-x-for-each-map-each-remove-each-x-remove-each/262/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/remove-each-x-for-each-map-each-remove-each-x-remove-each/262/3</link>
        <pubDate>Tue, 22 Aug 2017 12:00:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-262-3</guid>
        <source url="https://forum.rebol.info/t/remove-each-x-for-each-map-each-remove-each-x-remove-each/262.rss">Remove-each x [for-each map-each remove-each] [x = &#39;remove-each]</source>
      </item>
      <item>
        <title>Remove-each x [for-each map-each remove-each] [x = &#39;remove-each]</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Ah, I just realized a problem...REMOVE-EACH on a non-array (e.g. just a string or binary or similar) has nowhere to sneak a "remove later" bit on the bytes of the string or binary.</p>
<p>So at least in the <em>general</em> case, you can't suspend the removals until the end of the enumeration without some allocation proportional to the size of the series.  As long as you're doing that, the implementation of REMOVE-EACH might as well just be building the new series data block as it goes, and just do a memory trick of a low-level swap of the underlying pointer for the series when it's complete.</p>
<p>Which is probably how it should have been written in the first place.  But, so long as it's arrays of Rebol values and not a BINARY! or STRING! or such, it may be possible to do it in place with one sliding step...if we can chew out a header bit for the purpose.  I'll try it.</p>
          <p><a href="https://forum.rebol.info/t/remove-each-x-for-each-map-each-remove-each-x-remove-each/262/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/remove-each-x-for-each-map-each-remove-each-x-remove-each/262/2</link>
        <pubDate>Tue, 22 Aug 2017 03:13:55 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-262-2</guid>
        <source url="https://forum.rebol.info/t/remove-each-x-for-each-map-each-remove-each-x-remove-each/262.rss">Remove-each x [for-each map-each remove-each] [x = &#39;remove-each]</source>
      </item>
      <item>
        <title>Remove-each x [for-each map-each remove-each] [x = &#39;remove-each]</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><strong>TL;DR</strong> =&gt; How do people feel about REMOVE-EACH locking the array which is to be removed from during the removal process (so it appears unmodified while running the loop body, even if removals have been indicated).  Then all the removals would be effected at the end.  Else, we are going to have to get rid of it as a native, and it will be written as a mezzanine with FOR-NEXT or something.  I explain below.</p>
<hr>
<p>Most iterating constructs in Ren-C apply protections to the iterated series.  This ranges from DO, to PARSE, to CASE, etc.  While it may seem "more flexible" to not put a temporary lock on a series during such iterations, this introduces quite a number of headaches.</p>
<p>Lack of a lock means the code doing the iterating must have some kind of safety across modifications, and that's not free.  If you're <em>lucky enough not to crash</em>, you still wind up with a hodgepodge of semantics.</p>
<p>For instance, what should this do?</p>
<pre><code>cases: [
    true [
        print "hi"
        loop 10000 [insert cases [true [print "expanded"]]]
    ]
    true [
        print "tail"
    ]
]

case/all cases
</code></pre>
<p>R3-Alpha <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/core/n-control.c#L336" rel="nofollow noopener">did not cache the series tail</a> at the beginning of the CASE, nor is it caching pointers to values in the block.  It rereads the series length each time through the loop after user code has run (which has a "cost"), and compares the current index to that.  Then, Do_Next() has to speak in terms of the index and block, re-fetching it each time.  Hence you get <code>hi hi hi hi...</code> until you run out of memory.</p>
<p>Those wacky folks over at Red <a href="https://github.com/red/red/blob/60ee23ba8e5765fa28e964088b2263fd12fa2c8c/runtime/natives.reds#L481" rel="nofollow noopener">do cache the length</a>.  Which means you get <code>hi</code> and <code>expanded</code> and that's it.  If you're curious about what happens when you <em>shorten</em> the array being iterated, well...</p>
<pre><code>&gt;&gt; cases: [1 [print "1" clear cases] 2 [print "2"] 3 [print "3"]]

&gt;&gt; case/all cases
1
2
3

&gt;&gt; cases
== []
</code></pre>
<p>And yes...there it goes, reading beyond the tail, into essentially invalid memory.  If they had a garbage collector and it ran, it would presumably not protect the values beyond the tail...and these stale reads could crash on GC'd pointers inside those values.  These kinds of bugs <a href="https://github.com/rebol/rebol-issues/issues/2214" rel="nofollow noopener">were everywhere</a> in R3-Alpha.  My crystal ball suggests Red will probably try patching with something that fetches the length each time--but again, each such patch adds a bit of cost, to preserve a nonsensical invariant, and... I'll just stop before I get on too much of a rant here.</p>
<p>I'm glad to say that the workings of frames in Ren-C do the right locking and permit caching, plus generally having workarounds for getting the dynamism people were seeking with the above kinds of manipulations.</p>
<p>But this brings me to the topic of the question: the problematic primitive <strong>remove-each</strong>.  By its very definition it removes things from a series without creating another series.  That means that series can't be "locked" during the enumeration...at least not if you expect to see the effect of the removals during the enumeration.</p>
<p>Moreover, if you're going to see the effects during the enumeration it is <em>very</em> inefficient, effectively O(N^2).  Each time you do a removal, you have to slide all the data in the underlying array to fill in the gap and leave a coherent array.</p>
<p>Basically, the native's hands are tied to where it gets nearly no benefit from being a native at all.  One might as well implement it as a FOR-NEXT, and then at least the fact that the construct is all usermode would mean that one isn't fiddling with trying to write it in C and do all the bookkeeping of caches.</p>
<p>It is technically possible that the array could be locked during enumeration, flip some bits on the values in the array as it went, and then when REMOVE-EACH is finished do a compaction all in one step.  That means that you would not see the effects of the removals until after the loop was done.  We don't exactly have a ton of bits we can use for this inside the values themselves; so you might wind up with a parallel dynamic allocation of a bit array to do this.</p>
          <p><a href="https://forum.rebol.info/t/remove-each-x-for-each-map-each-remove-each-x-remove-each/262/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/remove-each-x-for-each-map-each-remove-each-x-remove-each/262/1</link>
        <pubDate>Tue, 22 Aug 2017 01:01:36 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-262-1</guid>
        <source url="https://forum.rebol.info/t/remove-each-x-for-each-map-each-remove-each-x-remove-each/262.rss">Remove-each x [for-each map-each remove-each] [x = &#39;remove-each]</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>ACROSS vs. COPY and UPARSE Synthetic Ambiguity</title>
    <link>https://forum.rebol.info/t/across-vs-copy-and-uparse-synthetic-ambiguity/1595</link>
    <description>A successfully matching UPARSE combinator produces two return values.  One is the &quot;synthesized product&quot; of the rule.  The other is an indication of how far the rule advanced.

I was a bit unsettled by things like this:

    &gt;&gt; did uparse &quot;abcde&quot; [&quot;a&quot; test: copy (first [&quot;Fhqwhgads&quot;]) thru &quot;e&quot;]
    == #[true]

    &gt;&gt; test
    == &quot;&quot;

Because COPY does not copy the synthesized result.  It takes the span of the matched rule and copies across that span.  GROUP!s don&#39;t move the parse position at all.  So if you COPY a GROUP! you&#39;ll always get &quot;&quot;.

Compare that with putting the copy inside the GROUP! so it runs as DO code:

    &gt;&gt; did uparse &quot;abcde&quot; [&quot;a&quot; test: (copy first [&quot;Fhqwhgads&quot;]) thru &quot;e&quot;]
    == #[true]

    &gt;&gt; test
    == &quot;Fhqwhgads&quot;

This made me skeptical of the word COPY and wanting to find a word that jumped off the page a bit distinctly from PARSE.  I thought of ACROSS.

## But... Aren&#39;t All The PARSE Words Different?

You might ask if there&#39;s any point to fretting over this, when you know that basically every combinator other than SET-WORD! and KEEP doesn&#39;t care about synthesized products.  They operate on the rules.

Consider what this does:

    &gt;&gt; uparse &quot;aaa&quot; [not (false), some &quot;a&quot;]
    ; null

You didn&#39;t get NOT and FALSE interacting there to make a truthy result that kept the parse going.  Instead, GROUP! rules always succeed...and NOT was testing to see if the rule didn&#39;t succeed.  Since it did, the parse failed.

**This makes it seem like some combinators should indicate they can&#39;t be used in rule-span-checked slots.**  Maybe **x: copy (&quot;a&quot;)** should be illegal due to some property GROUP! combinators have that make them not want to mix with COPY.

But what about this?

     &gt;&gt; uparse &quot;ababccc&quot; [x: copy y: collect [some [keep &quot;a&quot; keep &quot;b&quot;]] some &quot;c&quot;]
     == &quot;c&quot;

     &gt;&gt; x
     == &quot;abab&quot;

     &gt;&gt; y
     == [&quot;a&quot; &quot;b&quot; &quot;a&quot; b&quot;]

Would it be better if COLLECT (or the Y SET-WORD! combinator) prevented you from capturing across the span of it, just because it synthesized a product?  Is it messing with generality to disable the GROUP!s being spanned going to come back and bite us later?

Maybe this shows why I was uneasy about COPY.  I dunno.  But I&#39;m not feeling thrilled with ACROSS.

Food for thought.</description>
    
    <lastBuildDate>Tue, 04 May 2021 01:13:07 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/across-vs-copy-and-uparse-synthetic-ambiguity/1595.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>ACROSS vs. COPY and UPARSE Synthetic Ambiguity</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A successfully matching UPARSE combinator produces two return values.  One is the "synthesized product" of the rule.  The other is an indication of how far the rule advanced.</p>
<p>I was a bit unsettled by things like this:</p>
<pre><code>&gt;&gt; did uparse "abcde" ["a" test: copy (first ["Fhqwhgads"]) thru "e"]
== #[true]

&gt;&gt; test
== ""
</code></pre>
<p>Because COPY does not copy the synthesized result.  It takes the span of the matched rule and copies across that span.  GROUP!s don't move the parse position at all.  So if you COPY a GROUP! you'll always get "".</p>
<p>Compare that with putting the copy inside the GROUP! so it runs as DO code:</p>
<pre><code>&gt;&gt; did uparse "abcde" ["a" test: (copy first ["Fhqwhgads"]) thru "e"]
== #[true]

&gt;&gt; test
== "Fhqwhgads"
</code></pre>
<p>This made me skeptical of the word COPY and wanting to find a word that jumped off the page a bit distinctly from PARSE.  I thought of ACROSS.</p>
<h2>But... Aren't All The PARSE Words Different?</h2>
<p>You might ask if there's any point to fretting over this, when you know that basically every combinator other than SET-WORD! and KEEP doesn't care about synthesized products.  They operate on the rules.</p>
<p>Consider what this does:</p>
<pre><code>&gt;&gt; uparse "aaa" [not (false), some "a"]
; null
</code></pre>
<p>You didn't get NOT and FALSE interacting there to make a truthy result that kept the parse going.  Instead, GROUP! rules always succeed...and NOT was testing to see if the rule didn't succeed.  Since it did, the parse failed.</p>
<p><strong>This makes it seem like some combinators should indicate they can't be used in rule-span-checked slots.</strong>  Maybe <strong>x: copy ("a")</strong> should be illegal due to some property GROUP! combinators have that make them not want to mix with COPY.</p>
<p>But what about this?</p>
<pre><code> &gt;&gt; uparse "ababccc" [x: copy y: collect [some [keep "a" keep "b"]] some "c"]
 == "c"

 &gt;&gt; x
 == "abab"

 &gt;&gt; y
 == ["a" "b" "a" b"]
</code></pre>
<p>Would it be better if COLLECT (or the Y SET-WORD! combinator) prevented you from capturing across the span of it, just because it synthesized a product?  Is it messing with generality to disable the GROUP!s being spanned going to come back and bite us later?</p>
<p>Maybe this shows why I was uneasy about COPY.  I dunno.  But I'm not feeling thrilled with ACROSS.</p>
<p>Food for thought.</p>
          <p><a href="https://forum.rebol.info/t/across-vs-copy-and-uparse-synthetic-ambiguity/1595/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/across-vs-copy-and-uparse-synthetic-ambiguity/1595/1</link>
        <pubDate>Tue, 04 May 2021 00:52:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1595-1</guid>
        <source url="https://forum.rebol.info/t/across-vs-copy-and-uparse-synthetic-ambiguity/1595.rss">ACROSS vs. COPY and UPARSE Synthetic Ambiguity</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>NewPath Rising: Call for Examples</title>
    <link>https://forum.rebol.info/t/newpath-rising-call-for-examples/988</link>
    <description>A proposal from 2014, before Ren-C existed, [was NewPath](http://blog.hostilefork.com/new-path-debate-rebol-red/).  *(yes, it was a [very intentional Scanner Darkly reference](https://www.reddit.com/r/orphanblack/comments/2dpr1w/new_path_a_scanner_darkly_reference_s2_spoilers/))*

I was talked out of wacky decomposition of URL! into PATH! with a SET-WORD! at the head, etc.  @rgchris convinced me that URLs should be left &quot;as-is&quot;, so you could copy and paste them between the browser and your script.  At his direction, Scan_URL was changed to commit more fully to this than Rebol2/Red/R3-Alpha...[see the comments there](https://github.com/metaeducation/ren-c/blob/b939a138e2c76ad4bed8e77b8818233c3fe6296d/src/core/l-types.c#L1085) 

**But I think FILE! is a different case.**  For one thing, it&#39;s not standardized...spaces are legal, sometimes forward-slashed, sometimes back-slashed.  Double quotes are legal even on Windows, basically everything legal on Linux.  So if you want to grab a string out of your terminal session and paste it in source, your best bet is pretty much to `{W:rap\it in\curly \&quot;braces\&quot;.txt}` 

It seems to me the dream of FILE! achieving something great that TEXT! alone can&#39;t do has not been fulfilled, and is largely un-fulfill-a-ble.  Pigeonholing Windows file paths to get stored in formats as `%/c/Wherever` instead of using `&quot;C:\Wherever&quot;`...just to get the FILE!-vs-TEXT! datatype bit when you LOAD...seems like a fool&#39;s errand to me--*it&#39;s not that great a bit!!*  If it&#39;s not a manipulable structured PATH! then what was that work for, anyway?  You lost the ability to copy/paste into your terminal...and got nothing for your trouble.

My growing suspicion is that we may want to scrap FILE! as a string datatype with weird behavior.  Instead, start from a basis of [using % as an escape character](https://forum.rebol.info/t/i-love-arbitrary-escaping-but-backslash-may-not-be-the-one/986/2?u=hostilefork), to where **%foo** is just an escaped WORD! and **%foo/bar** is an escaped PATH!

    one-file: %foo/bar.txt
    some-files: [
        foo/baz.txt
        mumble.txt
        &quot;Directory With Spaces&quot;/&quot;File With Spaces.txt&quot;
    ]
    alt-one-file: lit foo/bar.txt // LIT would behave like historical QUOTE

**Carl himself went down this road.**  See the [%file-list.txt from R3-Alpha](https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/tools/file-base.r#L113)  When you stop thinking about the percent sign, you perhaps see more opportunities.

## Living in a world without FILE!, but with NewPath

Many ingredients that weren&#39;t around in NewPath&#39;s time are now in Ren-C.  PATH!s can feature GROUP!s and BLOCK!s, even in the first element position.  You can put arbitrary strings in them, with spaces:

    &gt;&gt; load {(a b c)/&quot;d e f&quot;/[g h i]/&lt;j k l&gt;} 
    == (a b c)/&quot;d e f&quot;/[g h i]/&lt;j k l&gt;

My question is if we can do a thought experiment: *pretend you never knew about FILE!, and all Rebol had was TEXT!, generic escaping (consider trying %), and these modern path parts*.  How satisfied could you be, with what pre-cooked helpers?

Can people find examples of code that manipulates and operates on filenames, and look at that problem from a fresh start?  What kind of toolset would build up from it?

    &gt;&gt; flag: true
    &gt;&gt; root: %foo
    &gt;&gt; base: %bar
    &gt;&gt; extension: %.txt
    &gt;&gt; file-to-local/full %(root)/(subdir)/(if flag [%skip])/[base &quot;.&quot; extension]
    == &quot;C:\Projects\foo\baz\bar.txt&quot;

It would be a wave of disruption to change **%** into escaping, that we&#39;re not ready for with an unproven idea.  So you&#39;ll have to use your imagination, and pretend backslash or whatever is percent.

**I know from experience that this is a problem space fraught with edge cases and issues.**  The old code has problems, and new code can&#39;t wish them away.  But the code has never been in a better position to try and tackle this area with new tricks.  So hopefully someone can dig up real examples and NewPath can get the shot it deserves.</description>
    
    <lastBuildDate>Thu, 24 Sep 2020 19:54:42 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/newpath-rising-call-for-examples/988.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>NewPath Rising: Call for Examples</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>No more 'Linux: everything is a file' but 'everything is a path'.</p>
          <p><a href="https://forum.rebol.info/t/newpath-rising-call-for-examples/988/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/newpath-rising-call-for-examples/988/5</link>
        <pubDate>Thu, 24 Sep 2020 19:54:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-988-5</guid>
        <source url="https://forum.rebol.info/t/newpath-rising-call-for-examples/988.rss">NewPath Rising: Call for Examples</source>
      </item>
      <item>
        <title>NewPath Rising: Call for Examples</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="1" data-topic="988">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>My question is if we can do a thought experiment: <em>pretend you never knew about FILE!, and all Rebol had was TEXT!, generic escaping (consider trying %), and these modern path parts</em> . How satisfied could you be, with what pre-cooked helpers?</p>
</blockquote>
</aside>
<p>NewPath has been on the back burner, but it's time to up the game on filenames one way or another.</p>
<p>I've come to accept that FILE! is a string currency to be used, and so you will not use PATH!s directly to open files with.  So if you have a path in your hand, you will MAKE FILE! out of it.</p>
<p>But this should have some exciting possibilities, especially with TUPLE! in the mix:</p>
<pre><code>make file! '(dir)/subdir/["file-" num].txt
</code></pre>
<p>MAKE FILE! can be smart enough to execute GROUP!s and perform UNSPACED on BLOCK!s.  The composition behavior can intelligently vaporize path segments on NULL, as it does today:</p>
<pre><code>&gt;&gt; compose 'a/(if true ['b])/c
== a/b/c

&gt;&gt; compose 'a/(if false ['b])/c
== a/c
</code></pre>
<p>This is the kind of coherent structural control I've been wanting.</p>
<p>Explicit MAKE FILE! should replace today's hacks like:</p>
<pre><code>&gt;&gt; dir: %/home/files
&gt;&gt; path: dir/subdir/file.txt
== %/home/files/dir/subdir/file.txt
</code></pre>
<p>That notion of "path selection out of a file implicitly stringizes the remaining portion of the path and appends it" never sat well with me.  <strong>It's much better seen as COMPOSE-like than as anything SELECT-oriented.</strong>  Trying to define how path dispatch works is made that much more exasperating when you have it doing crazy things like this.</p>
<h2>Biggest Issue to Sort is Slash Merging</h2>
<p>So the one thing that's been on my mind is how to reconcile the cool NewPaths with the general policy that directories end in <code>/</code> while files do not.  I want to see this sanity checked.</p>
<p>You can't just use COMPOSE for that, because it is a purely mechanical thing that does what you ask:</p>
<pre><code>&gt;&gt; dir: 'some/where/

&gt;&gt; compose '(dir)/file.txt
== some/where//file.txt
</code></pre>
<p>That's great for the low-level behavior, but undesirably lax for files. <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=9" title=":frowning:" class="emoji" alt=":frowning:">  I feel like MAKE FILE! needs to guarantee you don't double up slashes, and it should use it as a kind of "type checking" to make sure you are doing it right.</p>
<p>This can be addressed without NewPath, if you used a BLOCK! and had a dialect where the <code>/</code> were special, and you either used it or didn't based on knowing whether the directory had</p>
<pre><code>&gt;&gt; num: 1020
&gt;&gt; dir-with-slash: %dir/
&gt;&gt; dir-no-slash: %dir

&gt;&gt; make file! [(dir-with-slash) ["file-" num].txt]
== %dir/file-1020.txt

&gt;&gt; make file! [(dir-no-slash) ["file-" num].txt]
** Error: Missing slash in MAKE FILE! on (dir) as %dir

&gt;&gt; make file! [(dir-no-slash) / ["file-" num].txt]
== %dir/file-1020.txt
</code></pre>
<p>That's pretty slick.  It's a little unfortunate that NewPath comes so close, but because it provides its own slashes...it biases the slash presence the wrong way.  <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=9" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p>Maybe the compromise one could take here is that PATH-based MAKE FILE! enforced slashes on spliced FILE! or PATH! non-terminals... but was more liberal with TEXT! or INTEGER!.  And maybe you could use TEXT!, as long as they didn't contain slashes...so they'd be wordlike.</p>
<p>I think something cool is coming together here, so let's see where it goes.  Having the alternatives to use either a PATH! if you're following all the terminal slash rules (for anything that isn't just text), or a BLOCK! to get more control, sounds like it may be a place to start.</p>
          <p><a href="https://forum.rebol.info/t/newpath-rising-call-for-examples/988/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/newpath-rising-call-for-examples/988/4</link>
        <pubDate>Wed, 23 Sep 2020 00:20:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-988-4</guid>
        <source url="https://forum.rebol.info/t/newpath-rising-call-for-examples/988.rss">NewPath Rising: Call for Examples</source>
      </item>
      <item>
        <title>NewPath Rising: Call for Examples</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="2" data-topic="988" data-full="true">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/lkppo/40/239_2.png" class="avatar"> LkpPo:</div>
<blockquote>
<p>I see a similarity with TCL where all is text interpreted by context but it provides functions to build paths in text variable from lists. It’s a try to hide the platform specific format of paths.</p>
</blockquote>
</aside>
<p>It's been a <em>very</em> long time since I've used TCL (&gt; 20 years).  If you're familiar with some relevant examples, could you write a few down to illustrate notable behaviors?  If you can post new threads, we have a <a href="https://forum.rebol.info/c/development/foreign-inspiration">Foreign Inspiration</a> category...otherwise here is fine.</p>
          <p><a href="https://forum.rebol.info/t/newpath-rising-call-for-examples/988/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/newpath-rising-call-for-examples/988/3</link>
        <pubDate>Sun, 30 Dec 2018 16:32:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-988-3</guid>
        <source url="https://forum.rebol.info/t/newpath-rising-call-for-examples/988.rss">NewPath Rising: Call for Examples</source>
      </item>
      <item>
        <title>NewPath Rising: Call for Examples</title>
        <dc:creator><![CDATA[LkpPo]]></dc:creator>
        <description><![CDATA[
            <p>I see a similarity with TCL where all is text interpreted by context but it provides functions to build paths in text variable from lists. It's a try to hide the platform specific format of paths.</p>
          <p><a href="https://forum.rebol.info/t/newpath-rising-call-for-examples/988/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/newpath-rising-call-for-examples/988/2</link>
        <pubDate>Sun, 30 Dec 2018 11:12:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-988-2</guid>
        <source url="https://forum.rebol.info/t/newpath-rising-call-for-examples/988.rss">NewPath Rising: Call for Examples</source>
      </item>
      <item>
        <title>NewPath Rising: Call for Examples</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A proposal from 2014, before Ren-C existed, <a href="http://blog.hostilefork.com/new-path-debate-rebol-red/" rel="nofollow noopener">was NewPath</a>.  <em>(yes, it was a <a href="https://www.reddit.com/r/orphanblack/comments/2dpr1w/new_path_a_scanner_darkly_reference_s2_spoilers/" rel="nofollow noopener">very intentional Scanner Darkly reference</a>)</em></p>
<p>I was talked out of wacky decomposition of URL! into PATH! with a SET-WORD! at the head, etc.  <a class="mention" href="/u/rgchris">@rgchris</a> convinced me that URLs should be left "as-is", so you could copy and paste them between the browser and your script.  At his direction, Scan_URL was changed to commit more fully to this than Rebol2/Red/R3-Alpha...<a href="https://github.com/metaeducation/ren-c/blob/b939a138e2c76ad4bed8e77b8818233c3fe6296d/src/core/l-types.c#L1085" rel="nofollow noopener">see the comments there</a></p>
<p><strong>But I think FILE! is a different case.</strong>  For one thing, it's not standardized...spaces are legal, sometimes forward-slashed, sometimes back-slashed.  Double quotes are legal even on Windows, basically everything legal on Linux.  So if you want to grab a string out of your terminal session and paste it in source, your best bet is pretty much to <code>{W:rap\it in\curly \"braces\".txt}</code></p>
<p>It seems to me the dream of FILE! achieving something great that TEXT! alone can't do has not been fulfilled, and is largely un-fulfill-a-ble.  Pigeonholing Windows file paths to get stored in formats as <code>%/c/Wherever</code> instead of using <code>"C:\Wherever"</code>...just to get the FILE!-vs-TEXT! datatype bit when you LOAD...seems like a fool's errand to me--<em>it's not that great a bit!!</em>  If it's not a manipulable structured PATH! then what was that work for, anyway?  You lost the ability to copy/paste into your terminal...and got nothing for your trouble.</p>
<p>My growing suspicion is that we may want to scrap FILE! as a string datatype with weird behavior.  Instead, start from a basis of <a href="https://forum.rebol.info/t/i-love-arbitrary-escaping-but-backslash-may-not-be-the-one/986/2?u=hostilefork">using % as an escape character</a>, to where <strong>%foo</strong> is just an escaped WORD! and <strong>%foo/bar</strong> is an escaped PATH!</p>
<pre><code>one-file: %foo/bar.txt
some-files: [
    foo/baz.txt
    mumble.txt
    "Directory With Spaces"/"File With Spaces.txt"
]
alt-one-file: lit foo/bar.txt // LIT would behave like historical QUOTE
</code></pre>
<p><strong>Carl himself went down this road.</strong>  See the <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/tools/file-base.r#L113" rel="nofollow noopener">%file-list.txt from R3-Alpha</a>  When you stop thinking about the percent sign, you perhaps see more opportunities.</p>
<h2>Living in a world without FILE!, but with NewPath</h2>
<p>Many ingredients that weren't around in NewPath's time are now in Ren-C.  PATH!s can feature GROUP!s and BLOCK!s, even in the first element position.  You can put arbitrary strings in them, with spaces:</p>
<pre><code>&gt;&gt; load {(a b c)/"d e f"/[g h i]/&lt;j k l&gt;} 
== (a b c)/"d e f"/[g h i]/&lt;j k l&gt;
</code></pre>
<p>My question is if we can do a thought experiment: <em>pretend you never knew about FILE!, and all Rebol had was TEXT!, generic escaping (consider trying %), and these modern path parts</em>.  How satisfied could you be, with what pre-cooked helpers?</p>
<p>Can people find examples of code that manipulates and operates on filenames, and look at that problem from a fresh start?  What kind of toolset would build up from it?</p>
<pre><code>&gt;&gt; flag: true
&gt;&gt; root: %foo
&gt;&gt; base: %bar
&gt;&gt; extension: %.txt
&gt;&gt; file-to-local/full %(root)/(subdir)/(if flag [%skip])/[base "." extension]
== "C:\Projects\foo\baz\bar.txt"
</code></pre>
<p>It would be a wave of disruption to change <strong>%</strong> into escaping, that we're not ready for with an unproven idea.  So you'll have to use your imagination, and pretend backslash or whatever is percent.</p>
<p><strong>I know from experience that this is a problem space fraught with edge cases and issues.</strong>  The old code has problems, and new code can't wish them away.  But the code has never been in a better position to try and tackle this area with new tricks.  So hopefully someone can dig up real examples and NewPath can get the shot it deserves.</p>
          <p><a href="https://forum.rebol.info/t/newpath-rising-call-for-examples/988/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/newpath-rising-call-for-examples/988/1</link>
        <pubDate>Sun, 30 Dec 2018 05:22:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-988-1</guid>
        <source url="https://forum.rebol.info/t/newpath-rising-call-for-examples/988.rss">NewPath Rising: Call for Examples</source>
      </item>
  </channel>
</rss>

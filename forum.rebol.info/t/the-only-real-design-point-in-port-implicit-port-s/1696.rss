<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Only Real Design Point in PORT!: Implicit PORT!s</title>
    <link>https://forum.rebol.info/t/the-only-real-design-point-in-port-implicit-port-s/1696</link>
    <description>Thanks to what I&#39;ve been finally getting around to looking at...I can guarantee you that *I now officially know more about Rebol PORT!s than anyone in the world*.  &lt;sub&gt;(Which is not really anything to brag about.)&lt;/sub&gt;

:worried: :globe_with_meridians: :see_no_evil:

Due to what I&#39;ve learned, I can tell you that my long-ago suspicions turned out to be completely correct.  There is only one idea to salvage: *implicit ports*.

## Though It&#39;s Only One Idea, It&#39;s a Pretty Good One

This feature is PORT!s saving grace.  So why would we settle for this wimpy behavior?

    r3-alpha&gt;&gt; append %foo.txt &quot;abc&quot;
    == %foo.txtabc

That&#39;s lackluster!  So it needs to act like:

    let p: open/write/new %foo.txt
    append p &quot;abc&quot;
    close p

But not every operation that receives a FILE! as a first argument would turn it into a PORT!.  For instance, JOIN would not:

    &gt;&gt; join %foo/ &quot;abc.txt&quot;
    == %foo/abc.txt

Unlike APPEND, JOIN doesn&#39;t take PORT!s as a first argument.  And it would explicitly take FILE! as an argument.  Hence the rule doesn&#39;t apply... *the enforcement of implicit port behavior only applies when an argument can be a PORT!, e.g. port actions.*

Does this mean you can&#39;t write a PORT! action called JOIN?  I think you could write one if you wanted.  But that&#39;s not what comes in the box... the JOIN you get in LIB is just a function.

## Complexities of the OPEN and CLOSE Keywords

A rather important detail that is overlooked (most of the time) in the discussions of implicit ports is that they&#39;re not just [OPEN -&gt; ACTION -&gt; CLOSE].  The OPEN call is different based on the action!

When you say **`read %foo.txt`** what you are actually saying is equivalent to:

    port: open/read %foo.txt  ; notice the /READ
    data: read port
    close port
    data

While if you say **`append %foo.txt &quot;appendme&quot;`** you&#39;re saying:

    port: open/write %foo.txt  ; notice the /WRITE
    append port &quot;appendme&quot;
    close port

When you say **`write %foo.txt &quot;writeme&quot;`** what you are actually saying is:

    port: open/write/new %foo.txt   ; notice the /WRITE *and* the /NEW
    write port &quot;writeme&quot;
    close port

This was bumming me out a bit, because it means that every port action gets wound up in having to implement the implicit port behavior.

**The involvement of the actions in their decisions about what to do in implicit port behavior seems inevitable.  But I think we have to look at things a slightly different way.**

Let&#39;s instead say operations like APPEND and WRITE and READ are always ready to operate on PORT!s that have only gone through MAKE PORT!, and do the opening and closing themselves. Then we get something that looks like this:

    read %foo.txt
    =&gt;
    port: make port! %foo.txt
    read port

    write %foo.txt
    =&gt;
    port: make port! %foo.txt
    write port &quot;writeme&quot;

    append %foo.txt &quot;appendme
    =&gt;
    port: make port! %foo.txt
    append port &quot;appendme&quot;

Arguably even more satisfying, this reduces down to:

    read %foo.txt
    =&gt;
    read (make port! %foo.txt)

    write %foo.txt
    =&gt;
    write (make port! %foo.txt) &quot;writeme&quot;

    append %foo.txt &quot;appendme
    =&gt;
    append (make port! %foo.txt) &quot;appendme&quot;


## This Formulation Has a Perk!

**The verbs OPEN and CLOSE have been removed from the picture for implicit ports.**

Here it says that if a port has gone through MAKE and it&#39;s specified, it&#39;s ready to use...and it&#39;s those who have an interest in doing longer-spanning operations who get involved with concepts like OPEN or LOOKUP or CONNECT or CLOSE.

Maybe you have a `door://` scheme, and OPEN and CLOSE mean something completely different.  When the implicit port formulation has dropped the idea of involving open and close, then there&#39;s no real reason you can&#39;t say **close door://garage** and have that be able to mean actually closing the garage door...without tripping up the implicit ports.

## Pitfalls Of Operating on &quot;Merely Made&quot; PORT!s?

Looked at this way, we see implicit ports as being the willingness of various port types to interpret actions on a port that has been specified, but not opened.

This could cause confusion:


    &gt;&gt; write %hello.txt &quot;Hello World&quot;

    &gt;&gt; p: make port! %hello.txt

    ; the port has gone through MAKE and not OPEN
    ; so a READ is interpreted as opening the file, reading, closing
    ;
    &gt;&gt; read/part p 5
    == &quot;Hello&quot;

    &gt;&gt; read/part p 5
    == &quot;Hello&quot;  ; did not remember its position as an opened port would

If we allow you to do READ or WRITE from a port that is not opened and forget the state every time, that provides a good mechanic for implicit ports...but could be confusing.

We could say that if a port goes through an implicit opening and closing, it keeps its current position as an offset. Whereas going through CLOSE and OPEN would reset that.

It&#39;s something to think about. Generally speaking, I don&#39;t know how many cycles of concern should be spent on people using low level MAKE PORT! operations instead of OPEN.

## Could We Generalize This Beyond PORT! Actions?

We might be tempted to say that *any* function argument that can take a PORT! would be able to harness implicit port semantics.  What about this:

    read-two-lines: func [p [port!]] [
        collect [
            keep read/line p
            keep read/line p
        ]
    ]

Wouldn&#39;t it be nice if you could say:

    read-two-lines %some-file.txt

...and if the opening and closing were handled for you automatically?

There&#39;s some friction there, if the port is designed to be returned.  Consider this:

    read-line-and-wait: func [
        return: [port!]
        p [port!]
    ][
        line: read/line p
        wait 10
        return p
    ]

So if you say `read-line-and-wait %some-file.txt`, then if the implicit-port mechanic closed the port after the READ-LINE-AND-WAIT call was over, the port given back would wind up being closed.

Besides being returned, the port could have been put anywhere...a global variable, poked into some object.  Closing it upon return from READ-LINE-AND-WAIT may not be what was wanted.

*You can&#39;t really get good automatic behavior in these situations unless you have some kind of good **&quot;RAII&quot;** mechanic*.

https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization

**Rebol&#39;s very loose language semantics really make it tough to do good features in this vein.**

Of course no language is perfect here, you often have to break the paradigm to solve real problems.  Not everything in Rust can be done under the purview of the borrow-checker, for example, so you end up with atomic reference-counted [&quot;Arc&quot;](https://doc.rust-lang.org/std/sync/struct.Arc.html)...and get cycles, etc.

But Rebol is down in the dumps with the worst languages in this regard.  Which is something I&#39;ve said is worth stopping to think about.  BLOCK!s and WORD!s and such could be handled differently from OBJECT!s and PORT!s...and we could have a borrow checker too!  If it&#39;s a good idea it should be thought about.

## Moral of the Story Is: Implicit Ports Are A Keeper

By hook or by crook, we should make them work...because having the choice to operate with them implicitly or explicitly is a good idea.</description>
    
    <lastBuildDate>Wed, 01 Sep 2021 12:27:57 +0000</lastBuildDate>
    <category>Ports</category>
    <atom:link href="https://forum.rebol.info/t/the-only-real-design-point-in-port-implicit-port-s/1696.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Only Real Design Point in PORT!: Implicit PORT!s</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Thanks to what I've been finally getting around to looking at...I can guarantee you that <em>I now officially know more about Rebol PORT!s than anyone in the world</em>.  <sub>(Which is not really anything to brag about.)</sub></p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/worried.png?v=9" title=":worried:" class="emoji only-emoji" alt=":worried:"> <img src="https://forum.rebol.info/images/emoji/twitter/globe_with_meridians.png?v=9" title=":globe_with_meridians:" class="emoji only-emoji" alt=":globe_with_meridians:"> <img src="https://forum.rebol.info/images/emoji/twitter/see_no_evil.png?v=9" title=":see_no_evil:" class="emoji only-emoji" alt=":see_no_evil:"></p>
<p>Due to what I've learned, I can tell you that my long-ago suspicions turned out to be completely correct.  There is only one idea to salvage: <em>implicit ports</em>.</p>
<h2>Though It's Only One Idea, It's a Pretty Good One</h2>
<p>This feature is PORT!s saving grace.  So why would we settle for this wimpy behavior?</p>
<pre><code>r3-alpha&gt;&gt; append %foo.txt "abc"
== %foo.txtabc
</code></pre>
<p>That's lackluster!  So it needs to act like:</p>
<pre><code>let p: open/write/new %foo.txt
append p "abc"
close p
</code></pre>
<p>But not every operation that receives a FILE! as a first argument would turn it into a PORT!.  For instance, JOIN would not:</p>
<pre><code>&gt;&gt; join %foo/ "abc.txt"
== %foo/abc.txt
</code></pre>
<p>Unlike APPEND, JOIN doesn't take PORT!s as a first argument.  And it would explicitly take FILE! as an argument.  Hence the rule doesn't apply... <em>the enforcement of implicit port behavior only applies when an argument can be a PORT!, e.g. port actions.</em></p>
<p>Does this mean you can't write a PORT! action called JOIN?  I think you could write one if you wanted.  But that's not what comes in the box... the JOIN you get in LIB is just a function.</p>
<h2>Complexities of the OPEN and CLOSE Keywords</h2>
<p>A rather important detail that is overlooked (most of the time) in the discussions of implicit ports is that they're not just [OPEN -&gt; ACTION -&gt; CLOSE].  The OPEN call is different based on the action!</p>
<p>When you say <strong><code>read %foo.txt</code></strong> what you are actually saying is equivalent to:</p>
<pre><code>port: open/read %foo.txt  ; notice the /READ
data: read port
close port
data
</code></pre>
<p>While if you say <strong><code>append %foo.txt "appendme"</code></strong> you're saying:</p>
<pre><code>port: open/write %foo.txt  ; notice the /WRITE
append port "appendme"
close port
</code></pre>
<p>When you say <strong><code>write %foo.txt "writeme"</code></strong> what you are actually saying is:</p>
<pre><code>port: open/write/new %foo.txt   ; notice the /WRITE *and* the /NEW
write port "writeme"
close port
</code></pre>
<p>This was bumming me out a bit, because it means that every port action gets wound up in having to implement the implicit port behavior.</p>
<p><strong>The involvement of the actions in their decisions about what to do in implicit port behavior seems inevitable.  But I think we have to look at things a slightly different way.</strong></p>
<p>Let's instead say operations like APPEND and WRITE and READ are always ready to operate on PORT!s that have only gone through MAKE PORT!, and do the opening and closing themselves. Then we get something that looks like this:</p>
<pre><code>read %foo.txt
=&gt;
port: make port! %foo.txt
read port

write %foo.txt
=&gt;
port: make port! %foo.txt
write port "writeme"

append %foo.txt "appendme
=&gt;
port: make port! %foo.txt
append port "appendme"
</code></pre>
<p>Arguably even more satisfying, this reduces down to:</p>
<pre><code>read %foo.txt
=&gt;
read (make port! %foo.txt)

write %foo.txt
=&gt;
write (make port! %foo.txt) "writeme"

append %foo.txt "appendme
=&gt;
append (make port! %foo.txt) "appendme"
</code></pre>
<h2>This Formulation Has a Perk!</h2>
<p><strong>The verbs OPEN and CLOSE have been removed from the picture for implicit ports.</strong></p>
<p>Here it says that if a port has gone through MAKE and it's specified, it's ready to use...and it's those who have an interest in doing longer-spanning operations who get involved with concepts like OPEN or LOOKUP or CONNECT or CLOSE.</p>
<p>Maybe you have a <code>door://</code> scheme, and OPEN and CLOSE mean something completely different.  When the implicit port formulation has dropped the idea of involving open and close, then there's no real reason you can't say <strong>close door://garage</strong> and have that be able to mean actually closing the garage door...without tripping up the implicit ports.</p>
<h2>Pitfalls Of Operating on "Merely Made" PORT!s?</h2>
<p>Looked at this way, we see implicit ports as being the willingness of various port types to interpret actions on a port that has been specified, but not opened.</p>
<p>This could cause confusion:</p>
<pre><code>&gt;&gt; write %hello.txt "Hello World"

&gt;&gt; p: make port! %hello.txt

; the port has gone through MAKE and not OPEN
; so a READ is interpreted as opening the file, reading, closing
;
&gt;&gt; read/part p 5
== "Hello"

&gt;&gt; read/part p 5
== "Hello"  ; did not remember its position as an opened port would
</code></pre>
<p>If we allow you to do READ or WRITE from a port that is not opened and forget the state every time, that provides a good mechanic for implicit ports...but could be confusing.</p>
<p>We could say that if a port goes through an implicit opening and closing, it keeps its current position as an offset. Whereas going through CLOSE and OPEN would reset that.</p>
<p>It's something to think about. Generally speaking, I don't know how many cycles of concern should be spent on people using low level MAKE PORT! operations instead of OPEN.</p>
<h2>Could We Generalize This Beyond PORT! Actions?</h2>
<p>We might be tempted to say that <em>any</em> function argument that can take a PORT! would be able to harness implicit port semantics.  What about this:</p>
<pre><code>read-two-lines: func [p [port!]] [
    collect [
        keep read/line p
        keep read/line p
    ]
]
</code></pre>
<p>Wouldn't it be nice if you could say:</p>
<pre><code>read-two-lines %some-file.txt
</code></pre>
<p>...and if the opening and closing were handled for you automatically?</p>
<p>There's some friction there, if the port is designed to be returned.  Consider this:</p>
<pre><code>read-line-and-wait: func [
    return: [port!]
    p [port!]
][
    line: read/line p
    wait 10
    return p
]
</code></pre>
<p>So if you say <code>read-line-and-wait %some-file.txt</code>, then if the implicit-port mechanic closed the port after the READ-LINE-AND-WAIT call was over, the port given back would wind up being closed.</p>
<p>Besides being returned, the port could have been put anywhere...a global variable, poked into some object.  Closing it upon return from READ-LINE-AND-WAIT may not be what was wanted.</p>
<p><em>You can't really get good automatic behavior in these situations unless you have some kind of good <strong>"RAII"</strong> mechanic</em>.</p>
<aside class="onebox wikipedia">
  <header class="source">
      <a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization" target="_blank" rel="noopener">en.wikipedia.org</a>
  </header>
  <article class="onebox-body">
    

<h3><a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization" target="_blank" rel="noopener">Resource acquisition is initialization</a></h3>

<p>Resource acquisition is initialization (RAII) is a programming idiom used in several object-oriented, statically-typed programming languages to describe a particular language behavior.  In RAII, holding a resource is a class invariant, and is tied to object lifetime: resource allocation (or acquisition) is done during object creation (specifically initialization), by the constructor, while resource deallocation (release) is done during object destruction (specifically finalization), by the  RAII ...</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p><strong>Rebol's very loose language semantics really make it tough to do good features in this vein.</strong></p>
<p>Of course no language is perfect here, you often have to break the paradigm to solve real problems.  Not everything in Rust can be done under the purview of the borrow-checker, for example, so you end up with atomic reference-counted <a href="https://doc.rust-lang.org/std/sync/struct.Arc.html">"Arc"</a>...and get cycles, etc.</p>
<p>But Rebol is down in the dumps with the worst languages in this regard.  Which is something I've said is worth stopping to think about.  BLOCK!s and WORD!s and such could be handled differently from OBJECT!s and PORT!s...and we could have a borrow checker too!  If it's a good idea it should be thought about.</p>
<h2>Moral of the Story Is: Implicit Ports Are A Keeper</h2>
<p>By hook or by crook, we should make them work...because having the choice to operate with them implicitly or explicitly is a good idea.</p>
          <p><a href="https://forum.rebol.info/t/the-only-real-design-point-in-port-implicit-port-s/1696/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-only-real-design-point-in-port-implicit-port-s/1696/1</link>
        <pubDate>Wed, 01 Sep 2021 06:35:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1696-1</guid>
        <source url="https://forum.rebol.info/t/the-only-real-design-point-in-port-implicit-port-s/1696.rss">The Only Real Design Point in PORT!: Implicit PORT!s</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>TUPLE! and PATH! Big Picture Concept</title>
    <link>https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330</link>
    <description>In the past I&#39;ve suggested the idea that TUPLE! run on the basic same schematic as paths.

    a.b.c  ; a TUPLE!
    a/b/c  ; a PATH!

While decimal numbers like 10.20 have proven controversial to switch to be TUPLE! (e.g. by pushing DECIMAL! to use the 10,20 international format), they should be able to hold everything else PATH!s can today (which includes BLOCK! and GROUP!).

PATH!s have also become more interesting in terms of ways to augment a single WORD!...subsuming REFINEMENT! and also allowing forms that have a BLANK! in the second spot, rendering with a terminal slash:

    /a   ; now a PATH! (with a BLANK! in the first spot)
    a/   ; also a PATH! (with BLANK! in the second spot)
    /a/  ; this works too (3-element PATH! with blanks in first and last spots)

Then of course, these would apply to TUPLE!s as well, giving you fun new tuple variations:

    .a
    a.
    .a.

This gave me an interesting idea about how to define the behaviors, which could also solve longstanding concerns in the system:

 &gt; **What if TUPLE!s evaluated exactly as today&#39;s GET-PATH!s would, never executing functions?**

This would let you bulletproof your code a bit better when picking things out of objects that you expect to be values.  You&#39;d use dots.  Terminal dots could be useful too...as a slightly more subtle way to ask a WORD! not to execute than to use a GET-WORD!.

    append block data.

You could read that out as &quot;append block, data...PERIOD.&quot;  Do not call *data*, it is not a function.  This would mean **:my-object/field/subfield** could look much cleaner as **my-object.field.subfield** (no terminal dot needed since the last internal split is a dot).

I&#39;d suggest then that *ending* with a slash means that you *guarantee* the thing you are calling is a function.

    append block data/

If you don&#39;t want to specify you leave it off, as today.

My proposal would be that only terminal slashes act this way...for compatibility.  It would be your choice to use a slash internally to a path for polymorphism (as there is no other polymorphic option).

With this, you could then write:

    obj.member-obj.method/refinement whatever

If you were in the practice of only using / when calling functions then this would unambiguously suggest to you that method must be a function.  Again--this would not be enforced.

I think this would really help decipher expressions like **a/b/c/d/e/f** if they were written as **a.b.c/d/e/f** or **a.b/c/d/e/f** or **a.b.c.d.e/f** (or **a.b.c.d.e.f/** or **a.b.c.d.e.f.** if you wanted to be more explicit about whether the end of the chain results in a function call or value).

There are some bigger implications here about having another way of indicating suppression or execution with the terminals.  I&#39;ve often worried about the ambiguity of whether GET-WORD! meant suppressing execution or tolerating undefined values...which we had made an interim resolution to say that it only suppressed execution, and GET/ANY was necessary to get voids (as in Rebol2).  But this throws in new possibilities so that should probably be rethought.</description>
    
    <lastBuildDate>Wed, 01 Sep 2021 12:21:34 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>TUPLE! and PATH! Big Picture Concept</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I was reviewing an old post in which <a href="https://forum.rebol.info/t/reds-design-issues-wiki/1282">I Reacted to Red's Design Issues Wiki</a>, where the question was asked:</p>
<p><strong>"Why do paths evaluate picked items (so-called active accessors)"</strong></p>
<p>Boris says the below <a href="https://gitter.im/red/red?at=5c784a64e1446a6ebe5fe02b">in Gitter chat</a> (emphasis mine)</p>
<blockquote>
<p>This is actually harmful. By writing block/1 you are meaning to do what? To call the first function of a block? What a nonsense. Most likely you are meaning to fetch first item. That's just how it reads.</p>
<p>When your path is not numeric, but something/word then on the other hand it's likely a function call or an attempt to get the value of the associated word. It reads differently, and in this case evaluation is what you would expect. Yeah I know about get-path etc etc. <strong>But I also know from my little experience this is a source of bugs, and affects not just newbies (we're all human after all, and everyone is lazy to spare the extra colon).</strong></p>
</blockquote>
<h2>Just To Cover All The Bases, I'll Mention An Idea</h2>
<p>Today we can put a slash <em>after</em> a function call to enforce that it is a function, or a dot <em>after</em> a non-function:</p>
<pre><code>&gt;&gt; append [a b c] negate.
** Error: NEGATE is ACTION! so you can't access it with . as NEGATE.

&gt;&gt; orange/
** Error: ORANGE is not an ACTION! so you can't invoke it with / as ORANGE/
</code></pre>
<p>And this applies to path components.  So each time there is a dot it enforces the the thing to its left is not a function.</p>
<p>This doesn't help us with the issue being mentioned, where something like <strong>data.1</strong> will run a function even though you probably didn't want it to (but might have).</p>
<p>Which leads to an idea I'd rejected but might deserve an articulation of exactly why:</p>
<p><strong>What if the slash was used <em>before</em> a function to indicate it was a call?</strong></p>
<pre><code>obj/run 1 2 3   ; RUN is a function

obj.var  ; var is not a function
</code></pre>
<h2>Examples</h2>
<pre><code>&gt;&gt; "Hello"
== "Hello"

&gt;&gt; system.console/last-result
** Error: system.console/last-result is not a function, use .last-result

&gt;&gt; system.console.last-result
== "Hello"

&gt;&gt; system.console.print-result 10
** Error: system.console.print-result is a function, use /print-result

&gt;&gt; system.console/print-result 10
== 10
</code></pre>
<p>Well, it solves the problem.  But I can't help but read the slash before the function call as making it a refinement of the thing before it.  <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=9" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p>Of course, one must bear in mind that historically that was <strong>system/console/last-result</strong> so it was even worse!</p>
<p>You can look at it as two different rules:</p>
<ul>
<li>
<p>If you see a slash in something that's a mixture of slashed and dotted parts, you're looking at a function call, and the function is the thing after the first slash.</p>
</li>
<li>
<p>If you see a slash in something that's only slashed components, you're also looking at a function call, and the function is the thing before the first slash.</p>
</li>
</ul>
<p>Or you can try to look at it as just one:</p>
<ul>
<li><em>Slashes put you in the mode of making a function call if you weren't already in that mode.</em></li>
</ul>
<h2>Could We Learn To Like It?</h2>
<p>I never even wrote this up before because it rubbed me the wrong way.</p>
<p>But when I take my kneejerk response out of the equation, I realize that the benefits of being able to identify a function call are very high.</p>
<p><em>Okay, the thing I want is in the system object...</em></p>
<pre><code>system
</code></pre>
<p><em>And it's another object, the console...</em></p>
<pre><code>system.console
</code></pre>
<p><em>And I want to call a function...</em></p>
<pre><code>system.console/
</code></pre>
<p><em>It's called PRINT-RESULT...</em></p>
<pre><code>system.console/print-result
</code></pre>
<p>That seems like a pretty reasonable set of steps, but plain refinements don't call functions:</p>
<pre><code>/append
</code></pre>
<p>Rather, that's inert and terminal slashes call functions:</p>
<pre><code>append/
</code></pre>
<h2>Other Arguments Against: Structural Separation</h2>
<p>When you write <strong>obj1.obj2.method/refine1/refine2</strong> that is a PATH! of 3 elements.  The first element of that path is a TUPLE! with 3 elements.</p>
<p>There's something architecturally nice in having all the selection logic happen in the first tuple.  We can truly split the responsibility of what a slash does and what a dot does.  Slashes do refinements, dots do selection.</p>
<p>But mixing it up to where slashes are involved in selection feels like it's going backwards against aesthetic and design advancements that have been made.  I dunno.</p>
<h2>My Instinct Still Says The Cure Is Worse Than The Disease</h2>
<p>I know it's a great feature to know when things are a function call or not.  It's very alluring to be able to be getting it in these cases "for free" in terms of character count.</p>
<p>But... I... just don't like it!  <img src="https://forum.rebol.info/images/emoji/twitter/face_vomiting.png?v=9" title=":face_vomiting:" class="emoji" alt=":face_vomiting:"></p>
          <p><a href="https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330/7</link>
        <pubDate>Wed, 01 Sep 2021 12:21:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1330-7</guid>
        <source url="https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330.rss">TUPLE! and PATH! Big Picture Concept</source>
      </item>
      <item>
        <title>TUPLE! and PATH! Big Picture Concept</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In other "random thoughts", I think that PAIR! and TUPLE! can be unified...such that a 2 element numeric-oriented tuple renders with an <code>x</code>.  Then PAIR! would be a "type constraint class" (like how REFINEMENT! will be a constraint on PATH!s of length 2 with blank at the head).</p>
<p>This would save on a lot of redundant elementwise code...recover one of the 64 internal type bytes and bring PAIR's 2-element-"pairing" series optimization) where 2 REBVAL fit in a REBSER node with no external allocation) to PATH! and TUPLE!.</p>
<p>Type constraints are effectively predicates, so maybe they would be done e.g. as <strong>.refinement?</strong></p>
<pre><code> &gt;&gt; any .refinement? [/a/ b/c /d ///e]
 == /d

 &gt;&gt; print-pair: func [pair [.pair?]] [print mold pair]

 &gt;&gt; print-pair 'a/b
 ** Error: print-pair expects its pair argument to match PAIR? constraint
</code></pre>
<p>I dunno.  Also, there's a question of whether <code>1/2</code> should be legal as a PATH!.  It currently conflicts with DATE!, but should probably stick to 12-Dec-2012 forms...because slashed numbers seem more valuable to have...and it makes up for not having 1x2 instead of 1.2</p>
          <p><a href="https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330/6</link>
        <pubDate>Mon, 21 Sep 2020 16:58:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1330-6</guid>
        <source url="https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330.rss">TUPLE! and PATH! Big Picture Concept</source>
      </item>
      <item>
        <title>TUPLE! and PATH! Big Picture Concept</title>
        <dc:creator><![CDATA[Mark-hi]]></dc:creator>
        <description><![CDATA[
            <p>This means decimal numbers in paths/tuples will require forming with comma ",". It is somewhat similar to the date case, in that date slash-forms cannot appear in paths/tuples, however in the decimal number case the form with comma is not the default form. So, decimal numbers will form differently whether they are in a path/tuple or not (unless you want to change the default form to use comma, which I am against).</p>
          <p><a href="https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330/5</link>
        <pubDate>Mon, 21 Sep 2020 16:44:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1330-5</guid>
        <source url="https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330.rss">TUPLE! and PATH! Big Picture Concept</source>
      </item>
      <item>
        <title>TUPLE! and PATH! Big Picture Concept</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So the rule for the TUPLE! would be "things to the left of a dot can't be functions".</p>
<pre><code>append block some.item   ; SOME can't be a function, but ITEM can...not executed
append block some.item.  ; neither SOME nor ITEM can be a function
</code></pre>
<p>I'm not sure what the implication would be for <strong>a.b/c.d</strong> when b is a function.  :-/  This would mean C and D would be refinements or something?  There's no need for it to have meaning...it could just be an error (and saved for dialects that wanted to make use of it).</p>
<p>What's really neat is that the trick for using single cells for PATH!s that contain only one item has now been deployed for the <code>/</code> trick that <a class="mention" href="/u/giuliolunati">@giuliolunati</a> wanted.  It's creaky at the moment, but the concept is proven.  That means we can get all of <strong>[.a a. .a. /a a/ /a/]</strong> each for the same price as a single WORD!.</p>
          <p><a href="https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330/4</link>
        <pubDate>Sat, 19 Sep 2020 15:19:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1330-4</guid>
        <source url="https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330.rss">TUPLE! and PATH! Big Picture Concept</source>
      </item>
      <item>
        <title>TUPLE! and PATH! Big Picture Concept</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p><img src="https://forum.rebol.info/images/emoji/twitter/clap.png?v=9" title=":clap:" class="emoji" alt=":clap:"> I think this is clever, I'm curious to see what kind of reception this gets.</p>
          <p><a href="https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330/3</link>
        <pubDate>Sat, 19 Sep 2020 15:11:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1330-3</guid>
        <source url="https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330.rss">TUPLE! and PATH! Big Picture Concept</source>
      </item>
      <item>
        <title>TUPLE! and PATH! Big Picture Concept</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="1" data-topic="1330">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>a.b.c ; a TUPLE!
</code></pre>
</blockquote>
</aside>
<p>Note that although this proposal would take away "." from WORD! characters, it would not remove "." from being able to reach values.  So if you had <strong>charsets.latin1</strong> it could still find it, but you'd just have to have CHARSETS defined as an object.</p>
<p>The twist would be that if you wanted to call a function with <strong>.</strong> in the name, you'd have to stick on a terminal slash (or use REEVALUATE (abbreviated REEVAL), or APPLY, etc).</p>
<pre><code>some.fun/ arg1 arg2
reeval some.fun arg1 arg2
</code></pre>
<p>But I do think it builds on solid logic to the idea that period isn't a word character (while it makes sense for apostrophe to be).  If you use periods it really seems like you're indicating some kind of structural intent...as opposed to hyphens or underscores, that are more typically "parts of the word".</p>
<p><em>(Note: I'm very tempted to think that this could all be used somehow to suppress assignment of functions, e.g. <strong>foo: .bar</strong> or <strong>foo: bar.</strong> will guarantee bar is not a function, or something like that.  But it needs to be thought through consistently.  This gets at some of the bulletproofing that I think is worth it for libraries, but maybe not the average user code...  )</em></p>
          <p><a href="https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330/2</link>
        <pubDate>Sat, 19 Sep 2020 13:26:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1330-2</guid>
        <source url="https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330.rss">TUPLE! and PATH! Big Picture Concept</source>
      </item>
      <item>
        <title>TUPLE! and PATH! Big Picture Concept</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In the past I've suggested the idea that TUPLE! run on the basic same schematic as paths.</p>
<pre><code>a.b.c  ; a TUPLE!
a/b/c  ; a PATH!
</code></pre>
<p>While decimal numbers like 10.20 have proven controversial to switch to be TUPLE! (e.g. by pushing DECIMAL! to use the 10,20 international format), they should be able to hold everything else PATH!s can today (which includes BLOCK! and GROUP!).</p>
<p>PATH!s have also become more interesting in terms of ways to augment a single WORD!...subsuming REFINEMENT! and also allowing forms that have a BLANK! in the second spot, rendering with a terminal slash:</p>
<pre><code>/a   ; now a PATH! (with a BLANK! in the first spot)
a/   ; also a PATH! (with BLANK! in the second spot)
/a/  ; this works too (3-element PATH! with blanks in first and last spots)
</code></pre>
<p>Then of course, these would apply to TUPLE!s as well, giving you fun new tuple variations:</p>
<pre><code>.a
a.
.a.
</code></pre>
<p>This gave me an interesting idea about how to define the behaviors, which could also solve longstanding concerns in the system:</p>
<blockquote>
<p><strong>What if TUPLE!s evaluated exactly as today's GET-PATH!s would, never executing functions?</strong></p>
</blockquote>
<p>This would let you bulletproof your code a bit better when picking things out of objects that you expect to be values.  You'd use dots.  Terminal dots could be useful too...as a slightly more subtle way to ask a WORD! not to execute than to use a GET-WORD!.</p>
<pre><code>append block data.
</code></pre>
<p>You could read that out as "append block, data...PERIOD."  Do not call <em>data</em>, it is not a function.  This would mean <strong>:my-object/field/subfield</strong> could look much cleaner as <strong>my-object.field.subfield</strong> (no terminal dot needed since the last internal split is a dot).</p>
<p>I'd suggest then that <em>ending</em> with a slash means that you <em>guarantee</em> the thing you are calling is a function.</p>
<pre><code>append block data/
</code></pre>
<p>If you don't want to specify you leave it off, as today.</p>
<p>My proposal would be that only terminal slashes act this way...for compatibility.  It would be your choice to use a slash internally to a path for polymorphism (as there is no other polymorphic option).</p>
<p>With this, you could then write:</p>
<pre><code>obj.member-obj.method/refinement whatever
</code></pre>
<p>If you were in the practice of only using / when calling functions then this would unambiguously suggest to you that method must be a function.  Again--this would not be enforced.</p>
<p>I think this would really help decipher expressions like <strong>a/b/c/d/e/f</strong> if they were written as <strong>a.b.c/d/e/f</strong> or <strong>a.b/c/d/e/f</strong> or <strong>a.b.c.d.e/f</strong> (or <strong>a.b.c.d.e.f/</strong> or <strong>a.b.c.d.e.f.</strong> if you wanted to be more explicit about whether the end of the chain results in a function call or value).</p>
<p>There are some bigger implications here about having another way of indicating suppression or execution with the terminals.  I've often worried about the ambiguity of whether GET-WORD! meant suppressing execution or tolerating undefined values...which we had made an interim resolution to say that it only suppressed execution, and GET/ANY was necessary to get voids (as in Rebol2).  But this throws in new possibilities so that should probably be rethought.</p>
          <p><a href="https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330/1</link>
        <pubDate>Sat, 19 Sep 2020 12:39:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1330-1</guid>
        <source url="https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330.rss">TUPLE! and PATH! Big Picture Concept</source>
      </item>
  </channel>
</rss>

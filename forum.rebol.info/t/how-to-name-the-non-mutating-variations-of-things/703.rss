<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How to Name the Non-Mutating Variations of Things</title>
    <link>https://forum.rebol.info/t/how-to-name-the-non-mutating-variations-of-things/703</link>
    <description>In [Planning Ahead for BigNum Arithmetic](https://forum.rebol.info/t/planning-ahead-for-bignum-arithmetic/623), I proposed prefix **add** become mutating, while infix **+** become a crafty specialization that can take in a platform-sized integer and give back a &quot;locked&quot; integer (usually platform-sized).  This would mean that despite INTEGER! being BigNum, you wouldn&#39;t pay any performance penalty or notice a difference so long as you used + everywhere and your numbers stayed in platform integer range.

*(Once your numbers started being so big as to be bignums, you might want to rethink before doing a loop that used + to add 1 over a span of a million indices, because at THAT point each + would actually have to create a whole new bignum structure in order to be non-mutating.)*

But what if someone wanted the behavior of that **+** but wanted a prefix name for it?  Well, how about **PLUS**.  That seems to make sense, because then **+: enfix :plus**.

Then there could be **MINUS**, a similar prefix non-mutating name for the variant of the mutating SUBTRACT.

I think these names do a good job of sounding less mutating.  &quot;add&quot; and &quot;subtract&quot; sound like things you *do*, while &quot;plus&quot; and &quot;minus&quot; sound like things that *are* or just *happen*.

I know @gchiu has suggested seeing TIMES as a loop operator, but it seems to me that would fit better as the non-mutating **multiply**.

    &gt;&gt; multiply 2 3
    ** Error: INTEGER! source-level or locked, use TIMES instead of MULTIPLY

    &gt;&gt; times 2 3
    == 6

    &gt;&gt; 2 * 3
    == 6

### But how long can this go on...?

It starts getting hazy at **divide** =&gt; QUOTIENT.  And one wonders, *does every math operation need to invent a new name for the non-mutating form*?  Then **modulo** =&gt; ... MODULUS?  What about integer-based DIV?

This is really a reflection of a generic problem when you have **operation mutated-arg ...** and want to make something that&#39;s synonymous with **operation (copy mutated-arg) ...**, though perhaps more efficient by doing the copy as part of the operation.  Basically every mutating operator in Rebol&#39;s &quot;mutate by default&quot; wants a version that does this...whether it&#39;s APPEND or UNION or LOWERCASE or anything else you can think of.

We know some languages went with mutating operations being named with an **!**, to warn you they changed things.  So it would be **append!** vs **append**.  But unsafe though it is, Rebol goes with mutation by default.

I&#39;ve suggested that /COPY might be a good name for a refinement asking the mutating operators to copy their argument... **append/copy**, **lowercase/copy**, etc.  So this convention could apply to the bignums as well... **add/copy**, **subtract/copy**.  Those could still be specialized as PLUS and MINUS if it were deemed they were high-volume enough to warrant it.

But that&#39;s a lot of typing.  I suggested **append+**, **lowercase+**... as if the + was signifying you were &quot;adding to the total number of values in the system&quot;.  This would of course look a bit strange with **subtract+**.

I&#39;ve suggested also some system-level optimizations.  We might be able to make **append copy x y** do a deferred copy, e.g. only make the copy when X gets mutated.  This means the APPEND could notice that COPY X was in a copy-on-write state that hadn&#39;t needed to do the copy yet, and hence could more efficiently create the copy-plus-space-for-y at once.  Ultimately something like that may be the best option.

### Impact on JOIN, REPEND, etc?

One change that I&#39;d file under the &quot;hasn&#39;t been a complete win&quot; (yet) category was the idea that JOIN take over the role of REPEND, and be the &quot;reducing append&quot;.  Like most other such operators in the system, it would be mutating by default... meaning you had to COPY most things you&#39;d join with (e.g. literals, `join copy http://example.com [%file 1 + 2 %.txt]`)

An idea I had at the time for the suffix for non-mutating forms would be -OF, so JOIN-OF, APPEND-OF, LOWERCASE-OF.  But OF has become more interesting and nebulous, with **type of x** and **length of x**, so I don&#39;t think that&#39;s a good suffix to be overloading.

---

It may be that the best thing to do is to figure out the deferment of the copying, as a general mechanism.  **append copy x y** or **uppercase copy x** seems literate enough.</description>
    
    <lastBuildDate>Fri, 22 Jun 2018 06:52:27 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/how-to-name-the-non-mutating-variations-of-things/703.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How to Name the Non-Mutating Variations of Things</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In <a href="https://forum.rebol.info/t/planning-ahead-for-bignum-arithmetic/623">Planning Ahead for BigNum Arithmetic</a>, I proposed prefix <strong>add</strong> become mutating, while infix <strong>+</strong> become a crafty specialization that can take in a platform-sized integer and give back a "locked" integer (usually platform-sized).  This would mean that despite INTEGER! being BigNum, you wouldn't pay any performance penalty or notice a difference so long as you used + everywhere and your numbers stayed in platform integer range.</p>
<p><em>(Once your numbers started being so big as to be bignums, you might want to rethink before doing a loop that used + to add 1 over a span of a million indices, because at THAT point each + would actually have to create a whole new bignum structure in order to be non-mutating.)</em></p>
<p>But what if someone wanted the behavior of that <strong>+</strong> but wanted a prefix name for it?  Well, how about <strong>PLUS</strong>.  That seems to make sense, because then <strong>+: enfix :plus</strong>.</p>
<p>Then there could be <strong>MINUS</strong>, a similar prefix non-mutating name for the variant of the mutating SUBTRACT.</p>
<p>I think these names do a good job of sounding less mutating.  "add" and "subtract" sound like things you <em>do</em>, while "plus" and "minus" sound like things that <em>are</em> or just <em>happen</em>.</p>
<p>I know <a class="mention" href="/u/gchiu">@gchiu</a> has suggested seeing TIMES as a loop operator, but it seems to me that would fit better as the non-mutating <strong>multiply</strong>.</p>
<pre><code>&gt;&gt; multiply 2 3
** Error: INTEGER! source-level or locked, use TIMES instead of MULTIPLY

&gt;&gt; times 2 3
== 6

&gt;&gt; 2 * 3
== 6
</code></pre>
<h3>But how long can this go on...?</h3>
<p>It starts getting hazy at <strong>divide</strong> =&gt; QUOTIENT.  And one wonders, <em>does every math operation need to invent a new name for the non-mutating form</em>?  Then <strong>modulo</strong> =&gt; ... MODULUS?  What about integer-based DIV?</p>
<p>This is really a reflection of a generic problem when you have <strong>operation mutated-arg ...</strong> and want to make something that's synonymous with <strong>operation (copy mutated-arg) ...</strong>, though perhaps more efficient by doing the copy as part of the operation.  Basically every mutating operator in Rebol's "mutate by default" wants a version that does this...whether it's APPEND or UNION or LOWERCASE or anything else you can think of.</p>
<p>We know some languages went with mutating operations being named with an <strong>!</strong>, to warn you they changed things.  So it would be <strong>append!</strong> vs <strong>append</strong>.  But unsafe though it is, Rebol goes with mutation by default.</p>
<p>I've suggested that /COPY might be a good name for a refinement asking the mutating operators to copy their argument... <strong>append/copy</strong>, <strong>lowercase/copy</strong>, etc.  So this convention could apply to the bignums as well... <strong>add/copy</strong>, <strong>subtract/copy</strong>.  Those could still be specialized as PLUS and MINUS if it were deemed they were high-volume enough to warrant it.</p>
<p>But that's a lot of typing.  I suggested <strong>append+</strong>, <strong>lowercase+</strong>... as if the + was signifying you were "adding to the total number of values in the system".  This would of course look a bit strange with <strong>subtract+</strong>.</p>
<p>I've suggested also some system-level optimizations.  We might be able to make <strong>append copy x y</strong> do a deferred copy, e.g. only make the copy when X gets mutated.  This means the APPEND could notice that COPY X was in a copy-on-write state that hadn't needed to do the copy yet, and hence could more efficiently create the copy-plus-space-for-y at once.  Ultimately something like that may be the best option.</p>
<h3>Impact on JOIN, REPEND, etc?</h3>
<p>One change that I'd file under the "hasn't been a complete win" (yet) category was the idea that JOIN take over the role of REPEND, and be the "reducing append".  Like most other such operators in the system, it would be mutating by default... meaning you had to COPY most things you'd join with (e.g. literals, <code>join copy http://example.com [%file 1 + 2 %.txt]</code>)</p>
<p>An idea I had at the time for the suffix for non-mutating forms would be -OF, so JOIN-OF, APPEND-OF, LOWERCASE-OF.  But OF has become more interesting and nebulous, with <strong>type of x</strong> and <strong>length of x</strong>, so I don't think that's a good suffix to be overloading.</p>
<hr>
<p>It may be that the best thing to do is to figure out the deferment of the copying, as a general mechanism.  <strong>append copy x y</strong> or <strong>uppercase copy x</strong> seems literate enough.</p>
          <p><a href="https://forum.rebol.info/t/how-to-name-the-non-mutating-variations-of-things/703/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-to-name-the-non-mutating-variations-of-things/703/1</link>
        <pubDate>Fri, 22 Jun 2018 06:52:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-703-1</guid>
        <source url="https://forum.rebol.info/t/how-to-name-the-non-mutating-variations-of-things/703.rss">How to Name the Non-Mutating Variations of Things</source>
      </item>
  </channel>
</rss>

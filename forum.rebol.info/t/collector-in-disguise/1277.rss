<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Collector In Disguise</title>
    <link>https://forum.rebol.info/t/collector-in-disguise/1277</link>
    <description>So, this is somewhat trivial.  But what if you wanted a function that instead of RETURN ending the function, it just added to the results and moved on?  [We might call this a COLLECTOR](https://www.youtube.com/watch?v=35qsykW3f58).

Let&#39;s imagine that we like KEEP better than renaming to RETURN

    collector: func [spec block] [return func spec compose [collect (block)]]
    ; ^-- Ren-C semantics for COMPOSE, BLOCK! only splices if ((...))

    c: collector [x] [
        keep x + 1
        keep x + 2
        keep x + 3
    ]

    &gt;&gt; c 10
    == [11 12 13]

    &gt;&gt; c 20
    == [21 22 23]

    &gt;&gt; c 30
    == [31 32 33]

*(Note: This is an interesting example of the &quot;what do I do with a BLOCK!, splice by default or not?&quot;  I still find this to be a central question.  I&#39;m pretty confident that differentiating the splice case in COMPOSE visually with `((...))` is a good move.  But I&#39;m still on the fence about what the bigger story is.  Lately my leaning is that we do have modal parameters, e.g. `keep @value` will act the same as `keep/only value`, but plain KEEP has the variance in behavior for blocks that it has today...risky though it is.  People just learn to live with it or use @ or /ONLY habitually.)*</description>
    
    <lastBuildDate>Tue, 28 Apr 2020 14:43:53 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://forum.rebol.info/t/collector-in-disguise/1277.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Collector In Disguise</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="1277">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/iarnold/40/226_2.png" class="avatar"> iArnold:</div>
<blockquote>
<p>this is something different than using of so called coroutines where the co-routine gets halted or paused to transfer control to another coroutine that can either finish or pass control over again.</p>
</blockquote>
</aside>
<p>Yes, I am actually in the midst of trying to suss out what it takes to implement coroutines.  I just documented this because I had been offering it as a contrast, e.g. <em>what coroutines aren't</em>.</p>
<p>Coroutines require suspending evaluative state and resuming it...which is a very deep idea fraught with technical peril.  But, I am making slow and steady progress on it.  It's not something that happens overnight.</p>
          <p><a href="https://forum.rebol.info/t/collector-in-disguise/1277/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/collector-in-disguise/1277/3</link>
        <pubDate>Tue, 28 Apr 2020 14:43:53 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1277-3</guid>
        <source url="https://forum.rebol.info/t/collector-in-disguise/1277.rss">Collector In Disguise</source>
      </item>
      <item>
        <title>Collector In Disguise</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>For the right perspective here, this is something different than using of so called coroutines where the co-routine gets halted or paused to transfer control to another coroutine that can either finish or pass control over again.</p>
<p>How I solve this thing is just collecting all stuff in a block and return that.</p>
<p>I somehow can imagine some use of this in gaming where this would run and go calculate (perhaps in a loop) until some trigger (timer) goes off and then a break follows that results in the function to return all collected values.</p>
          <p><a href="https://forum.rebol.info/t/collector-in-disguise/1277/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/collector-in-disguise/1277/2</link>
        <pubDate>Tue, 28 Apr 2020 14:41:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1277-2</guid>
        <source url="https://forum.rebol.info/t/collector-in-disguise/1277.rss">Collector In Disguise</source>
      </item>
      <item>
        <title>Collector In Disguise</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So, this is somewhat trivial.  But what if you wanted a function that instead of RETURN ending the function, it just added to the results and moved on?  <a href="https://www.youtube.com/watch?v=35qsykW3f58" rel="nofollow noopener">We might call this a COLLECTOR</a>.</p>
<p>Let's imagine that we like KEEP better than renaming to RETURN</p>
<pre><code>collector: func [spec block] [return func spec compose [collect (block)]]
; ^-- Ren-C semantics for COMPOSE, BLOCK! only splices if ((...))

c: collector [x] [
    keep x + 1
    keep x + 2
    keep x + 3
]

&gt;&gt; c 10
== [11 12 13]

&gt;&gt; c 20
== [21 22 23]

&gt;&gt; c 30
== [31 32 33]
</code></pre>
<p><em>(Note: This is an interesting example of the "what do I do with a BLOCK!, splice by default or not?"  I still find this to be a central question.  I'm pretty confident that differentiating the splice case in COMPOSE visually with <code>((...))</code> is a good move.  But I'm still on the fence about what the bigger story is.  Lately my leaning is that we do have modal parameters, e.g. <code>keep @value</code> will act the same as <code>keep/only value</code>, but plain KEEP has the variance in behavior for blocks that it has today...risky though it is.  People just learn to live with it or use @ or /ONLY habitually.)</em></p>
          <p><a href="https://forum.rebol.info/t/collector-in-disguise/1277/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/collector-in-disguise/1277/1</link>
        <pubDate>Tue, 28 Apr 2020 11:47:36 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1277-1</guid>
        <source url="https://forum.rebol.info/t/collector-in-disguise/1277.rss">Collector In Disguise</source>
      </item>
  </channel>
</rss>

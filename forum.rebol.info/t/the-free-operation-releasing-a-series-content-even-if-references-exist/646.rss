<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The FREE Operation - releasing a series content, even if references exist</title>
    <link>https://forum.rebol.info/t/the-free-operation-releasing-a-series-content-even-if-references-exist/646</link>
    <description>I&#39;ve added a new ability to series, that they can free their data allocation *even if references to them still exist*:

    &gt;&gt; foo: collect [loop 1000 [keep &lt;x&gt;]]

    &gt;&gt; bar: foo

    &gt;&gt; bar/100
    == &lt;x&gt;

    &gt;&gt; free foo

    &gt;&gt; bar/100
    ** Error: Series data has been freed

A small amount of memory (a series node) still hangs around.  That&#39;s 8 pointers in size, and won&#39;t go away until all the references are gone.  But the arbitrarily-large data allocation is freed up.  If you have a BINARY! blob that was a megabyte in size, you will only have 32 bytes remaining once you FREE it (or 64 bytes on 64-bit platforms).

The flag controlling this... SERIES_INFO_INACCESSIBLE... already existed.  It marked when a FRAME! for a function was no longer on the stack, so the data was gone.  But it has been promoted to a general feature of any series.  This means referencing data is a little slower because it has to check for the flag...however, I think that it is worth it.

I needed this right now for something specific--that is not going to actually be relevant in the future.  But I think exposing it as a general purpose feature is useful.  It can help work around bugs in people&#39;s code where they meant to tidy up all lingering references to large data blobs but missed some (maybe even in some debug logging that isn&#39;t critical)...so that not finding and clearing all those references doesn&#39;t imply indefinite memory usage.  It also might be a way to reclaim memory faster than a GC can... so even if the garbage collector would wind up getting the memory anyway, you can do more allocations before waiting for it.</description>
    
    <lastBuildDate>Mon, 28 May 2018 22:40:43 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/the-free-operation-releasing-a-series-content-even-if-references-exist/646.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The FREE Operation - releasing a series content, even if references exist</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="646" data-full="true">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/gchiu/40/22_2.png" class="avatar"> gchiu:</div>
<blockquote>
<p>So unset 'foo would have not affected the series at all.</p>
</blockquote>
</aside>
<p>You'd have to unset both foo and bar, and then a recycle would have to run (either implicitly or explicitly).</p>
<p>With FREE, a small stub has to remain so long as there may be outstanding references.  However, the GC could conceivably do mutations on the stub when it found them later...either collapsing them into one identity or somehow turning the cell into a unique bit pattern for that identity.</p>
<p>(Losing identity would mean you couldn't do identity tests on expired items, e.g. you would not be able to test <code>same? foo bar</code> after the free...though it's worth pointing out that without the data around you can't test for <em>equality</em>, only <em>identity</em>...though decaying to a secure hash would likely be good enough for equality.)</p>
<p>On that note we might call it DECAY instead of FREE... if there are still some operations that are legal.  For the moment, nothing is...at a low level, a freed series fails on any attempted access of its data.  But you can still get the datatype that it was (at the moment), and there is a FREE? test which can be used if you suspect something is free.</p>
          <p><a href="https://forum.rebol.info/t/the-free-operation-releasing-a-series-content-even-if-references-exist/646/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-free-operation-releasing-a-series-content-even-if-references-exist/646/3</link>
        <pubDate>Mon, 28 May 2018 14:07:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-646-3</guid>
        <source url="https://forum.rebol.info/t/the-free-operation-releasing-a-series-content-even-if-references-exist/646.rss">The FREE Operation - releasing a series content, even if references exist</source>
      </item>
      <item>
        <title>The FREE Operation - releasing a series content, even if references exist</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>So unset 'foo would have not affected the series at all.</p>
          <p><a href="https://forum.rebol.info/t/the-free-operation-releasing-a-series-content-even-if-references-exist/646/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-free-operation-releasing-a-series-content-even-if-references-exist/646/2</link>
        <pubDate>Mon, 28 May 2018 07:36:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-646-2</guid>
        <source url="https://forum.rebol.info/t/the-free-operation-releasing-a-series-content-even-if-references-exist/646.rss">The FREE Operation - releasing a series content, even if references exist</source>
      </item>
      <item>
        <title>The FREE Operation - releasing a series content, even if references exist</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've added a new ability to series, that they can free their data allocation <em>even if references to them still exist</em>:</p>
<pre><code>&gt;&gt; foo: collect [loop 1000 [keep &lt;x&gt;]]

&gt;&gt; bar: foo

&gt;&gt; bar/100
== &lt;x&gt;

&gt;&gt; free foo

&gt;&gt; bar/100
** Error: Series data has been freed
</code></pre>
<p>A small amount of memory (a series node) still hangs around.  That's 8 pointers in size, and won't go away until all the references are gone.  But the arbitrarily-large data allocation is freed up.  If you have a BINARY! blob that was a megabyte in size, you will only have 32 bytes remaining once you FREE it (or 64 bytes on 64-bit platforms).</p>
<p>The flag controlling this... SERIES_INFO_INACCESSIBLE... already existed.  It marked when a FRAME! for a function was no longer on the stack, so the data was gone.  But it has been promoted to a general feature of any series.  This means referencing data is a little slower because it has to check for the flag...however, I think that it is worth it.</p>
<p>I needed this right now for something specific--that is not going to actually be relevant in the future.  But I think exposing it as a general purpose feature is useful.  It can help work around bugs in people's code where they meant to tidy up all lingering references to large data blobs but missed some (maybe even in some debug logging that isn't critical)...so that not finding and clearing all those references doesn't imply indefinite memory usage.  It also might be a way to reclaim memory faster than a GC can... so even if the garbage collector would wind up getting the memory anyway, you can do more allocations before waiting for it.</p>
          <p><a href="https://forum.rebol.info/t/the-free-operation-releasing-a-series-content-even-if-references-exist/646/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-free-operation-releasing-a-series-content-even-if-references-exist/646/1</link>
        <pubDate>Mon, 28 May 2018 02:48:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-646-1</guid>
        <source url="https://forum.rebol.info/t/the-free-operation-releasing-a-series-content-even-if-references-exist/646.rss">The FREE Operation - releasing a series content, even if references exist</source>
      </item>
  </channel>
</rss>

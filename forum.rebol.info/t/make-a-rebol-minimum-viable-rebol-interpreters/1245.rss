<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Make a Rebol: minimum viable rebol interpreters</title>
    <link>https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245</link>
    <description>What would it take for me to kick off this process and build a minimum viable rebol interpreter as a learning exercise?

I&#39;ve recently been interested in the a [&quot;make a lisp&quot;](https://github.com/kanaka/mal) project as a powerful learning tool for both learning lisp and for learning other languages. Does anyone have any thoughts as to the feasibility of this for rebol?

I understand that having a good vetted implementation for doing &quot;real work&quot; like Ren-C or Red is important (keep the WASM build coming), but I&#39;m coming to believe that some of the staying power of lisp is that in terms of choosing dependencies for long term projects something that you can build from scratch with dozens of examples is pretty good future proofing.</description>
    
    <lastBuildDate>Tue, 03 Dec 2019 22:15:13 +0000</lastBuildDate>
    <category>First Steps</category>
    <atom:link href="https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Make a Rebol: minimum viable rebol interpreters</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="6" data-topic="1245">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/salotz/40/244_2.png" class="avatar"> salotz:</div>
<blockquote>
<p>I guess its sort of a pointless discussion post since I'm not bringing something to the table</p>
</blockquote>
</aside>
<p>Bringing a discussion to the table is very much welcome.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Ren-C has gone through a bit of evolution in terms of its mechanics, and they are subtle... if you are interested in the topic maybe you would find this kind of thing interesting:</p>
<aside class="quote quote-modified" data-post="1" data-topic="1023">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar">
    <a href="https://forum.rebol.info/t/the-beta-one-enfix-covenant/1023">The Beta/One Enfix Covenant</a> <a class="badge-wrapper  bullet" href="/c/development/internals"><span class="badge-category-parent-bg" style="background-color: #25AAE2;"></span><span class="badge-category-bg" style="background-color: #25AAE2;"></span><span style="" data-drop-close="true" class="badge-category clear-badge" title="Internals of the Rebol language">Internals</span></a>
  </div>
  <blockquote>
    -- GOOD NEWS -- <img src="https://forum.rebol.info/images/emoji/twitter/loudspeaker.png?v=9" title="loudspeaker" alt="loudspeaker" class="emoji"> -- ENFIX HAS BEEN SOLVED --
I know it's been a long road, but it has reached a point where the design is final for Beta/One.  I don't say that lightly! 
Some aspects people will be very happy about: 

It involves embracing Rebol's historical "one unit of evaluation" on the left hand side as the default for enfixed operations.
It also involves going back to this rule for comparison operators, so you can say if not x = y [...] and that will mean if not (x = y) [...]. â€¦
  </blockquote>
</aside>

<p>It's hard to suss out all these rules in a simpler way than the code we have; and I would be happy to help if you want to try, but I'm also trying to get it right in the first place....</p>
          <p><a href="https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245/7</link>
        <pubDate>Tue, 03 Dec 2019 22:15:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1245-7</guid>
        <source url="https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245.rss">Make a Rebol: minimum viable rebol interpreters</source>
      </item>
      <item>
        <title>Make a Rebol: minimum viable rebol interpreters</title>
        <dc:creator><![CDATA[salotz]]></dc:creator>
        <description><![CDATA[
            <p>I'm not suggesting a comparison of the languages themselves, but rather just take one way of learning about the language that has seen some success and apply it to rebol. I'm talking about "rebol" in general not the Ren-C implementation in particular. There are similar exercises in building interpreters for forth, brainfuck, etc.</p>
<p>I guess its sort of a pointless discussion post since I'm not bringing something to the table, but I just wanted to see if anyone had any ideas, previous art, etc.</p>
          <p><a href="https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245/6</link>
        <pubDate>Tue, 03 Dec 2019 17:47:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1245-6</guid>
        <source url="https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245.rss">Make a Rebol: minimum viable rebol interpreters</source>
      </item>
      <item>
        <title>Make a Rebol: minimum viable rebol interpreters</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="4" data-topic="1245">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/salotz/40/244_2.png" class="avatar"> salotz:</div>
<blockquote>
<p>I suppose you could object to this if you are trying to cultivate a brand that is distinct from lisp.</p>
</blockquote>
</aside>
<p>As per Crockford, maker of "JSON", former Rebol community member:</p>
<blockquote>
<p><em>"Rebol's a more modern language, but with some very similar ideas to LISP, in that it's all built upon a representation of data which is then executable as programs. But it's a much richer thing syntactically."</em></p>
<p><em>"Rebol is a brilliant language, and it's a shame it's not more popular, because it deserves to be"</em></p>
</blockquote>
<p>The influences are clear but as Andreas said, those who expect Rebol to be like Lisp will soon learn it is not really that close at all.</p>
          <p><a href="https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245/5</link>
        <pubDate>Tue, 03 Dec 2019 17:29:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1245-5</guid>
        <source url="https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245.rss">Make a Rebol: minimum viable rebol interpreters</source>
      </item>
      <item>
        <title>Make a Rebol: minimum viable rebol interpreters</title>
        <dc:creator><![CDATA[salotz]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="/u/iarnold">@iArnold</a> The point of "make a lisp" isn't to build competing implementations but rather to understand how lisp itself actually works. I'm not suggesting making a competing rebol implementation. Rebol is minimal when you compare it to Python or Java but it does have a lot of builtins that make real programming useful (like email address and url primitives etc). Things like the ODBC extension are important features for non-power users of rebol, but I'm really only talking about people that are interested in language design (contributing to a major rebol implementation) or really understanding the language on a deep level. As a potential contributor to rebol building your own purely instructional interpreter for rebol would probably be a fast-track to understanding the whole project with all the bells and whistles.</p>
<p><a class="mention" href="/u/hostilefork">@hostilefork</a>  I never really understood the value of the meta-circular interpreter except as sort of a "wow cool our language is simple" kind of thing. Interestingly though rebol is one of the examples on the wikipedia page so it seems that road has already been gone down.</p>
<p>My notion isn't really about writing a new codebase or adding features, rather than an instructional resource that explains the implementation and how to build one. I suppose you could object to this if you are trying to cultivate a brand that is distinct from lisp.</p>
          <p><a href="https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245/4</link>
        <pubDate>Tue, 03 Dec 2019 17:25:10 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1245-4</guid>
        <source url="https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245.rss">Make a Rebol: minimum viable rebol interpreters</source>
      </item>
      <item>
        <title>Make a Rebol: minimum viable rebol interpreters</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>I think we have enough to do with this particular one minimal viable Rebol interpreter at hand.<br>
Remember that Rebol is striving for a minimal footprint in its very nature.<br>
So instead of starting a new one, just help with this one.</p>
<p>Thanks.</p>
          <p><a href="https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245/3</link>
        <pubDate>Tue, 03 Dec 2019 10:36:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1245-3</guid>
        <source url="https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245.rss">Make a Rebol: minimum viable rebol interpreters</source>
      </item>
      <item>
        <title>Make a Rebol: minimum viable rebol interpreters</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="1" data-topic="1245">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/salotz/40/244_2.png" class="avatar"> salotz:</div>
<blockquote>
<p>I'm coming to believe that some of the staying power of lisp is that in terms of choosing dependencies for long term projects something that you can build from scratch with dozens of examples is pretty good future proofing.</p>
</blockquote>
</aside>
<p><a href="https://en.wikipedia.org/wiki/Meta-circular_evaluator" rel="nofollow noopener">We're not really going down this route.</a></p>
<p>From my tinkering with things like the <a href="https://ell.stackexchange.com/users/9598/hostilefork" rel="nofollow noopener">English Language Learners Stack Exchange</a>, I have found that some natural-feeling systems that become extremely popular have inner rules that you might find it hard to simply lay out.  Efforts to simplify have failed.  The real question is whether the medium permits expression how you want to express yourself.  Simpler, predictable systems are unlikely to be expressive enough for human needs.</p>
<p>So we're not trying to build a Lisp or lambda calculus.  Those have already been done and what we observe is that people are looking for if-then-else and glomming onto things like RegEx.  This is an impedance match of evaluator-driven systems to human needs.</p>
<p>I'm happy to explain my thinking but the comments are probably better than anything else I can say right now.</p>
<aside class="onebox githubblob">
  <header class="source">
      <a href="https://github.com/metaeducation/ren-c/blob/master/src/core/c-eval.c" target="_blank" rel="nofollow noopener">github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://github.com/metaeducation/ren-c/blob/master/src/core/c-eval.c" target="_blank" rel="nofollow noopener">metaeducation/ren-c/blob/master/src/core/c-eval.c</a></h4>
<pre><code class="lang-c">//
//  File: %c-eval.c
//  Summary: "Central Interpreter Evaluator"
//  Project: "Rebol 3 Interpreter and Run-time (Ren-C branch)"
//  Homepage: https://github.com/metaeducation/ren-c/
//
//=////////////////////////////////////////////////////////////////////////=//
//
// Copyright 2012 REBOL Technologies
// Copyright 2012-2019 Rebol Open Source Contributors
// REBOL is a trademark of REBOL Technologies
//
// See README.md and CREDITS.md for more information
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
</code></pre>

  This file has been truncated. <a href="https://github.com/metaeducation/ren-c/blob/master/src/core/c-eval.c" target="_blank" rel="nofollow noopener">show original</a>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          <p><a href="https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245/2</link>
        <pubDate>Mon, 02 Dec 2019 22:26:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1245-2</guid>
        <source url="https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245.rss">Make a Rebol: minimum viable rebol interpreters</source>
      </item>
      <item>
        <title>Make a Rebol: minimum viable rebol interpreters</title>
        <dc:creator><![CDATA[salotz]]></dc:creator>
        <description><![CDATA[
            <p>What would it take for me to kick off this process and build a minimum viable rebol interpreter as a learning exercise?</p>
<p>I've recently been interested in the a <a href="https://github.com/kanaka/mal" rel="nofollow noopener">"make a lisp"</a> project as a powerful learning tool for both learning lisp and for learning other languages. Does anyone have any thoughts as to the feasibility of this for rebol?</p>
<p>I understand that having a good vetted implementation for doing "real work" like Ren-C or Red is important (keep the WASM build coming), but I'm coming to believe that some of the staying power of lisp is that in terms of choosing dependencies for long term projects something that you can build from scratch with dozens of examples is pretty good future proofing.</p>
          <p><a href="https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245/1</link>
        <pubDate>Mon, 02 Dec 2019 18:23:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1245-1</guid>
        <source url="https://forum.rebol.info/t/make-a-rebol-minimum-viable-rebol-interpreters/1245.rss">Make a Rebol: minimum viable rebol interpreters</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Non-Interstitial Invisibles: More Trouble Than They&#39;re Worth?</title>
    <link>https://forum.rebol.info/t/non-interstitial-invisibles-more-trouble-than-theyre-worth/1582</link>
    <description>**[Invisibles are a novel and important concept.](https://forum.rebol.info/t/issues-with-invisibles-a-truly-disappearing-comment/405)**  But they introduce a lot of wrinkles.

While there&#39;s a lot of technical complexity--I&#39;m not terribly worried about that (technical problems have technical solutions).  But usability and semantic problems need to be confronted.

Early on, I wanted to avoid situations where an invisible could be in a position where it might look like it was an assignment:

    x: elide print &quot;It&#39;s confusing when X gets [a]&quot;
    append [] &#39;a

Since the ELIDE vanished, the result of the APPEND is what X gets.  Confusing!

So at first, I figured it should be illegal to do that.  But I later backed off on ruling it out when I thought about a vanishing BREAKPOINT:

    x: breakpoint append [] &#39;a

Why shouldn&#39;t you be able to put a breakpoint wherever you want, I wondered?  So it became legal.

**Now I&#39;m having serious second thoughts about the lenience.**  I don&#39;t know this tradeoff is ultimately worth it; it becomes very slippery when you are dealing with constructs that you aren&#39;t necessarily noticing are invisible.  This problem feels like it gets worse in PARSE, if plain GROUP!s are invisible and people accidentally put them in slots where they think they are the value, but the value actually comes later:

    &gt;&gt; uparse [1 &lt;whoops&gt;] [return collect [
           keep integer! keep (&quot;that was a number!&quot;) tag!
       ]]
    == [1 &lt;whoops&gt;]

The person thought they were keeping a string literal in their rule.  But plain GROUP! is invisible, so they actually kept the rule *after* the string.  (They actually wanted **`keep @(&quot;that was a number!&quot;)`**)

Anyway, these situations are very much parallel.  So I&#39;m thinking that the error on invisibility for non-interstitials (e.g. assignment sources or argument slots) may make sense...to say that invisibility is something that can only happen in interstitial locations.

You can still get your breakpoint at odd positions, just introduce a GROUP! so it&#39;s not picked up:

    x: (breakpoint append [] &#39;a)

Of course, a group might interfere with something like a COMPOSE, so you might need to use DO or be otherwise creative:

    x: do [breakpoint append [] &#39;a]

We might lament the need to worry more about restructuring the code to accommodate the breakpoint in ways that could disrupt the code.  But with dialecting, the appearance of the word BREAKPOINT even just in itself could have caused a disruption.  It&#39;s the cost of doing business in this paradigm.

## What might this imply for other cases, like **do []** ?

It may suggest that `do []` can be invisible and vanish... just not have the result used in assignments.  Which might be perfect; if you get frustrated with that, you can always consciously put a value in-between.

So instead of:

    x: thing-that-might-be-invisible

You could say:

     x: (&lt;default-value&gt; thing-that-may-be-invisible)

There needs to be some way of specifically evaluating something and finding out if it was invisible...much like there needs to be a way of evaluating something and knowing if it threw, or raised an error, etc.  Not everything fits cleanly as a &quot;result value&quot;.  But this shows there&#39;d be at least one way of dealing with it besides that.</description>
    
    <lastBuildDate>Tue, 13 Apr 2021 07:33:17 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/non-interstitial-invisibles-more-trouble-than-theyre-worth/1582.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Non-Interstitial Invisibles: More Trouble Than They&#39;re Worth?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1582">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Maybe I'm worrying about too much and we just have to accept the potential failures like:</p>
<pre><code>&gt;&gt; uparse [1 &lt;whoops&gt;] [return collect [
       keep integer! keep ("that was a number!") tag!
   ]]
== [1 &lt;whoops&gt;]
</code></pre>
</blockquote>
</aside>
<p>Thinking on this particular issue made me realize that the way things work now, plain GROUP! being able to resolve to a value would be fine.</p>
<p>When a rule "sees" the product of a group, it's seeing it as the rule's <em>value-bearing product</em>, not as an inlined rule.  This is a completely new concept that works with <a href="https://forum.rebol.info/t/separating-parse-rules-across-contexts/313/5">block rules being value-bearing of their last value-bearing rule product</a>...parallel to DO.</p>
<p>So at least this one pesky instance that had gotten into my head as a new class of problem isn't as pesky.   You get:</p>
<pre><code>&gt;&gt; uparse [1 &lt;whoops&gt;] [return collect [
       keep integer! keep ("that was a number!") tag!
   ]]
== [1 "that was a number!"]
</code></pre>
<p>I'll keep thinking on it for other potential problem cases.</p>
          <p><a href="https://forum.rebol.info/t/non-interstitial-invisibles-more-trouble-than-theyre-worth/1582/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/non-interstitial-invisibles-more-trouble-than-theyre-worth/1582/4</link>
        <pubDate>Tue, 13 Apr 2021 07:33:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1582-4</guid>
        <source url="https://forum.rebol.info/t/non-interstitial-invisibles-more-trouble-than-theyre-worth/1582.rss">Non-Interstitial Invisibles: More Trouble Than They&#39;re Worth?</source>
      </item>
      <item>
        <title>Non-Interstitial Invisibles: More Trouble Than They&#39;re Worth?</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>I could live with breakpoint being the only special invisible, that can be put everywhere, but I'm not sure whether it's worth the hassle.</p>
          <p><a href="https://forum.rebol.info/t/non-interstitial-invisibles-more-trouble-than-theyre-worth/1582/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/non-interstitial-invisibles-more-trouble-than-theyre-worth/1582/3</link>
        <pubDate>Tue, 13 Apr 2021 07:23:55 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1582-3</guid>
        <source url="https://forum.rebol.info/t/non-interstitial-invisibles-more-trouble-than-theyre-worth/1582.rss">Non-Interstitial Invisibles: More Trouble Than They&#39;re Worth?</source>
      </item>
      <item>
        <title>Non-Interstitial Invisibles: More Trouble Than They&#39;re Worth?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1582">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Anyway, these situations are very much parallel. So I'm thinking that the error on invisibility for non-interstitials (e.g. assignment sources or argument slots) may make sense...to say that invisibility is something that can only happen in interstitial locations.</p>
</blockquote>
</aside>
<p>Well, this neglects at least one important case today:</p>
<pre><code>if let pos: find series item [...]
</code></pre>
<p>Currently, LET followed by a SET-WORD! or a SET-BLOCK! adds a binding and vanishes, leaving the existing code to run as it would.  This helps make sure it doesn't disrupt any special processing, e.g. looking backwards at the SET-WORD! (think <strong>x: me + 1</strong>, which we want to work the same as <strong>let x: me + 1</strong>, hence LET should be staying out of the assignment logic done by ME by quoting backwards).</p>
<p>If followed by a WORD!, LET does something different, it consumes the word and evalutes to that WORD!</p>
<pre><code>if let x [...]
</code></pre>
<p>That would act something like:</p>
<pre><code>if 'x [...]  ; the X is a new binding, with that binding visible to ensuing code
</code></pre>
<p>It's useful when you want to pass a new variable in as a parameter to something.  Not particularly useful in this case, but that's what it would be.</p>
<p>This demonstrates what I've called "opportunistic invisibility"... which offers a MACRO-like ability to expand to some content or no content.</p>
<p>So anyway... not so simple.  <strong>Maybe this suggests that the act of vanishing is distinct from the act of delegating/forwarding to another expression, e.g. a MACRO?</strong></p>
<p>e.g. maybe LET is legal in a condition argument slot because it's saying something different from "I vanish".  It's saying <em>"I am twisting the evaluation feed and supplying new content to take the place of the expression that belongs here"</em>.</p>
<p>Hence how LET with a SET-WORD! works is not invisibility...rather that it actually binds and evaluates one expression forward, and then puts in its place the result of quoting the result of that expression.</p>
<h2>Another Question: Should Macros Replace Invisibles?</h2>
<p>Invisible functions are hard to understand, whereas with generic quoting it can be pretty efficient to make macros that splice quoted material.</p>
<pre><code>m: macro [invisible [logic!]] [
    if invisible [return []]
    return ['invisible]
]

&gt;&gt; 10 m false
== invisible

&gt;&gt; 10 m true
== 10
</code></pre>
<p><em>(Note: there's some bug on this at present, but it's supposed to work.)</em></p>
<p>Given that invisibility causes so many technical problems, might it be better to have a separate MACRO! type that encodes the capability of being invisible at all (just splice an empty block)?</p>
<p>Then we could say it's invisible macros that are prohibited in non-interstitial slots; and LET would be a macro that's never actually be invisible, e.g.:</p>
<pre><code>if let pos: find series item [...]
</code></pre>
<p>=&gt; splices [pos: find series item] as macro result</p>
<pre><code>if pos: find series item [...]
</code></pre>
<p>One has to look at the concrete scenarios to see how much of this is just pushing terminology around and what breaks.  If there's a new datatype called MACRO! with distinct properties from ACTION! you start having to pay a mental tax of which you're working with... is it legal to DO a macro in isolation, etc.</p>
<p>Maybe I'm worrying about too much and we just have to accept the potential failures like:</p>
<pre><code>&gt;&gt; uparse [1 &lt;whoops&gt;] [return collect [
       keep integer! keep ("that was a number!") tag!
   ]]
== [1 &lt;whoops&gt;]
</code></pre>
<p>But I want to point these things out so whatever decisions are being made are conscious ones.</p>
          <p><a href="https://forum.rebol.info/t/non-interstitial-invisibles-more-trouble-than-theyre-worth/1582/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/non-interstitial-invisibles-more-trouble-than-theyre-worth/1582/2</link>
        <pubDate>Tue, 13 Apr 2021 01:36:53 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1582-2</guid>
        <source url="https://forum.rebol.info/t/non-interstitial-invisibles-more-trouble-than-theyre-worth/1582.rss">Non-Interstitial Invisibles: More Trouble Than They&#39;re Worth?</source>
      </item>
      <item>
        <title>Non-Interstitial Invisibles: More Trouble Than They&#39;re Worth?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><strong><a href="https://forum.rebol.info/t/issues-with-invisibles-a-truly-disappearing-comment/405">Invisibles are a novel and important concept.</a></strong>  But they introduce a lot of wrinkles.</p>
<p>While there's a lot of technical complexity--I'm not terribly worried about that (technical problems have technical solutions).  But usability and semantic problems need to be confronted.</p>
<p>Early on, I wanted to avoid situations where an invisible could be in a position where it might look like it was an assignment:</p>
<pre><code>x: elide print "It's confusing when X gets [a]"
append [] 'a
</code></pre>
<p>Since the ELIDE vanished, the result of the APPEND is what X gets.  Confusing!</p>
<p>So at first, I figured it should be illegal to do that.  But I later backed off on ruling it out when I thought about a vanishing BREAKPOINT:</p>
<pre><code>x: breakpoint append [] 'a
</code></pre>
<p>Why shouldn't you be able to put a breakpoint wherever you want, I wondered?  So it became legal.</p>
<p><strong>Now I'm having serious second thoughts about the lenience.</strong>  I don't know this tradeoff is ultimately worth it; it becomes very slippery when you are dealing with constructs that you aren't necessarily noticing are invisible.  This problem feels like it gets worse in PARSE, if plain GROUP!s are invisible and people accidentally put them in slots where they think they are the value, but the value actually comes later:</p>
<pre><code>&gt;&gt; uparse [1 &lt;whoops&gt;] [return collect [
       keep integer! keep ("that was a number!") tag!
   ]]
== [1 &lt;whoops&gt;]
</code></pre>
<p>The person thought they were keeping a string literal in their rule.  But plain GROUP! is invisible, so they actually kept the rule <em>after</em> the string.  (They actually wanted <strong><code>keep @("that was a number!")</code></strong>)</p>
<p>Anyway, these situations are very much parallel.  So I'm thinking that the error on invisibility for non-interstitials (e.g. assignment sources or argument slots) may make sense...to say that invisibility is something that can only happen in interstitial locations.</p>
<p>You can still get your breakpoint at odd positions, just introduce a GROUP! so it's not picked up:</p>
<pre><code>x: (breakpoint append [] 'a)
</code></pre>
<p>Of course, a group might interfere with something like a COMPOSE, so you might need to use DO or be otherwise creative:</p>
<pre><code>x: do [breakpoint append [] 'a]
</code></pre>
<p>We might lament the need to worry more about restructuring the code to accommodate the breakpoint in ways that could disrupt the code.  But with dialecting, the appearance of the word BREAKPOINT even just in itself could have caused a disruption.  It's the cost of doing business in this paradigm.</p>
<h2>What might this imply for other cases, like <strong>do []</strong> ?</h2>
<p>It may suggest that <code>do []</code> can be invisible and vanish... just not have the result used in assignments.  Which might be perfect; if you get frustrated with that, you can always consciously put a value in-between.</p>
<p>So instead of:</p>
<pre><code>x: thing-that-might-be-invisible
</code></pre>
<p>You could say:</p>
<pre><code> x: (&lt;default-value&gt; thing-that-may-be-invisible)
</code></pre>
<p>There needs to be some way of specifically evaluating something and finding out if it was invisible...much like there needs to be a way of evaluating something and knowing if it threw, or raised an error, etc.  Not everything fits cleanly as a "result value".  But this shows there'd be at least one way of dealing with it besides that.</p>
          <p><a href="https://forum.rebol.info/t/non-interstitial-invisibles-more-trouble-than-theyre-worth/1582/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/non-interstitial-invisibles-more-trouble-than-theyre-worth/1582/1</link>
        <pubDate>Mon, 12 Apr 2021 16:40:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1582-1</guid>
        <source url="https://forum.rebol.info/t/non-interstitial-invisibles-more-trouble-than-theyre-worth/1582.rss">Non-Interstitial Invisibles: More Trouble Than They&#39;re Worth?</source>
      </item>
  </channel>
</rss>

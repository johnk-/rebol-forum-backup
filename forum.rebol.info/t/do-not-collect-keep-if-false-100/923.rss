<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Do not COLLECT [keep if false [$100]]</title>
    <link>https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923</link>
    <description>As I showed in the [solution to FizzBuzz](https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904), being able to take advantage of the evaluator&#39;s unique chaining abilities and &quot;opting out&quot; generally means making clever uses of null.

As another tradeoff that I think is worth it, I&#39;ve changed COLLECT to return NULL if there are no non-null KEEPs.

    &gt;&gt; collect []
    // null

    &gt;&gt; collect [keep case [1 &gt; 2 [&lt;nope&gt;] 3 &gt; 4 [&lt;also nope&gt;]]
    // null

When I look at that, it seems pretty natural.  In contrast, giving back a block when there&#39;s been no KEEPs seems like you&#39;re fabricating something from nothing.  I&#39;ll also mention that it helps some with performance/overhead, because you&#39;re not making empty blocks you don&#39;t need if you don&#39;t actually wind up needing one.  *(The implementation of collect in historical Rebol and Red does `make block! 16`, so you&#39;re taking a 16 cell block even if you don&#39;t use it, while this creates the block on demand.)*

However, if this seems inconvenient, there&#39;s an easy workaround for if you want to ensure you always get an empty block back on no keeps... just do a plain non-/ONLY KEEP of an empty block.  Splicing nothing (vs null) is counted as enough intent to get some kind of result:

    &gt;&gt; maybe-empty: []
    ...
    &gt;&gt; collect [keep [] for-each x maybe-empty [keep x]]
    == []

We can easily chain it to make an &quot;always-returns-a-block&quot; version, and maybe we should put that in the box vs. making people use that idiom:

     collect-block: chain [
         :collect
            |
         func [x] [
             :x else [copy []]
         ]
     ]

But if you ask me, the idiom of **keep []** isn&#39;t too bad.  Moreover, if you just use **data: try collect [...]** you&#39;ll get a BLANK!, and blank is good enough to opt out of many operations that a `[]` would be opting out of:

    data: try collect [if false [keep &lt;not kept&gt;]]
    for-each x data [print &quot;won&#39;t run, data is blank and opts-out of FOR-EACH&quot;]

Plus you might prefer to have something that you can test for absence with conditionality, vs EMPTY?.  (`if empty? data` is longer than just `if data`)

## The semi-noisy nature of null has advantages

If you think casual uses of COLLECT are sure they mean they want an empty block on no KEEPs, I don&#39;t know if that seems to be the case.

Consider something like &quot;print collect [...]&quot;, with that collection coming up empty.  What&#39;s PRINT supposed to be doing?  Is it a request to print a blank line--just a line feed?  Or is it a request to opt-out of printing altogether, so no newline at all?

I don&#39;t think there&#39;s a generic answer to that question.  So it&#39;s handy to draw attention to the ambiguity, since PRINT doesn&#39;t take NULL... only BLANK! to opt out, TEXT!, or BLOCK! to be SPACED.   So it will error and force you to make an explicit choice:

     print try collect [...] ;-- no output if there are no non-null KEEPs 
     print collect [keep [] ...] ;-- blank newline if no more KEEPs come along
     print collect-block [...] ;-- blank newline if no KEEPs, if we put it in the box

So this keeps you paying attention.

## But that&#39;s just a bonus, the real feature is tighter expression

A lot of code already can&#39;t have a non-empty collect because it has literal KEEPs that always run, or collections that aren&#39;t ever empty.  Among the cases that are left, many want to do something different on an empty case and can do so with ELSE.  Among the cases that are left after that, many just want to enumerate the result...and a BLANK! from **try collect** serves better than the empty block does.</description>
    
    <lastBuildDate>Sun, 25 Nov 2018 06:10:10 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Do not COLLECT [keep if false [$100]]</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="5" data-topic="923">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>Iâ€™d lean toward raising an error if NULL is passed to KEEP.</p>
</blockquote>
</aside>
<p>The current implementation of KEEP is as a <em>specialized enclosure</em> of APPEND.  Being enclosed is how it manages to alter the return result to the input thing kept vs. the appended-to-block.  The specialization is to remove the series parameter (with a dummy value, as the COLLECT establishes the block to be appending to).</p>
<p>Since it's a derived function, it inherits not just /ONLY, but other cool APPEND things like /DUP and /LINE and /PART:</p>
<pre><code>&gt;&gt; collect [keep/dup [a] 2]
== [a a]

&gt;&gt; collect [keep &lt;a&gt; keep/line &lt;b&gt; keep/line [c d]]
== [
    &lt;a&gt; &lt;b&gt;
    c d
]

&gt;&gt; collect [keep/part [a b c d] 2]
== [a b]
</code></pre>
<p>Having KEEP piggy-back on APPEND's capabilities is a good thing.  So the next question is... if APPEND allows nulls, why wouldn't KEEP do so also?</p>
<p>The reason APPEND acts as it does, and that SET-WORD! assignments don't cause errors, are laid out pretty squarely in my resolution post for this thread:</p>
<p><a href="https://forum.rebol.info/t/null-first-class-values-and-safety/895/4?u=hostilefork">NULL, first class values, and safety</a></p>
<p>I think consistent with that, KEEP letting you use NULLs fits...and is quite powerful.  Remember, you have easy FAIL in things like evaluative switch...no ELSE or DEFAULT needed.</p>
<pre><code>keep switch setting [
    'foo [...]
    1 + 2 [...]
    fail "Invalid setting" // or if you like, simply FAIL with no arg
]
</code></pre>
<p>Because of what NULL represents today, this isn't really that different from keeping NONE!s was.  NULLs no longer represent errory-things, just non-things.  They're just a lot better at that job than NONE! or UNSET! were.</p>
<p>But what we should probably say is that VOID!s are ruled out.  At minimum unless you say /ONLY.</p>
<h3>But, REALLY...</h3>
<p>I should mention that REALLY still exists, which errors on nulls and passes through everything else.  So if you say:</p>
<pre><code> collect [really keep (...)]
</code></pre>
<p>That would make sure it wasn't NULL and error if it was.  Since KEEP returns what it's passed, you could also say that as the less literate:</p>
<pre><code> collect [keep really (...)]
</code></pre>
<p>But I like the first way.</p>
<p>Historically I wasn't totally thrilled with the name, and wanted ENSURE for it.  But I decided ENSURE was better for the more common case of having a type-test or otherwise on the value (an asserting form of MATCH).</p>
<p>But that said, once you get used to REALLY, it it's a pretty literate framing of asserting what you're saying, same number of letters as ASSERT, no block needed to use it.  It's not that bad.</p>
          <p><a href="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923/6</link>
        <pubDate>Sat, 24 Nov 2018 17:34:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-923-6</guid>
        <source url="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923.rss">Do not COLLECT [keep if false [$100]]</source>
      </item>
      <item>
        <title>Do not COLLECT [keep if false [$100]]</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I'd lean toward raising an error if NULL is passed to KEEP. I think of COLLECT as somewhat related to REDUCE and COMPOSE which always return blocks unless there's an error.</p>
          <p><a href="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923/5</link>
        <pubDate>Sat, 24 Nov 2018 17:16:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-923-5</guid>
        <source url="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923.rss">Do not COLLECT [keep if false [$100]]</source>
      </item>
      <item>
        <title>Do not COLLECT [keep if false [$100]]</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The libRebol API benefits in particular from NULL being in more places as a way of gleaning information without additional calls.  It's even more of an advantage than in the interpreter where everything is handled automatically--because there's no handle to release, which is a separate API you have to worry about.  And null pointers are conditionally falsey in C:</p>
<pre><code>REBVAL *block = rebRun("collect [...]");
if (!block) {
    // stuff to handle case of nothing collected
    return;
}
// other stuff
</code></pre>
<p>Without using null, and having to test for empty, it's longer and easier to get wrong:</p>
<pre><code>REBVAL *block = rebRun("collect [...]");
if (rebDid("empty? block")) {
    rebRelease(block);
    // stuff to handle case of nothing collected
    return;
 }
 // other stuff
</code></pre>
<p>These two pieces of code aren't exactly the same as you can still collect an empty block under my current rules--if you KEEP only empty spliced blocks.  However, the person writing the code generally has control.<br>
Plus we'll be able to do MISMATCH soon:</p>
<pre><code>REBVAL *block = rebRun("mismatch empty? collect [keep [] ...]");
</code></pre>
<p>It's the inverse of MATCH, so it will be null if the collected thing is empty, and the collected thing if it isn't.  That could also be <code>match nonempty?</code> or whatever the name of the relevant function would be.</p>
<p>Anyway, point being that null as a signal getting in more places is a systemic benefit.</p>
          <p><a href="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923/4</link>
        <pubDate>Fri, 23 Nov 2018 20:28:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-923-4</guid>
        <source url="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923.rss">Do not COLLECT [keep if false [$100]]</source>
      </item>
      <item>
        <title>Do not COLLECT [keep if false [$100]]</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I like how this feature and similar ones maximize robustness of the code (through handling null, blank, etc) while keeping everything extremely tight. Thereâ€™s a nice balance of robustness paired with a code-golf mentality.</p>
          <p><a href="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923/3</link>
        <pubDate>Fri, 23 Nov 2018 18:25:14 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-923-3</guid>
        <source url="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923.rss">Do not COLLECT [keep if false [$100]]</source>
      </item>
      <item>
        <title>Do not COLLECT [keep if false [$100]]</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>For example:</p>
<pre><code>if arity = 0 [
    params: ["void"] ;-- In C, f(void) has a distinct meaning from f()
    args: ["rebEND"]
] else [
    params: collect [
        count-up i arity [keep unspaced ["const REBVAL *arg" i]]
    ]
    args: collect [
        count-up i arity [keep unspaced ["arg" i]]
        keep "rebEND"
    ]
]
</code></pre>
<p>This can now be tidied up as:</p>
<pre><code>// In C, f(void) has a distinct meaning from f()
params: ["void"] unless collect [
    count-up i arity [keep unspaced ["const REBVAL *arg" i]]
]
args: collect [
    count-up i arity [keep unspaced ["arg" i]]
    keep "rebEND"
]
</code></pre>
<p>While the params couldn't do that before, the args could have.  But if you want <code>params</code> to come right after <code>args</code> you might make aesthetic decisions that make you repeat when you don't have to.  This is one of the benefits of tidier expression...you exploit things you might not have otherwise.</p>
          <p><a href="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923/2</link>
        <pubDate>Fri, 23 Nov 2018 15:14:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-923-2</guid>
        <source url="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923.rss">Do not COLLECT [keep if false [$100]]</source>
      </item>
      <item>
        <title>Do not COLLECT [keep if false [$100]]</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>As I showed in the <a href="https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904">solution to FizzBuzz</a>, being able to take advantage of the evaluator's unique chaining abilities and "opting out" generally means making clever uses of null.</p>
<p>As another tradeoff that I think is worth it, I've changed COLLECT to return NULL if there are no non-null KEEPs.</p>
<pre><code>&gt;&gt; collect []
// null

&gt;&gt; collect [keep case [1 &gt; 2 [&lt;nope&gt;] 3 &gt; 4 [&lt;also nope&gt;]]
// null
</code></pre>
<p>When I look at that, it seems pretty natural.  In contrast, giving back a block when there's been no KEEPs seems like you're fabricating something from nothing.  I'll also mention that it helps some with performance/overhead, because you're not making empty blocks you don't need if you don't actually wind up needing one.  <em>(The implementation of collect in historical Rebol and Red does <code>make block! 16</code>, so you're taking a 16 cell block even if you don't use it, while this creates the block on demand.)</em></p>
<p>However, if this seems inconvenient, there's an easy workaround for if you want to ensure you always get an empty block back on no keeps... just do a plain non-/ONLY KEEP of an empty block.  Splicing nothing (vs null) is counted as enough intent to get some kind of result:</p>
<pre><code>&gt;&gt; maybe-empty: []
...
&gt;&gt; collect [keep [] for-each x maybe-empty [keep x]]
== []
</code></pre>
<p>We can easily chain it to make an "always-returns-a-block" version, and maybe we should put that in the box vs. making people use that idiom:</p>
<pre><code> collect-block: chain [
     :collect
        |
     func [x] [
         :x else [copy []]
     ]
 ]
</code></pre>
<p>But if you ask me, the idiom of <strong>keep []</strong> isn't too bad.  Moreover, if you just use <strong>data: try collect [...]</strong> you'll get a BLANK!, and blank is good enough to opt out of many operations that a <code>[]</code> would be opting out of:</p>
<pre><code>data: try collect [if false [keep &lt;not kept&gt;]]
for-each x data [print "won't run, data is blank and opts-out of FOR-EACH"]
</code></pre>
<p>Plus you might prefer to have something that you can test for absence with conditionality, vs EMPTY?.  (<code>if empty? data</code> is longer than just <code>if data</code>)</p>
<h2>The semi-noisy nature of null has advantages</h2>
<p>If you think casual uses of COLLECT are sure they mean they want an empty block on no KEEPs, I don't know if that seems to be the case.</p>
<p>Consider something like "print collect [...]", with that collection coming up empty.  What's PRINT supposed to be doing?  Is it a request to print a blank line--just a line feed?  Or is it a request to opt-out of printing altogether, so no newline at all?</p>
<p>I don't think there's a generic answer to that question.  So it's handy to draw attention to the ambiguity, since PRINT doesn't take NULL... only BLANK! to opt out, TEXT!, or BLOCK! to be SPACED.   So it will error and force you to make an explicit choice:</p>
<pre><code> print try collect [...] ;-- no output if there are no non-null KEEPs 
 print collect [keep [] ...] ;-- blank newline if no more KEEPs come along
 print collect-block [...] ;-- blank newline if no KEEPs, if we put it in the box
</code></pre>
<p>So this keeps you paying attention.</p>
<h2>But that's just a bonus, the real feature is tighter expression</h2>
<p>A lot of code already can't have a non-empty collect because it has literal KEEPs that always run, or collections that aren't ever empty.  Among the cases that are left, many want to do something different on an empty case and can do so with ELSE.  Among the cases that are left after that, many just want to enumerate the result...and a BLANK! from <strong>try collect</strong> serves better than the empty block does.</p>
          <p><a href="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923/1</link>
        <pubDate>Fri, 23 Nov 2018 13:55:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-923-1</guid>
        <source url="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923.rss">Do not COLLECT [keep if false [$100]]</source>
      </item>
  </channel>
</rss>

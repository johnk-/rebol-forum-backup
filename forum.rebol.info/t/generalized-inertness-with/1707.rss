<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Generalized Inertness with @</title>
    <link>https://forum.rebol.info/t/generalized-inertness-with/1707</link>
    <description>[quote=&quot;hostilefork, post:6, topic:1634&quot;]
I&#39;m thinking this idea of **&quot;@[...] represents an already reduced block&quot;** is probably something we put in systemically:

    &gt;&gt; any [1 + 1 = 2]
    == #[true]

    &gt;&gt; any @[1 + 1 = 2]
    == 1
[/quote]

So this is an important thought, but it runs up against the problem that we don&#39;t have a good operator for putting @ on things...whereas with quotes, we have that operator.

I&#39;m kind of attached to this:

    &gt;&gt; @ block
    == block

As opposed to this:

    &gt;&gt; block: [a b c]

    &gt;&gt; @ block
    == @[a b c]

The reason I&#39;m attached to it is because of the API, largely.

    rebValue(&quot;append data&quot;, rebQ(value));
    // vs...
    rebValue(&quot;append data @&quot;, value);

So this was an advantage that quoted blocks had...which is that there *is* an operator for adding quote levels...and a word for it, too.  QUOTE.

    &gt;&gt; block: [1 + 2]

    &gt;&gt; any quote block
    == 1

    &gt;&gt; any ^block
    == 1

    &gt;&gt; any ^ block
    == 1

Several choices there.  But nothing to turn [1 + 2] into @[1 + 2]

There&#39;s the option of @(block)...

    &gt;&gt; block: [1 + 2]

    &gt;&gt; @(block)
    == @[1 + 2]

    &gt;&gt; word: &#39;a

    &gt;&gt; @(word)
    == @a

This complicates the evaluator a bit, by making one of the @ types non-inert.  But beyond complicating the evaluator, I rather like the idea that @ means &quot;no evaluation&quot; and it applies to the GROUP! form too.

Maybe the operator could be called INERT?

    &gt;&gt; block: [1 + 2]

    &gt;&gt; inert block
    == @[1 + 2]

    &gt;&gt; any inert block
    == 1

That actually seems... fairly coherent.  I guess this is a better name for &quot;THEIFY&quot;.

Anyway, the concept would be that it would offer a twist for any function that automatically reduced its argument...like SPACED.

    &gt;&gt; spaced @[&quot;hello&quot; 1 + 2]
    == &quot;hello 1 + 2&quot;

    &gt;&gt; spaced [&quot;hello&quot; 1 + 2]
    == &quot;hello 3&quot;

And UNPACK would be another instance of this.</description>
    
    <lastBuildDate>Sat, 11 Sep 2021 15:34:35 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/generalized-inertness-with/1707.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Generalized Inertness with @</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="6" data-topic="1634">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/a-lot-to-unpack-replacing-the-set-of-reduce-block-idiom/1634/6">A Lot To UNPACK: (Replacing the SET of REDUCE BLOCK! Idiom)</a>
</div>
<blockquote>
<p>I'm thinking this idea of <strong>"@[...] represents an already reduced block"</strong> is probably something we put in systemically:</p>
</blockquote>
</aside>
<p>The introduction of this idea points to a sort of difficult philosophical issue.</p>
<p>We're stuck between the desires of wanting light representations vs. the value of marking data and code distinctly.</p>
<p>We like writing:</p>
<pre><code>any [
   x = y
   equal? z foo
] then [...]
</code></pre>
<p>And we like saying:</p>
<pre><code>fruits: [apple banana orange]
</code></pre>
<p>But in the code/data distinction, we're not saying something we "know"...which is that we don't intend to be using the fruits block as code.  If someone were to ask a question like ANY of it, they'd want to know if it was an array like [_ _ _] or not, vs. try to "run an apple".</p>
<p>Rather than make a separate function called ANY/INERT, I suggested we could determine by the datatype if it was an "especially inert block".  This gives people the option of:</p>
<pre><code>any inert fruits
</code></pre>
<p>Or the possibility of starting your declaration out as inert to begin with, to emphasize its non-code nature:</p>
<pre><code>fruits: @[apple banana orange]
</code></pre>
<p>I think our bias would be to try and find ways to <em>usually</em> make the inertness/activeness the problem of the runtime, not something that people get hung up on in their source notation.</p>
<p>But how automatic do we want to make things?  What if the product of a REDUCE came back with the marker:</p>
<pre><code>&gt;&gt; reduce [1 + 2 10 + 20]
== @[3 30]
</code></pre>
<p>This would protect such blocks from being further reduced:</p>
<pre><code>&gt;&gt; reduce @[3 30]
== @[3 30]
</code></pre>
<p>And it was your job to take it off if you didn't want the protection:</p>
<pre><code>&gt;&gt; plain reduce [1 + 2 10 + 20]
== [3 30]
</code></pre>
<p>How inconvenient having the @ show up would be would depend heavily on how the system treated it.  If APPEND and COMPOSE treated it just like any other block, it might not be so inconvenient to have it show up.</p>
<p>I just mention it as a brainstorm here, because I don't completely know where this new type is headed.  We'll have to see.</p>
<p>But I imagine there will probably be a time and a place for having source-level BLOCK!s that are declared with @, with the intention that they will be passed to a routine that will act differently if it gets an @ block or a non-@ block.</p>
          <p><a href="https://forum.rebol.info/t/generalized-inertness-with/1707/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/generalized-inertness-with/1707/3</link>
        <pubDate>Sat, 11 Sep 2021 15:34:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1707-3</guid>
        <source url="https://forum.rebol.info/t/generalized-inertness-with/1707.rss">Generalized Inertness with @</source>
      </item>
      <item>
        <title>Generalized Inertness with @</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So the meaning of @ has come into focus somewhat interestingly as <em>"leave that alone"</em>.</p>
<p>Even its usage in UPARSE has become a way of passing a block to a combinator by value without applying the block combinator rules.  This makes <strong>@[xxx]</strong> <em>able</em> to act as a shorthand for <strong>([xxx])</strong>...but it's up to a combinator to decide if it wants to distinguish them or not.</p>
<h2>So What Should The <code>@Branch</code> Meaning Be?</h2>
<p>The meaning I had been using previously was "don't isotopify the branch":</p>
<pre><code>&gt;&gt; if true [null]
== ~null~  ; isotope

&gt;&gt; if true @[null]
; null
</code></pre>
<p><em>This doesn't seem to fit anymore.</em>  I'd proposed an alternative, which is a bit weird...but if you consider /x as being "optional x"...as in refinements...maybe not so weird:</p>
<pre><code>&gt;&gt; if true [null]
== ~null~  ; isotope

&gt;&gt; if true /[null]
; null
</code></pre>
<p>I guess I can live with that.</p>
<p>If you're going to go with the "already evaluated" concept, that might lead you down the path of one of these options:</p>
<pre><code>&gt;&gt; if true @[1 + 2]
== [1 + 2]

&gt;&gt; if true @[1 + 2]
== @[1 + 2]

&gt;&gt; if true @[1 + 2]
== 2
</code></pre>
<p>To explain why I'd make the last suggestion: it is along a line of thinking <strong>do @[1 + 2]</strong> would be 2...as if it had run the process of DO-ing inertly and the last value dropped out.  This would just be part of a system of thinking where an @ block does what a plain block would if each evaluation step was just inert. <img src="https://forum.rebol.info/images/emoji/twitter/man_shrugging.png?v=9" title=":man_shrugging:" class="emoji" alt=":man_shrugging:"></p>
<p>And before we think too hard on that, let's remember that currently quoting is permitting reasonable enough ways of saying the first two:</p>
<pre><code>&gt;&gt; if true '[1 + 2]
== [1 + 2]

&gt;&gt; if true '@[1 + 2]
== @[1 + 2]
</code></pre>
<p>The only place you get a savings here is when @[1 + 2] =&gt; @[1 + 2] for a branch, because you type one less character without the quote mark to get that.</p>
<h2>A Different Tactic: Mostly The Same, Just Tweaked?</h2>
<p>I'll put forth the idea that if you have a type that some functions have a meaningful stake in treating different while others don't... it might be worthwhile to accept both and just treat them the same.  This reduces the concerns of people needing to strip the marker off.</p>
<p>So @[...] and [...] could be treated the same when it's a branch.  It's one idea.  <img src="https://forum.rebol.info/images/emoji/twitter/man_shrugging.png?v=9" title=":man_shrugging:" class="emoji" alt=":man_shrugging:"></p>
<p>There could be a twist: At one point I had suggested that the @(...) could be leveraged as the difference between passing a branch inertly and not:</p>
<pre><code>&gt;&gt; either false (print "A", [print "AA" &lt;a&gt;]) (print "B", [print "BB" &lt;b&gt;])
A
B
BB
== &lt;b&gt;

&gt;&gt; either false @(print "A", [print "AA" &lt;a&gt;]) @(print "B", [print "BB" &lt;b&gt;])
B
BB
== &lt;b&gt;
</code></pre>
<p>Here the focus on inertness is "inert during the parameter gathering phase", but once that phase is over the normal behavior kicks in.</p>
<p>You might recall I'd previously suggested the inert behavior become the default behavior for GROUP!, and you'd use :(xxx) to insist on the evaluation... tying that in to the <strong>:param</strong> parameter convention.  But <code>:param</code> seems to have a new destiny as <a href="https://forum.rebol.info/t/beating-repend-a-new-parameter-convention/1673">the answer to REPEND-like functionality</a>, so shifting to this concept might be a good idea.</p>
<p>And we could go ahead and throw in the idea of a shorthand for getting a variable with that:</p>
<pre><code>&gt;&gt; x: 10

&gt;&gt; if true @x
== 10
</code></pre>
<p>Seems plausible...</p>
<hr>
<p>Though if you're wondering why you wouldn't just make the branch:</p>
<pre><code>&gt;&gt; either false [print "A", print "AA" &lt;a&gt;] @(print "B", [print "BB" &lt;b&gt;])
</code></pre>
<p>The concept is that it's code that generates a branch, so you're saving yourself a DO, and locating where to put that do.</p>
          <p><a href="https://forum.rebol.info/t/generalized-inertness-with/1707/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/generalized-inertness-with/1707/2</link>
        <pubDate>Wed, 08 Sep 2021 17:58:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1707-2</guid>
        <source url="https://forum.rebol.info/t/generalized-inertness-with/1707.rss">Generalized Inertness with @</source>
      </item>
      <item>
        <title>Generalized Inertness with @</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="6" data-topic="1634">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I'm thinking this idea of <strong>"@[...] represents an already reduced block"</strong> is probably something we put in systemically:</p>
<pre><code>&gt;&gt; any [1 + 1 = 2]
== #[true]

&gt;&gt; any @[1 + 1 = 2]
== 1
</code></pre>
</blockquote>
</aside>
<p>So this is an important thought, but it runs up against the problem that we don't have a good operator for putting @ on things...whereas with quotes, we have that operator.</p>
<p>I'm kind of attached to this:</p>
<pre><code>&gt;&gt; @ block
== block
</code></pre>
<p>As opposed to this:</p>
<pre><code>&gt;&gt; block: [a b c]

&gt;&gt; @ block
== @[a b c]
</code></pre>
<p>The reason I'm attached to it is because of the API, largely.</p>
<pre><code>rebValue("append data", rebQ(value));
// vs...
rebValue("append data @", value);
</code></pre>
<p>So this was an advantage that quoted blocks had...which is that there <em>is</em> an operator for adding quote levels...and a word for it, too.  QUOTE.</p>
<pre><code>&gt;&gt; block: [1 + 2]

&gt;&gt; any quote block
== 1

&gt;&gt; any ^block
== 1

&gt;&gt; any ^ block
== 1
</code></pre>
<p>Several choices there.  But nothing to turn [1 + 2] into @[1 + 2]</p>
<p>There's the option of @(block)...</p>
<pre><code>&gt;&gt; block: [1 + 2]

&gt;&gt; @(block)
== @[1 + 2]

&gt;&gt; word: 'a

&gt;&gt; @(word)
== @a
</code></pre>
<p>This complicates the evaluator a bit, by making one of the @ types non-inert.  But beyond complicating the evaluator, I rather like the idea that @ means "no evaluation" and it applies to the GROUP! form too.</p>
<p>Maybe the operator could be called INERT?</p>
<pre><code>&gt;&gt; block: [1 + 2]

&gt;&gt; inert block
== @[1 + 2]

&gt;&gt; any inert block
== 1
</code></pre>
<p>That actually seems... fairly coherent.  I guess this is a better name for "THEIFY".</p>
<p>Anyway, the concept would be that it would offer a twist for any function that automatically reduced its argument...like SPACED.</p>
<pre><code>&gt;&gt; spaced @["hello" 1 + 2]
== "hello 1 + 2"

&gt;&gt; spaced ["hello" 1 + 2]
== "hello 3"
</code></pre>
<p>And UNPACK would be another instance of this.</p>
          <p><a href="https://forum.rebol.info/t/generalized-inertness-with/1707/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/generalized-inertness-with/1707/1</link>
        <pubDate>Wed, 08 Sep 2021 05:43:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1707-1</guid>
        <source url="https://forum.rebol.info/t/generalized-inertness-with/1707.rss">Generalized Inertness with @</source>
      </item>
  </channel>
</rss>

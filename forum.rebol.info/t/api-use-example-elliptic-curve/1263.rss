<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>API Use Example: Elliptic Curve</title>
    <link>https://forum.rebol.info/t/api-use-example-elliptic-curve/1263</link>
    <description>It turns out we probably don&#39;t need to be adding [Curve25519](https://en.wikipedia.org/wiki/Curve25519) right at the moment for TLS.  But how quick I could bridge to a short C implementation&#39;s function was really neat, so I thought I&#39;d both save the code and show it off.

What happens is it takes a 32-byte input and an optional 32-byte basepoint, both as BINARY!.  Then it returns another 32-byte result from calling the C implementation on the `unsigned char*` buffers (REBYTE):

    //
    //  export curve25519: native [
    //      return: &quot;32-byte binary of public key data&quot;
    //          [binary!]
    //      secret &quot;32-byte binary of secret data&quot;
    //          [binary!]
    //      /basepoint &quot;optional 32-bytes, defaults to #{09000000...}&quot;
    //          [binary!] 
    //  ]
    //
    REBNATIVE(curve25519)
    {
        CRYPT_INCLUDE_PARAMS_OF_CURVE25519;

        size_t secret_size;
        REBYTE *secret = rebBytes(&amp;secret_size,
            &quot;if 32 != length of&quot;, ARG(secret), &quot;[&quot;,
                &quot;fail {SECRET must be a 32-byte BINARY! for curve25519}&quot;,
            &quot;]&quot;,
            ARG(secret),
        );
        assert(secret_size == 32);

        size_t basepoint_size;
        REBYTE *opt_basepoint = rebBytes(&amp;basepoint_size,
            &quot;if all [&quot;, REF(basepoint), &quot;32 != length of&quot;, REF(basepoint), &quot;] [&quot;,
                &quot;fail {/BASEPOINT must be a 32-byte BINARY! for curve25519}&quot;,
            &quot;]&quot;,
            REF(basepoint),
        );
        assert(opt_basepoint ? basepoint_size == 32 : basepoint_size == 0);

        REBYTE mypublic[32];  // &quot;public&quot; is a C++ keyword :-/

        curve25519(mypublic, secret, opt_basepoint);
        rebFree(secret);
        rebFree(opt_basepoint);  // null-tolerant, like C&#39;s free()

        return rebSizedBinary(mypublic, 32);
    }

Here you see the power of libRebol&#39;s hybridized calls.  rebBytes isn&#39;t just a routine for extracting the binary bytes out of a Rebol value...it&#39;s able to do a size check first (which FAILs if it needs to).  Then the last item in the evaluation is the argument itself.  C&#39;s 0-for-null is leveraged simply, so that if an argument is null the extractors just give back null.

Being able to do this in plain ANSI C is really rather awesome!</description>
    
    <lastBuildDate>Wed, 19 Feb 2020 03:15:00 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://forum.rebol.info/t/api-use-example-elliptic-curve/1263.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>API Use Example: Elliptic Curve</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>It turns out we probably don't need to be adding <a href="https://en.wikipedia.org/wiki/Curve25519" rel="nofollow noopener">Curve25519</a> right at the moment for TLS.  But how quick I could bridge to a short C implementation's function was really neat, so I thought I'd both save the code and show it off.</p>
<p>What happens is it takes a 32-byte input and an optional 32-byte basepoint, both as BINARY!.  Then it returns another 32-byte result from calling the C implementation on the <code>unsigned char*</code> buffers (REBYTE):</p>
<pre><code>//
//  export curve25519: native [
//      return: "32-byte binary of public key data"
//          [binary!]
//      secret "32-byte binary of secret data"
//          [binary!]
//      /basepoint "optional 32-bytes, defaults to #{09000000...}"
//          [binary!] 
//  ]
//
REBNATIVE(curve25519)
{
    CRYPT_INCLUDE_PARAMS_OF_CURVE25519;

    size_t secret_size;
    REBYTE *secret = rebBytes(&amp;secret_size,
        "if 32 != length of", ARG(secret), "[",
            "fail {SECRET must be a 32-byte BINARY! for curve25519}",
        "]",
        ARG(secret),
    );
    assert(secret_size == 32);

    size_t basepoint_size;
    REBYTE *opt_basepoint = rebBytes(&amp;basepoint_size,
        "if all [", REF(basepoint), "32 != length of", REF(basepoint), "] [",
            "fail {/BASEPOINT must be a 32-byte BINARY! for curve25519}",
        "]",
        REF(basepoint),
    );
    assert(opt_basepoint ? basepoint_size == 32 : basepoint_size == 0);

    REBYTE mypublic[32];  // "public" is a C++ keyword :-/

    curve25519(mypublic, secret, opt_basepoint);
    rebFree(secret);
    rebFree(opt_basepoint);  // null-tolerant, like C's free()

    return rebSizedBinary(mypublic, 32);
}
</code></pre>
<p>Here you see the power of libRebol's hybridized calls.  rebBytes isn't just a routine for extracting the binary bytes out of a Rebol value...it's able to do a size check first (which FAILs if it needs to).  Then the last item in the evaluation is the argument itself.  C's 0-for-null is leveraged simply, so that if an argument is null the extractors just give back null.</p>
<p>Being able to do this in plain ANSI C is really rather awesome!</p>
          <p><a href="https://forum.rebol.info/t/api-use-example-elliptic-curve/1263/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/api-use-example-elliptic-curve/1263/1</link>
        <pubDate>Wed, 19 Feb 2020 03:15:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1263-1</guid>
        <source url="https://forum.rebol.info/t/api-use-example-elliptic-curve/1263.rss">API Use Example: Elliptic Curve</source>
      </item>
  </channel>
</rss>

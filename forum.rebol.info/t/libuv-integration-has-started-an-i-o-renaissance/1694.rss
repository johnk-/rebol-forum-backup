<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>libuv Integration Has Started...an I/O Renaissance</title>
    <link>https://forum.rebol.info/t/libuv-integration-has-started-an-i-o-renaissance/1694</link>
    <description>So I put together a build with libuv, and...

## ...It&#39;s Gone Extremely Well! 


:flight_departure: 

As a first step, I decided I&#39;d try using libuv for all of our filesystem calls.  They&#39;re based on the POSIX filesystem APIs, so with a not-impossible amount of work I was able to change our POSIX code over to libuv calls.

**Once I did so, I could throw out the Windows-specific code...so all of [%posix-windows.c](https://github.com/metaeducation/ren-c/blob/6770b69f9539d26da4fd2ff664332f2ba36386ad/extensions/filesystem/file-windows.c) could be deleted!**

Of course, now we have to link in libuv.  But there&#39;s a lot of good news on that front:

* I was able to integrate libuv into our build without using any special build system, it was easy enough.

* libuv has care and concern for weird platforms...more than we do!  So all the FreeBSD/OpenBSD/NetBSD/BSDi are covered, Haiku, etc. are covered.

* libuv is pure C and it builds with TCC...so the [Rebol-built-with-TCC-and-libuv can still build itself](https://github.com/metaeducation/ren-c/runs/3466060617?check_suite_focus=true#step:23:19) and bootstrap!

* I haven&#39;t done a formal study of the exact size impact but it&#39;s in the 100s of ks not the 10s of megabytes range; for what it offers it&#39;s light and it seems they care.

## While I Was Unifying The Code, I Made... TESTS!

There were basically no tests of the filesystem.  Features like /SEEK came late in the game, and there were lots of bugs and design holes.  *No one knew how buggy it was because I think no one really used anything besides READ and WRITE of entire files!*

Getting the semantics for ports hammered out is a tall order, and beyond the scope of these first steps with libuv integration.  But to get things on the right foot, I&#39;ve started with some tests!

**[https://github.com/metaeducation/ren-c/blob/master/tests/file/file-port.test.reb](https://github.com/metaeducation/ren-c/blob/master/tests/file/file-port.test.reb)**

**I&#39;ll put in my usual tearful plea for others to try kicking the tires here...** but, well.  People are busy I guess.  :cry:

Technique-wise, there are just some really cool things even right there in those tests.  There&#39;s a fuzz tester which creates an adaptation FUZZWRITE that will mimic what the write is being asked to do to the file to a buffer.

## So One File Was Deleted...What Else Do We Get?

Deleting `%posix.windows.c` was actually a bigger deal than it sounds.  Even though I&#39;d whittled it way down from its Device-Model hairiness, it was still a small amount of bad code.  And I&#39;m sort of glossing over the kind-of-Herculean level of pain tolerance it takes to dot the i&#39;s, cross the t&#39;s, and write the tests for the new code to replace the old buggy stuff.

But it&#39;s just the beginning.  **We&#39;re about to get a lot.**

Many libuv functions are able to take a pointer to a function to call when an operation is done.  If you pass in nullptr for that callback, then the operation runs synchronously.

For my first task with the filesystem, I just passed in NULL to all the file-reading and file-writing routines for the callback.  So we are doing the same blocking I/O as always.

Being able to do asynchronous ***file*** I/O isn&#39;t a priority right now.  But if we need it, it&#39;s there.

The real benefit will be having vetted asynchronous **network** I/O.  It will take the place of buggy garbage we had, that was nigh undebuggable.  We should be able to write working timers and other interesting things.

## Modify With Confidence: I/O Edition

I had said that a goal of Ren-C was that if there was something we thought up, the limit to doing it would be the limit of being able to articulate the design... not having murky code.

I&#39;d claimed that point had been reached, and the new goal was just to &quot;elevate the art&quot; of the language.

But that conveniently overlooked the fact that the device layer and I/O were all still horrible murk.  I&#39;d kind of blocked it out of my mind, since I&#39;d thrown it over the wall...and been able to make a WebAssembly build without it.  It &quot;didn&#39;t count&quot;.

**Now the Windows/Mac/Linux/Haiku/etc. builds are back in the game, and The Design Handcuffs Are Off** 

I&#39;d actually said at one point that if we wanted Network I/O to be any good we should just take Node.js&#39;s code for interfacing with V8.  I didn&#39;t realize they&#39;d actually made it a goal for that to be reusable and factored it out as a C library.  I thought we&#39;d have to rip out some C++ code and do the work ourselves.  But libuv is that work already done, and we seem in good company as far as the Amish-oriented goals go!

Anyway, change is coming.  So for starters...if you have ideas or complaints about files...now would be the time to speak up!  The real turning point will be on improved networking, so stay tuned.</description>
    
    <lastBuildDate>Sun, 03 Oct 2021 09:55:49 +0000</lastBuildDate>
    <category>Ports</category>
    <atom:link href="https://forum.rebol.info/t/libuv-integration-has-started-an-i-o-renaissance/1694.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>libuv Integration Has Started...an I/O Renaissance</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1694">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>The real benefit will be having vetted asynchronous <strong>network</strong> I/O. It will take the place of buggy garbage we had, that was nigh undebuggable.</p>
</blockquote>
</aside>
<p>I've now taken the next big step in terms of implementation, in changing over the networking TLS code to use libuv.  That covers listening sockets for servers, as well as streaming data for reading and writing.</p>
<p>There's no <em>new</em> asynchronousness, but the custom/buggy/bad ways based on "devices" are gone...as well as my custom/buggy/bad temporary replacement to help migrate to libuv.</p>
<p>So it's one of those things where if this step goes well, you shouldn't be able to tell a difference.  (It's fortunate that I'd written some stress tests for the httpd server, because that catches a lot of issues.)</p>
<h2>We're Still Using Usermode HTTP/TLS Code</h2>
<p>An interesting thing about libuv is that it doesn't have any built in TLS integration:</p>
<p><a href="https://github.com/libuv/libuv/issues/1128">https://github.com/libuv/libuv/issues/1128</a></p>
<p>This means our usermode TLS code--built on the cryptographic primitives of mbedTLS--is actually a kind of interesting option.</p>
<p>The TLS code itself is sort of coherent in terms of being an "executable spec".  If the dialects used continue to converge with the RFC, it might have the bones to become one of the most understandable codebases for TLS there is.  Maybe.  <img src="https://forum.rebol.info/images/emoji/twitter/man_shrugging.png?v=9" title=":man_shrugging:" class="emoji" alt=":man_shrugging:"></p>
<p>But I say <em>"interesting"</em> option (as opposed to <em>"practical"</em>) because we should remember that the usermode TLS is slow, incomplete, on the fringe of being maintained at all, and known to be insecure.  As I've mentioned previously, it extracts certificates and decrypts the data without actually verifying against a certificate authority.  A so-called man-in-the-middle attack could be done by someone who impersonated the other side of the connection.  It's not exactly <em>zero</em> security...your average person watching wireshark packets go by wouldn't be able to read plaintext passwords go by.</p>
<p>Still...it's a bit of a novelty people might find thought-provoking, that could grow into something better in the future.  And my point is that there's no free lunch with libuv and TLS.  If we weren't using the usermode Rebol TLS, then we'd have to use the higher-level facilities in mbedTLS that take care of that (right now we only build in the lower-level cryptography that the usermode TLS uses).</p>
<h2>Big Questions About The Event Loop Loom</h2>
<p>The networking code is the first case of using the libuv callbacks and delegating to the libuv event loop.  So it's a much bigger deal than the synchronous filesystem API substitutions.</p>
<p>Right now the only time we call the event loop is in WAIT, and it's still using some ad hoc timer logic instead of libuv timers.  As I say--it's a first step.  It's a long way to the point where you could have an interactive chat program feeding lines at the unix prompt coming from the internet while you're idle at the keyboard.</p>
<p>Regardless of the specifics...<strong><a href="https://forum.rebol.info/t/semantics-of-read-and-tcp-streams-past-and-future/1733">I'm proposing a grand vision of scrapping the existing attempts at asynchronousness to replace with green threads and "channels", as in Go</a>.</strong>  Event dispatch would be very different in that world...and libuv might not even be the best choice.  Maybe everything should just be rewritten in Go.  <img src="https://forum.rebol.info/images/emoji/twitter/man_facepalming.png?v=9" title=":man_facepalming:" class="emoji" alt=":man_facepalming:"></p>
<p>Ignoring all that for now... <em>at least we're building on a platform abstraction layer that other people develop, maintain, <strong>and document</strong>.</em>  That fights much more than half the battle in the event that you decide you want to pick another platform abstraction layer.</p>
<p>Anyway I just wanted to give an update that libuv networking is in.  Report anything broken, at least that wasn't already broken before...</p>
          <p><a href="https://forum.rebol.info/t/libuv-integration-has-started-an-i-o-renaissance/1694/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/libuv-integration-has-started-an-i-o-renaissance/1694/4</link>
        <pubDate>Sat, 02 Oct 2021 11:39:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1694-4</guid>
        <source url="https://forum.rebol.info/t/libuv-integration-has-started-an-i-o-renaissance/1694.rss">libuv Integration Has Started...an I/O Renaissance</source>
      </item>
      <item>
        <title>libuv Integration Has Started...an I/O Renaissance</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Bravo! <a class="mention" href="/u/hostilefork">@hostilefork</a> is a legend!<br>
Is Ren-C still a rebol if virtually every part of it has been replaced?</p><div class="onebox lazyYT lazyYT-container" data-youtube-id="SGAnLY46zAk" data-youtube-title="Thought experiment «THESEUS» (English) #filosofix" data-parameters="feature=oembed&amp;wmode=opaque">
  <a href="https://www.youtube.com/watch?v=SGAnLY46zAk" target="_blank" rel="noopener">
    <img class="ytp-thumbnail-image" src="https://i.ytimg.com/vi/SGAnLY46zAk/maxresdefault.jpg" title="Thought experiment «THESEUS» (English) #filosofix" width="480" height="360">
  </a>
</div>

          <p><a href="https://forum.rebol.info/t/libuv-integration-has-started-an-i-o-renaissance/1694/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/libuv-integration-has-started-an-i-o-renaissance/1694/3</link>
        <pubDate>Tue, 31 Aug 2021 22:43:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1694-3</guid>
        <source url="https://forum.rebol.info/t/libuv-integration-has-started-an-i-o-renaissance/1694.rss">libuv Integration Has Started...an I/O Renaissance</source>
      </item>
      <item>
        <title>libuv Integration Has Started...an I/O Renaissance</title>
        <dc:creator><![CDATA[johnk]]></dc:creator>
        <description><![CDATA[
            <p>Sounds fantastic. Well done!</p>
          <p><a href="https://forum.rebol.info/t/libuv-integration-has-started-an-i-o-renaissance/1694/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/libuv-integration-has-started-an-i-o-renaissance/1694/2</link>
        <pubDate>Tue, 31 Aug 2021 11:53:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1694-2</guid>
        <source url="https://forum.rebol.info/t/libuv-integration-has-started-an-i-o-renaissance/1694.rss">libuv Integration Has Started...an I/O Renaissance</source>
      </item>
      <item>
        <title>libuv Integration Has Started...an I/O Renaissance</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So I put together a build with libuv, and...</p>
<h2>...It's Gone Extremely Well!</h2>
<p><img src="https://forum.rebol.info/images/emoji/twitter/flight_departure.png?v=9" title=":flight_departure:" class="emoji only-emoji" alt=":flight_departure:"></p>
<p>As a first step, I decided I'd try using libuv for all of our filesystem calls.  They're based on the POSIX filesystem APIs, so with a not-impossible amount of work I was able to change our POSIX code over to libuv calls.</p>
<p><strong>Once I did so, I could throw out the Windows-specific code...so all of <a href="https://github.com/metaeducation/ren-c/blob/6770b69f9539d26da4fd2ff664332f2ba36386ad/extensions/filesystem/file-windows.c">%posix-windows.c</a> could be deleted!</strong></p>
<p>Of course, now we have to link in libuv.  But there's a lot of good news on that front:</p>
<ul>
<li>
<p>I was able to integrate libuv into our build without using any special build system, it was easy enough.</p>
</li>
<li>
<p>libuv has care and concern for weird platforms...more than we do!  So all the FreeBSD/OpenBSD/NetBSD/BSDi are covered, Haiku, etc. are covered.</p>
</li>
<li>
<p>libuv is pure C and it builds with TCC...so the <a href="https://github.com/metaeducation/ren-c/runs/3466060617?check_suite_focus=true#step:23:19">Rebol-built-with-TCC-and-libuv can still build itself</a> and bootstrap!</p>
</li>
<li>
<p>I haven't done a formal study of the exact size impact but it's in the 100s of ks not the 10s of megabytes range; for what it offers it's light and it seems they care.</p>
</li>
</ul>
<h2>While I Was Unifying The Code, I Made... TESTS!</h2>
<p>There were basically no tests of the filesystem.  Features like /SEEK came late in the game, and there were lots of bugs and design holes.  <em>No one knew how buggy it was because I think no one really used anything besides READ and WRITE of entire files!</em></p>
<p>Getting the semantics for ports hammered out is a tall order, and beyond the scope of these first steps with libuv integration.  But to get things on the right foot, I've started with some tests!</p>
<p><strong><a href="https://github.com/metaeducation/ren-c/blob/master/tests/file/file-port.test.reb">https://github.com/metaeducation/ren-c/blob/master/tests/file/file-port.test.reb</a></strong></p>
<p><strong>I'll put in my usual tearful plea for others to try kicking the tires here...</strong> but, well.  People are busy I guess.  <img src="https://forum.rebol.info/images/emoji/twitter/cry.png?v=9" title=":cry:" class="emoji" alt=":cry:"></p>
<p>Technique-wise, there are just some really cool things even right there in those tests.  There's a fuzz tester which creates an adaptation FUZZWRITE that will mimic what the write is being asked to do to the file to a buffer.</p>
<h2>So One File Was Deleted...What Else Do We Get?</h2>
<p>Deleting <code>%posix.windows.c</code> was actually a bigger deal than it sounds.  Even though I'd whittled it way down from its Device-Model hairiness, it was still a small amount of bad code.  And I'm sort of glossing over the kind-of-Herculean level of pain tolerance it takes to dot the i's, cross the t's, and write the tests for the new code to replace the old buggy stuff.</p>
<p>But it's just the beginning.  <strong>We're about to get a lot.</strong></p>
<p>Many libuv functions are able to take a pointer to a function to call when an operation is done.  If you pass in nullptr for that callback, then the operation runs synchronously.</p>
<p>For my first task with the filesystem, I just passed in NULL to all the file-reading and file-writing routines for the callback.  So we are doing the same blocking I/O as always.</p>
<p>Being able to do asynchronous <em><strong>file</strong></em> I/O isn't a priority right now.  But if we need it, it's there.</p>
<p>The real benefit will be having vetted asynchronous <strong>network</strong> I/O.  It will take the place of buggy garbage we had, that was nigh undebuggable.  We should be able to write working timers and other interesting things.</p>
<h2>Modify With Confidence: I/O Edition</h2>
<p>I had said that a goal of Ren-C was that if there was something we thought up, the limit to doing it would be the limit of being able to articulate the design... not having murky code.</p>
<p>I'd claimed that point had been reached, and the new goal was just to "elevate the art" of the language.</p>
<p>But that conveniently overlooked the fact that the device layer and I/O were all still horrible murk.  I'd kind of blocked it out of my mind, since I'd thrown it over the wall...and been able to make a WebAssembly build without it.  It "didn't count".</p>
<p><strong>Now the Windows/Mac/Linux/Haiku/etc. builds are back in the game, and The Design Handcuffs Are Off</strong></p>
<p>I'd actually said at one point that if we wanted Network I/O to be any good we should just take Node.js's code for interfacing with V8.  I didn't realize they'd actually made it a goal for that to be reusable and factored it out as a C library.  I thought we'd have to rip out some C++ code and do the work ourselves.  But libuv is that work already done, and we seem in good company as far as the Amish-oriented goals go!</p>
<p>Anyway, change is coming.  So for starters...if you have ideas or complaints about files...now would be the time to speak up!  The real turning point will be on improved networking, so stay tuned.</p>
          <p><a href="https://forum.rebol.info/t/libuv-integration-has-started-an-i-o-renaissance/1694/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/libuv-integration-has-started-an-i-o-renaissance/1694/1</link>
        <pubDate>Tue, 31 Aug 2021 03:37:40 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1694-1</guid>
        <source url="https://forum.rebol.info/t/libuv-integration-has-started-an-i-o-renaissance/1694.rss">libuv Integration Has Started...an I/O Renaissance</source>
      </item>
  </channel>
</rss>

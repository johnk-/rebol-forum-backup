<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Extensions as DLLs / Shared Libraries: Resurrected</title>
    <link>https://forum.rebol.info/t/extensions-as-dlls-shared-libraries-resurrected/1766</link>
    <description>The initial concept Shixin and I talked about with extensions was essentially giving you three choices for each extension:

**`[+]`** : Build the extension into the interpreter executable
**`[-]`** : Don&#39;t build the extension at all.
**`[*]`** : Build the extension as a separately loadable .dll or .so file

And supposedly it was at some point able to do that.  **But I&#39;d never seen it work.**  Because it was a mixture of Rebmake and the R3 Historical Extension model and loading code.  Since it wasn&#39;t part of any testing regimen--and I never understood it to begin with--it probably only worked the day Shixin wrote it (if it would have worked for me at all, on another machine).

The mysterious feature atrophied, but I kept things related to it around.  Because we need this ability to load bits of &quot;native&quot; code dynamically...most especially on the web (where native=wasm).

I decided to spend some time attacking the desktop versions.  By no means was this fun, but, I did get it to work on Windows, Mac and Linux.

As a demonstration of it working, I made the UUID extension a DLL on all the platforms, and call it in a test:

* [Windows](https://github.com/metaeducation/ren-c/runs/4412834535?check_suite_focus=true#step:23:46) (`.DLL` file)
* [Linux](https://github.com/metaeducation/ren-c/runs/4412352346?check_suite_focus=true#step:22:23) (`.so` file)
* [Mac](https://github.com/metaeducation/ren-c/runs/4412835593?check_suite_focus=true#step:16:23) (`.dylib` file)

*(I&#39;m fairly sure that the Mac version could not have worked prior to the development of the libRebol API and extension mechanics in their modern form.  So it probably was in an &quot;almost working since it&#39;s a lot like the linux version--except for link errors&quot; state at the time of Shixin&#39;s writing.)*

## How Do You Use It?

Right now you do LOAD-EXTENSION and pass it a path.  It gives you back a module, which you could then IMPORT or use directly as an object.

The UUID module was not designed to be IMPORT-friendly.  It calls its method &quot;generate&quot; which is generic, so it only makes sense as `mod-uuid.generate`.  So I just did:

     mod-uuid: load-extension %/path/to/r3-uuid.dll
     uuid: mod-uuid.generate

The way I&#39;ve set up to think about extensions is that from a user&#39;s point of view, you can&#39;t tell the difference really from ordinary modules.  So really this should be folded into IMPORT.  You should be able to use a URL just as easily as you can use a FILE!.

Shorthand lookups present a bit of a problem, because since these contain native code there&#39;s not a single location that would work for all platforms.  We could perhaps adopt a standard naming strategy so that if you put all the extensions in the same directory alongside each other it would know how to pick the right one...

It is kind of neat to see the single file encapsulating script code and native code together.  But what would be really neat to see beyond this is having a form that works in the web browser.  But this was not fun and so I&#39;m going to need to do something else for a bit.</description>
    
    <lastBuildDate>Fri, 03 Dec 2021 21:19:20 +0000</lastBuildDate>
    <category>Modules</category>
    <atom:link href="https://forum.rebol.info/t/extensions-as-dlls-shared-libraries-resurrected/1766.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Extensions as DLLs / Shared Libraries: Resurrected</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The initial concept Shixin and I talked about with extensions was essentially giving you three choices for each extension:</p>
<p><strong><code>[+]</code></strong> : Build the extension into the interpreter executable<br>
<strong><code>[-]</code></strong> : Don't build the extension at all.<br>
<strong><code>[*]</code></strong> : Build the extension as a separately loadable .dll or .so file</p>
<p>And supposedly it was at some point able to do that.  <strong>But I'd never seen it work.</strong>  Because it was a mixture of Rebmake and the R3 Historical Extension model and loading code.  Since it wasn't part of any testing regimen--and I never understood it to begin with--it probably only worked the day Shixin wrote it (if it would have worked for me at all, on another machine).</p>
<p>The mysterious feature atrophied, but I kept things related to it around.  Because we need this ability to load bits of "native" code dynamically...most especially on the web (where native=wasm).</p>
<p>I decided to spend some time attacking the desktop versions.  By no means was this fun, but, I did get it to work on Windows, Mac and Linux.</p>
<p>As a demonstration of it working, I made the UUID extension a DLL on all the platforms, and call it in a test:</p>
<ul>
<li>
<a href="https://github.com/metaeducation/ren-c/runs/4412834535?check_suite_focus=true#step:23:46">Windows</a> (<code>.DLL</code> file)</li>
<li>
<a href="https://github.com/metaeducation/ren-c/runs/4412352346?check_suite_focus=true#step:22:23">Linux</a> (<code>.so</code> file)</li>
<li>
<a href="https://github.com/metaeducation/ren-c/runs/4412835593?check_suite_focus=true#step:16:23">Mac</a> (<code>.dylib</code> file)</li>
</ul>
<p><em>(I'm fairly sure that the Mac version could not have worked prior to the development of the libRebol API and extension mechanics in their modern form.  So it probably was in an "almost working since it's a lot like the linux version--except for link errors" state at the time of Shixin's writing.)</em></p>
<h2>How Do You Use It?</h2>
<p>Right now you do LOAD-EXTENSION and pass it a path.  It gives you back a module, which you could then IMPORT or use directly as an object.</p>
<p>The UUID module was not designed to be IMPORT-friendly.  It calls its method "generate" which is generic, so it only makes sense as <code>mod-uuid.generate</code>.  So I just did:</p>
<pre><code> mod-uuid: load-extension %/path/to/r3-uuid.dll
 uuid: mod-uuid.generate
</code></pre>
<p>The way I've set up to think about extensions is that from a user's point of view, you can't tell the difference really from ordinary modules.  So really this should be folded into IMPORT.  You should be able to use a URL just as easily as you can use a FILE!.</p>
<p>Shorthand lookups present a bit of a problem, because since these contain native code there's not a single location that would work for all platforms.  We could perhaps adopt a standard naming strategy so that if you put all the extensions in the same directory alongside each other it would know how to pick the right one...</p>
<p>It is kind of neat to see the single file encapsulating script code and native code together.  But what would be really neat to see beyond this is having a form that works in the web browser.  But this was not fun and so I'm going to need to do something else for a bit.</p>
          <p><a href="https://forum.rebol.info/t/extensions-as-dlls-shared-libraries-resurrected/1766/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/extensions-as-dlls-shared-libraries-resurrected/1766/1</link>
        <pubDate>Fri, 03 Dec 2021 20:52:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1766-1</guid>
        <source url="https://forum.rebol.info/t/extensions-as-dlls-shared-libraries-resurrected/1766.rss">Extensions as DLLs / Shared Libraries: Resurrected</source>
      </item>
  </channel>
</rss>

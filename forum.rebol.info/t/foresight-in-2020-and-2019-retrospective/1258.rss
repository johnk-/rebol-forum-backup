<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Foresight in 2020 (and 2019 Retrospective)</title>
    <link>https://forum.rebol.info/t/foresight-in-2020-and-2019-retrospective/1258</link>
    <description># :partying_face:  **Happy Belated New Years to the People Who Matter!**
&lt;sub&gt;(I&#39;m talking of course, about the people who read this forum :P)&lt;/sub&gt;

&gt; If you&#39;re wondering why I&#39;m a month late making a New Year&#39;s post...it&#39;s because I&#39;ve been a month late making good on getting the 2019 conference videos edited by end of the year they were filmed in.  But they&#39;re finally finished!
&gt;
&gt; [https://2019.reb4.me/talks](https://2019.reb4.me/talks)
&gt;
&gt; *(Note: If you enjoy the videos and didn&#39;t attend the conference, please consider sending a contribution to @rgchris to offset the venue rental cost.)*

## ...Are We Amazed, Yet?

In December I forced myself to put all development on hold (besides critical bugfixes) until the videos were done.  Transforming real-life talks into something that has online watchable appeal is focused work that is very iterative--and takes days for each.  So I&#39;ve fit it in around my life *(even dragging the computer to a [4-day New Years event](https://www.facebook.com/events/marriott-hotel-ann-arbor-ypsilanti-at-eagle-crest/spotlight-new-years-celebration-2019-2020/2215596472017261/), and sneaking back to the room to edit whenever I could...)*

I had my doubts sometimes while doing it, but after seeing the wall of well-tuned talks I feel the time spent on the videos was **totally worth it.**

It&#39;s a fun reminder of an eventful summer.  I was in Philadelphia for the month before -and- after the conference.  And it&#39;s hard to imagine how any of the interesting things in my life that have occurred since would have happened, if not for getting out to take that trip!

But the videos also stand as an easy-to-absorb testimony to the **arsenal of tools and design** which we have been patiently steering toward.  I&#39;ve been adamant that there&#39;s no point in writing &quot;Rebol 2, II&quot;. 
 So I&#39;ve consciously avoided whipping out my mad Win32 skills to write yet another &quot;80s cash register&quot;.  It&#39;s been all about forming a solid core and library that would be a [lasting foundation](https://en.wikipedia.org/wiki/Parable_of_the_Wise_and_the_Foolish_Builders) for the future... regardless of what that future held.

The accomplishments have been formidable:

* A WebAssembly build...that can even run the same usermode console code in the browser that is used in the desktop builds.
* 32-bit and 64-bit builds on all platforms (enabling us to run on even the latest OS X), with alignments meticulously heeded to facilitate the Wasm compilation.
* [Complete bootstrap requiring only a single Rebol executable](https://youtu.be/PT3GOe1pj9I?t=185) (statically linked with libtcc), that can pull source from GitHub...unzip it...run the make process...and compile the C files to make a new r3.
* [An Android client/server system and &quot;app store&quot;](https://youtu.be/r5kccBehMMg?t=531), running a native Bionic-linked executable on the phone, serving its interface through httpd to get UI through a Wasm build in a local browser.
* A system for [building and packaging a &quot;PWA&quot;](https://github.com/BrianOtto/rebol-pwa) ([Progressive Web App](https://developers.google.com/web/progressive-web-apps)) out of a Wasm-built application.
* An interoperability API with a level of design that I have not seen matched for C systems, that is seeming to apply with equal strength to JavaScript.  [My tech talk on it lays out just how clever libRebol is](https://youtu.be/6nsKTpArTCE?t=252).

...and that&#39;s just a *small* list of what we&#39;ve got going for us.

## Web Framework 2021, and Redbol

I&#39;d proposed at the beginning of 2019 to pin down Ren-C with enough committed to so we could declare a Beta status: Beta/One.  It would be acceptable even if it was a small subset of the language. 
 Just as long as there was enough to teach at least a couple concepts in an online tutorial, without people having to unlearn anything later.

But... to the extent people voted with their time and attention... I was overruled.  Once web embedding came online, that&#39;s what captured the imagination.  No one chipped in on design posts, but went off writing huge applications for the web... entirely in Rebol.  Whether I approved or not, that&#39;s what happened.

So I [pivoted in mid-year](https://forum.rebol.info/t/beta-one-goals-vs-web-framework-goals/1146) to say that we&#39;d be better off building a solid Rebol2/Red emulation mode (the so-called [&quot;Redbol&quot; module](https://forum.rebol.info/t/requirements-list-for-the-redbol-compatibility-module/722)).  Then give Ren-C more time to remain an evolving internal framework, by which Rebol-like systems were built.

Rather than be upset about it, I decided Redbol would make a good technical challenge of Ren-C&#39;s pliability.

## 2019 Had Plenty of Technical Achievements

The first half of 2019 was extremely productive from a development point of view, which was good since it gave us a lot to show off at the conference.  The second half didn&#39;t see quite as much happening... because I had a lot of things going on in life.  Taken as a whole, a lot still happened:

* [**Beta/One Enfix Covenant**](https://forum.rebol.info/t/the-beta-one-enfix-covenant/1023) - The desire to have constructs like ELSE in the language led down a complicated path.  Trying to accomplish the distinction with parameter conventions brought up questions of what would happen if you used those parameter conventions on the right hand side.  Reasoning ultimately led to what feels like the answer that eliminates the new parameter class.

* [**Beta/One Mutability Manifesto**](https://forum.rebol.info/t/the-beta-one-mutability-manifesto/1062) - Rebol&#39;s fast-and-fluid attitude toward mutability is something people take for granted in small scripts, but bites new users and experts alike.  The simplest examples like **loop 2 [x: [] | append x ...]** leads to confusion when the **x: []** does not cause a reset on each iteration.  For starters, Ren-C had tried unconditionally locking source series--which helped plug oversights in PROTECT, but caused vocal objections from users on how it affected casual scripting.  Using a new and versatile technical approach, the out-of-the-box default provides something that no one has complained about yet...and that can empower the creation of Rebol2-compatible constructs.

* [**Refinements As Their Own Arguments**](https://forum.rebol.info/t/pure-and-refined-simplifying-refinements-to-one-or-zero-args/1120) - Whether people appreciate it or not yet, this change is cross-cutting and benefits users and the evaluator alike.  The trend in Ren-C has usually been one of increased nuance to bolster the claims of the &quot;most freeform language ever designed&quot;*, *so it&#39;s a gratifying thing to have a sea change of simplification over historical Rebol*!  You can take my word about the benefits inside the interpreter, but as [features like AUGMENT](https://forum.rebol.info/t/augment-add-parameters-and-refinements-after-the-fact/1216) come online, I bet everyone will come to appreciate how critical this was.

* [**Generalized Quoting Of Any Value Arrives**](https://forum.rebol.info/t/quoted-arrives-formerly-known-as-lit-bit/995) - This is another case where not everyone appreciates the importance of being able to add an arbitrary number of quote levels to any value.  Yet this is something the average user will come to appreciate when **switch block [&#39;[a b] [print &quot;matching blocks in switch&quot;] ...]** or when **append block &#39;(&quot;appending&quot; &quot;groups&quot;)**.  And again you&#39;ll have to take my word for it that it has ripples of consequences which enable API features you haven&#39;t appreciated yet.  As Hans and Franz would say: *&quot;Hear me now, and believe me later.&quot;*

* [**UTF-8 Everywhere Has Been Running Since March**](https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374/5) - Whether we&#39;re serving a [HighCodepointCat(ðŸ˜º) over rebol-httpd](https://github.com/metaeducation/rebol-httpd/blob/c6e180d41233a6ef596bf3245189cec80bf30ce3/tests/stress.reb#L32) or perhaps a [full-spectrum test with Braille and such](https://github.com/metaeducation/ren-c/blob/9166dff4ba74ded7024d001980af480b593cf91d/tests/string/utf8.test.reb#L16), Ren-C has the full Unicode support R3-Alpha lacked.  While Red supports high codepoints as well, it does it in a way I do not think is &quot;future-forward&quot;...and Ren-C joins Rust as one of the few languages to truly only represent strings internally as UTF-8.  We still hit a bump here and there...@giuliolunati found a bug some weeks ago, but it&#39;s running and there&#39;s no going back.

* **Viable ODBC Functionality** - The ODBC extension was ported at one point, but not maintained.  But we [have a Travis CI test being run](https://github.com/metaeducation/rebol-odbc/blob/master/tests/odbc-test.reb)...to keep it working with MySQL, SQLite, and Excel (among others).

Those are some big ones, but you can dig through commit logs or forum posts for more.

## Onward...!

Now that the videos are finished, I&#39;m ready to get back to coding.

I&#39;ve moved to a new living situation *(curiously, a mere 15 minute drive from the [Rebol Cafe](https://i.stack.imgur.com/e3zjd.jpg))*.  There, I&#39;m setting up a more monk-like existence, and have cut out most of the fun-but-distracting stuff I was doing.  No more partying every night. :slightly_frowning_face:  It&#39;s days of tea and typing again, so hopefully we&#39;ll see a repeat of the productivity from early 2019.

So what&#39;s on the radar, now?

* The **Redbol Module** is going to be a big focus.  We&#39;ve already had some success with my blog generator and Gabriele&#39;s PDF maker.  I&#39;m going to start a separate repository for it, and begin a framework through which we can run Red&#39;s tests against it.  This is going to be a long road, but a very deep stress test and proving ground for Ren-C.  There will be bugs in the emulation to work on, and there will be bugs brought out in the core, so no shortage of work to do.  I hope people can get on board with contributing to the userspace definitions, so I can tend to the C code and design that needs doing.

* We&#39;re moving away from StackOverflow for chat and Q&amp;A, and [**We Might Pick to Build a Rebol Solution**](https://forum.rebol.info/t/migration-from-stackoverflow-chat/1256).  I don&#39;t want to be hasty in saying that we jump into that burden.  But I&#39;ve had something of a revelation that I can no longer be complicit in the &quot;keeping things on some guy&#39;s website&quot;...or even trusting the DNS system itself.  Whether it&#39;s through Rebol or not, I want my remaining time as a user of the Internet to be spent as an activist for removing central control by fiat.  I&#39;ve *talked* about it for decades... but it&#39;s time to put my money where my mouth is, and find a way to participate with the people who&#39;ve actually been walking the talk in the meantime.  @gchiu has already started tinkering here, and I&#39;ll support those efforts as well as doing my own research.

* Somewhat tied in with the above, cryptography is rather critical... and we should be providing an arbitrary precision INTEGER! type.  So I want to see [BigNum](https://forum.rebol.info/t/planning-ahead-for-bignum-arithmetic/623) support as a foundational service sooner rather than later.

* We need to become **[&quot;Stackless&quot;](https://forum.rebol.info/t/switching-to-stackless-why-this-why-now/1247)**.  Wasm has forced our hand here, but it is a good idea regardless.  Early experiments are promising, but putting this together won&#39;t happen overnight... it&#39;s by no means trivial.

* I&#39;m proud of how libRebol is working in C and JavaScript, but I&#39;d like to see some forward-looking work into binding with Rust and .NET... as well as revisiting the C++ binding.  The &quot;RenCpp&quot; interface was the primary design influence on libRebol, and I want to turn that around and see how to rethink the C++.  Getting Ren Garden to build against the new &quot;Qt Lite&quot; would be a good test that would bring me up to date on that.  @szeng did some exploratory work on Rust binding, and I&#39;d like to see that and see what I think. 

* Would be cool to get Ren-C on the [STM32 board donated by @jhgorse](https://forum.rebol.info/t/rebol-on-embedded-systems-stm32/1246), just to do a bit of a check on our ability to run in truly resource-constrained environments and be useful there.

Of course there&#39;s a ton more to do.  I guess a lot of what order we do things depends on you all.

Let&#39;s get to it.</description>
    
    <lastBuildDate>Sat, 08 Feb 2020 17:46:23 +0000</lastBuildDate>
    <category>Announcements</category>
    <atom:link href="https://forum.rebol.info/t/foresight-in-2020-and-2019-retrospective/1258.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Foresight in 2020 (and 2019 Retrospective)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h1>
<img src="https://forum.rebol.info/images/emoji/twitter/partying_face.png?v=9" title=":partying_face:" class="emoji" alt=":partying_face:">  <strong>Happy Belated New Years to the People Who Matter!</strong>
</h1>
<p><sub>(I'm talking of course, about the people who read this forum :P)</sub></p>
<blockquote>
<p>If you're wondering why I'm a month late making a New Year's post...it's because I've been a month late making good on getting the 2019 conference videos edited by end of the year they were filmed in.  But they're finally finished!</p>
<p><a href="https://2019.reb4.me/talks" rel="nofollow noopener">https://2019.reb4.me/talks</a></p>
<p><em>(Note: If you enjoy the videos and didn't attend the conference, please consider sending a contribution to <a class="mention" href="/u/rgchris">@rgchris</a> to offset the venue rental cost.)</em></p>
</blockquote>
<h2>...Are We Amazed, Yet?</h2>
<p>In December I forced myself to put all development on hold (besides critical bugfixes) until the videos were done.  Transforming real-life talks into something that has online watchable appeal is focused work that is very iterative--and takes days for each.  So I've fit it in around my life <em>(even dragging the computer to a <a href="https://www.facebook.com/events/marriott-hotel-ann-arbor-ypsilanti-at-eagle-crest/spotlight-new-years-celebration-2019-2020/2215596472017261/" rel="nofollow noopener">4-day New Years event</a>, and sneaking back to the room to edit whenever I could...)</em></p>
<p>I had my doubts sometimes while doing it, but after seeing the wall of well-tuned talks I feel the time spent on the videos was <strong>totally worth it.</strong></p>
<p>It's a fun reminder of an eventful summer.  I was in Philadelphia for the month before -and- after the conference.  And it's hard to imagine how any of the interesting things in my life that have occurred since would have happened, if not for getting out to take that trip!</p>
<p>But the videos also stand as an easy-to-absorb testimony to the <strong>arsenal of tools and design</strong> which we have been patiently steering toward.  I've been adamant that there's no point in writing "Rebol 2, II".<br>
So I've consciously avoided whipping out my mad Win32 skills to write yet another "80s cash register".  It's been all about forming a solid core and library that would be a <a href="https://en.wikipedia.org/wiki/Parable_of_the_Wise_and_the_Foolish_Builders" rel="nofollow noopener">lasting foundation</a> for the future... regardless of what that future held.</p>
<p>The accomplishments have been formidable:</p>
<ul>
<li>A WebAssembly build...that can even run the same usermode console code in the browser that is used in the desktop builds.</li>
<li>32-bit and 64-bit builds on all platforms (enabling us to run on even the latest OS X), with alignments meticulously heeded to facilitate the Wasm compilation.</li>
<li>
<a href="https://youtu.be/PT3GOe1pj9I?t=185" rel="nofollow noopener">Complete bootstrap requiring only a single Rebol executable</a> (statically linked with libtcc), that can pull source from GitHub...unzip it...run the make process...and compile the C files to make a new r3.</li>
<li>
<a href="https://youtu.be/r5kccBehMMg?t=531" rel="nofollow noopener">An Android client/server system and "app store"</a>, running a native Bionic-linked executable on the phone, serving its interface through httpd to get UI through a Wasm build in a local browser.</li>
<li>A system for <a href="https://github.com/BrianOtto/rebol-pwa" rel="nofollow noopener">building and packaging a "PWA"</a> (<a href="https://developers.google.com/web/progressive-web-apps" rel="nofollow noopener">Progressive Web App</a>) out of a Wasm-built application.</li>
<li>An interoperability API with a level of design that I have not seen matched for C systems, that is seeming to apply with equal strength to JavaScript.  <a href="https://youtu.be/6nsKTpArTCE?t=252" rel="nofollow noopener">My tech talk on it lays out just how clever libRebol is</a>.</li>
</ul>
<p>...and that's just a <em>small</em> list of what we've got going for us.</p>
<h2>Web Framework 2021, and Redbol</h2>
<p>I'd proposed at the beginning of 2019 to pin down Ren-C with enough committed to so we could declare a Beta status: Beta/One.  It would be acceptable even if it was a small subset of the language.<br>
Just as long as there was enough to teach at least a couple concepts in an online tutorial, without people having to unlearn anything later.</p>
<p>But... to the extent people voted with their time and attention... I was overruled.  Once web embedding came online, that's what captured the imagination.  No one chipped in on design posts, but went off writing huge applications for the web... entirely in Rebol.  Whether I approved or not, that's what happened.</p>
<p>So I <a href="https://forum.rebol.info/t/beta-one-goals-vs-web-framework-goals/1146">pivoted in mid-year</a> to say that we'd be better off building a solid Rebol2/Red emulation mode (the so-called <a href="https://forum.rebol.info/t/requirements-list-for-the-redbol-compatibility-module/722">"Redbol" module</a>).  Then give Ren-C more time to remain an evolving internal framework, by which Rebol-like systems were built.</p>
<p>Rather than be upset about it, I decided Redbol would make a good technical challenge of Ren-C's pliability.</p>
<h2>2019 Had Plenty of Technical Achievements</h2>
<p>The first half of 2019 was extremely productive from a development point of view, which was good since it gave us a lot to show off at the conference.  The second half didn't see quite as much happening... because I had a lot of things going on in life.  Taken as a whole, a lot still happened:</p>
<ul>
<li>
<p><a href="https://forum.rebol.info/t/the-beta-one-enfix-covenant/1023"><strong>Beta/One Enfix Covenant</strong></a> - The desire to have constructs like ELSE in the language led down a complicated path.  Trying to accomplish the distinction with parameter conventions brought up questions of what would happen if you used those parameter conventions on the right hand side.  Reasoning ultimately led to what feels like the answer that eliminates the new parameter class.</p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/the-beta-one-mutability-manifesto/1062"><strong>Beta/One Mutability Manifesto</strong></a> - Rebol's fast-and-fluid attitude toward mutability is something people take for granted in small scripts, but bites new users and experts alike.  The simplest examples like <strong>loop 2 [x: [] | append x ...]</strong> leads to confusion when the <strong>x: []</strong> does not cause a reset on each iteration.  For starters, Ren-C had tried unconditionally locking source series--which helped plug oversights in PROTECT, but caused vocal objections from users on how it affected casual scripting.  Using a new and versatile technical approach, the out-of-the-box default provides something that no one has complained about yet...and that can empower the creation of Rebol2-compatible constructs.</p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/pure-and-refined-simplifying-refinements-to-one-or-zero-args/1120"><strong>Refinements As Their Own Arguments</strong></a> - Whether people appreciate it or not yet, this change is cross-cutting and benefits users and the evaluator alike.  The trend in Ren-C has usually been one of increased nuance to bolster the claims of the "most freeform language ever designed"*, <em>so it's a gratifying thing to have a sea change of simplification over historical Rebol</em>!  You can take my word about the benefits inside the interpreter, but as <a href="https://forum.rebol.info/t/augment-add-parameters-and-refinements-after-the-fact/1216">features like AUGMENT</a> come online, I bet everyone will come to appreciate how critical this was.</p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/quoted-arrives-formerly-known-as-lit-bit/995"><strong>Generalized Quoting Of Any Value Arrives</strong></a> - This is another case where not everyone appreciates the importance of being able to add an arbitrary number of quote levels to any value.  Yet this is something the average user will come to appreciate when <strong>switch block ['[a b] [print "matching blocks in switch"] ...]</strong> or when <strong>append block '("appending" "groups")</strong>.  And again you'll have to take my word for it that it has ripples of consequences which enable API features you haven't appreciated yet.  As Hans and Franz would say: <em>"Hear me now, and believe me later."</em></p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374/5"><strong>UTF-8 Everywhere Has Been Running Since March</strong></a> - Whether we're serving a <a href="https://github.com/metaeducation/rebol-httpd/blob/c6e180d41233a6ef596bf3245189cec80bf30ce3/tests/stress.reb#L32" rel="nofollow noopener">HighCodepointCat(<img src="https://forum.rebol.info/images/emoji/twitter/smiley_cat.png?v=9" title=":smiley_cat:" class="emoji" alt=":smiley_cat:">) over rebol-httpd</a> or perhaps a <a href="https://github.com/metaeducation/ren-c/blob/9166dff4ba74ded7024d001980af480b593cf91d/tests/string/utf8.test.reb#L16" rel="nofollow noopener">full-spectrum test with Braille and such</a>, Ren-C has the full Unicode support R3-Alpha lacked.  While Red supports high codepoints as well, it does it in a way I do not think is "future-forward"...and Ren-C joins Rust as one of the few languages to truly only represent strings internally as UTF-8.  We still hit a bump here and there...<a class="mention" href="/u/giuliolunati">@giuliolunati</a> found a bug some weeks ago, but it's running and there's no going back.</p>
</li>
<li>
<p><strong>Viable ODBC Functionality</strong> - The ODBC extension was ported at one point, but not maintained.  But we <a href="https://github.com/metaeducation/rebol-odbc/blob/master/tests/odbc-test.reb" rel="nofollow noopener">have a Travis CI test being run</a>...to keep it working with MySQL, SQLite, and Excel (among others).</p>
</li>
</ul>
<p>Those are some big ones, but you can dig through commit logs or forum posts for more.</p>
<h2>Onward...!</h2>
<p>Now that the videos are finished, I'm ready to get back to coding.</p>
<p>I've moved to a new living situation <em>(curiously, a mere 15 minute drive from the <a href="https://i.stack.imgur.com/e3zjd.jpg" rel="nofollow noopener">Rebol Cafe</a>)</em>.  There, I'm setting up a more monk-like existence, and have cut out most of the fun-but-distracting stuff I was doing.  No more partying every night. <img src="https://forum.rebol.info/images/emoji/twitter/slightly_frowning_face.png?v=9" title=":slightly_frowning_face:" class="emoji" alt=":slightly_frowning_face:">  It's days of tea and typing again, so hopefully we'll see a repeat of the productivity from early 2019.</p>
<p>So what's on the radar, now?</p>
<ul>
<li>
<p>The <strong>Redbol Module</strong> is going to be a big focus.  We've already had some success with my blog generator and Gabriele's PDF maker.  I'm going to start a separate repository for it, and begin a framework through which we can run Red's tests against it.  This is going to be a long road, but a very deep stress test and proving ground for Ren-C.  There will be bugs in the emulation to work on, and there will be bugs brought out in the core, so no shortage of work to do.  I hope people can get on board with contributing to the userspace definitions, so I can tend to the C code and design that needs doing.</p>
</li>
<li>
<p>We're moving away from StackOverflow for chat and Q&amp;A, and <a href="https://forum.rebol.info/t/migration-from-stackoverflow-chat/1256"><strong>We Might Pick to Build a Rebol Solution</strong></a>.  I don't want to be hasty in saying that we jump into that burden.  But I've had something of a revelation that I can no longer be complicit in the "keeping things on some guy's website"...or even trusting the DNS system itself.  Whether it's through Rebol or not, I want my remaining time as a user of the Internet to be spent as an activist for removing central control by fiat.  I've <em>talked</em> about it for decades... but it's time to put my money where my mouth is, and find a way to participate with the people who've actually been walking the talk in the meantime.  <a class="mention" href="/u/gchiu">@gchiu</a> has already started tinkering here, and I'll support those efforts as well as doing my own research.</p>
</li>
<li>
<p>Somewhat tied in with the above, cryptography is rather critical... and we should be providing an arbitrary precision INTEGER! type.  So I want to see <a href="https://forum.rebol.info/t/planning-ahead-for-bignum-arithmetic/623">BigNum</a> support as a foundational service sooner rather than later.</p>
</li>
<li>
<p>We need to become <strong><a href="https://forum.rebol.info/t/switching-to-stackless-why-this-why-now/1247">"Stackless"</a></strong>.  Wasm has forced our hand here, but it is a good idea regardless.  Early experiments are promising, but putting this together won't happen overnight... it's by no means trivial.</p>
</li>
<li>
<p>I'm proud of how libRebol is working in C and JavaScript, but I'd like to see some forward-looking work into binding with Rust and .NET... as well as revisiting the C++ binding.  The "RenCpp" interface was the primary design influence on libRebol, and I want to turn that around and see how to rethink the C++.  Getting Ren Garden to build against the new "Qt Lite" would be a good test that would bring me up to date on that.  <a class="mention" href="/u/szeng">@szeng</a> did some exploratory work on Rust binding, and I'd like to see that and see what I think.</p>
</li>
<li>
<p>Would be cool to get Ren-C on the <a href="https://forum.rebol.info/t/rebol-on-embedded-systems-stm32/1246">STM32 board donated by @jhgorse</a>, just to do a bit of a check on our ability to run in truly resource-constrained environments and be useful there.</p>
</li>
</ul>
<p>Of course there's a ton more to do.  I guess a lot of what order we do things depends on you all.</p>
<p>Let's get to it.</p>
          <p><a href="https://forum.rebol.info/t/foresight-in-2020-and-2019-retrospective/1258/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/foresight-in-2020-and-2019-retrospective/1258/1</link>
        <pubDate>Sat, 08 Feb 2020 17:46:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1258-1</guid>
        <source url="https://forum.rebol.info/t/foresight-in-2020-and-2019-retrospective/1258.rss">Foresight in 2020 (and 2019 Retrospective)</source>
      </item>
  </channel>
</rss>

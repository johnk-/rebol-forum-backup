<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>TO NOT B OR TO NOT (B)...is...no longer a question</title>
    <link>https://forum.rebol.info/t/to-not-b-or-to-not-b-is-no-longer-a-question/409</link>
    <description>Empowered by a wave of recent technical enhancements, a [very, very cool change](https://github.com/metaeducation/ren-c/commit/bc8d0fc4994ce88dc039f0a81abbd4931247d127) has shown how wide-open the sky is now for expression via enfix.  Now you can write things like:

    if block? x and (length of x = 1 + 2) [
        print &quot;x is a block of length 3&quot;
    ] else [
        print &quot;x is either not a block, or not length 3&quot;
    ]

*That&#39;s not some bizarre, carefully-crafted and isolated case that only works on a fluke.*  This is machinery clicking together after quite a lot of exploration.  And there&#39;s so much &quot;cool&quot; in there I almost don&#39;t know where to start...

*(**UPDATE**: a somewhat off-the-cuff experimental trick to try and skip expressions in &quot;neutral&quot; via a DON&#39;T operator turned out to have too many drawbacks for short-circuit evaluation, sadly... hence you do really need a GROUP! or BLOCK! or something around (length of x = 1 + 2) if you&#39;re going to short-circuit.  But the rest is still true--as per the topic of this post, which is left normal enfix...which has developed over months instead of hours.  :stuck_out_tongue: )*

In most ways this is strictly more powerful...since the restrained way in which operators were used before generally can still work.  But in looking at the tests, I found one &quot;casualty&quot; of all the cool.  That is that **if not x = y [...]** gets interpreted as **if (not x) = y [...]**.

At a mechanical level, this is because changing `=` to be *left-enfix-normal* instead of *left-enfix-tight* means it gives [one chance at deferment](https://github.com/metaeducation/ren-c/commit/5af6d3d9d245d48e0438ea41f6e402a71d78cb01).  That chance is while **=** is sitting up next in the frame&#39;s token pipeline, at the moment x is being filled in NOT&#39;s frame as an argument.  But when NOT doesn&#39;t try gathering any further arguments it doesn&#39;t rewind time and try to splice in the **=...** to the formerly filled argument cell.  It &quot;dampens&quot; the deferment--NOT X goes ahead and runs.

That&#39;s how this particular cookie bounces.  Yet there&#39;s no question this should be accepted as a casualty of the change.  Reasoning:

* None of the old mechanics are going away, so someone can have their own &quot;skin&quot; of **=** which is left-tight, when running in Rebol2/Red mode.  This is different from past times discussing radical enfix changes--where a lot of the circumstances were about enfix becoming more &quot;uniform&quot; in a way that would not *permit* alternatives.

* When discussing it before, we&#39;ve pointed out there are probably more good options in Rebol than in other languages: **if x &lt;&gt; y [...]**, **unless x = y [...]**, **if not (x = y) [...]**

* I&#39;m not even so sure that the most natural-looking interpretation of **not x = y** is **not (x = y)** in the first place.  Most languages which operate on a precedence model (which this isn&#39;t using) would say **(not x) = y**.  That includes C... `!x == y`

So given the necessity of the change, all that&#39;s left to talk about is what more cool things to do...to help people migrate and appreciate it.

I&#39;m definitely thinking more about ways of &quot;sensing&quot; code when changes happen.  We might imagine a hooked NOT that can ask &quot;hey, am I feeding my result into the left side of an equals?&quot; and put a warning in a log.  A lot of those mechanisms seem like they are part of the debugging and introspection API, or hooks into the evaluator loop itself...so I do want to be thinking about that.</description>
    
    <lastBuildDate>Sun, 10 Dec 2017 02:24:27 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/to-not-b-or-to-not-b-is-no-longer-a-question/409.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>TO NOT B OR TO NOT (B)...is...no longer a question</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I thought I'd tack on a brief history of enfix and how we got to this point...</p>
<hr>
<p>(Not so) Long ago, there was a push-and-pull regarding how infix should work</p>
<p>While some people imagined R3-Alpha used a simple rule (along the lines of <em>"infix functions run left-to-right"</em>), infix execution didn't exist in isolation.  Behavior--including errors--had to be defined for any combination of infix and prefix functions.  The actual mechanic didn't work how people thought it did.</p>
<p>I was motivated to change the status quo for several reasons:</p>
<ul>
<li>
<p><strong>generalization to arities greater than 2</strong>: Imagine an operator that just chooses to discard its left argument entirely.  Would you then expect <code>a enfix-op b c d e</code> to act any differently than <code>prefix-op b c d e</code>?  R3-Alpha treated the single right-hand-argument of an op differently, and this wreaked havoc on most of my interesting ideas for "enfix".</p>
</li>
<li>
<p><strong>hard to comment what was going on</strong>: It was pretty easy to break the R3-Alpha code for processing left and right hand sides of OP!, and not notice until some math test broke later on.  I tried naming variables things like "lookahead" or "lookback", and mechanically characterizing them, but it was hard to put an underlying rationale on it.</p>
</li>
<li>
<p><strong>I perceived it as more uniform with prefix</strong>: If looking at it from a clean slate, one could reasonably argue someone familiar with Rebol's prefix forms would find it more sensible for <code>1 + 2 * 3</code> to act like <code>add 1 multiply 2 3</code>.  It was simpler code and it made the evaluation more "regular"</p>
</li>
<li>
<p><strong>I didn't think anyone was all that attached to the status quo</strong>: Any new user confused by <code>1 + 2 * 3</code> being 7 would not be complaining because it acted like <code>add 1 2 multiply 3</code>.  They'd complain when <code>1 * 2 + 3</code> acted like <code>multiply 1 add 2 3</code> and ignored their idea of precedence, and they'd complain about that no matter which way the enfix leaned.</p>
</li>
</ul>
<p>Amidst changes and trials and simplifications <a class="mention" href="/u/markeye">@MarkEye</a> and I went back and forth on it constanty.  One particularly curious argument he had was to say that yes...R3-Alpha's infix behavior was less consistent with the prefix-parallel I was proposing--but having the two modes was a way of <em>adding expressivity</em> and choice.</p>
<p>Indeed, the desire for that choice came up with one of my own proposals...which was to turn <strong>/</strong> into a kind of generic pathing operator.  But if you write:</p>
<pre><code>a / b / c
</code></pre>
<p>To get semantics compatible with <code>a/b/c</code> that has to be seen as <code>(a / b) / c</code>.  So I had to admit the ability to "greedily" process "left-to-right" was necessary.  Ultimately the settlement was to create a new parameter class, which we called <strong><span class="hashtag">#tight</span></strong>...which joined <strong>:hard-quoted</strong> and <strong>'soft-quoted</strong> and plain-old WORD! <strong>normal</strong> arguments.</p>
<p>Infix math operators like <code>+</code> and <code>*</code> kept their <span class="hashtag">#tight-parameter</span> ways, while I was free to experiment with what the left-hand side of a "normal" enfixed operation would look like.  Various pitfalls were discovered in the process, such as <a class="mention" href="/u/giuliolunati">@giuliolunati</a> finding that a greedy completion of the left hand side would <a href="https://github.com/metaeducation/ren-c/issues/510" rel="nofollow noopener">ruin things like <code>return if ... [...] else [...]</code></a>.</p>
<p>This eventually toned down the idea of left-hand side completion to "a single expression's worth of deferment".<br>
One last usability issue was just fixed yesterday using a kind of <a href="https://github.com/metaeducation/ren-c/commit/5af6d3d9d245d48e0438ea41f6e402a71d78cb01" rel="nofollow noopener">time-traveling trick</a>, to have the evaluator optionally re-enter an argument it had previously punted on in order to avoid an error.</p>
<p>So I think it's come out more or less as Mark said, that more expressive choice is good.  Yet I don't want this to become some kind of deferment-arms-race.  We don't want <span class="mention">@undeferrable</span> arguments and pick functions like NOT to be able to specially overpower <strong>=</strong>.  <img src="//forum.rebol.info/images/emoji/twitter/frowning.png?v=7" title=":frowning:" class="emoji" alt=":frowning:">  If someone is that bothered by it, and doesn't like the name UNLESS, they can always make an <strong>if-not</strong> function.</p>
<p>Once again, long story is long...but the endpoint just being that I think we've found a pretty good balance of expressivity with the forms we have, and I'd like to see them being hammered out further before adding any more.</p>
          <p><a href="https://forum.rebol.info/t/to-not-b-or-to-not-b-is-no-longer-a-question/409/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/to-not-b-or-to-not-b-is-no-longer-a-question/409/2</link>
        <pubDate>Tue, 05 Dec 2017 04:50:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-409-2</guid>
        <source url="https://forum.rebol.info/t/to-not-b-or-to-not-b-is-no-longer-a-question/409.rss">TO NOT B OR TO NOT (B)...is...no longer a question</source>
      </item>
      <item>
        <title>TO NOT B OR TO NOT (B)...is...no longer a question</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Empowered by a wave of recent technical enhancements, a <a href="https://github.com/metaeducation/ren-c/commit/bc8d0fc4994ce88dc039f0a81abbd4931247d127" rel="nofollow noopener">very, very cool change</a> has shown how wide-open the sky is now for expression via enfix.  Now you can write things like:</p>
<pre><code>if block? x and (length of x = 1 + 2) [
    print "x is a block of length 3"
] else [
    print "x is either not a block, or not length 3"
]
</code></pre>
<p><em>That's not some bizarre, carefully-crafted and isolated case that only works on a fluke.</em>  This is machinery clicking together after quite a lot of exploration.  And there's so much "cool" in there I almost don't know where to start...</p>
<p><em>(<strong>UPDATE</strong>: a somewhat off-the-cuff experimental trick to try and skip expressions in "neutral" via a DON'T operator turned out to have too many drawbacks for short-circuit evaluation, sadly... hence you do really need a GROUP! or BLOCK! or something around (length of x = 1 + 2) if you're going to short-circuit.  But the rest is still true--as per the topic of this post, which is left normal enfix...which has developed over months instead of hours.  <img src="//forum.rebol.info/images/emoji/twitter/stuck_out_tongue.png?v=7" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> )</em></p>
<p>In most ways this is strictly more powerful...since the restrained way in which operators were used before generally can still work.  But in looking at the tests, I found one "casualty" of all the cool.  That is that <strong>if not x = y [...]</strong> gets interpreted as <strong>if (not x) = y [...]</strong>.</p>
<p>At a mechanical level, this is because changing <code>=</code> to be <em>left-enfix-normal</em> instead of <em>left-enfix-tight</em> means it gives <a href="https://github.com/metaeducation/ren-c/commit/5af6d3d9d245d48e0438ea41f6e402a71d78cb01" rel="nofollow noopener">one chance at deferment</a>.  That chance is while <strong>=</strong> is sitting up next in the frame's token pipeline, at the moment x is being filled in NOT's frame as an argument.  But when NOT doesn't try gathering any further arguments it doesn't rewind time and try to splice in the <strong>=...</strong> to the formerly filled argument cell.  It "dampens" the deferment--NOT X goes ahead and runs.</p>
<p>That's how this particular cookie bounces.  Yet there's no question this should be accepted as a casualty of the change.  Reasoning:</p>
<ul>
<li>
<p>None of the old mechanics are going away, so someone can have their own "skin" of <strong>=</strong> which is left-tight, when running in Rebol2/Red mode.  This is different from past times discussing radical enfix changes--where a lot of the circumstances were about enfix becoming more "uniform" in a way that would not <em>permit</em> alternatives.</p>
</li>
<li>
<p>When discussing it before, we've pointed out there are probably more good options in Rebol than in other languages: <strong>if x &lt;&gt; y [...]</strong>, <strong>unless x = y [...]</strong>, <strong>if not (x = y) [...]</strong></p>
</li>
<li>
<p>I'm not even so sure that the most natural-looking interpretation of <strong>not x = y</strong> is <strong>not (x = y)</strong> in the first place.  Most languages which operate on a precedence model (which this isn't using) would say <strong>(not x) = y</strong>.  That includes C... <code>!x == y</code></p>
</li>
</ul>
<p>So given the necessity of the change, all that's left to talk about is what more cool things to do...to help people migrate and appreciate it.</p>
<p>I'm definitely thinking more about ways of "sensing" code when changes happen.  We might imagine a hooked NOT that can ask "hey, am I feeding my result into the left side of an equals?" and put a warning in a log.  A lot of those mechanisms seem like they are part of the debugging and introspection API, or hooks into the evaluator loop itself...so I do want to be thinking about that.</p>
          <p><a href="https://forum.rebol.info/t/to-not-b-or-to-not-b-is-no-longer-a-question/409/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/to-not-b-or-to-not-b-is-no-longer-a-question/409/1</link>
        <pubDate>Tue, 05 Dec 2017 04:38:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-409-1</guid>
        <source url="https://forum.rebol.info/t/to-not-b-or-to-not-b-is-no-longer-a-question/409.rss">TO NOT B OR TO NOT (B)...is...no longer a question</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The NewPath Finesse: %%: (&lt;- MAKE FILE! LIT)</title>
    <link>https://forum.rebol.info/t/the-newpath-finesse-make-file-lit/1386</link>
    <description>When I first proposed NewPath years ago, there was resistance to the idea that FILE! have structure by default.  @rgchris insisted **%foo/bar** was best left unstructured and string-like.  Compromises were suggested like **(%foo)/bar** to get a PATH!, but this did not satisfy anyone really.  So things just kind of sat around in a stuck state for a while.

But I persisted in believing that hammering out a clean PATH! and TUPLE! mechanic would pay dividends with time.  Today we have those clean types and are sorting through the implications.

A lot of great ideas are coming out of the sky this week, and here is what I think is poised to be another great one:

## %% Quotes WORD!/PATH!/TUPLE! for MAKE FILE!

Let&#39;s imagine that %% is given to WORD!, and defaults to an operator which quotes its right hand side and makes a file out of it.  

    &gt;&gt; %% foo/bar
    == %foo/bar

    &gt;&gt; %% foo/(second [bar baz])
    == %foo/baz

    &gt;&gt; extension: %txt
    &gt;&gt; %% ~/projects/myfile.(extension)
    == %~/projects/myfile.txt

If what you have is a PATH! already you can escape it with colon:

    &gt;&gt; path: &#39;foo/(reverse &quot;rab&quot;).txt
    &gt;&gt; %% :path
    == %foo/bar.txt

This form probably is more comprehensible as **make file! path**, however.

## Why Double-Percent Instead of Single?

Superbig reason: Single percent would lead to ambiguity of **%/foo** as a FILE! and as a PATH!.

One might think of workarounds like **(:%)/foo** to call a refinement on a function, and think that might be okay.  But the moment you do a COMPOSE on a PATH! with something you think is a valid WORD! and wind up with something that molds like a file, *it&#39;s sacrificed all the work on coherence that has been done*.

That reason alone would be good enough.  But the visibility is much better with the double operator, while the single one kind of disappears:

    &gt;&gt; % foo.(if true [&#39;txt])
    == %foo.txt

    &gt;&gt; %foo.(if true [&#39;txt])  ; imagine matched () are allowed
    == %foo.(if true [&#39;txt])

Doubling helps keep the connotation to files while being sufficiently different to call attention to the fact that it&#39;s an extremely different quoting operator.

This sacrifices files named **%%** as needing to be written as **%&quot;%&quot;**.  In the scheme of things, I don&#39;t think that&#39;s too big a deal.  Percent signs in general could be used, in **%foo%4E** type files...though that looks kind of strange and maybe **%&quot;foo%4E&quot;** is better, where % is considered one of those characters that warrants putting the filename in quotes.

## The Breakthrough We&#39;ve Been Waiting For

This seems to check all the boxes.  It means we don&#39;t have to worry about making things like READ take plain PATH! or WORD! or TUPLE! in some confusing way.  The notion that it takes a file is very cleanly and very directly communicated by the operator... and this is coupled with showing the exact moment at which GROUP!s will be evaluated.</description>
    
    <lastBuildDate>Fri, 13 Nov 2020 10:29:01 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/the-newpath-finesse-make-file-lit/1386.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The NewPath Finesse: %%: (&lt;- MAKE FILE! LIT)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>When I first proposed NewPath years ago, there was resistance to the idea that FILE! have structure by default.  <a class="mention" href="/u/rgchris">@rgchris</a> insisted <strong>%foo/bar</strong> was best left unstructured and string-like.  Compromises were suggested like <strong>(%foo)/bar</strong> to get a PATH!, but this did not satisfy anyone really.  So things just kind of sat around in a stuck state for a while.</p>
<p>But I persisted in believing that hammering out a clean PATH! and TUPLE! mechanic would pay dividends with time.  Today we have those clean types and are sorting through the implications.</p>
<p>A lot of great ideas are coming out of the sky this week, and here is what I think is poised to be another great one:</p>
<h2>%% Quotes WORD!/PATH!/TUPLE! for MAKE FILE!</h2>
<p>Let's imagine that %% is given to WORD!, and defaults to an operator which quotes its right hand side and makes a file out of it.</p>
<pre><code>&gt;&gt; %% foo/bar
== %foo/bar

&gt;&gt; %% foo/(second [bar baz])
== %foo/baz

&gt;&gt; extension: %txt
&gt;&gt; %% ~/projects/myfile.(extension)
== %~/projects/myfile.txt
</code></pre>
<p>If what you have is a PATH! already you can escape it with colon:</p>
<pre><code>&gt;&gt; path: 'foo/(reverse "rab").txt
&gt;&gt; %% :path
== %foo/bar.txt
</code></pre>
<p>This form probably is more comprehensible as <strong>make file! path</strong>, however.</p>
<h2>Why Double-Percent Instead of Single?</h2>
<p>Superbig reason: Single percent would lead to ambiguity of <strong>%/foo</strong> as a FILE! and as a PATH!.</p>
<p>One might think of workarounds like <strong>(:%)/foo</strong> to call a refinement on a function, and think that might be okay.  But the moment you do a COMPOSE on a PATH! with something you think is a valid WORD! and wind up with something that molds like a file, <em>it's sacrificed all the work on coherence that has been done</em>.</p>
<p>That reason alone would be good enough.  But the visibility is much better with the double operator, while the single one kind of disappears:</p>
<pre><code>&gt;&gt; % foo.(if true ['txt])
== %foo.txt

&gt;&gt; %foo.(if true ['txt])  ; imagine matched () are allowed
== %foo.(if true ['txt])
</code></pre>
<p>Doubling helps keep the connotation to files while being sufficiently different to call attention to the fact that it's an extremely different quoting operator.</p>
<p>This sacrifices files named <strong>%%</strong> as needing to be written as <strong>%"%"</strong>.  In the scheme of things, I don't think that's too big a deal.  Percent signs in general could be used, in <strong>%foo%4E</strong> type files...though that looks kind of strange and maybe <strong>%"foo%4E"</strong> is better, where % is considered one of those characters that warrants putting the filename in quotes.</p>
<h2>The Breakthrough We've Been Waiting For</h2>
<p>This seems to check all the boxes.  It means we don't have to worry about making things like READ take plain PATH! or WORD! or TUPLE! in some confusing way.  The notion that it takes a file is very cleanly and very directly communicated by the operator... and this is coupled with showing the exact moment at which GROUP!s will be evaluated.</p>
          <p><a href="https://forum.rebol.info/t/the-newpath-finesse-make-file-lit/1386/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-newpath-finesse-make-file-lit/1386/1</link>
        <pubDate>Fri, 06 Nov 2020 05:53:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1386-1</guid>
        <source url="https://forum.rebol.info/t/the-newpath-finesse-make-file-lit/1386.rss">The NewPath Finesse: %%: (&lt;- MAKE FILE! LIT)</source>
      </item>
  </channel>
</rss>

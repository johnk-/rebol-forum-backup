<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Giving Functions the Power To Create Local Variables</title>
    <link>https://forum.rebol.info/t/giving-functions-the-power-to-create-local-variables/1499</link>
    <description>I&#39;ve added an experimental routine which is sort of a Pandora&#39;s box, but... I kind of feel it&#39;s where things need to go.

This lets you add arbitrary new variables into the stream of evaluation programmatically.  Demo:

    make-two-variables: func [name [text!]] [
        let frame: binding of &#39;return  ; frame of the call to MAKE-TWO-VARIABLES

        ; make variables for the incoming string with 1 and 2 as a suffix
        ; resulting words will have their binding adjusted to the new variables
        ;
        let word1: add-let-binding frame (to word! unspaced [name 1])
        let word2: add-let-binding frame (to word! unspaced [name 2])

        ; set variables to values as a demonstration
        set word1 &lt;one&gt;
        set word2 &lt;two&gt;
    ]

    do [
        make-two-variables &quot;demo&quot;
        assert [demo1 = &lt;one&gt;]
        assert [demo2 = &lt;two&gt;]
    ]

So this means you can write your own LET-like thing, to declare any number of variables and inject them into the stream of evaluation.

I&#39;ve [gone ahead and done this with the TLS EMIT dialect](https://github.com/metaeducation/ren-c/commit/babd70e45e1d8f7b92b15cc94ffc99d74ee23328#).  So the act of doing an EMIT will effectively do LETs for its labels, that can be observed by ensuing operations.  I&#39;ve also removed all uses of the SET-WORD! gathering FUNCTION.  This means TLS is now operating entirely with FUNC.

(As I&#39;ve mentioned, the plan is that FUNCTION implying gathering will be phased out...ultimately making FUNC and FUNCTION synonyms).

The mechanism behind this is far from perfect.  But what it&#39;s replacing was--I believe--a definitive dead-end.  The big question here to answer is *&quot;does this accrual of state represent something the evaluator shouldn&#39;t do, even if it can, because it infringes on the concept of a BLOCK! position alone capturing evaluator state&quot;*.  I think we need to review what &quot;dialects using stepwise services&quot; need...and under that review, I believe we will find that prohibiting the class of features that involve accrued state is too limiting to justify the simplicity.

And while the performance tax of these ideas is going to be something to pay, We&#39;re *not* aiming for device driver code... at least not running under the interpreter!  Maybe you write tools that help you generate device drivers, but not running them.  I&#39;ll once again cite the Minecraft cities...:

https://www.youtube.com/watch?v=QovfIQV_7GU</description>
    
    <lastBuildDate>Wed, 10 Feb 2021 21:41:53 +0000</lastBuildDate>
    <category>Binding</category>
    <atom:link href="https://forum.rebol.info/t/giving-functions-the-power-to-create-local-variables/1499.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Giving Functions the Power To Create Local Variables</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was split to a new topic: <a href="/t/danny/1502">Danny</a></p>
          <p><a href="https://forum.rebol.info/t/giving-functions-the-power-to-create-local-variables/1499/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/giving-functions-the-power-to-create-local-variables/1499/2</link>
        <pubDate>Wed, 10 Feb 2021 21:44:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1499-2</guid>
        <source url="https://forum.rebol.info/t/giving-functions-the-power-to-create-local-variables/1499.rss">Giving Functions the Power To Create Local Variables</source>
      </item>
      <item>
        <title>Giving Functions the Power To Create Local Variables</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've added an experimental routine which is sort of a Pandora's box, but... I kind of feel it's where things need to go.</p>
<p>This lets you add arbitrary new variables into the stream of evaluation programmatically.  Demo:</p>
<pre><code>make-two-variables: func [name [text!]] [
    let frame: binding of 'return  ; frame of the call to MAKE-TWO-VARIABLES

    ; make variables for the incoming string with 1 and 2 as a suffix
    ; resulting words will have their binding adjusted to the new variables
    ;
    let word1: add-let-binding frame (to word! unspaced [name 1])
    let word2: add-let-binding frame (to word! unspaced [name 2])

    ; set variables to values as a demonstration
    set word1 &lt;one&gt;
    set word2 &lt;two&gt;
]

do [
    make-two-variables "demo"
    assert [demo1 = &lt;one&gt;]
    assert [demo2 = &lt;two&gt;]
]
</code></pre>
<p>So this means you can write your own LET-like thing, to declare any number of variables and inject them into the stream of evaluation.</p>
<p>I've <a href="https://github.com/metaeducation/ren-c/commit/babd70e45e1d8f7b92b15cc94ffc99d74ee23328#">gone ahead and done this with the TLS EMIT dialect</a>.  So the act of doing an EMIT will effectively do LETs for its labels, that can be observed by ensuing operations.  I've also removed all uses of the SET-WORD! gathering FUNCTION.  This means TLS is now operating entirely with FUNC.</p>
<p>(As I've mentioned, the plan is that FUNCTION implying gathering will be phased out...ultimately making FUNC and FUNCTION synonyms).</p>
<p>The mechanism behind this is far from perfect.  But what it's replacing was--I believe--a definitive dead-end.  The big question here to answer is <em>"does this accrual of state represent something the evaluator shouldn't do, even if it can, because it infringes on the concept of a BLOCK! position alone capturing evaluator state"</em>.  I think we need to review what "dialects using stepwise services" need...and under that review, I believe we will find that prohibiting the class of features that involve accrued state is too limiting to justify the simplicity.</p>
<p>And while the performance tax of these ideas is going to be something to pay, We're <em>not</em> aiming for device driver code... at least not running under the interpreter!  Maybe you write tools that help you generate device drivers, but not running them.  I'll once again cite the Minecraft cities...:</p>
<div class="onebox lazyYT lazyYT-container" data-youtube-id="QovfIQV_7GU" data-youtube-title="Greenfield - The Largest City in Minecraft - v0.5.3" data-parameters="feature=oembed&amp;wmode=opaque">
  <a href="https://www.youtube.com/watch?v=QovfIQV_7GU" target="_blank" rel="noopener">
    <img class="ytp-thumbnail-image" src="https://i.ytimg.com/vi/QovfIQV_7GU/maxresdefault.jpg" title="Greenfield - The Largest City in Minecraft - v0.5.3" width="690" height="388">
  </a>
</div>

          <p><a href="https://forum.rebol.info/t/giving-functions-the-power-to-create-local-variables/1499/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/giving-functions-the-power-to-create-local-variables/1499/1</link>
        <pubDate>Wed, 10 Feb 2021 17:35:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1499-1</guid>
        <source url="https://forum.rebol.info/t/giving-functions-the-power-to-create-local-variables/1499.rss">Giving Functions the Power To Create Local Variables</source>
      </item>
  </channel>
</rss>

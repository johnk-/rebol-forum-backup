<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>FAIL-ing with Grace</title>
    <link>https://forum.rebol.info/t/fail-ing-with-grace/1027</link>
    <description>Now that [`&lt;skip&gt;`-able arguments have been firmed up](https://forum.rebol.info/t/skip-able-arguments/1013/2), and are a confirmed Beta/One feature, it&#39;s time to deploy one of my early ideas for using them... FAIL.

If you haven&#39;t been using FAIL, you should!  I&#39;ve pointed out in the past you can just say **case [... fail]** and that&#39;s enough to get a failure and point to that location.  But it now lets you just point at any arbitrary value via a quoted word and it will complain about that word and its value:

    &gt;&gt; foo: 10

    &gt;&gt; fail &#39;foo
    ** Error: foo is invalid: 10
    ** Where: fail console
    ** Near: [fail &#39;foo ~~]

It works for paths too:

    &gt;&gt; obj: make object! [field: &lt;I&#39;ve been a bad, bad field...&gt;]

    &gt;&gt; fail &#39;obj/field
    ** Error: obj/field is invalid: &lt;I&#39;ve been a bad, bad field...&gt;
    ** Where: fail console
    ** Near: [fail &#39;obj/field ~~]

So this should be your lazy go-to for reporting errors, you get more information and type less than using PRINTs or longer-winded messages.

## But the real strength is implicating callsites, vs FAILs

If you don&#39;t provide a place to blame, the only thing the evaluator knows is the whole stack and the place the failure was.

     my-api: func [x y z] [
         if true [
             if y &lt; 100 [
                  fail &quot;Who&#39;s failing?  one of those IFs?  Or MY-API?&quot;
            ]
         ]
     ]

    &gt;&gt; my-api 1 2 3
    ** Error: Who&#39;s failing?  one of those IFs?  Or MY-API?
    ** Where: fail if if my-api console
    ** Near: [
        fail &quot;Who&#39;s failing?  one of those IFs?  Or MY-API?&quot; ~...

That&#39;s not a terribly informative error message, but the evaluator doesn&#39;t know any more unless you tell it.  Previously you&#39;d do this with FAIL/WHERE and pass it a WORD! from the frame you wanted to complain about.  But now, it&#39;s cleaner!

    my-api: func [x y z] [
         if true [
             if y &lt; 100 [
                  fail &#39;y [&quot;Value must be &gt;= 100, not&quot; y]
            ]
         ]
     ]

    &gt;&gt; my-api 1 2 3
    ** Error: Value must be &gt;= 100, not 2
    ** Where: my-api console
    ** Near: [... 1 2 3 ~~]

Now the IFs are gone from the reporting stack, and you&#39;re indicating the callsite but not the FAIL itself.  *(Ideally the error message would point to the exact block position where the parameter you are complaining about originated from.  But that information is not preserved at the moment.  In the future it might be kept...maybe in a special slot that would go unused otherwise in 64-bit builds.  So the error report would improve!)*

Again, you could be lazy and just say `fail &#39;y` and get a fair amount of information.  In this case a bit of better information than in the custom message provided--in terms of the right name of the bad parameter!

## This isn&#39;t arcane C magic, it&#39;s usermode Rebol!

You can [read and help improve FAIL any day you feel like it](https://github.com/metaeducation/ren-c/blob/599fab575e085ec702d33da22e820b9bd3b18d60/src/mezz/base-funcs.r#L962).  Please do!</description>
    
    <lastBuildDate>Tue, 22 Jan 2019 23:10:38 +0000</lastBuildDate>
    <category>Errors</category>
    <atom:link href="https://forum.rebol.info/t/fail-ing-with-grace/1027.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>FAIL-ing with Grace</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="6" data-topic="1027">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>Maybe introduce the feature barebones at first to see how it’s received and collect suggestions/feedback.</p>
</blockquote>
</aside>
<p>Something to be mindful of is that this is the kind of feature that an intern at a software company could spend all summer on as their sole task, and not necessarily get it right.</p>
<p>Plus, the whole concept or model of what an ERROR! is, where that "flavor" of type goes, what its implications are...that was never worked out in R3-Alpha.  Red has no better answers, and is still putting numeric IDs that are Rebol specific in the errors:</p>
<pre><code>red&gt; print mold try [1 / 0]
make error! [
    code: 400
    type: 'math
    id: 'zero-divide
    arg1: none
    arg2: none
    arg3: none
    near: none
    where: '/
    stack: 12296944
]
</code></pre>
<p>The meanings aren't questioned, the "type" isn't questioned (what's it for?)  The 3-arg limit, fixed at the names arg1, arg2, arg3...also not questioned.</p>
<p>Trying to get something like this redesigned for Beta/One is too ambitious.  So what has to happen is that a few things get pinned down.  I'm starting with "error IDs are URLs" and "there's some lightweight comparison operator you can use to check just the last part of an ID".</p>
<pre><code>&gt;&gt; error: trap [data: read site]
== make error! [
    id: https://rebol.org/https/e/not-found
    code: 404  ; user parameter to this error type, NOT generic "error code"
    url: https://example.com/catsurmifuble!!
 ]

 &gt;&gt; error/id ~= /not-found
 == #[true]
</code></pre>
<p>Something along these lines.  And I'm trying to think about how to push things like the <code>where</code> and <code>near</code> into the meta information, so they don't wind up affecting error comparisons but are still available.</p>
<p><em>(This raises the question of using something like <code>id</code> which the user might want for a named field as part of the error.  Maybe they're just out of luck with that.)</em></p>
<p>But we need to get the most bang for the buck, committing to important things that aren't planned to change.</p>
          <p><a href="https://forum.rebol.info/t/fail-ing-with-grace/1027/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fail-ing-with-grace/1027/7</link>
        <pubDate>Tue, 22 Jan 2019 22:01:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1027-7</guid>
        <source url="https://forum.rebol.info/t/fail-ing-with-grace/1027.rss">FAIL-ing with Grace</source>
      </item>
      <item>
        <title>FAIL-ing with Grace</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Yep, gotcha. Yes, I like it. Maybe introduce the feature barebones at first to see how it's received and collect suggestions/feedback. I think there are really good possibilities which could stem from this approach, particularly for newbies.</p>
          <p><a href="https://forum.rebol.info/t/fail-ing-with-grace/1027/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fail-ing-with-grace/1027/6</link>
        <pubDate>Tue, 22 Jan 2019 21:37:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1027-6</guid>
        <source url="https://forum.rebol.info/t/fail-ing-with-grace/1027.rss">FAIL-ing with Grace</source>
      </item>
      <item>
        <title>FAIL-ing with Grace</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="4" data-topic="1027">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>Just to clarify, the data/content stored at: <code>https://example.com/modules/my-module/e/invalid-foo</code> is created by and hosted by whom – the author of the script? Or is this URL to Ren-C project standard error messages (and links to glossary, help, docs, forum etc.)?</p>
</blockquote>
</aside>
<p>If your module is part of the standard Ren-C universe, then your root URL provided here should be to such a path.  If it's not, then you (or your turnkey error-server provider) provides it.</p>
<p>This is kind of where back in the day I thought the <code>rebol.org</code> vs. <code>rebol.net</code> distinction would come in handy.  The .net would redirect subdomains for people, so <code>rebmu.rebol.net</code> would just forward off to wherever that was hosted.  If it became important to the community but went down at some point, the subdomain could be retaken and then managed by someone else.</p>
<p>The idea would be that whatever that page happened to serve up, the console could sniff out a formatting template from it.  There could be more formal methods, a meta item in a http header telling you exactly how to find it, with fallbacks that were a kind of web scraping.</p>
<h2>Workflow</h2>
<p>It's just about being able to write in your <code>https</code> module simple things like:</p>
<pre><code>fail /not-found [code: 404 url: location]
</code></pre>
<p>Which uses a FAIL specialization/adaptation that tacks the module's error URL base onto it.  So if the user traps the error they get something like:</p>
<pre><code>&gt;&gt; site: https://example.com/catsurmifuble!!  ; Note: inside joke
&gt;&gt; trap [data: read site]
== make error! [
    id: https://rebol.org/https/e/not-found
    code: 404
    url: https://example.com/catsurmifuble!!
 ]
</code></pre>
<p>But if the error gets raised in the console, the console tries to do better than this.  It hits fetches URL, and one way or another scrapes out a template something like:</p>
<pre><code> ["URL was not found:" url]
</code></pre>
<p>Perhaps with language-specific responses on that.  Which could just be managed by conventional web requests as opposed to coming up with a fancier negotiation system in Rebol itself, e.g. by the <strong><code>Accept-Language</code></strong> sent to the server.  Not only would the server be configured to give back readable text in that language, but also have the right version of the template: <code>["URL no encontrada:" url]</code></p>
<p>Hence the if you got the error reported (vs trapped) it could say:</p>
<pre><code>&gt;&gt; data: read site
** Error: URL was not found: https://example.com/catsurmifuble!!
</code></pre>
<p>The console could hold onto the last error.  Then it would know the ID if you said something like <code>why</code>:</p>
<pre><code>&gt;&gt; why
Launching browser: https://rebol.org/https/e/not-found
</code></pre>
<p>That's the kind of flow I'm envisioning here.  The code itself reports errors by ID and with their parameters, and you delegate to the web itself for the pretty printing and translation.  Worst case fallback you just get the error molded.</p>
          <p><a href="https://forum.rebol.info/t/fail-ing-with-grace/1027/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fail-ing-with-grace/1027/5</link>
        <pubDate>Tue, 22 Jan 2019 21:31:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1027-5</guid>
        <source url="https://forum.rebol.info/t/fail-ing-with-grace/1027.rss">FAIL-ing with Grace</source>
      </item>
      <item>
        <title>FAIL-ing with Grace</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Just to clarify, the data/content stored at: <code>https://example.com/modules/my-module/e/invalid-foo</code> is created by and hosted by whom -- the author of the script? Or is this URL to Ren-C project standard error messages (and links to glossary, help, docs, forum etc.)? And a script author could modify the target of that URL to point to their own custom/branded messages?</p>
<p>Even if I'm off on the above, I like that you're thinking about this and thinking of ways of making error messaging a better experience. In a similar vein I've been pondering a dialect to be included within code comments to generate developer To-Do lists or diaries, requirements/use-cases, or to integrate/link to architectural diagrams/flows, stuff like that.</p>
<p>At some point I'd also like to be able to use script metadata to auto-generate a browsable/searchable code-library (like <a href="http://rebol.org" rel="nofollow noopener">rebol.org</a>'s script library, but more lightweight and customizable), so I can better organize, curate, and query my hundreds of scripts for reusable code. This should be even easier to achieve today with the Beta/One enhancements.</p>
          <p><a href="https://forum.rebol.info/t/fail-ing-with-grace/1027/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fail-ing-with-grace/1027/4</link>
        <pubDate>Tue, 22 Jan 2019 21:10:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1027-4</guid>
        <source url="https://forum.rebol.info/t/fail-ing-with-grace/1027.rss">FAIL-ing with Grace</source>
      </item>
      <item>
        <title>FAIL-ing with Grace</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="1027">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>Error handling, one of my bugaboos with rebol.</p>
</blockquote>
</aside>
<p>It needs to keep getting better... one idea I had was that each module would define its own specialization of FAIL which would identify itself, and would chain the error IDs:</p>
<pre><code> Rebol [
    Name: "My Module"
    Type: 'Module
    Errors: https://example.com/modules/my-module/e/
 ]

 fail /invalid-foo [foo: 10]
</code></pre>
<p>The idea would be that this module's FAIL would be defined to merge that onto the Errors: URL.  So you'd get an error with id <code>https://example.com/modules/my-module/e/invalid-foo</code>.</p>
<p>What you'd want to do would be at that URL to serve a page that had english readable text as HTML, but also some kind of template that could be scraped out and used by the console to pretty print the error in a brief notation.  If there was no web server or it were down (or taking too long to reply to a request), you'd just see the error as having the ID and any parameters.</p>
<p>I've wrestled with the question of how to merge all these desires together.  e.g. what if you want to implicate a value <em>and</em> give it an ID, then you've got multiple things going on.  Or what if the block wants to provide text as a template as well as variables?  I make some notes about this in the source:</p>
<pre><code>; Ultimately we might like FAIL to use some clever error-creating dialect
; when passed a block, maybe something like:
;
;     fail [&lt;invalid-key&gt; {The key} key-name: key {is invalid}]
;
; That could provide an error ID, the format message, and the values to
; plug into the slots to make the message...which could be extracted from
; the error if captured (e.g. error/id and `error/key-name`.  Another
; option would be something like:
;
;     fail/with [{The key} :key-name {is invalid}] [key-name: key]
</code></pre>
<p>The time to start thinking about how to make all this elegant is now.  We have more tools than ever!</p>
          <p><a href="https://forum.rebol.info/t/fail-ing-with-grace/1027/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fail-ing-with-grace/1027/3</link>
        <pubDate>Tue, 22 Jan 2019 20:11:09 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1027-3</guid>
        <source url="https://forum.rebol.info/t/fail-ing-with-grace/1027.rss">FAIL-ing with Grace</source>
      </item>
      <item>
        <title>FAIL-ing with Grace</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Sweet. Error handling, one of my bugaboos with rebol. This is a nice improvement and should encourage  better programming practice.</p>
          <p><a href="https://forum.rebol.info/t/fail-ing-with-grace/1027/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fail-ing-with-grace/1027/2</link>
        <pubDate>Tue, 22 Jan 2019 14:50:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1027-2</guid>
        <source url="https://forum.rebol.info/t/fail-ing-with-grace/1027.rss">FAIL-ing with Grace</source>
      </item>
      <item>
        <title>FAIL-ing with Grace</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Now that <a href="https://forum.rebol.info/t/skip-able-arguments/1013/2"><code>&lt;skip&gt;</code>-able arguments have been firmed up</a>, and are a confirmed Beta/One feature, it's time to deploy one of my early ideas for using them... FAIL.</p>
<p>If you haven't been using FAIL, you should!  I've pointed out in the past you can just say <strong>case [... fail]</strong> and that's enough to get a failure and point to that location.  But it now lets you just point at any arbitrary value via a quoted word and it will complain about that word and its value:</p>
<pre><code>&gt;&gt; foo: 10

&gt;&gt; fail 'foo
** Error: foo is invalid: 10
** Where: fail console
** Near: [fail 'foo ~~]
</code></pre>
<p>It works for paths too:</p>
<pre><code>&gt;&gt; obj: make object! [field: &lt;I've been a bad, bad field...&gt;]

&gt;&gt; fail 'obj/field
** Error: obj/field is invalid: &lt;I've been a bad, bad field...&gt;
** Where: fail console
** Near: [fail 'obj/field ~~]
</code></pre>
<p>So this should be your lazy go-to for reporting errors, you get more information and type less than using PRINTs or longer-winded messages.</p>
<h2>But the real strength is implicating callsites, vs FAILs</h2>
<p>If you don't provide a place to blame, the only thing the evaluator knows is the whole stack and the place the failure was.</p>
<pre><code> my-api: func [x y z] [
     if true [
         if y &lt; 100 [
              fail "Who's failing?  one of those IFs?  Or MY-API?"
        ]
     ]
 ]

&gt;&gt; my-api 1 2 3
** Error: Who's failing?  one of those IFs?  Or MY-API?
** Where: fail if if my-api console
** Near: [
    fail "Who's failing?  one of those IFs?  Or MY-API?" ~...
</code></pre>
<p>That's not a terribly informative error message, but the evaluator doesn't know any more unless you tell it.  Previously you'd do this with FAIL/WHERE and pass it a WORD! from the frame you wanted to complain about.  But now, it's cleaner!</p>
<pre><code>my-api: func [x y z] [
     if true [
         if y &lt; 100 [
              fail 'y ["Value must be &gt;= 100, not" y]
        ]
     ]
 ]

&gt;&gt; my-api 1 2 3
** Error: Value must be &gt;= 100, not 2
** Where: my-api console
** Near: [... 1 2 3 ~~]
</code></pre>
<p>Now the IFs are gone from the reporting stack, and you're indicating the callsite but not the FAIL itself.  <em>(Ideally the error message would point to the exact block position where the parameter you are complaining about originated from.  But that information is not preserved at the moment.  In the future it might be kept...maybe in a special slot that would go unused otherwise in 64-bit builds.  So the error report would improve!)</em></p>
<p>Again, you could be lazy and just say <code>fail 'y</code> and get a fair amount of information.  In this case a bit of better information than in the custom message provided--in terms of the right name of the bad parameter!</p>
<h2>This isn't arcane C magic, it's usermode Rebol!</h2>
<p>You can <a href="https://github.com/metaeducation/ren-c/blob/599fab575e085ec702d33da22e820b9bd3b18d60/src/mezz/base-funcs.r#L962">read and help improve FAIL any day you feel like it</a>.  Please do!</p>
          <p><a href="https://forum.rebol.info/t/fail-ing-with-grace/1027/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fail-ing-with-grace/1027/1</link>
        <pubDate>Tue, 22 Jan 2019 09:33:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1027-1</guid>
        <source url="https://forum.rebol.info/t/fail-ing-with-grace/1027.rss">FAIL-ing with Grace</source>
      </item>
  </channel>
</rss>

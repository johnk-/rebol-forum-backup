<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Initial Rust Binding Experiment by Shixin</title>
    <link>https://forum.rebol.info/t/initial-rust-binding-experiment-by-shixin/1269</link>
    <description>I asked Shixin if he would put a bit of his initial binding experimentation for Rust that he did last year on GitHub so we &lt;sub&gt;(though mostly I, I&#39;ll assume)&lt;/sub&gt; could look at it.  So he did:

https://github.com/zsx/renc-rs

While I don&#39;t know too much about Rust, the people who use it (including Shixin) seem to like it a lot.  I do know that I&#39;ve seen a lot of activity surrounding it.  The concept is that people targeting WebAssembly would pick something with new safety properties and &quot;friendlier syntax&quot; to compile from than C++.

Looking at the source for the binding [lib(r3).rs](https://github.com/zsx/renc-rs/blob/master/src/lib.rs), you notice the usual suspects.  I note that there&#39;s **let**, and the **if/else** patterns that Ren-C has been trying to find ways to be able to bend to (if you want!)

When I get a chance I&#39;ll be trying to build it and run [the Fibonacci test](https://github.com/zsx/renc-rs/blob/53195b645eb0d5cc09e7b407bfe5f5dcbecdfa02/src/lib.rs#L452) which is living in the lib.rs at the moment.  (It seems he was just focusing on the nuts-and-bolts of &quot;can I call Rebol *at all*&quot; vs. doing variadic tricks.)  On the off chance that anyone wants to take a crack at seeing if it runs before I do, I thought I&#39;d point it out--though.

As a compiled language without homoiconicity, Rust is not a direct competitor.  But with Ren-C able to build as Wasm too, this is interesting...especially with the [UTF-8 Everywhere](http://utf8everywhere.org/) ethos being embraced by both languages.  I&#39;ve suggested there might be a chance that with good binding, we could play a sort of &quot;JavaScript to Rust&#39;s Java&quot; role...being the interpreted and light language which doesn&#39;t need a compiler that you call over to, but having a sort of from-scratch redesign that is revolutionary enough in paradigm to oust JavaScript from keeping that title again.

Anyway, I&#39;m posting it here to keep track of it and any follow-ups...</description>
    
    <lastBuildDate>Wed, 18 Mar 2020 22:04:45 +0000</lastBuildDate>
    <category>Language Bridging</category>
    <atom:link href="https://forum.rebol.info/t/initial-rust-binding-experiment-by-shixin/1269.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Initial Rust Binding Experiment by Shixin</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I asked Shixin if he would put a bit of his initial binding experimentation for Rust that he did last year on GitHub so we <sub>(though mostly I, I'll assume)</sub> could look at it.  So he did:</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">
      <a href="https://github.com/zsx/renc-rs" target="_blank" rel="noopener">GitHub</a>
  </header>
  <article class="onebox-body">
    <img src="https://avatars2.githubusercontent.com/u/1753?s=400&amp;v=4" class="thumbnail onebox-avatar" width="400" height="400">

<h3><a href="https://github.com/zsx/renc-rs" target="_blank" rel="noopener">zsx/renc-rs</a></h3>

<p>Rust binding to Ren-C. Contribute to zsx/renc-rs development by creating an account on GitHub.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>While I don't know too much about Rust, the people who use it (including Shixin) seem to like it a lot.  I do know that I've seen a lot of activity surrounding it.  The concept is that people targeting WebAssembly would pick something with new safety properties and "friendlier syntax" to compile from than C++.</p>
<p>Looking at the source for the binding <a href="https://github.com/zsx/renc-rs/blob/master/src/lib.rs">lib(r3).rs</a>, you notice the usual suspects.  I note that there's <strong>let</strong>, and the <strong>if/else</strong> patterns that Ren-C has been trying to find ways to be able to bend to (if you want!)</p>
<p>When I get a chance I'll be trying to build it and run <a href="https://github.com/zsx/renc-rs/blob/53195b645eb0d5cc09e7b407bfe5f5dcbecdfa02/src/lib.rs#L452">the Fibonacci test</a> which is living in the lib.rs at the moment.  (It seems he was just focusing on the nuts-and-bolts of "can I call Rebol <em>at all</em>" vs. doing variadic tricks.)  On the off chance that anyone wants to take a crack at seeing if it runs before I do, I thought I'd point it out--though.</p>
<p>As a compiled language without homoiconicity, Rust is not a direct competitor.  But with Ren-C able to build as Wasm too, this is interesting...especially with the <a href="http://utf8everywhere.org/">UTF-8 Everywhere</a> ethos being embraced by both languages.  I've suggested there might be a chance that with good binding, we could play a sort of "JavaScript to Rust's Java" role...being the interpreted and light language which doesn't need a compiler that you call over to, but having a sort of from-scratch redesign that is revolutionary enough in paradigm to oust JavaScript from keeping that title again.</p>
<p>Anyway, I'm posting it here to keep track of it and any follow-ups...</p>
          <p><a href="https://forum.rebol.info/t/initial-rust-binding-experiment-by-shixin/1269/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/initial-rust-binding-experiment-by-shixin/1269/1</link>
        <pubDate>Wed, 18 Mar 2020 22:04:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1269-1</guid>
        <source url="https://forum.rebol.info/t/initial-rust-binding-experiment-by-shixin/1269.rss">Initial Rust Binding Experiment by Shixin</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>&quot;Finding the Invariant&quot; - Case Study: TO</title>
    <link>https://forum.rebol.info/t/finding-the-invariant-case-study-to/1308</link>
    <description>I was trying to make some fairly generic routines that would accept either a WORD!, a TEXT!, a CHAR!, or an INTEGER!.  Then it would give you either a WORD! or an INTEGER! out.

At some point I ran up against this:

    &gt;&gt; to integer! &quot;1&quot;
    == 1

    &gt;&gt; to integer! #&quot;1&quot;  ; I wanted 1...
    == 49  ; ..but I got a codepoint (the ASCII value for 1)

That is the status quo.  But I thought to compare this with another possibility:

    &gt;&gt; to integer! &quot;1&quot;
    == 1

    &gt;&gt; to integer! #&quot;1&quot;
    == 1

    &gt;&gt; codepoint of #&quot;1&quot;
    == 49

With this, you could imagine putting a TEXT! or a CHAR! in as input to `to integer!`...not knowing which type of input you had...yet either way get a result that had some kind of consistent representational meaning.

But the status quo is unlikely to ever have a useful invariant like that.  Even just considering these two cases, TO INTEGER! becomes a bizarre operation.  If it had a name it would be something like **convert-decimal-string-to-integer-value-unless-char-in-which-case-codepoint**.

No one wants that operation.  So of course you see it used in cases where people already know which they have... something like **to integer! my-string** or  **to integer! my char!**.  All that&#39;s happening is that the short word TO is being leveraged to get a frequently used integer property.

Yet it&#39;s not even that &quot;short&quot; when you have to add a type onto it.  As I point out with CODEPOINT OF, might there be clearer ways to say that at little or no extra cost?

     TO INTEGER!
     CODEPOINT OF  ; just one character longer... and more explanatory

If you take a look at [what a difference ENBIN and DEBIN are making](https://forum.rebol.info/t/binary-dialected-encoding-decoding-instead-of-to-conversions/1270) vs. trying to pick arbitrary TO conversions, I think it tells a similar story.

So might the TO conversions be studied in such a way that there&#39;s some actual chance that accepting multiple types as input could be an asset instead of a liability?

I think this case of TO INTEGER! of #&quot;1&quot; is a good talking point for that.</description>
    
    <lastBuildDate>Mon, 12 Oct 2020 02:15:35 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/finding-the-invariant-case-study-to/1308.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>&quot;Finding the Invariant&quot; - Case Study: TO</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="1308">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>How Does This Inform the TO/MAKE Matrix?</p>
</blockquote>
</aside>
<p>A long time ago, when debates started about reducing the combinatorics, the question came up as to what <strong>TO TEXT!</strong> meant... and if it should be the replacement for one of the enigmatic FORM or MOLD operations.</p>
<p>Synonym for the historical behavior of "mold" has been pretty long off the table.  But it seems to feel very natural that <strong>to text! <span class="hashtag">#1</span></strong> (and its synonym <strong>to text! #"1"</strong>) are going to giving you <strong>"1"</strong>.  So maybe when the requirements are all put together, then it makes sense to have TO TEXT! supplant FORM.</p>
<p>But historical FORM is weird.  It's not quite MOLD, and it's not quite TO TEXT!</p>
<pre><code>rebol2&gt;&gt; form make char! 0
== "^@"

rebol2&gt;&gt; form make char! 1
== "^A"
</code></pre>
<p>We need TO TEXT! of a zero token to be either an empty string or error...and I'm favoring error.</p>
<p>And I don't know quite what the value of FORM is, here.  If you asked to "print out a control A", this isn't what you want... and it's not what you get with <strong>print [#"^A"]</strong> in Rebol2.</p>
<p>If FORM is "make a human readable version of something", and MOLD is to "make the Rebol 'REN' readable version of something"... this looks like two overlapping concepts.</p>
<p>It might point to the idea that <code>^A</code> should be a valid TOKEN! literal molded format, vs. needing to say <code>#"^A"</code> or <code>#^A</code></p>
<p>So I'm kind of thinking FORM doesn't have much of a place in this picture.</p>
          <p><a href="https://forum.rebol.info/t/finding-the-invariant-case-study-to/1308/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/finding-the-invariant-case-study-to/1308/3</link>
        <pubDate>Mon, 12 Oct 2020 02:15:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1308-3</guid>
        <source url="https://forum.rebol.info/t/finding-the-invariant-case-study-to/1308.rss">&quot;Finding the Invariant&quot; - Case Study: TO</source>
      </item>
      <item>
        <title>&quot;Finding the Invariant&quot; - Case Study: TO</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>When I gave this example, I was contrasting TEXT! and CHAR! conversions TO INTEGER!.</p>
<p>I should have pointed out that ISSUE! is a more obvious dissonance:</p>
<pre><code>rebol2&gt;&gt; to integer! #1
== 1

rebol2&gt;&gt; to integer! #"1"
== 49
</code></pre>
<p>That just looks wrong as-is.  But when <span class="hashtag">#1</span> and #"1" are synonyms as immutable "issuechar!"/TOKEN! (as by all appearances they should be), there <em>can't</em> be a distinction.</p>
<p>It may be that some other operator like <strong>as integer!</strong> fits into getting the codepoint.  But I mention <strong>codepoint of</strong> as a possibility, which is only one character longer (and doesn't require hitting <code>&lt;shift&gt;</code> to get an <code>!</code>) and helps you know exactly what's going on.  It seems like a good choice.</p>
<p>So as part of the issuechar conversion, TO INTEGER! conversions of issuechar! can be temporarily disabled...advising you to use either CODEPOINT OF TOKEN or TO INTEGER! AS TEXT! TOKEN.  I'm proposing that for empty issuechar! the <strong>codepoint of #</strong> will be 0, in order to make sure that we're not actually putting codepoint 0 into any strings.  When the transition period is over, you can change the TO INTEGER! AS TEXT! TOKEN to just TO INTEGER! TOKEN.</p>
<h2>How Does This Inform the TO/MAKE Matrix?</h2>
<p>In <a href="https://forum.rebol.info/t/hacking-away-on-the-to-and-make-matrix/649">"Hacking Away on the TO/MAKE Matrix"</a>, I'd previously said:</p>
<blockquote>
<ol>
<li>
<strong>A TO conversion won't run arbitrary code that you pass to it</strong> , or possibly  <strong>A TO conversion won't even GET any variables, much less evaluate</strong>
</li>
<li><strong>Every TO conversion targeting a series type performs a new allocation</strong></li>
<li>
<strong>TO TEXT! 10</strong>  is "10" and  <strong>TO INTEGER! "10"</strong>  is 10</li>
<li><strong>A TO conversion of a value to its own datatype will do the same thing as COPY</strong></li>
</ol>
</blockquote>
<p>So here we have another stake in the ground, for TO INTEGER! of <strong><span class="hashtag">#1</span></strong> and <strong><span class="hashtag">#10</span></strong>.</p>
<p>This emboldened me a bit to try changing the function signatures of TO conversions to <em>not be passed bindings</em>.  That would make it mechanically impossible for a TO conversion to do anything resembling a REDUCE or GET to dereference variables on what is passed into it.</p>
<p><strong>Then I hit rule <span class="hashtag">#4</span>, and there's some friction.</strong>  If you TO BLOCK! a block, you historically have not lost the bindings in that block in the process.</p>
<p><em>But maybe you should (?)</em></p>
<p>The historical behavior of TO BLOCK! of TEXT! is to load it, but what you get isn't bound:</p>
<pre><code>rebol2&gt;&gt; blk: to block! "print {Hello}"
== [print "Hello"]

rebol2&gt;&gt; do blk
** Script Error: print word has no context
</code></pre>
<p>So maybe TO BLOCK! of another block gives you an unbound block.  A problem with that is that if it's giving you a <em>shallow</em> copy, then the blocks underneath it would still be bound.  I'm thinking about a feature where there is a way of viewing cells--kind of like CONST--in which you can carry a reference to a block that has bindings but can't use them.  So it wouldn't necessarily require a deep copy to get this.</p>
<p>But there's a little hint at what the rules are clamping down to suggest.  There may well be a difference between <strong>TO GROUP! BLOCK</strong> and <strong>COPY AS GROUP! BLOCK</strong>...because the former may give you something unbound, while the latter preserves the binding.</p>
<p><em>It would actually be good if bindings were erased whenever they could be.</em>  Stray bindings not only contribute to leaking references into code that shouldn't have it, but also means that anything pointed to still appears live in the garbage collector.  Inert code meant to be used purely symbolically can wind up costing as much as all of its unused bindings.  So if you <em>can</em> use a form of copying that strips bindings, it would be ideal if you did so.</p>
          <p><a href="https://forum.rebol.info/t/finding-the-invariant-case-study-to/1308/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/finding-the-invariant-case-study-to/1308/2</link>
        <pubDate>Thu, 08 Oct 2020 15:42:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1308-2</guid>
        <source url="https://forum.rebol.info/t/finding-the-invariant-case-study-to/1308.rss">&quot;Finding the Invariant&quot; - Case Study: TO</source>
      </item>
      <item>
        <title>&quot;Finding the Invariant&quot; - Case Study: TO</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I was trying to make some fairly generic routines that would accept either a WORD!, a TEXT!, a CHAR!, or an INTEGER!.  Then it would give you either a WORD! or an INTEGER! out.</p>
<p>At some point I ran up against this:</p>
<pre><code>&gt;&gt; to integer! "1"
== 1

&gt;&gt; to integer! #"1"  ; I wanted 1...
== 49  ; ..but I got a codepoint (the ASCII value for 1)
</code></pre>
<p>That is the status quo.  But I thought to compare this with another possibility:</p>
<pre><code>&gt;&gt; to integer! "1"
== 1

&gt;&gt; to integer! #"1"
== 1

&gt;&gt; codepoint of #"1"
== 49
</code></pre>
<p>With this, you could imagine putting a TEXT! or a CHAR! in as input to <code>to integer!</code>...not knowing which type of input you had...yet either way get a result that had some kind of consistent representational meaning.</p>
<p>But the status quo is unlikely to ever have a useful invariant like that.  Even just considering these two cases, TO INTEGER! becomes a bizarre operation.  If it had a name it would be something like <strong>convert-decimal-string-to-integer-value-unless-char-in-which-case-codepoint</strong>.</p>
<p>No one wants that operation.  So of course you see it used in cases where people already know which they have... something like <strong>to integer! my-string</strong> or  <strong>to integer! my char!</strong>.  All that's happening is that the short word TO is being leveraged to get a frequently used integer property.</p>
<p>Yet it's not even that "short" when you have to add a type onto it.  As I point out with CODEPOINT OF, might there be clearer ways to say that at little or no extra cost?</p>
<pre><code> TO INTEGER!
 CODEPOINT OF  ; just one character longer... and more explanatory
</code></pre>
<p>If you take a look at <a href="https://forum.rebol.info/t/binary-dialected-encoding-decoding-instead-of-to-conversions/1270">what a difference ENBIN and DEBIN are making</a> vs. trying to pick arbitrary TO conversions, I think it tells a similar story.</p>
<p>So might the TO conversions be studied in such a way that there's some actual chance that accepting multiple types as input could be an asset instead of a liability?</p>
<p>I think this case of TO INTEGER! of #"1" is a good talking point for that.</p>
          <p><a href="https://forum.rebol.info/t/finding-the-invariant-case-study-to/1308/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/finding-the-invariant-case-study-to/1308/1</link>
        <pubDate>Fri, 24 Jul 2020 00:49:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1308-1</guid>
        <source url="https://forum.rebol.info/t/finding-the-invariant-case-study-to/1308.rss">&quot;Finding the Invariant&quot; - Case Study: TO</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Pure WASM + Pthreads: Faster, Better, Smaller</title>
    <link>https://forum.rebol.info/t/pure-wasm-pthreads-faster-better-smaller/1069</link>
    <description>In the web console demo, when running with the &quot;emterpreter&quot; build:

     &gt;&gt; ‌‌delta-time [x: 0 loop 1000000 [x: x + 1]]
    == 0:00:28.202  ; that&#39;s 28 seconds, to count to a million

But when that same web console is running on the same machine, in the [new and bleeding edge pure WASM with Pthreads build](http://hostilefork.com/media/shared/replpad-js/):

    &gt;&gt; ‌delta-time [x: 0 loop 1000000 [x: x + 1]]
    == 0:00:00.863  ; more than THIRTY TIMES FASTER

Of course, we&#39;d like to see that number go down too.  And you might not notice the console seeming all that much faster on printing lines...but that&#39;s a different problem to address (related to callbacks and context switches).

The point is: by its very nature, the emterpreter was painfully slow.  But now with pure WASM not only is it tremendously faster, the build products are *half the size*.

Try it out...but don&#39;t do stack overflows yet (that needs a different strategy than what R3-Alpha was using).

Note that if you&#39;re not using Chrome, you will have to enable SharedArrayBuffer and WASM threading. 
 It&#39;s in the [`about:config` settings of Firefox](http://hostilefork.com/media/shared/replpad-js/shared-memory-firefox.png).  And if you&#39;re on Android you&#39;ll need to [tick a couple of `chrome://flags`](http://hostilefork.com/media/shared/replpad-js/webassembly-chrome-android.png).  Browsers are aiming to have these on by default...once they get over whatever their Spectre bug concern is.  Odds are very high they&#39;ll be mainstream by the time any serious usage of Ren-C in browser happens.  Even still, there&#39;s always the emterpreter fallback...and we can make that fallback more automatic (while trying to lobby you to change your switches).  No shortage of options, here.

## FYI: this is NOT easy stuff to do

Since not everyone completely understands the difficulty curve of various advancements, this one is **[pretty hard](https://github.com/metaeducation/ren-c/blob/master/src/extensions/javascript/mod-javascript.c)**.  Not as much that any particular line of code is hard to write in and of itself...but it&#39;s an intersection of a tremendous number of things:

* Trying to keep it all boxed up so that all the JavaScript pieces stay isolated to the JavaScript extension, and you can build without any of it contaminating anything else.
* Keeping the emterpreter version still working--since not all environments support pthread+WASM (yet)
* Writing complex, multithreaded C without being able to use a debugger on it
* Understanding all the inter-related concerns of C, Rebol, and JavaScript
* Planning for multiple deployment environments (Browser, Node) and multiple future paths for those environments
* Just reasoning about and designing this whole API model in the first place

## There&#39;s still a lot to do

What&#39;s there now is a proof of concept.  It needs to be gone over--ideally that would include some people who aren&#39;t me.  :-/

Outside of stack overflows, there&#39;s still a whole slew of issues...regarding what to do about HALT and cancellation, as well as various other error/throw situations in the API.

But it&#39;s very encouraging, and I think there&#39;s a lot of potential in this direction.</description>
    
    <lastBuildDate>Thu, 14 Feb 2019 21:43:34 +0000</lastBuildDate>
    <category>Emscripten</category>
    <atom:link href="https://forum.rebol.info/t/pure-wasm-pthreads-faster-better-smaller/1069.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Pure WASM + Pthreads: Faster, Better, Smaller</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>That's some deep voodoo Brian. Great update.</p>
          <p><a href="https://forum.rebol.info/t/pure-wasm-pthreads-faster-better-smaller/1069/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/pure-wasm-pthreads-faster-better-smaller/1069/2</link>
        <pubDate>Thu, 14 Feb 2019 21:43:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1069-2</guid>
        <source url="https://forum.rebol.info/t/pure-wasm-pthreads-faster-better-smaller/1069.rss">Pure WASM + Pthreads: Faster, Better, Smaller</source>
      </item>
      <item>
        <title>Pure WASM + Pthreads: Faster, Better, Smaller</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In the web console demo, when running with the "emterpreter" build:</p>
<pre><code> &gt;&gt; ‌‌delta-time [x: 0 loop 1000000 [x: x + 1]]
== 0:00:28.202  ; that's 28 seconds, to count to a million
</code></pre>
<p>But when that same web console is running on the same machine, in the <a href="http://hostilefork.com/media/shared/replpad-js/" rel="nofollow noopener">new and bleeding edge pure WASM with Pthreads build</a>:</p>
<pre><code>&gt;&gt; ‌delta-time [x: 0 loop 1000000 [x: x + 1]]
== 0:00:00.863  ; more than THIRTY TIMES FASTER
</code></pre>
<p>Of course, we'd like to see that number go down too.  And you might not notice the console seeming all that much faster on printing lines...but that's a different problem to address (related to callbacks and context switches).</p>
<p>The point is: by its very nature, the emterpreter was painfully slow.  But now with pure WASM not only is it tremendously faster, the build products are <em>half the size</em>.</p>
<p>Try it out...but don't do stack overflows yet (that needs a different strategy than what R3-Alpha was using).</p>
<p>Note that if you're not using Chrome, you will have to enable SharedArrayBuffer and WASM threading.<br>
It's in the <a href="http://hostilefork.com/media/shared/replpad-js/shared-memory-firefox.png" rel="nofollow noopener"><code>about:config</code> settings of Firefox</a>.  And if you're on Android you'll need to <a href="http://hostilefork.com/media/shared/replpad-js/webassembly-chrome-android.png" rel="nofollow noopener">tick a couple of <code>chrome://flags</code></a>.  Browsers are aiming to have these on by default...once they get over whatever their Spectre bug concern is.  Odds are very high they'll be mainstream by the time any serious usage of Ren-C in browser happens.  Even still, there's always the emterpreter fallback...and we can make that fallback more automatic (while trying to lobby you to change your switches).  No shortage of options, here.</p>
<h2>FYI: this is NOT easy stuff to do</h2>
<p>Since not everyone completely understands the difficulty curve of various advancements, this one is <strong><a href="https://github.com/metaeducation/ren-c/blob/master/src/extensions/javascript/mod-javascript.c" rel="nofollow noopener">pretty hard</a></strong>.  Not as much that any particular line of code is hard to write in and of itself...but it's an intersection of a tremendous number of things:</p>
<ul>
<li>Trying to keep it all boxed up so that all the JavaScript pieces stay isolated to the JavaScript extension, and you can build without any of it contaminating anything else.</li>
<li>Keeping the emterpreter version still working--since not all environments support pthread+WASM (yet)</li>
<li>Writing complex, multithreaded C without being able to use a debugger on it</li>
<li>Understanding all the inter-related concerns of C, Rebol, and JavaScript</li>
<li>Planning for multiple deployment environments (Browser, Node) and multiple future paths for those environments</li>
<li>Just reasoning about and designing this whole API model in the first place</li>
</ul>
<h2>There's still a lot to do</h2>
<p>What's there now is a proof of concept.  It needs to be gone over--ideally that would include some people who aren't me.  :-/</p>
<p>Outside of stack overflows, there's still a whole slew of issues...regarding what to do about HALT and cancellation, as well as various other error/throw situations in the API.</p>
<p>But it's very encouraging, and I think there's a lot of potential in this direction.</p>
          <p><a href="https://forum.rebol.info/t/pure-wasm-pthreads-faster-better-smaller/1069/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/pure-wasm-pthreads-faster-better-smaller/1069/1</link>
        <pubDate>Thu, 14 Feb 2019 19:30:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1069-1</guid>
        <source url="https://forum.rebol.info/t/pure-wasm-pthreads-faster-better-smaller/1069.rss">Pure WASM + Pthreads: Faster, Better, Smaller</source>
      </item>
  </channel>
</rss>

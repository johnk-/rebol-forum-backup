<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>ANY-ARRAY! vs. ANY-LIST! ... any-final-thoughts?</title>
    <link>https://forum.rebol.info/t/any-array-vs-any-list-any-final-thoughts/1384</link>
    <description>Historical Rebol said that BLOCK!s and PAREN!s and ANY-PATH!s were all members of the **ANY-BLOCK!** category.

Red maintained that:

    red&gt;&gt; any-block!
    == make typeset! [block! paren! path! lit-path! set-path! get-path! hash!]

But broke out the BLOCK! and PAREN! (and HASH!) to a new group, **ANY-LIST!**

    red&gt;&gt; any-list!
    == make typeset! [block! paren! hash!]

Ren-C has sound reasons for having eliminated the idea of &quot;sameness&quot; for PATH!s(/TUPLE!s) and arrays, due to radically different constraints and properties.  *(Forced immutability, limited set of legal elements, requirement of having at least 2 items)*

Ren-C&#39;s ANY-BLOCK! actually means *any block*, giving you **[plain blocks]**, **[set blocks]:**, **:[get blocks]**, and [**@[whatever these are]**](https://forum.rebol.info/t/word-some-path-some-group-and-some-block/1125/15?u=hostilefork).  Similarly for ANY-GROUP!.  More appropriate, clear, and vastly more flexible.

But Red&#39;s ANY-LIST! category is the spiritual analogue to what Ren-C calls **ANY-ARRAY!**...which is to say &quot;ANY-BLOCK! or ANY-GROUP!&quot;

## Which is Better, ANY-LIST! or ANY-ARRAY! ?

The conventional wisdom we&#39;ve gone with is that to a computer programmer, if you call something a LIST! they might expect it to be a *linked list* at an implementation level.  Rebol&#39;s implementation of these values is fundamentally an indexed array.

*But other choices have been made biased toward common language and away from comp-sci terms.*  What would you imagine sounds better in a tutorial:

&gt; Let&#39;s imagine you have two lists of values.  But one is a GROUP! and another is a BLOCK!
&gt;
&gt;      group: &#39;(&lt;a&gt; #b %c)
&gt;      block: [&lt;a&gt; #b %c]

vs.

&gt; Let&#39;s imagine you have two arrays of values.  But one is a GROUP! and another is a BLOCK!
&gt;
&gt;      group: &#39;(&lt;a&gt; #b %c)
&gt;      block: [&lt;a&gt; #b %c]

When I imagine the various things that might make new programmers feel a twinge, that &quot;array&quot; word causes a teeny bit more anxiety.  Which might mean that you&#39;d use the &quot;list&quot; language.  But if you&#39;re going to use the list language, then it would help if it matched what the types were.

I&#39;ll point out that at the superclass level, even though [TEXT! has replaced STRING! in Ren-C](https://forum.rebol.info/t/text-vs-string/612) (which I&#39;m pleased with), it&#39;s a member of ANY-STRING! along with TAG! and friends.  The category isn&#39;t used as often.

It&#39;s a really minor point.  But what I worry over here is that Red&#39;s choice might have an edge, and I don&#39;t want to give them any advantages, anywhere.  :-)

I don&#39;t think I want to change it, though I&#39;d like to collect up any good certain reasoning as to why not.  The best &quot;why not&quot; remains *being faithful to a computer-science technical reality about the type that over the long run, is worth knowing*...which is what earl pushed for in this case, over the more common English word.

Any other arguments I should know about?</description>
    
    <lastBuildDate>Thu, 05 Nov 2020 20:47:02 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/any-array-vs-any-list-any-final-thoughts/1384.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>ANY-ARRAY! vs. ANY-LIST! ... any-final-thoughts?</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>For me a list is text items and array number items.<br>
I'll put more thinking about the difference between list and array on my to do array.</p>
          <p><a href="https://forum.rebol.info/t/any-array-vs-any-list-any-final-thoughts/1384/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-array-vs-any-list-any-final-thoughts/1384/5</link>
        <pubDate>Thu, 05 Nov 2020 20:47:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1384-5</guid>
        <source url="https://forum.rebol.info/t/any-array-vs-any-list-any-final-thoughts/1384.rss">ANY-ARRAY! vs. ANY-LIST! ... any-final-thoughts?</source>
      </item>
      <item>
        <title>ANY-ARRAY! vs. ANY-LIST! ... any-final-thoughts?</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>For me the distinction between list and array is more about they are used, not the internal implementation.</p>
<p>Which doesn't help at all in this case, because it seems to me that blocks are mostly built like lists (append, insert), and accessed like arrays (by index).</p>
          <p><a href="https://forum.rebol.info/t/any-array-vs-any-list-any-final-thoughts/1384/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-array-vs-any-list-any-final-thoughts/1384/4</link>
        <pubDate>Thu, 05 Nov 2020 20:33:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1384-4</guid>
        <source url="https://forum.rebol.info/t/any-array-vs-any-list-any-final-thoughts/1384.rss">ANY-ARRAY! vs. ANY-LIST! ... any-final-thoughts?</source>
      </item>
      <item>
        <title>ANY-ARRAY! vs. ANY-LIST! ... any-final-thoughts?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="Mark-hi" data-post="2" data-topic="1384">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/mark-hi/40/212_2.png" class="avatar"> Mark-hi:</div>
<blockquote>
<p>Not sure it will help much, but in English, "array" infers (at least, and most commonly exactly) two-dimensionality.</p>
</blockquote>
</aside>
<p>I wouldn't say I've had any association of that.  But your point is taken that the existence of the newline markers kind of throw a bit of a distinction onto what the type <em>is</em>.</p>
<p>While I was hesitant to suggest the dialect usage of newlines, I've kind of changed my thinking on that... inspired by cases like <a href="https://forum.rebol.info/t/testing-generic-tuple-and-path-structuring/1353">the tuple and path test dialect</a>:</p>
<pre><code>"(a b)/c"  -&gt;  [@(a b) c]
"(a b) /c"  -&gt;  @(a b)  [_ c]
</code></pre>
<p>Being able to leave off a container there just to have a variable number of things on the right felt good.  So I started wondering about what kind of signaling you would use in a dialect to say "continued on next line"</p>
<p>With <strong>..</strong> and <strong>...</strong> being a valid TUPLE!, they aren't necessarily bad options, if they're out of band from whatever your values are:</p>
<pre><code>"(a b)/c"  -&gt;  [@(a b) c]
"(a b) /c"  -&gt;  @(a b)
                ... [_ c]
</code></pre>
<p>Back to your point though: it's an odd type.  <em>That oddity may speak to favoring what might be for some people a more unfamiliar term</em>, vs. trying to mask it in something they'd presume to be dimensionless.</p>
          <p><a href="https://forum.rebol.info/t/any-array-vs-any-list-any-final-thoughts/1384/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-array-vs-any-list-any-final-thoughts/1384/3</link>
        <pubDate>Thu, 05 Nov 2020 16:35:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1384-3</guid>
        <source url="https://forum.rebol.info/t/any-array-vs-any-list-any-final-thoughts/1384.rss">ANY-ARRAY! vs. ANY-LIST! ... any-final-thoughts?</source>
      </item>
      <item>
        <title>ANY-ARRAY! vs. ANY-LIST! ... any-final-thoughts?</title>
        <dc:creator><![CDATA[Mark-hi]]></dc:creator>
        <description><![CDATA[
            <p>Not sure it will help much, but in English, "array" infers (at least, and most commonly exactly) two-dimensionality. Because of the newline-preserving property, I have always seen the block-likes as arrays, and never as lists, which are one-dimensional only (and your code needs to be rewritten if a non-nested list wraps around <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">). It is too bad that most examples, for obvious conciseness reasons, use no newlines.</p>
          <p><a href="https://forum.rebol.info/t/any-array-vs-any-list-any-final-thoughts/1384/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-array-vs-any-list-any-final-thoughts/1384/2</link>
        <pubDate>Thu, 05 Nov 2020 16:25:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1384-2</guid>
        <source url="https://forum.rebol.info/t/any-array-vs-any-list-any-final-thoughts/1384.rss">ANY-ARRAY! vs. ANY-LIST! ... any-final-thoughts?</source>
      </item>
      <item>
        <title>ANY-ARRAY! vs. ANY-LIST! ... any-final-thoughts?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Historical Rebol said that BLOCK!s and PAREN!s and ANY-PATH!s were all members of the <strong>ANY-BLOCK!</strong> category.</p>
<p>Red maintained that:</p>
<pre><code>red&gt;&gt; any-block!
== make typeset! [block! paren! path! lit-path! set-path! get-path! hash!]
</code></pre>
<p>But broke out the BLOCK! and PAREN! (and HASH!) to a new group, <strong>ANY-LIST!</strong></p>
<pre><code>red&gt;&gt; any-list!
== make typeset! [block! paren! hash!]
</code></pre>
<p>Ren-C has sound reasons for having eliminated the idea of "sameness" for PATH!s(/TUPLE!s) and arrays, due to radically different constraints and properties.  <em>(Forced immutability, limited set of legal elements, requirement of having at least 2 items)</em></p>
<p>Ren-C's ANY-BLOCK! actually means <em>any block</em>, giving you <strong>[plain blocks]</strong>, <strong>[set blocks]:</strong>, <strong>:[get blocks]</strong>, and <a href="https://forum.rebol.info/t/word-some-path-some-group-and-some-block/1125/15"><strong>@[whatever these are]</strong></a>.  Similarly for ANY-GROUP!.  More appropriate, clear, and vastly more flexible.</p>
<p>But Red's ANY-LIST! category is the spiritual analogue to what Ren-C calls <strong>ANY-ARRAY!</strong>...which is to say "ANY-BLOCK! or ANY-GROUP!"</p>
<h2>Which is Better, ANY-LIST! or ANY-ARRAY! ?</h2>
<p>The conventional wisdom we've gone with is that to a computer programmer, if you call something a LIST! they might expect it to be a <em>linked list</em> at an implementation level.  Rebol's implementation of these values is fundamentally an indexed array.</p>
<p><em>But other choices have been made biased toward common language and away from comp-sci terms.</em>  What would you imagine sounds better in a tutorial:</p>
<blockquote>
<p>Let's imagine you have two lists of values.  But one is a GROUP! and another is a BLOCK!</p>
<pre><code> group: '(&lt;a&gt; #b %c)
 block: [&lt;a&gt; #b %c]
</code></pre>
</blockquote>
<p>vs.</p>
<blockquote>
<p>Let's imagine you have two arrays of values.  But one is a GROUP! and another is a BLOCK!</p>
<pre><code> group: '(&lt;a&gt; #b %c)
 block: [&lt;a&gt; #b %c]
</code></pre>
</blockquote>
<p>When I imagine the various things that might make new programmers feel a twinge, that "array" word causes a teeny bit more anxiety.  Which might mean that you'd use the "list" language.  But if you're going to use the list language, then it would help if it matched what the types were.</p>
<p>I'll point out that at the superclass level, even though <a href="https://forum.rebol.info/t/text-vs-string/612">TEXT! has replaced STRING! in Ren-C</a> (which I'm pleased with), it's a member of ANY-STRING! along with TAG! and friends.  The category isn't used as often.</p>
<p>It's a really minor point.  But what I worry over here is that Red's choice might have an edge, and I don't want to give them any advantages, anywhere.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>I don't think I want to change it, though I'd like to collect up any good certain reasoning as to why not.  The best "why not" remains <em>being faithful to a computer-science technical reality about the type that over the long run, is worth knowing</em>...which is what earl pushed for in this case, over the more common English word.</p>
<p>Any other arguments I should know about?</p>
          <p><a href="https://forum.rebol.info/t/any-array-vs-any-list-any-final-thoughts/1384/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-array-vs-any-list-any-final-thoughts/1384/1</link>
        <pubDate>Thu, 05 Nov 2020 16:13:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1384-1</guid>
        <source url="https://forum.rebol.info/t/any-array-vs-any-list-any-final-thoughts/1384.rss">ANY-ARRAY! vs. ANY-LIST! ... any-final-thoughts?</source>
      </item>
  </channel>
</rss>

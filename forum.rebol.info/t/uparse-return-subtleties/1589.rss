<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>UPARSE RETURN Subtleties</title>
    <link>https://forum.rebol.info/t/uparse-return-subtleties/1589</link>
    <description>[quote=&quot;hostilefork, post:1, topic:1561&quot;]
I&#39;m a little hazy on the precise complete argument for dropping RETURN...**[here was the commit from over 2 years ago that did it.](https://github.com/metaeducation/ren-c/pull/898)**
[/quote]

So one little annoyance about RETURN usage has come up, in that seemingly convenient casual usages of it require you to specify END or you may be missing something:

    &gt;&gt; uparse [1 2 &lt;gotcha!&gt;] [return collect [some keep integer!]]
    == [1 2]

With COLLECT, Red switches the overall mode of the parse into &quot;collect mode&quot; so the result will be the result of the collect.  That seems like an opportunity to not miss out on the &quot;didn&#39;t reach end&quot; constraint...but...they don&#39;t take advantage of that:

    red&gt; parse [1 2 &lt;gotcha!&gt;] [collect [some keep integer!]]
    == [1 2]

In fact, you can&#39;t even force failure outside the COLLECT, seemingly:

    red&gt; parse [1 2 &lt;gotcha!&gt;] [collect [some keep integer!] not tag!]
    == [1 2]

    red&gt; parse [1 2 &lt;gotcha!&gt;] [collect [some keep integer!] fail]
    == [1 2]

Worse, they don&#39;t even seem to fail if you put the END inside the collect:

    red&gt; parse [1 2 &lt;gotcha!&gt;] [collect [some keep integer! end]]
    == [1 2]

So I don&#39;t know what they&#39;re smoking.  At least UPARSE gets it right if the END is inside the COLLECT rule:

    &gt;&gt; uparse [1 2 &lt;gotcha!&gt;] [return collect [some keep integer!, end]]
    ; null

    &gt;&gt; uparse [1 2] [return collect [some keep integer!, end]]
    == [1 2]

## Is Having the END Implicit a Wrong Turn?

Well, here we are back to [&quot;The PARSE of /PROGRESS&quot; Question](https://forum.rebol.info/t/the-parse-of-progress/1349) again.  :frowning: 

If people are used to the idea that parse returns partial results by default, then this behavior of RETURN would be less surprising.

I&#39;ve also wondered if UPARSE should return the last value of the rule:

    &gt;&gt; uparse [1 2] [some integer!]
    == 2

Then, we might say that END is invisible:

    &gt;&gt; uparse [1 2] [some integer!, end]
    == 2

And if people wanted to get the parse position at the end of the parse as the result, they could just use HERE (cc @rgchris):

    &gt;&gt; uparse [1 2 &lt;tag&gt;] [some integer!, here]
    == [&lt;tag&gt;]

The invisibility of END would make it easier to use things like COLLECT:

    &gt;&gt; uparse [1 2] [collect [some keep integer!], end]
    == [1 2]

Which allows for failure with a fairly clean-looking answer to the problem I started this post with:

    &gt;&gt; uparse [1 2 &lt;gotcha!&gt;] [collect [some keep integer!], end]
    ; null

## What About Rules That Succeed and Return Null ?

There&#39;s a bit of a problem here as successful rules could currently return NULL:

    &gt;&gt; uparse &quot;aaa&quot; [some &quot;a&quot;, opt &quot;b&quot;, end]
    ; null

Because OPT &quot;B&quot; can succeed without actually matching the &quot;B&quot; rule.  So returning &quot;B&quot; seems wrong.  Giving back NULL while still succeeding makes the most sense for OPT.

You could override that by tacking on LOGIC! true, which continues parsing and synthesizes #[true]:

    &gt;&gt; uparse &quot;aaa&quot; [some &quot;a&quot;, opt &quot;b&quot;, true, end]
    == #[true]

...or really any other value you wanted via GROUP!

    &gt;&gt; uparse &quot;aaa&quot; [some &quot;a&quot;, opt &quot;b&quot;, (&lt;whatever&gt;) end]
    == &lt;whatever&gt;

## Interesting Thought... Worth Keeping In Mind

A lot of new things are in play with UPARSE.

Maybe this calls for different operations.  I dunno.</description>
    
    <lastBuildDate>Thu, 26 Aug 2021 12:45:37 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/uparse-return-subtleties/1589.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>UPARSE RETURN Subtleties</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="1589">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>One problem is that you cannot meaningfully ELIDE a RETURN. Let's say you want this to return 3:</p>
</blockquote>
</aside>
<p>...so...another thing about UPARSE* saying it "doesn't require the parse to match all the way to the end" is that then it's a global thing, and you can't make alternate rules in which one branch has to go to the end and another doesn't.</p>
<p>Hence maybe <strong><code>elide to &lt;end&gt;</code></strong> just needs its own efficient keyword.</p>
<p>It feels like "STOP", but that's being used for loop constructs to mean "stop <em>this</em> loop but don't <em>break</em> out of the matching of this rule alternate...".</p>
<p>It could be <strong><code>&lt;stop&gt;</code></strong>.  We already have the case where ANY the rule and <strong><code>&lt;any&gt;</code></strong> the tag combinator are distinct.</p>
<p>Less confusing might be <strong><code>&lt;done&gt;</code></strong>?</p>
<pre><code>&gt;&gt; uparse "aaabbb" [tally some "a" &lt;done&gt;]
== 3
</code></pre>
<p>It looks a little weird if you combine it with another tag:</p>
<pre><code>&gt;&gt; uparse "aaabbb" [tally some "a" &lt;here&gt; &lt;done&gt;]
== "bbb"
</code></pre>
<p>But since tags don't take arguments you could have said that more clearly as:</p>
<pre><code>&gt;&gt; uparse "aaabbb" [tally some "a" return &lt;here&gt;]
== "bbb"
</code></pre>
<p>In any case, I'm feeling ever more inclined to say that we can solve this in a way that people need not ever know about UPARSE*...if it exists at all.</p>
          <p><a href="https://forum.rebol.info/t/uparse-return-subtleties/1589/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/uparse-return-subtleties/1589/4</link>
        <pubDate>Thu, 26 Aug 2021 12:45:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1589-4</guid>
        <source url="https://forum.rebol.info/t/uparse-return-subtleties/1589.rss">UPARSE RETURN Subtleties</source>
      </item>
      <item>
        <title>UPARSE RETURN Subtleties</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1589">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>With RETURN seeming to have a load of troublesome points, I'm less keen on putting it in the box, because I think it will be used incorrectly and create problems.</p>
</blockquote>
</aside>
<p>So...one must remember when I was writing and obsessing over this issue, PARSE wasn't returning the synthesized result of its block.  So getting values out of a parse would have to be done with assignments.  <strong>If you wanted to avoid naming a variable and putting a set of it in the parse rule, you'd be tempted to reach for RETURN.</strong></p>
<p>I think I was rightfully concerned that people reaching for that tool would get it wrong, with patterns like <strong><code>return collect [...]</code></strong></p>
<h2>But Times Have Changed...</h2>
<p>After having lived in the world where PARSE returns the result of it's block, I think it has come to feel very natural.  Why would you <em>"reach for RETURN"</em> when it's so obviously cleaner to not use it?</p>
<pre><code>&gt;&gt; result: parse data [collect [...]]
== [...]
</code></pre>
<p>People can understand that works, and checks the rules to the end...and that you should be doing that if you want the rules to be checked to the end.</p>
<p>With the clean answer sitting right in front of you for how to avoid a variable... <em>the only time you would use RETURN was when it did what you meant: <strong>terminate the parse now, with this result!</strong></em></p>
<p>So if we bring back RETURN it made me wonder if we can just drop UPARSE*.</p>
<pre><code>&gt;&gt; uparse "aaabbb" [some "a", return &lt;here&gt;]
== "bbb"
</code></pre>
<p>Anyway, what I"m trying to say is that the thing I had been concerned about with RETURN--namely its <em>incompleteness</em>--becomes a feature and not a liability when that's why you are using it.</p>
<p>If you only use it when you want incompleteness, that sounds like fitness for purpose to me!  And now that's the only time you need to use it.  So, it's back!</p>
<h2>But is UPARSE* Still Needed?</h2>
<p>One problem is that you cannot meaningfully ELIDE a RETURN.  Let's say you want this to return 3:</p>
<pre><code>&gt;&gt; uparse "aaabbb" [tally some "a", elide return]
== ~void~  ; isotope
</code></pre>
<p>The ELIDE doesn't do anything.  It's the same as RETURN.</p>
<p>Of course you can just move the RETURN:</p>
<pre><code>&gt;&gt; uparse "aaabbb" [return tally some "a"]
== 3
</code></pre>
<p>But that might not be the order you wanted.  We could make a magical TAG! combinator that gave you whatever the synthesized value in the stream is (e.g. what would be still there if you used elide):</p>
<pre><code>&gt;&gt; uparse "aaabbb" [tally some "a", return &lt;magic&gt;]
== 3
</code></pre>
<p>That actually might be useful for other reasons.  It's kind of like an enfix operation.  It might be called <code>&lt;last&gt;</code> or <code>&lt;accumulator&gt;</code> or <code>&lt;result&gt;</code> ?</p>
<p>UPARSE* will always be a bit faster.  And right now UPARSE is just UPARSE* that does an additional check for "did you reach the end".  But maybe with RETURN it can disappear into being an implementation detail that you don't tell people about...</p>
          <p><a href="https://forum.rebol.info/t/uparse-return-subtleties/1589/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/uparse-return-subtleties/1589/3</link>
        <pubDate>Tue, 24 Aug 2021 09:24:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1589-3</guid>
        <source url="https://forum.rebol.info/t/uparse-return-subtleties/1589.rss">UPARSE RETURN Subtleties</source>
      </item>
      <item>
        <title>UPARSE RETURN Subtleties</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>With RETURN seeming to have a load of troublesome points, I'm less keen on putting it in the box, because I think it will be used incorrectly and create problems.</p>
<p>Something that is gnawing at me is that it's seeming that giving back the input is a lot less flexible than giving back the "synthesized result" of the rule (e.g. whatever fell out from the last combinator that matched in a block.)</p>
<p>Just look at how much an operator that only returns the synthesized product can do (let's call it PARSE*):</p>
<pre><code>&gt;&gt; parse* "aaabbb" [some "a" end]
; null

&gt;&gt; parse* "aaabbb" [some "a"]
== "a" 

&gt;&gt; parse* "aaabbb" [some "a" here]
== "bbb"

&gt;&gt; parse* "aaabbb" [some "a" some "b" end]
== ""  ; assuming END evaluates to the end position

&gt;&gt; parse* "aaa" [some "a" end (1 + 2)]
== 3

&gt;&gt; parse* "aaabbb" [some "a" end (1 + 2)]
; null
</code></pre>
<p>Woah.  And if you want to, you can write a "reached-end-enforcing PARSE" on top of this, that can offer the product as a secondary result:</p>
<pre><code>endy-parse: func [
    return: [&lt;opt&gt; any-value!]
    synthesized: [&lt;opt&gt; any-value]
    input [any-series!]
    rule [block!]
][
    let product
    let pos: parse* [product: rule, here]  ; use wrapping rule
    if tail? pos [  ; reached end
        set synthesized product
        return input
    ]
    return null
]
</code></pre>
<p><strong>That is rather remarkable, and I just sold myself on <code>PARSE*</code> as being the core of the implementation.</strong>  Uniform behavior and maximum generality, all done inside the parse rules without needing controlling refinements.</p>
<p>But there's still one missing link out of this puzzle, to help the person who wants to write something along the lines of:</p>
<pre><code> assert [["a" "a" "a"] = parse-product "aaa" [collect [some keep "a"]]]
 assert [null = parse-product "aaabbb" [collect [some keep "a"]]]
</code></pre>
<p>You want the product as the result (which doesn't fit the historical return value of PARSE)...and you want to enforce reaching end (which doesn't fit this new super-general PARSE*).</p>
<p>The crux of the problem is that generic PARSE is tested for success, and failure needs to return something besides the product...in case the product is just incidentally falsey:</p>
<pre><code> if parse "aaa" [some "a" opt "b"] [
    ; opt "b" evaluates to null
    ; if we return that, we won't be running this branch
 ]
</code></pre>
<p>Using the input has the nice property of being guaranteed to be truthy, and makes the routine do double-duty as a nice lightweight validator that can pass through the input.</p>
<p>But with RETURN on the chopping block, do we just deal with some new name like PARSE-PRODUCT, or is there a finesse here I'm missing?</p>
<h2>And the Winner is... PARSE? vs. PARSE</h2>
<p>A ha, I think I've got it solved... <img src="https://forum.rebol.info/images/emoji/twitter/partying_face.png?v=9" title=":partying_face:" class="emoji" alt=":partying_face:"></p>
<ul>
<li>
<p><strong>Just let go of the idea of returning the input from PARSE.</strong>  Instead make it return the last synthesized result.</p>
</li>
<li>
<p><strong>Then have PARSE? as a logic form.</strong>  It's easy to see that it returns a logic.  If people are habituated early on to seeing that they are in control of an arbitrary return result when they use plain PARSE, they won't be expecting to use it in an IF unless they've expressed the synthesized result coherently.  This will draw them to PARSE? if they need it.</p>
</li>
<li>
<p><strong>Make <code>PARSE*</code> be the version that doesn't force running to the end.</strong>  In a pleasing piece of consistency with PARSE, they both return the synthesized result.  Getting the position back is as simple as wrapping your rule in [[...] here], and there's tons of other flexibility.</p>
<ul>
<li>This could be a refinement on PARSE... but I've explained why I don't want to call it /PARTIAL due to confusion with /PART meaning you're passing in a limit on how much input to process.   It doesn't make it return the progress implicitly, it just says all the input need not be consumed.  Any naming suggestions?  /RELAX ?</li>
</ul>
</li>
<li>
<p><strong>Add some wordier construct like MATCH-PARSE to give the input if that's what you want.</strong>  In practice I didn't use the matched result all that terribly often.</p>
</li>
<li>
<p><strong>Throw in NULL isotopes so that ELSE can be generally used even with plain PARSE.</strong>  It's become a regular practice.  Why not?</p>
<pre><code>&gt;&gt; parse "aaa" [some "b" (null)] else [print "Match failure pure null"]
Match failure light null

&gt;&gt; x: parse "aaa" [some "a" (null)] else [print "Isotope on success"]
== ~null~  ; isotope

&gt;&gt; x  ; ~null~ isotopes decay to null when assigned
; null

&gt;&gt; parse "aaa" @[some "a" (null)] else [print "@ to avoid isotope"]
@ to avoid isotope
</code></pre>
</li>
</ul>
<p>This feels like it's adding up to the best of all worlds.  Hopefully <a class="mention" href="/u/rgchris">@rgchris</a> likes it, as he can get the parse version he asked for in the past with:</p>
<pre><code>chrisparse: adapt :uparse* [  ; adapt form that doesn't force going to end
    rule: reduce [rule 'here]
]
</code></pre>
<p>That's all it takes to make a parse that returns the progress in this model.  Very cool.</p>
          <p><a href="https://forum.rebol.info/t/uparse-return-subtleties/1589/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/uparse-return-subtleties/1589/2</link>
        <pubDate>Sun, 02 May 2021 14:43:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1589-2</guid>
        <source url="https://forum.rebol.info/t/uparse-return-subtleties/1589.rss">UPARSE RETURN Subtleties</source>
      </item>
      <item>
        <title>UPARSE RETURN Subtleties</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1561">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/how-to-simplify-extracting-results-from-uparse/1561/1">How To Simplify Extracting Results From UPARSE?</a>
</div>
<blockquote>
<p>I'm a little hazy on the precise complete argument for dropping RETURN...<strong><a href="https://github.com/metaeducation/ren-c/pull/898">here was the commit from over 2 years ago that did it.</a></strong></p>
</blockquote>
</aside>
<p>So one little annoyance about RETURN usage has come up, in that seemingly convenient casual usages of it require you to specify END or you may be missing something:</p>
<pre><code>&gt;&gt; uparse [1 2 &lt;gotcha!&gt;] [return collect [some keep integer!]]
== [1 2]
</code></pre>
<p>With COLLECT, Red switches the overall mode of the parse into "collect mode" so the result will be the result of the collect.  That seems like an opportunity to not miss out on the "didn't reach end" constraint...but...they don't take advantage of that:</p>
<pre><code>red&gt; parse [1 2 &lt;gotcha!&gt;] [collect [some keep integer!]]
== [1 2]
</code></pre>
<p>In fact, you can't even force failure outside the COLLECT, seemingly:</p>
<pre><code>red&gt; parse [1 2 &lt;gotcha!&gt;] [collect [some keep integer!] not tag!]
== [1 2]

red&gt; parse [1 2 &lt;gotcha!&gt;] [collect [some keep integer!] fail]
== [1 2]
</code></pre>
<p>Worse, they don't even seem to fail if you put the END inside the collect:</p>
<pre><code>red&gt; parse [1 2 &lt;gotcha!&gt;] [collect [some keep integer! end]]
== [1 2]
</code></pre>
<p>So I don't know what they're smoking.  At least UPARSE gets it right if the END is inside the COLLECT rule:</p>
<pre><code>&gt;&gt; uparse [1 2 &lt;gotcha!&gt;] [return collect [some keep integer!, end]]
; null

&gt;&gt; uparse [1 2] [return collect [some keep integer!, end]]
== [1 2]
</code></pre>
<h2>Is Having the END Implicit a Wrong Turn?</h2>
<p>Well, here we are back to <a href="https://forum.rebol.info/t/the-parse-of-progress/1349">"The PARSE of /PROGRESS" Question</a> again.  <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=9" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p>If people are used to the idea that parse returns partial results by default, then this behavior of RETURN would be less surprising.</p>
<p>I've also wondered if UPARSE should return the last value of the rule:</p>
<pre><code>&gt;&gt; uparse [1 2] [some integer!]
== 2
</code></pre>
<p>Then, we might say that END is invisible:</p>
<pre><code>&gt;&gt; uparse [1 2] [some integer!, end]
== 2
</code></pre>
<p>And if people wanted to get the parse position at the end of the parse as the result, they could just use HERE (cc <a class="mention" href="/u/rgchris">@rgchris</a>):</p>
<pre><code>&gt;&gt; uparse [1 2 &lt;tag&gt;] [some integer!, here]
== [&lt;tag&gt;]
</code></pre>
<p>The invisibility of END would make it easier to use things like COLLECT:</p>
<pre><code>&gt;&gt; uparse [1 2] [collect [some keep integer!], end]
== [1 2]
</code></pre>
<p>Which allows for failure with a fairly clean-looking answer to the problem I started this post with:</p>
<pre><code>&gt;&gt; uparse [1 2 &lt;gotcha!&gt;] [collect [some keep integer!], end]
; null
</code></pre>
<h2>What About Rules That Succeed and Return Null ?</h2>
<p>There's a bit of a problem here as successful rules could currently return NULL:</p>
<pre><code>&gt;&gt; uparse "aaa" [some "a", opt "b", end]
; null
</code></pre>
<p>Because OPT "B" can succeed without actually matching the "B" rule.  So returning "B" seems wrong.  Giving back NULL while still succeeding makes the most sense for OPT.</p>
<p>You could override that by tacking on LOGIC! true, which continues parsing and synthesizes #[true]:</p>
<pre><code>&gt;&gt; uparse "aaa" [some "a", opt "b", true, end]
== #[true]
</code></pre>
<p>...or really any other value you wanted via GROUP!</p>
<pre><code>&gt;&gt; uparse "aaa" [some "a", opt "b", (&lt;whatever&gt;) end]
== &lt;whatever&gt;
</code></pre>
<h2>Interesting Thought... Worth Keeping In Mind</h2>
<p>A lot of new things are in play with UPARSE.</p>
<p>Maybe this calls for different operations.  I dunno.</p>
          <p><a href="https://forum.rebol.info/t/uparse-return-subtleties/1589/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/uparse-return-subtleties/1589/1</link>
        <pubDate>Sun, 18 Apr 2021 07:53:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1589-1</guid>
        <source url="https://forum.rebol.info/t/uparse-return-subtleties/1589.rss">UPARSE RETURN Subtleties</source>
      </item>
  </channel>
</rss>

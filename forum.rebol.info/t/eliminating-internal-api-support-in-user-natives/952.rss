<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Eliminating &quot;Internal&quot; API Support in User Natives</title>
    <link>https://forum.rebol.info/t/eliminating-internal-api-support-in-user-natives/952</link>
    <description>I&#39;m tackling the build process for user natives, and trying to figure out how they might actually be used.  One key point is that you don&#39;t use the nuanced and complex internal API with them.

From the README I&#39;m writing:

&gt; Symbol linkage to the internal libRebol API is automatically provided by the extension. This is the ergonomic external API (e.g. %rebol.h), not the full internal implementation API (e.g. %sys-core.h).
&gt;
&gt; But the initial implementation of user natives *DID* make the full internal API available. This involved invoking TCC during the build process to pre-process all of the many files included by %sys-core.h into a single blob, and then pack it into the executable. It also made every API and constant available in the symbol table--with its name, to use with tcc_add_symbol().
&gt;
&gt; This predated libRebol&#39;s modern form, so it was the only choice at the time. But now it does not make sense to allow calling %sys-core.h from user natives. If anyone is actually seeking some &quot;optimal efficiency&quot; (with &quot;maximal effort&quot;) that the core API can offer, *TCC is not an optimizing compiler in the first place*. Any serious larger-scale initiative would want to use the extension model, with a &quot;fancier&quot; compiler and debugger on hand.
&gt;
&gt; libRebol also has a drastically smaller footprint for the header (as %rebol.h is a single standalone file). Not having a large table of every internal API and constant in the system--along with its name--saves space as well. So &quot;rebol.h&quot; is what is used, as the most practical option.

It&#39;s a good change, along with several other good changes in that README that should push the feature along (and reign it in so it&#39;s not holding the build process hostage to a forked version of TCC that I never quite knew how to build).

**Because the forum is kind of a &quot;development notebook&quot;, I&#39;m taking some of the code that&#39;s getting the axe and putting it here with some commentary.  This makes it easier to link to and talk about, or find later, vs. having it disappear into git archive history without an explanation.**</description>
    
    <lastBuildDate>Mon, 10 Dec 2018 01:58:21 +0000</lastBuildDate>
    <category>Language Bridging</category>
    <atom:link href="https://forum.rebol.info/t/eliminating-internal-api-support-in-user-natives/952.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Eliminating &quot;Internal&quot; API Support in User Natives</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>One aspect of including the entirety of %sys-core.h in for use by user natives is that not only was the header needed, but all the pointers to all the non-inline functions (and global constants) had to be registered with their names with <code>tcc_add_symbol()</code>.  That's a lot of stuff to include in the executable.</p>
<p>To build up that table, there was a hook added to <a class="mention" href="/u/brett">@Brett</a>'s API analyzer callback.  This is something that gets called for every function in the system that's exported to the rest of the core.  It then emitted a symbol table of C function pointers, and C data pointers.</p>
<p>So first, it emitted some boilerplate definitions:</p>
<pre><code>e-syms: make-emitter "Function Symbols" output-dir/core/tmp-symbols.c

e-syms/emit {
    #include "sys-core.h"

    #define SYM_CFUNC(x) {#x, (CFUNC*)(x)}
    #define SYM_DATA(x) {#x, &amp;x}

    struct rebol_sym_cfunc_t {
        const char *name;
        CFUNC *cfunc;
    };

    struct rebol_sym_data_t {
        const char *name;
        void *data;
    };

    extern const struct rebol_sym_cfunc_t rebol_sym_cfuncs [];
    const struct rebol_sym_cfunc_t rebol_sym_cfuncs [] = ^{
}
</code></pre>
<p>That got it ready to start emitting the function symbols.  So on each <code>emit-proto</code> callback during the scanning of the C source files for the interpreter, it would add a line...a slightly different line for if something was a "generic dispatcher" for a type (marked REBTYPE):</p>
<pre><code>if "REBTYPE" = proto-parser/proto.id [
    e-syms/emit [the-file proto-parser] {
        /* $&lt;The-File&gt; */ SYM_CFUNC(T_$&lt;Proto-Parser/Proto.Arg.1&gt;),
    }
] else [
    e-syms/emit [the-file proto-parser] {
        /* $&lt;The-File&gt; */ SYM_CFUNC($&lt;Proto-Parser/Proto.Id&gt;),
    }
]
</code></pre>
<p>Then it would terminate the list of function symbols, and begin the list of global data pointer symbols:</p>
<pre><code>e-syms/emit {
    {NULL, NULL} /* Terminator */
^};

/* Globals from sys-globals.h */
extern const struct rebol_sym_data_t rebol_sym_data [];
const struct rebol_sym_data_t rebol_sym_data [] = ^{
}
</code></pre>
<p>Enumerating over function prototypes was already done for other reasons (to make a big system-wide include file so any part of the core could call any other part without worrying about separately updating prototypes from definitions.)  But enumerating over the global data symbols appears to have had to be added just for the TCC extension.  Despite that being the only use I think I'll leave it in the build process "just in case".</p>
<p>Anyway, for each "id" the parse of the %sys-globals.h found, it emitted a line:</p>
<pre><code>e-syms/emit 'id {
    SYM_DATA($&lt;Id&gt;),
}
</code></pre>
<p>Finally it wrote the last lines and emitted the file:</p>
<pre><code>e-syms/emit {
    {NULL, NULL} /* Terminator */
^/};
}

e-syms/write-emitted</code></pre>
          <p><a href="https://forum.rebol.info/t/eliminating-internal-api-support-in-user-natives/952/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/eliminating-internal-api-support-in-user-natives/952/3</link>
        <pubDate>Mon, 10 Dec 2018 01:58:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-952-3</guid>
        <source url="https://forum.rebol.info/t/eliminating-internal-api-support-in-user-natives/952.rss">Eliminating &quot;Internal&quot; API Support in User Natives</source>
      </item>
      <item>
        <title>Eliminating &quot;Internal&quot; API Support in User Natives</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Here is the rebmake object code that used to be part of the monolithic build process for making <code>%sys-core.i</code>.  The concept was that TCC would be invoked for only its preprocessing step, spitting out code that could be pasted into the front of a user native compilation to give it access to the internal API:</p>
<pre><code>sys-core-i: make rebmake/object-file-class [
    compiler: make rebmake/tcc [
        exec-file: cfg-tcc/exec-file
    ]
    output: %prep/include/sys-core.i
    source: src-dir/include/sys-core.h
    definitions: join-of app-config/definitions [ {DEBUG_STDIO_OK} ]
    includes: append-of app-config/includes reduce [tcc-dir tcc-dir/include]
    cflags: compose [{-dD} {-nostdlib} (opt cfg-tcc/cflags)]
]
</code></pre>
<p>It would be called as <code>sys-core-i/command/E</code>, where /E is the <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/c99.html" rel="nofollow noopener">POSIX-specified C compiler switch for preprocess-only</a>:</p>
<blockquote>
<p>Copy C-language source files to standard output, executing all preprocessor directives; no compilation shall be performed. If any operand is not a text file, the effects are unspecified.</p>
</blockquote>
<p>This was a little weird, because it meant you must have a TCC compiler on hand to do this preprocessing during the build (even if you're building the main interpreter with gcc or MSVC).  Because you'd want the file preprocessed the way TCC would do it.</p>
<p>Bear in mind, this produced quite a big file from all the multitudes of files in the internal implementation of the interpreter.  When you compare with the tiny and tight %rebol.h, %sys-core.i was quite the beast!</p>
<p>But anyway, the next step was to pack that up into a big const data blob that was put into the interpreter, so it could paste it in at the beginning of any COMPILE text.  But Shixin apparently found it needed a bit of massaging...this may be relevant:</p>
<pre><code>print "------ Building embedded header file"
args: parse-args system/options/args
output-dir: system/options/path/prep
mkdir/deep output-dir/core

inp: read fix-win32-path to file! output-dir/extensions/tcc/sys-core.i
replace/all inp "// #define" "#define"
replace/all inp "// #undef" "#undef"
replace/all inp "&lt;ce&gt;" "##" ;bug in tcc??

// remove "#define __BASE_FILE__" to avoid duplicates
remove-macro: func [
    return: &lt;void&gt;
    macro [any-string!]
    &lt;local&gt; pos-m inc eol
][
    macro: to binary! macro
    if pos-m: find inp macro [
        inc: find/reverse pos-m to binary! "#define"
        eol: find pos-m to binary! newline
        remove/part inc (index? eol) - (index? inc)
    ]
]

remove-macro "__BASE_FILE__"

// remove everything up to DEBUG_STDIO_OK
// (they all seem to be builtin macros)
remove/part inp -1 + index? find inp to binary! "#define DEBUG_STDIO_OK"

comment [write %/tmp/sys-core.i inp] // for inspection

e: (make-emitter
    "Embedded sys-core.h" output-dir/prep/extensions/tcc/tmp-embedded-header.c)

e/emit {
    #include "sys-core.h"

    extern const REBYTE core_header_source[];
    const REBYTE core_header_source[] = {
        $&lt;Binary-To-C Join-Of Inp #{00}&gt;
    };
}

print "------ Writing embedded header file"
e/write-emitted
</code></pre>
<p>While it's not all that complicated to do, it isn't a good general solution to the problem of the embedded TCC wanting to find include files.  Imagine for instance that you were to want to use a snippet of code you got from someone else in your compilation, and it was in a disk file.  What if that file said <code>#include "rebol.h"</code> in it?  An  approach like this wouldn't be able to find and use that.</p>
<p>So the current strategy is to ship embedded files in the extension "as-is".  I've posted to a mailing list about making it possible to use those without extracting them to a temporary directory:</p>
<p><a href="http://lists.nongnu.org/archive/html/tinycc-devel/2018-12/msg00011.html" class="onebox" target="_blank" rel="nofollow noopener">http://lists.nongnu.org/archive/html/tinycc-devel/2018-12/msg00011.html</a></p>
<p>But in the meantime, <em>there's no shame in extracting them into a temp dir</em>.  It helps avoid the trap of getting stuck reimplementing a preprocessor and linker, and paves the way for user natives being able to do more than trivial demos.</p>
<p>For example: the Windows build would likely want to implicitly provide windows.h and a linker .def file, and you should be able to use other <code>.c</code> files in your build that <code>#include "windows.h"</code>.</p>
          <p><a href="https://forum.rebol.info/t/eliminating-internal-api-support-in-user-natives/952/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/eliminating-internal-api-support-in-user-natives/952/2</link>
        <pubDate>Mon, 10 Dec 2018 01:32:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-952-2</guid>
        <source url="https://forum.rebol.info/t/eliminating-internal-api-support-in-user-natives/952.rss">Eliminating &quot;Internal&quot; API Support in User Natives</source>
      </item>
      <item>
        <title>Eliminating &quot;Internal&quot; API Support in User Natives</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I'm tackling the build process for user natives, and trying to figure out how they might actually be used.  One key point is that you don't use the nuanced and complex internal API with them.</p>
<p>From the README I'm writing:</p>
<blockquote>
<p>Symbol linkage to the internal libRebol API is automatically provided by the extension. This is the ergonomic external API (e.g. %rebol.h), not the full internal implementation API (e.g. %sys-core.h).</p>
<p>But the initial implementation of user natives <em>DID</em> make the full internal API available. This involved invoking TCC during the build process to pre-process all of the many files included by %sys-core.h into a single blob, and then pack it into the executable. It also made every API and constant available in the symbol table--with its name, to use with tcc_add_symbol().</p>
<p>This predated libRebol's modern form, so it was the only choice at the time. But now it does not make sense to allow calling %sys-core.h from user natives. If anyone is actually seeking some "optimal efficiency" (with "maximal effort") that the core API can offer, <em>TCC is not an optimizing compiler in the first place</em>. Any serious larger-scale initiative would want to use the extension model, with a "fancier" compiler and debugger on hand.</p>
<p>libRebol also has a drastically smaller footprint for the header (as %rebol.h is a single standalone file). Not having a large table of every internal API and constant in the system--along with its name--saves space as well. So "rebol.h" is what is used, as the most practical option.</p>
</blockquote>
<p>It's a good change, along with several other good changes in that README that should push the feature along (and reign it in so it's not holding the build process hostage to a forked version of TCC that I never quite knew how to build).</p>
<p><strong>Because the forum is kind of a "development notebook", I'm taking some of the code that's getting the axe and putting it here with some commentary.  This makes it easier to link to and talk about, or find later, vs. having it disappear into git archive history without an explanation.</strong></p>
          <p><a href="https://forum.rebol.info/t/eliminating-internal-api-support-in-user-natives/952/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/eliminating-internal-api-support-in-user-natives/952/1</link>
        <pubDate>Mon, 10 Dec 2018 01:06:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-952-1</guid>
        <source url="https://forum.rebol.info/t/eliminating-internal-api-support-in-user-natives/952.rss">Eliminating &quot;Internal&quot; API Support in User Natives</source>
      </item>
  </channel>
</rss>

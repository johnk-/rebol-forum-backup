<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Writing JavaScript natives to call the GitHub API</title>
    <link>https://forum.rebol.info/t/writing-javascript-natives-to-call-the-github-api/1114</link>
    <description>I saw an example showing that the GitHub API had been enabled to support the CORS protocol, and successfully managed to do a JavaScript fetch() of a file blob from it.  It was very cool when it worked--especially since the Base64 decoding I used was libRebol!

It turns out that wasn&#39;t actually necessary: What I didn&#39;t know was that GitHub had enabled fetch() on the `raw.github.com` family of URLs too (!)  So just using those URLs is much cleaner.

But it was a good thing to test and get working.  And I&#39;m sure people will be wanting to make GitHub API requests of other kinds.  So here&#39;s the function I had.  It has a spec that&#39;s a Rebol block, and can be called from Rebol...but which has a body of JavaScript (that also calls back into Rebol via the libRebol JS API...!)

    github-read: js-awaiter [
        owner [text!]
        repo [text!]  ; !!! TBD: branch?
        path [text!]
    ]{
        let owner = reb.Spell(reb.ArgR(&#39;owner&#39;))
        let repo = reb.Spell(reb.ArgR(&#39;repo&#39;))
        let path = reb.Spell(reb.ArgR(&#39;path&#39;))

        let url = &quot;https://api.github.com/repos/&quot; + owner + &quot;/&quot; + repo
            + &quot;/contents&quot; + path

        let response = await fetch(url)
        if (!response.ok)  // https://www.tjvantoll.com/2015/09/13/fetch-and-errors/
            throw Error(response.statusText)

        let json = await response.json()  // GitHub gives Base64 in JSON envelope

        return reb.Promise(&quot;debase/base&quot;, reb.T(json.content), reb.I(64))  // see note
    }

&gt; Note: The actual way you have to return that &quot;promise&quot; at this exact moment isn&#39;t as pretty, but that&#39;s what I&#39;m working on.  Current code makes you write it as a function that calls reb.Run()
&gt;
&gt;     return function () {
&gt;         return reb.Run(&quot;debase/base&quot;, reb.T(json.content), reb.I(64))
&gt;     } 

Despite needing to perform various I/O operations that need to unblock the stack, it will not return to the Rebol caller until the final result is finished.  It&#39;s a tricky process to orchestrate and do the bookkeeping of threads to allow the back and forth to make it all happen.  And when threads are NOT available, it&#39;s very tricky too!

*(But the absolute trickiest bit is writing one codebase that can be built both ways, and does all that management in a non-invasive way to the Rebol core!)*

Another piece of this puzzle was the code that transformed URLs, which was just a little parse rule.  It shows the use of **:(...)** as a way of running code and then splicing the result of the rule in.  If it&#39;s null, it vaporizes.  (There&#39;s no /blob in the raw URLs)

    parse url [
        [&quot;https://github.com/&quot; (raw: false) | &quot;https://raw.github.com&quot; (raw: true)]
        copy owner: to &quot;/&quot; skip
        copy repo: to &quot;/&quot; skip
        :(if not raw [&quot;blob/&quot;])
        copy branch: to &quot;/&quot;
        copy path: to end  ; include the leading /
    ] else [
        ; Not a GitHub file URL
    ]</description>
    
    <lastBuildDate>Fri, 15 Mar 2019 13:55:30 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://forum.rebol.info/t/writing-javascript-natives-to-call-the-github-api/1114.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Writing JavaScript natives to call the GitHub API</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>For reference, here are some APIs that will be interesting to call on GitHub:</p>
<ul>
<li>
<p><a href="https://www.google.com/url?q=https://developer.github.com/v3/repos/contents/%23create-a-file&amp;sa=D&amp;source=hangouts&amp;ust=1552710016443000&amp;usg=AFQjCNH5jwtSwj_iEtT4zpcoZqbJ2ZUTkQ" rel="nofollow noopener">Creating a File</a></p>
</li>
<li>
<p><a href="https://www.google.com/url?q=https://developer.github.com/v3/repos/contents/%23update-a-file&amp;sa=D&amp;source=hangouts&amp;ust=1552710029923000&amp;usg=AFQjCNFlca8GFN_Ir2XSI8-V642iiALoNQ" rel="nofollow noopener">Deleting a File</a></p>
</li>
<li>
<p><a href="https://www.google.com/url?q=https://developer.github.com/v3/repos/contents/%23delete-a-file&amp;sa=D&amp;source=hangouts&amp;ust=1552710050252000&amp;usg=AFQjCNHdI6SfViJvpoVWafWiMvK0d30McA" rel="nofollow noopener">Updating a File</a></p>
</li>
</ul>
<p>It would be pretty neat to see a syntax that could do this; perhaps parsing out the raw or blob URLs as I've shown.  What if you could provide your login credentials and actually say in the ReplPad:</p>
<pre><code> &gt;&gt; blob-url: https://github.com/metaeducation/ren-c/blob/master/README.md

 &gt;&gt; do/args &lt;git&gt; [username: "hostilefork" password: &lt;prompt&gt;]

 &gt;&gt; data: as text! git/read blob-url  ; Triggers GitHub login credential page

 &gt;&gt; replace/all data "Ren-C" "Ren-C-and-JS"

 &gt;&gt; git/commit blob-url "Sample Update Commit"
</code></pre>
<p>Anyone want to give that a try?  <a class="mention" href="/u/johnk">@johnk</a>?  <img src="//forum.rebol.info/images/emoji/twitter/stuck_out_tongue.png?v=7" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>It could be written on the desktop first, and then--maybe, just maybe it would work in-browser too.</p>
          <p><a href="https://forum.rebol.info/t/writing-javascript-natives-to-call-the-github-api/1114/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/writing-javascript-natives-to-call-the-github-api/1114/2</link>
        <pubDate>Fri, 15 Mar 2019 13:55:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1114-2</guid>
        <source url="https://forum.rebol.info/t/writing-javascript-natives-to-call-the-github-api/1114.rss">Writing JavaScript natives to call the GitHub API</source>
      </item>
      <item>
        <title>Writing JavaScript natives to call the GitHub API</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I saw an example showing that the GitHub API had been enabled to support the CORS protocol, and successfully managed to do a JavaScript fetch() of a file blob from it.  It was very cool when it worked--especially since the Base64 decoding I used was libRebol!</p>
<p>It turns out that wasn't actually necessary: What I didn't know was that GitHub had enabled fetch() on the <code>raw.github.com</code> family of URLs too (!)  So just using those URLs is much cleaner.</p>
<p>But it was a good thing to test and get working.  And I'm sure people will be wanting to make GitHub API requests of other kinds.  So here's the function I had.  It has a spec that's a Rebol block, and can be called from Rebol...but which has a body of JavaScript (that also calls back into Rebol via the libRebol JS API...!)</p>
<pre><code>github-read: js-awaiter [
    owner [text!]
    repo [text!]  ; !!! TBD: branch?
    path [text!]
]{
    let owner = reb.Spell(reb.ArgR('owner'))
    let repo = reb.Spell(reb.ArgR('repo'))
    let path = reb.Spell(reb.ArgR('path'))

    let url = "https://api.github.com/repos/" + owner + "/" + repo
        + "/contents" + path

    let response = await fetch(url)
    if (!response.ok)  // https://www.tjvantoll.com/2015/09/13/fetch-and-errors/
        throw Error(response.statusText)

    let json = await response.json()  // GitHub gives Base64 in JSON envelope

    return reb.Promise("debase/base", reb.T(json.content), reb.I(64))  // see note
}
</code></pre>
<blockquote>
<p>Note: The actual way you have to return that "promise" at this exact moment isn't as pretty, but that's what I'm working on.  Current code makes you write it as a function that calls reb.Run()</p>
<pre><code>return function () {
    return reb.Run("debase/base", reb.T(json.content), reb.I(64))
} 
</code></pre>
</blockquote>
<p>Despite needing to perform various I/O operations that need to unblock the stack, it will not return to the Rebol caller until the final result is finished.  It's a tricky process to orchestrate and do the bookkeeping of threads to allow the back and forth to make it all happen.  And when threads are NOT available, it's very tricky too!</p>
<p><em>(But the absolute trickiest bit is writing one codebase that can be built both ways, and does all that management in a non-invasive way to the Rebol core!)</em></p>
<p>Another piece of this puzzle was the code that transformed URLs, which was just a little parse rule.  It shows the use of <strong>:(...)</strong> as a way of running code and then splicing the result of the rule in.  If it's null, it vaporizes.  (There's no /blob in the raw URLs)</p>
<pre><code>parse url [
    ["https://github.com/" (raw: false) | "https://raw.github.com" (raw: true)]
    copy owner: to "/" skip
    copy repo: to "/" skip
    :(if not raw ["blob/"])
    copy branch: to "/"
    copy path: to end  ; include the leading /
] else [
    ; Not a GitHub file URL
]</code></pre>
          <p><a href="https://forum.rebol.info/t/writing-javascript-natives-to-call-the-github-api/1114/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/writing-javascript-natives-to-call-the-github-api/1114/1</link>
        <pubDate>Thu, 14 Mar 2019 20:32:06 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1114-1</guid>
        <source url="https://forum.rebol.info/t/writing-javascript-natives-to-call-the-github-api/1114.rss">Writing JavaScript natives to call the GitHub API</source>
      </item>
  </channel>
</rss>

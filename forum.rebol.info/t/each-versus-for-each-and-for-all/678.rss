<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Each versus for-each and for-all</title>
    <link>https://forum.rebol.info/t/each-versus-for-each-and-for-all/678</link>
    <description>In 8th, they have the *:each as a higher order function.

So, depending on whether it&#39;s being applied to a map, array, buffer, string it works like this:

    Buffer lambda b:each

So, here the buffer is iterated over and the index and value are placed on the stack for lambda to consume.

For-each neesd to create words, and for-all needs to reference the series by name which creates more visual clutter.

In VID lambdas had access to a similar functionality where _value_ was available.

We could do the same:

    Each series [ code ] 

Where code has access to the words index and value of the series being traversed.</description>
    
    <lastBuildDate>Tue, 04 May 2021 07:17:58 +0000</lastBuildDate>
    <category>Foreign Inspiration</category>
    <atom:link href="https://forum.rebol.info/t/each-versus-for-each-and-for-all/678.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Each versus for-each and for-all</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="678">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>A thought I had was we might then imagine FOR as something that calls a function until it returns NULL, and returns the last non-NULL thing.</p>
<pre><code>&gt;&gt; for each x [1 2] [print ["running" x], x + 10]
running 1
running 2
== 12
</code></pre>
<p>Then MAP could call the function until it returns NULL, but return the results:</p>
<pre><code>&gt;&gt; map each x [1 2] [print ["running" x], x + 10]
running 1
running 2
== [11 12]
</code></pre>
</blockquote>
</aside>
<p>While <a href="https://forum.rebol.info/t/reverting-until-and-adding-while-not-and-until-not/594/4">rethinking the nature of arity-1 WHILE</a> and shifting the arity-2 WHILE semantics to LOOP, it made me think that maybe this needs reordering.</p>
<pre><code>&gt;&gt; for x each [1 2] [print ["running" x, x + 10]]
running 1
running 2
== 12
</code></pre>
<p>This would mean EACH [1 2] would be the generator, and X would be a property of FOR.  That gives flexibility in defining FOR for other argument values.  Integer could just count up:</p>
<pre><code>&gt;&gt; for x 2 [
      print ["running" x], x + 10
   ]
running 1
running 2
== 12
</code></pre>
<p>FOR X EACH and FOR-EACH X are the same number of characters, with the former having nicer visual possibilities.  This is especially true when differentiating a block for variable names from the iterated variables:</p>
<pre><code>for-each [a b] [1 2 3 4] [print [a b]]

for [a b] each [1 2 3 4] [print [a b]]
</code></pre>
<p>This makes EACH as a generator much clearer:</p>
<pre><code> &gt;&gt; g: each [1 2]

 &gt;&gt; g
 == 1

 &gt;&gt; g
 == 2

 &gt;&gt; g
 ; null
</code></pre>
<p>Under this setup, a FOR which did not use an EACH could reserve BLOCK! for other meanings, such as a dialect for ranges.</p>
<pre><code>for x [1 to 10] [print [x]]
for x [1 thru 10] [print [x]]
</code></pre>
<p>But since that puts a lot of "logic" into FOR, we might make EACH the default semantics of a series with FOR and then make this dialect the weird case.  Otherwise you're kind of wasting the short word on cases like strings.  But it's hard to think of a good short name for that generator dialect:</p>
<pre><code>for x yournamehere [1 to 10] [print [x]]
for x yournamehere [1 thru 10] [print [x]]
</code></pre>
<p>Anyway...if FOR was generalized in this way, it could free up REPEAT for something that might make more sense: namely "do the same thing N times".  But this could be distinguished from loop by paying attention to the truthiness of the body:</p>
<pre><code>&gt;&gt; n: 0
&gt;&gt; repeat 10 [  ; a WHILE variant, limited by a count.
      print "Repeating"
      n &lt; 3
   ]
Repeating
Repeating
Repeating
Repeating
</code></pre>
<p>This combination of "heeds the count, but stops earlier if the body returns false" may seem odd.  But this formulation could make <a href="https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578">repeating a rule N times in PARSE more clear</a> when it's hidden behind a variable.</p>
          <p><a href="https://forum.rebol.info/t/each-versus-for-each-and-for-all/678/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/each-versus-for-each-and-for-all/678/5</link>
        <pubDate>Tue, 04 May 2021 07:12:48 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-678-5</guid>
        <source url="https://forum.rebol.info/t/each-versus-for-each-and-for-all/678.rss">Each versus for-each and for-all</source>
      </item>
      <item>
        <title>Each versus for-each and for-all</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="678">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Though there are a couple of sticking points with it... e.g. it doesn't generalize arbitrarily to things like <strong>remove each</strong>...and if NULL is taken to signal "done" then it can't also signal BREAK. But I'm now thinking maybe generators <em>can</em> return NULL</p>
</blockquote>
</aside>
<p>So now that the NULL isotope concept exists, it is possible to assign one of them to mean a generator is "FINISHED" (plain NULL) and another to mean "I really meant return NULL, and I may have more values to emit."  When you're doing a "map-each" the intentional return of NULL is particularly important, for saying you want to add nothing to the collection but keep going.</p>
<p>The third state is BREAK--which is currently handled by another mechanism (THROW).  There are two possibilities for who's in charge of catching the throw:</p>
<ol>
<li>iteration constructs like FOR or MAP could catch the BREAK, and return (plain) NULL</li>
<li>generators like EACH could catch the BREAK, and then use some third signal (NULL-BREAK?) to communicate the intent to FOR or MAP as distinct from "finished" or "actually returned NULL".</li>
</ol>
<p>It seems kind of obvious that (1) is preferable, but I'm just mentioning (2) for completeness.</p>
<p>So it looks like we can try this to see how it goes.  Though a single-arity MAP function is not that typical.  The norm is two inputs: a collection of things of category <strong>A</strong>, and a function that transforms <strong>A</strong>s into <strong>B</strong>s.  Then you get a collection of <strong>B</strong>'s out.</p>
<p>Getting the conventional arity-2 MAP out of this to use with a function becomes messy, because Rebol has historically had this "put your iteration variable's name in a certain position" situation, and if you don't need the variable (because it's implicitly a function argument) that position has to have a placeholder</p>
<pre><code> &gt;&gt; map each _ [1 2 3] :negate
 == [-1 -2 -3]
</code></pre>
<p>This could be addressed with a lambda syntax:</p>
<pre><code> &gt;&gt; map each [1 2 3] x -&gt; [x + 1]
 == [2 3 4]
</code></pre>
<p>So then EACH is arity 2, and MAP is arity 1.  But I think that this would be one of those cases of drifting away from the Rebol spirit and starting to systemize the parts too much to where you're back to <em>"being beholden to pure functional programming syntax limits...but without any of the pure functional programming benefits."</em></p>
<p>...or we say that you use different constructs:</p>
<pre><code> &gt;&gt; map each x [1 2 3] [x + 1]
 == [2 3 4]

 &gt;&gt; map each* [1 2 3] :negate
 == [-1 -2 -3]
</code></pre>
<p>But I find that grating, so the idea that keeps recurring to me is to use a skippable QUOTED! parameter:</p>
<pre><code> &gt;&gt; map each 'x [1 2 3] [x + 1]
 == [2 3 4]

 &gt;&gt; map each [1 2 3] :negate
 == [-1 -2 -3]
</code></pre>
<p>This has the downside (upside?) that you always have to distinuish a named loop variable by quoting it.  That applies to BLOCK!s of variables too...to distinguish a block of variable names from a block of data to enumerate:</p>
<pre><code> &gt;&gt; map each '[a b] [1 2 3 4] [reduce [a + 1, b + 2]]
 == [2 4 4 6]
</code></pre>
<p><em>(We might shorthand this as <strong>map each 'a.b</strong>, a concept being thought about for lambdas too.)</em></p>
<p>I'll send everyone back to the not-commented-on-but-very-important <a href="https://forum.rebol.info/t/speaking-with-tics-should-quoted-arguments-always-be-apostrophed/1359">"Speaking with tics"</a> regarding this contentious (at least in my mind) matter.</p>
<p>Perhaps when we see this all laid out where we can get rid of the hyphen in FOR-EACH and MAP-EACH, the total cost of needing the apostrophe on the variable levels out.  It also can't be denied that it helps communicate that it's a "name" and not a "use", and means that if the word is incidentally a left-quoting ENFIX operator it won't be "live" and try to quote the EACH.</p>
<p>This doesn't necessarily have any bearing on <strong>type of foo</strong> vs. <strong>'type of foo</strong>.  While the issues are related, different decisions can be made on each case according to what is best suited.</p>
<h2>Broader Impliciations</h2>
<p>If something like this is pursued, the question comes up as to how many constructs should use this "generator" style.</p>
<p><strong>loop 10 [print "Hi"]</strong> is pretty straightforward.  You wouldn't want LOOP to generate a function, and then have to write <strong>for loop 10 [print "Hi"]</strong>.</p>
<p>So this needs to be weighed in consideration--though maybe it suggests things like LOOP do use generators, but are macros which subsume the FOR into their implementation.</p>
          <p><a href="https://forum.rebol.info/t/each-versus-for-each-and-for-all/678/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/each-versus-for-each-and-for-all/678/4</link>
        <pubDate>Thu, 03 Dec 2020 18:16:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-678-4</guid>
        <source url="https://forum.rebol.info/t/each-versus-for-each-and-for-all/678.rss">Each versus for-each and for-all</source>
      </item>
      <item>
        <title>Each versus for-each and for-all</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Something else I've been thinking about (that <a class="mention" href="/u/blackattr">@BlackATTR</a> has brought up in the past) is the fact that you often want to know when you're on the first or last step of an iteration.</p>
<p>There could be some sensitivity in EACH to whether the code it is running has a /FIRST or /LAST refinement (which bolsters <a href="https://forum.rebol.info/t/de-verbification-noun-of-x-vs-noun-x/1368">my point about <strong>first of</strong> and <strong>last of</strong></a>):</p>
<pre><code>&gt;&gt; e: each x [1 2 3] func [value /first /last] [
    if first [print "first!"]
    print [value]
    if last [print "last!"]
]

&gt;&gt; for :e
first!
1
2
3
last!
</code></pre>
<p>This could be shortened with a lambda syntax:</p>
<pre><code>&gt;&gt; for each x [1 2 3] value/first/last -&gt; [
    if first [print "first!"]
    print [value]
    if last [print "last!"]
]

first!
1
2
3
last!
</code></pre>
<p>But maybe it's EACH that should be parameterized, and they should be normal arguments, so you don't get pinned to the names:</p>
<pre><code>&gt;&gt; for each/first/last x [1 2 3] [val fst lst] -&gt; [
    if fst [print "first!"]
    print [value]
    if lst [print "last!"]
]

first!
1
2
3
last!
</code></pre>
<p>There could be a lambda shorthand for that too, maybe TUPLE!</p>
<pre><code>&gt;&gt; for each/first/last x [1 2 3] val.fst.lst -&gt; [
    if fst [print "first!"]
    print [value]
    if lst [print "last!"]
]

first!
1
2
3
last!
</code></pre>
<p>Just one of the kinds of axes to explore with generalized EACH.</p>
          <p><a href="https://forum.rebol.info/t/each-versus-for-each-and-for-all/678/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/each-versus-for-each-and-for-all/678/3</link>
        <pubDate>Sun, 22 Nov 2020 14:36:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-678-3</guid>
        <source url="https://forum.rebol.info/t/each-versus-for-each-and-for-all/678.rss">Each versus for-each and for-all</source>
      </item>
      <item>
        <title>Each versus for-each and for-all</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>This old post raises a good point about wanting access to both the position and value easily from the same loop.</p>
<p>The concept of assuming the names (value, index) is something definitely needed in Rebmu.  I'm a bit reticent to put it in a "core" function.  But we should make it trivially easy to make such operators if you want it.</p>
<p>I had a random brainstorm today about how EACH might be a generator.</p>
<pre><code>&gt;&gt; g: each x [1 2] [print ["running" x], x + 10]

&gt;&gt; g
running 1
== 11

&gt;&gt; g
running 2
== 12

&gt;&gt; g
null
</code></pre>
<p>A thought I had was we might then imagine FOR as something that calls a function until it returns NULL, and returns the last non-NULL thing.</p>
<pre><code>&gt;&gt; for each x [1 2] [print ["running" x], x + 10]
running 1
running 2
== 12
</code></pre>
<p>Then MAP could call the function until it returns NULL, but return the results:</p>
<pre><code>&gt;&gt; map each x [1 2] [print ["running" x], x + 10]
running 1
running 2
== [11 12]
</code></pre>
<p>This thought is definitely more "minecraft of programming"...breaking FOR and MAP and EACH down into generic bricks.</p>
<p>Though there are a couple of sticking points with it... e.g. it doesn't generalize arbitrarily to things like <strong>remove each</strong>...and if NULL is taken to signal "done" then it can't also signal BREAK.  But I'm now thinking maybe generators <em>can</em> return NULL if they speak a multi-return protocol...<a href="https://forum.rebol.info/t/multiple-returns-and-branching-could-it-unseat-voidification/1408">where NULL is augmented with "/BRANCHED"</a>.  That's looking really desirable now.</p>
<p>Makes for interesting possibilities:</p>
<pre><code>&gt;&gt; map generator [count-up x 3 [yield x], count-down 3 [yield x]]
== [1 2 3 3 2 1]
</code></pre>
<p>FOR would be similar to UNTIL .NULL?...but if you said <strong>until .null? [ask integer!]</strong> it would keep asking for integers until you canceled, then it would return NULL.  But <strong>for [ask integer!]</strong> would keep asking and then give you the last input.  <strong>map [ask integer!]</strong> would give you the list of integers.</p>
          <p><a href="https://forum.rebol.info/t/each-versus-for-each-and-for-all/678/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/each-versus-for-each-and-for-all/678/2</link>
        <pubDate>Fri, 20 Nov 2020 10:35:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-678-2</guid>
        <source url="https://forum.rebol.info/t/each-versus-for-each-and-for-all/678.rss">Each versus for-each and for-all</source>
      </item>
      <item>
        <title>Each versus for-each and for-all</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>In 8th, they have the *:each as a higher order function.</p>
<p>So, depending on whether it's being applied to a map, array, buffer, string it works like this:</p>
<pre><code>Buffer lambda b:each
</code></pre>
<p>So, here the buffer is iterated over and the index and value are placed on the stack for lambda to consume.</p>
<p>For-each neesd to create words, and for-all needs to reference the series by name which creates more visual clutter.</p>
<p>In VID lambdas had access to a similar functionality where <em>value</em> was available.</p>
<p>We could do the same:</p>
<pre><code>Each series [ code ] 
</code></pre>
<p>Where code has access to the words index and value of the series being traversed.</p>
          <p><a href="https://forum.rebol.info/t/each-versus-for-each-and-for-all/678/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/each-versus-for-each-and-for-all/678/1</link>
        <pubDate>Sat, 09 Jun 2018 23:47:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-678-1</guid>
        <source url="https://forum.rebol.info/t/each-versus-for-each-and-for-all/678.rss">Each versus for-each and for-all</source>
      </item>
  </channel>
</rss>

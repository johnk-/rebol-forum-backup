<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Anatomy of a ZIP scheme</title>
    <link>https://forum.rebol.info/t/anatomy-of-a-zip-scheme/160</link>
    <description>With increased exposure of built in compression routines, it&#39;s now feasible to write fairly succinct functions that can [ZIP/UNZIP](https://github.com/gchiu/Rebol3/blob/master/scripts/unzip.reb) (see also [Does Ren-C have zip and unzip?](/t/does-ren-c-have-zip-and-unzip/136)).

As always, rather than introduce new functions that would be complex in nature and PHPish in proliferation, I would see a ZIP scheme as the preferred way to interface with ZIP assets.

## Implementation Sketches

Here&#39;s some thoughts for how this might work:

    ; Opening

    archive: open zip:///Users/Chris/Archive.zip  ; short form maps to filesystem

    archive: open [
        scheme: &#39;zip
        source: %/Users/Chris/Archive.zip
    ]

    archive: open [
        scheme: &#39;zip  ; new empty archive
        source: #{}
    ]

    archive: open [
        scheme: &#39;zip  ; remote archive
        source: s3://a-bucket/archive.zip
    ]


    ; Extracting

    select archive %path/to/file.reb

    select archive [from folder %path/to/]  ; dialect for selecting multiple contained assets

    first next archive  ; port offers a series API to access contained assets


    ; Modifying

    append archive [%path/to/new.reb {Rebol []}]

    remove archive  ; removes an asset per the series API


    ; Saving

    close archive  ; updates using existing reference

    close rename archive %/Users/Chris/Archive-Copy.zip

    copy archive  ; returns binary copy of archive

Thoughts, critiques, suggestions, etc...</description>
    
    <lastBuildDate>Mon, 26 Jun 2017 03:26:43 +0000</lastBuildDate>
    <category>Modules</category>
    <atom:link href="https://forum.rebol.info/t/anatomy-of-a-zip-scheme/160.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Anatomy of a ZIP scheme</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I suppose I should have mentioned that this is similar to what I envisioned as the encap scheme.</p>
<pre><code>data: read encap://directory/file.dat
png: load encap://graphics/icon.png
</code></pre>
<p>etc.  So the encap scheme might be layered on top of this zip scheme, somehow.</p>
          <p><a href="https://forum.rebol.info/t/anatomy-of-a-zip-scheme/160/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/anatomy-of-a-zip-scheme/160/5</link>
        <pubDate>Mon, 26 Jun 2017 03:26:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-160-5</guid>
        <source url="https://forum.rebol.info/t/anatomy-of-a-zip-scheme/160.rss">Anatomy of a ZIP scheme</source>
      </item>
      <item>
        <title>Anatomy of a ZIP scheme</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Seems like a good idea to me, or even being able to sub-address things...</p>
<pre><code> data: read zip://wherever/something.zip/folder/file.dat
</code></pre>
<p>Still looking for grand-unifying-theory of ports, myself, though.</p>
          <p><a href="https://forum.rebol.info/t/anatomy-of-a-zip-scheme/160/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/anatomy-of-a-zip-scheme/160/4</link>
        <pubDate>Sun, 25 Jun 2017 23:44:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-160-4</guid>
        <source url="https://forum.rebol.info/t/anatomy-of-a-zip-scheme/160.rss">Anatomy of a ZIP scheme</source>
      </item>
      <item>
        <title>Anatomy of a ZIP scheme</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>I don't do any zipping to speak of but this sounds an interesting project.<br>
And I imagine that it would be useful for creating apks ( <a class="mention" href="/u/giuliolunati">@giuliolunati</a> ) and  epub documents.<br>
However, I'm at the bottom of a deep gravity well at present so can only watch!</p>
          <p><a href="https://forum.rebol.info/t/anatomy-of-a-zip-scheme/160/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/anatomy-of-a-zip-scheme/160/3</link>
        <pubDate>Sun, 25 Jun 2017 22:34:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-160-3</guid>
        <source url="https://forum.rebol.info/t/anatomy-of-a-zip-scheme/160.rss">Anatomy of a ZIP scheme</source>
      </item>
      <item>
        <title>Anatomy of a ZIP scheme</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>Alternatively as per my XML model, there I use an object to represent an XML document and the same approach could be used for ZIP archives:</p>
<pre><code>; Opening

archive: load-zip %/Users/Chris/Archive.zip ; or just LOAD with codecs

; Extracting

archive/select %path/to/file.reb

archive/select [from folder %path/to/]  ; dialect for selecting multiple contained assets


; Modifying

archive/insert %path/to/new.reb {Rebol []}

archive/delete %path/to/old.reb


; Saving

archive/save

archive/write %/Users/Chris/Archive-Copy.zip

archive/copy</code></pre>
          <p><a href="https://forum.rebol.info/t/anatomy-of-a-zip-scheme/160/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/anatomy-of-a-zip-scheme/160/2</link>
        <pubDate>Sun, 25 Jun 2017 22:15:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-160-2</guid>
        <source url="https://forum.rebol.info/t/anatomy-of-a-zip-scheme/160.rss">Anatomy of a ZIP scheme</source>
      </item>
      <item>
        <title>Anatomy of a ZIP scheme</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>With increased exposure of built in compression routines, it's now feasible to write fairly succinct functions that can <a href="https://github.com/gchiu/Rebol3/blob/master/scripts/unzip.reb" rel="nofollow noopener">ZIP/UNZIP</a> (see also <a href="/t/does-ren-c-have-zip-and-unzip/136">Does Ren-C have zip and unzip?</a>).</p>
<p>As always, rather than introduce new functions that would be complex in nature and PHPish in proliferation, I would see a ZIP scheme as the preferred way to interface with ZIP assets.</p>
<h2>Implementation Sketches</h2>
<p>Here's some thoughts for how this might work:</p>
<pre><code>; Opening

archive: open zip:///Users/Chris/Archive.zip  ; short form maps to filesystem

archive: open [
    scheme: 'zip
    source: %/Users/Chris/Archive.zip
]

archive: open [
    scheme: 'zip  ; new empty archive
    source: #{}
]

archive: open [
    scheme: 'zip  ; remote archive
    source: s3://a-bucket/archive.zip
]


; Extracting

select archive %path/to/file.reb

select archive [from folder %path/to/]  ; dialect for selecting multiple contained assets

first next archive  ; port offers a series API to access contained assets


; Modifying

append archive [%path/to/new.reb {Rebol []}]

remove archive  ; removes an asset per the series API


; Saving

close archive  ; updates using existing reference

close rename archive %/Users/Chris/Archive-Copy.zip

copy archive  ; returns binary copy of archive
</code></pre>
<p>Thoughts, critiques, suggestions, etc...</p>
          <p><a href="https://forum.rebol.info/t/anatomy-of-a-zip-scheme/160/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/anatomy-of-a-zip-scheme/160/1</link>
        <pubDate>Sun, 25 Jun 2017 22:09:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-160-1</guid>
        <source url="https://forum.rebol.info/t/anatomy-of-a-zip-scheme/160.rss">Anatomy of a ZIP scheme</source>
      </item>
  </channel>
</rss>

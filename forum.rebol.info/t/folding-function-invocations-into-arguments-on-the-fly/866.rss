<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Folding function invocations into arguments on-the-fly</title>
    <link>https://forum.rebol.info/t/folding-function-invocations-into-arguments-on-the-fly/866</link>
    <description>This idea emerged first in Rebmu, and is rather interesting.   The idea is that if a function has an argument intended to be used at least once (like a BLOCK! condition of a WHILE), and that argument starts with a WORD! or PATH! that looks up to an ACTION!...that its arguments be evaluated in one swoop, but captured into a specialized function.

So imagine if WHILE were changed such that:

    while [all [a b c]] [code]

Could be written equivalently as:

    while all [a b c] [code]

The machinery to do this is weird, but a fledgling implementation does exist.  It&#39;s the kind of thing used to implement a [similar trick in DOES](https://trello.com/c/KgwJRlyj), e.g. `z: does collect [keep x keep y]`.

To get it to work with something like this WHILE case, it has to become variadic.  Then it has to peek at its first argument, see that it is not a BLOCK! and that it looks up to an ACTION!.  Then it requests to create a fully-specialized version of that function based on the invocation, and treats that function as the argument.

Obviously this would break cases where you wanted the function to be called in order to supply the condition itself, e.g.

    while any [if foo [[x &lt; 10]] else [[x &gt; 20]]] [code]

Ordinary WHILE of today would run that ANY just once, get the BLOCK! to use as a condition, and then use that block on each iteration.  But one way of getting past this would be to use a GROUP!, thus suppressing the automatic specialization of the ANY:

    while (any [if foo [[x &lt; 10]] else [[x &gt; 20]]]) [code]

**Another major weakness is that it captures its arguments just once.**  So using the trick with a loop like WHILE doesn&#39;t do what you&#39;d think:

    while even? x [...]

It builds a call to even? using the value of x at the time it specializes it.  Then every subsequent call after that to the constructed function will use that value.

## So not great for looping, but still a useful mechanism

Being able to create a specialization just from seeing a call is a powerful ability, which hasn&#39;t quite found the right shape to expose to userspace yet.  I was thinking specialization might be what you get when you MAKE ACTION! from a GROUP!, e.g.

    &gt;&gt; ph: make action! (print &quot;Hello&quot;)
    &gt;&gt; ph
    Hello

Partial specialization is also a possibility:

    &gt;&gt; block: copy [a b c] 
    &gt;&gt; apb: make action! (append block)
    &gt;&gt; apb &lt;foo&gt;
    == [a b c &lt;foo&gt;]

I also have toyed with the idea that BLANK! (or void?) might be used to skip over spots:

    &gt;&gt; block: copy [a b c]
    &gt;&gt; apf: make action! (append _ &lt;foo&gt;)
    &gt;&gt; apf block
    == [a b c &lt;foo&gt;]

But in cases like building the weird WHILE above, what would need to happen is that a function would have to be able to generate a specialization on the fly from a VARARGS!.

I&#39;m not sure exactly when this mechanism is appropriate to use outside of code golf.  DOES seems pretty harmless so far.  But turning the in-the-box WHILE into a quoting variadic to save a couple of brackets would likely be a bad idea.

Either way, it&#39;s worth having in the toolbox, and good to stress the system a bit.</description>
    
    <lastBuildDate>Sat, 20 Oct 2018 06:45:18 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/folding-function-invocations-into-arguments-on-the-fly/866.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Folding function invocations into arguments on-the-fly</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="866" data-full="true">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/gchiu/40/22_2.png" class="avatar"> gchiu:</div>
<blockquote>
<p>Is this an optimization that is going to be used to compile ren-c code?</p>
</blockquote>
</aside>
<p>It's purely an attempt to try and cut down the number of characters used in source.</p>
<p>The techniques used to do it add processing...though if done correctly, it shouldn't add very <em>much</em> processing.</p>
<p>It's done in a fairly circuitious way at the moment, but things tend to improve a lot over their first cut implementations with time.</p>
          <p><a href="https://forum.rebol.info/t/folding-function-invocations-into-arguments-on-the-fly/866/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/folding-function-invocations-into-arguments-on-the-fly/866/3</link>
        <pubDate>Sat, 20 Oct 2018 06:45:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-866-3</guid>
        <source url="https://forum.rebol.info/t/folding-function-invocations-into-arguments-on-the-fly/866.rss">Folding function invocations into arguments on-the-fly</source>
      </item>
      <item>
        <title>Folding function invocations into arguments on-the-fly</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>Is this an optimization that is going to be used to compile ren-c code?</p>
          <p><a href="https://forum.rebol.info/t/folding-function-invocations-into-arguments-on-the-fly/866/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/folding-function-invocations-into-arguments-on-the-fly/866/2</link>
        <pubDate>Thu, 18 Oct 2018 19:55:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-866-2</guid>
        <source url="https://forum.rebol.info/t/folding-function-invocations-into-arguments-on-the-fly/866.rss">Folding function invocations into arguments on-the-fly</source>
      </item>
      <item>
        <title>Folding function invocations into arguments on-the-fly</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>This idea emerged first in Rebmu, and is rather interesting.   The idea is that if a function has an argument intended to be used at least once (like a BLOCK! condition of a WHILE), and that argument starts with a WORD! or PATH! that looks up to an ACTION!...that its arguments be evaluated in one swoop, but captured into a specialized function.</p>
<p>So imagine if WHILE were changed such that:</p>
<pre><code>while [all [a b c]] [code]
</code></pre>
<p>Could be written equivalently as:</p>
<pre><code>while all [a b c] [code]
</code></pre>
<p>The machinery to do this is weird, but a fledgling implementation does exist.  It's the kind of thing used to implement a <a href="https://trello.com/c/KgwJRlyj" rel="nofollow noopener">similar trick in DOES</a>, e.g. <code>z: does collect [keep x keep y]</code>.</p>
<p>To get it to work with something like this WHILE case, it has to become variadic.  Then it has to peek at its first argument, see that it is not a BLOCK! and that it looks up to an ACTION!.  Then it requests to create a fully-specialized version of that function based on the invocation, and treats that function as the argument.</p>
<p>Obviously this would break cases where you wanted the function to be called in order to supply the condition itself, e.g.</p>
<pre><code>while any [if foo [[x &lt; 10]] else [[x &gt; 20]]] [code]
</code></pre>
<p>Ordinary WHILE of today would run that ANY just once, get the BLOCK! to use as a condition, and then use that block on each iteration.  But one way of getting past this would be to use a GROUP!, thus suppressing the automatic specialization of the ANY:</p>
<pre><code>while (any [if foo [[x &lt; 10]] else [[x &gt; 20]]]) [code]
</code></pre>
<p><strong>Another major weakness is that it captures its arguments just once.</strong>  So using the trick with a loop like WHILE doesn't do what you'd think:</p>
<pre><code>while even? x [...]
</code></pre>
<p>It builds a call to even? using the value of x at the time it specializes it.  Then every subsequent call after that to the constructed function will use that value.</p>
<h2>So not great for looping, but still a useful mechanism</h2>
<p>Being able to create a specialization just from seeing a call is a powerful ability, which hasn't quite found the right shape to expose to userspace yet.  I was thinking specialization might be what you get when you MAKE ACTION! from a GROUP!, e.g.</p>
<pre><code>&gt;&gt; ph: make action! (print "Hello")
&gt;&gt; ph
Hello
</code></pre>
<p>Partial specialization is also a possibility:</p>
<pre><code>&gt;&gt; block: copy [a b c] 
&gt;&gt; apb: make action! (append block)
&gt;&gt; apb &lt;foo&gt;
== [a b c &lt;foo&gt;]
</code></pre>
<p>I also have toyed with the idea that BLANK! (or void?) might be used to skip over spots:</p>
<pre><code>&gt;&gt; block: copy [a b c]
&gt;&gt; apf: make action! (append _ &lt;foo&gt;)
&gt;&gt; apf block
== [a b c &lt;foo&gt;]
</code></pre>
<p>But in cases like building the weird WHILE above, what would need to happen is that a function would have to be able to generate a specialization on the fly from a VARARGS!.</p>
<p>I'm not sure exactly when this mechanism is appropriate to use outside of code golf.  DOES seems pretty harmless so far.  But turning the in-the-box WHILE into a quoting variadic to save a couple of brackets would likely be a bad idea.</p>
<p>Either way, it's worth having in the toolbox, and good to stress the system a bit.</p>
          <p><a href="https://forum.rebol.info/t/folding-function-invocations-into-arguments-on-the-fly/866/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/folding-function-invocations-into-arguments-on-the-fly/866/1</link>
        <pubDate>Thu, 18 Oct 2018 15:08:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-866-1</guid>
        <source url="https://forum.rebol.info/t/folding-function-invocations-into-arguments-on-the-fly/866.rss">Folding function invocations into arguments on-the-fly</source>
      </item>
  </channel>
</rss>

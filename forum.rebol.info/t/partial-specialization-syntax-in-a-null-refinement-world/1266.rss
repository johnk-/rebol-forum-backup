<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Partial Specialization Syntax in a NULL-refinement world</title>
    <link>https://forum.rebol.info/t/partial-specialization-syntax-in-a-null-refinement-world/1266</link>
    <description>SPECIALIZE is used to make a version of a function that has some of its arguments fixed.  The syntax I first came up with (which we have been using up to this day) takes a block that it would bind into a &quot;FRAME!&quot; for the function.  So:

    &gt;&gt; a10: specialize &#39;append [value: 4 + 6]

    &gt;&gt; a10 [a b c]
    == [a b c 10]

Not only do you get to set the parameters, you also have evaluation on your side... like when you make an object.  Here it does an addition for demonstration purposes, but it could be arbitrary code with branching and switching/etc.  The question is which parameters are assigned values and which are not.

Since frames are like OBJECT!s that contain keys that correspond to arguments, the idea was that anything in this frame that wound up NULL would be considered &quot;unspecialized&quot;.  So function calls would gather such arguments at the callsite as normal (e.g. the SERIES parameter of append, taken here as [a b c] normally).  But since the VALUE parameter was set to 10 and hence not-NULL, it would not be gathered...nor typechecked.  (The type checking occurs only at specialization time, helping performance.)

## But...what about when arguments are *intentionally* NULL?

Er, yeah.  There was no good answer for this, so you&#39;d have to do tricks.  For example: first SPECIALIZE a parameter to a non-null value, and then ADAPT with code that turns around and nulls it out each time the function gets called:

    an: adapt (specialize &#39;append [value: _]) [value: null]

That&#39;s inefficient and not too pretty, but it didn&#39;t come up often.  With a few exceptions like REPLACE to a NULL being a way to delete things, you usually didn&#39;t want to pass null parameters.  So solving it was a back-burner issue.

**But refinements offered &quot;partial&quot; specializations.**  This was the idea of saying that you had a routine like APPEND which might have a /PART parameter, and you wanted to say that there was a /PART *but not say what it is*.  The intent was a variant  of APPEND which took 3 arguments instead of 2, and just didn&#39;t require you to say /PART.

The notation for that had originally been:

    &gt;&gt; ap: specialize &#39;append [part: true]

    &gt;&gt; ap [a b c] [d e f] 2
    == [a b c d e]

**This worked because refinements used to have arguments.** The argument to /PART (named LENGTH in R3-Alpha) was still NULL, even though PART was true.  So partial specialization was encoded by virtue of having a value for the refinement but not the argument.

**Even then, there were problems with *order***.  If you partially specialized both **part: true** and **dup: true**, which would be gathered first at the callsite?  This was cleverly solved by offering an alternative way to do it, via specializing a PATH!:

     &gt;&gt; apd: specialize &#39;append/part/dup []

     &gt;&gt; apd [a b c] [d e f g] 2 3
     == [a b c d e d e d e]   ; /PART 2, /DUP 3

      &gt;&gt; adp: specialize &#39;append/dup/part []

      &gt;&gt; adp [a b c] [d e f g] 2 3
      == [a b c d e f d e f]  ; /DUP 2, /PART 3

**Now that [refinements are their own arguments](https://forum.rebol.info/t/pure-and-refined-simplifying-refinements-to-one-or-zero-args/1120), we&#39;re in a situation where this method for partial specialization still works, but the other doesn&#39;t.**  You can&#39;t say **part: true** anymore because the PART argument itself holds the number or series position that the partial is calculated relative to. 

*(I will point out that killing off the other partial specialization method is a good example of how the new refinement model purifies things, by eliminating a fuzzy guessing model where it had to count how many refinements you had specialized inside the block and whether you&#39;d also specialized the arguments, and error if you tried more than one partial specialization at a time.)*

## How to remove a refinement from the interface but NULL it?

Let&#39;s imagine now that we want to make a version  of append that does not offer a /PART refinement, and yet still hasn&#39;t pinned it down to a value.

We could try a riff on the adapt of a specialization.  Pick some random /PART that type checks to specialize with, and then null it out when the call happens:

     a-no-part: adapt (specialize &#39;append [part: 1020]) [part: null]

That will always act like APPEND with no /PART, and in the HELP it does not list /PART as an available refinement.

**This is a pain and not efficient.**  You have to know the types the refinement takes, pick some arbitrary random value compatible with that (which could change if you change the legal types on the specialized function, and it doesn&#39;t seem that should break the intention of a specialization removal).  Then you&#39;re wasting runtime nulling it out on every call with a useless additional layer of ADAPT-ation.

**Worst case scenario, we need a counter to AUGMENT whose job is to *remove* parameters.**  (ABRIDGE?  DIMINISH?)  But it seems like that is SPECIALIZE&#39;s domain, since it removes other parameters when it says what value they have...why can&#39;t we find a syntax to do it when it says it&#39;s &quot;fixed at no value&quot;?

As a random example, we might come up with a wacky variation on the path notation:

     a-no-part: specialize &#39;append/[part] []

So maybe if it sees a word in a BLOCK! in the path, that means &quot;remove from the interface and set to null/unused&quot;.

We could be less creative e.g.:

    a-no-part: specialize/remove &#39;append [] [part]

## What about normal parameters (and reordering?)

Whatever mechanism we come up with here needs to work with ordinary arguments, too.  And something I&#39;ve wondered is if pathing with ordinary arguments might tie into some kind of reordering scheme:

    &gt;&gt; append/series 10 [a b c]  ; imagine pushes /SERIES to be last parameter
    == [a b c] 10

If we accept this, then strange ideas like **specialize &#39;append/[value] [...]** meaning &quot;remove value parameter but set it to NULL&quot; folds into the notion that you can just name any argument like this.  We can also imagine the idea of creating variations of a function where a previously mandatory argument becomes optional.

    &gt;&gt; apmaybe: unrequire &#39;append [value]

    &gt;&gt; apmaybe [a b c]
    == [a b c]

    &gt;&gt; apmaybe/value [a b c] 10
    == [a b c 10]

My point in bringing this up is that the one-parameter-per-name concept makes refinements and ordinary arguments have more in common.  So we can imagine the mechanism to remove a refinement from the interface (while still leaving it null) working on ordinary arguments that want to be fixed at null as well.

*This is by no means unsolvable and we have a lot of the mechanics for doing it.*  It&#39;s just a question of what you write at source level, and can we do something nice that finesses it instead of looking like a mess.</description>
    
    <lastBuildDate>Thu, 05 Mar 2020 02:43:07 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/partial-specialization-syntax-in-a-null-refinement-world/1266.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Partial Specialization Syntax in a NULL-refinement world</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Yes, fixed... and that helps... though...<br>
...of course<br>
...if you can fix or dream up designs here that solve the underlying problems described, that would be useful.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>I have this feeling something will click and the whole of how parameters/frames/nulls/reordering works will clear up.  The pieces seem to be in place.  It's a lot closer than it could possibly have been before NULL or before refinements-are-their-arguments.</p>
          <p><a href="https://forum.rebol.info/t/partial-specialization-syntax-in-a-null-refinement-world/1266/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/partial-specialization-syntax-in-a-null-refinement-world/1266/3</link>
        <pubDate>Thu, 05 Mar 2020 02:43:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1266-3</guid>
        <source url="https://forum.rebol.info/t/partial-specialization-syntax-in-a-null-refinement-world/1266.rss">Partial Specialization Syntax in a NULL-refinement world</source>
      </item>
      <item>
        <title>Partial Specialization Syntax in a NULL-refinement world</title>
        <dc:creator><![CDATA[Mark-hi]]></dc:creator>
        <description><![CDATA[
            <p>I think you meant == [a b c 10] in that last code example ...</p>
          <p><a href="https://forum.rebol.info/t/partial-specialization-syntax-in-a-null-refinement-world/1266/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/partial-specialization-syntax-in-a-null-refinement-world/1266/2</link>
        <pubDate>Thu, 05 Mar 2020 00:09:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1266-2</guid>
        <source url="https://forum.rebol.info/t/partial-specialization-syntax-in-a-null-refinement-world/1266.rss">Partial Specialization Syntax in a NULL-refinement world</source>
      </item>
      <item>
        <title>Partial Specialization Syntax in a NULL-refinement world</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>SPECIALIZE is used to make a version of a function that has some of its arguments fixed.  The syntax I first came up with (which we have been using up to this day) takes a block that it would bind into a "FRAME!" for the function.  So:</p>
<pre><code>&gt;&gt; a10: specialize 'append [value: 4 + 6]

&gt;&gt; a10 [a b c]
== [a b c 10]
</code></pre>
<p>Not only do you get to set the parameters, you also have evaluation on your side... like when you make an object.  Here it does an addition for demonstration purposes, but it could be arbitrary code with branching and switching/etc.  The question is which parameters are assigned values and which are not.</p>
<p>Since frames are like OBJECT!s that contain keys that correspond to arguments, the idea was that anything in this frame that wound up NULL would be considered "unspecialized".  So function calls would gather such arguments at the callsite as normal (e.g. the SERIES parameter of append, taken here as [a b c] normally).  But since the VALUE parameter was set to 10 and hence not-NULL, it would not be gathered...nor typechecked.  (The type checking occurs only at specialization time, helping performance.)</p>
<h2>But...what about when arguments are <em>intentionally</em> NULL?</h2>
<p>Er, yeah.  There was no good answer for this, so you'd have to do tricks.  For example: first SPECIALIZE a parameter to a non-null value, and then ADAPT with code that turns around and nulls it out each time the function gets called:</p>
<pre><code>an: adapt (specialize 'append [value: _]) [value: null]
</code></pre>
<p>That's inefficient and not too pretty, but it didn't come up often.  With a few exceptions like REPLACE to a NULL being a way to delete things, you usually didn't want to pass null parameters.  So solving it was a back-burner issue.</p>
<p><strong>But refinements offered "partial" specializations.</strong>  This was the idea of saying that you had a routine like APPEND which might have a /PART parameter, and you wanted to say that there was a /PART <em>but not say what it is</em>.  The intent was a variant  of APPEND which took 3 arguments instead of 2, and just didn't require you to say /PART.</p>
<p>The notation for that had originally been:</p>
<pre><code>&gt;&gt; ap: specialize 'append [part: true]

&gt;&gt; ap [a b c] [d e f] 2
== [a b c d e]
</code></pre>
<p><strong>This worked because refinements used to have arguments.</strong> The argument to /PART (named LENGTH in R3-Alpha) was still NULL, even though PART was true.  So partial specialization was encoded by virtue of having a value for the refinement but not the argument.</p>
<p><strong>Even then, there were problems with <em>order</em></strong>.  If you partially specialized both <strong>part: true</strong> and <strong>dup: true</strong>, which would be gathered first at the callsite?  This was cleverly solved by offering an alternative way to do it, via specializing a PATH!:</p>
<pre><code> &gt;&gt; apd: specialize 'append/part/dup []

 &gt;&gt; apd [a b c] [d e f g] 2 3
 == [a b c d e d e d e]   ; /PART 2, /DUP 3

  &gt;&gt; adp: specialize 'append/dup/part []

  &gt;&gt; adp [a b c] [d e f g] 2 3
  == [a b c d e f d e f]  ; /DUP 2, /PART 3
</code></pre>
<p><strong>Now that <a href="https://forum.rebol.info/t/pure-and-refined-simplifying-refinements-to-one-or-zero-args/1120">refinements are their own arguments</a>, we're in a situation where this method for partial specialization still works, but the other doesn't.</strong>  You can't say <strong>part: true</strong> anymore because the PART argument itself holds the number or series position that the partial is calculated relative to.</p>
<p><em>(I will point out that killing off the other partial specialization method is a good example of how the new refinement model purifies things, by eliminating a fuzzy guessing model where it had to count how many refinements you had specialized inside the block and whether you'd also specialized the arguments, and error if you tried more than one partial specialization at a time.)</em></p>
<h2>How to remove a refinement from the interface but NULL it?</h2>
<p>Let's imagine now that we want to make a version  of append that does not offer a /PART refinement, and yet still hasn't pinned it down to a value.</p>
<p>We could try a riff on the adapt of a specialization.  Pick some random /PART that type checks to specialize with, and then null it out when the call happens:</p>
<pre><code> a-no-part: adapt (specialize 'append [part: 1020]) [part: null]
</code></pre>
<p>That will always act like APPEND with no /PART, and in the HELP it does not list /PART as an available refinement.</p>
<p><strong>This is a pain and not efficient.</strong>  You have to know the types the refinement takes, pick some arbitrary random value compatible with that (which could change if you change the legal types on the specialized function, and it doesn't seem that should break the intention of a specialization removal).  Then you're wasting runtime nulling it out on every call with a useless additional layer of ADAPT-ation.</p>
<p><strong>Worst case scenario, we need a counter to AUGMENT whose job is to <em>remove</em> parameters.</strong>  (ABRIDGE?  DIMINISH?)  But it seems like that is SPECIALIZE's domain, since it removes other parameters when it says what value they have...why can't we find a syntax to do it when it says it's "fixed at no value"?</p>
<p>As a random example, we might come up with a wacky variation on the path notation:</p>
<pre><code> a-no-part: specialize 'append/[part] []
</code></pre>
<p>So maybe if it sees a word in a BLOCK! in the path, that means "remove from the interface and set to null/unused".</p>
<p>We could be less creative e.g.:</p>
<pre><code>a-no-part: specialize/remove 'append [] [part]
</code></pre>
<h2>What about normal parameters (and reordering?)</h2>
<p>Whatever mechanism we come up with here needs to work with ordinary arguments, too.  And something I've wondered is if pathing with ordinary arguments might tie into some kind of reordering scheme:</p>
<pre><code>&gt;&gt; append/series 10 [a b c]  ; imagine pushes /SERIES to be last parameter
== [a b c] 10
</code></pre>
<p>If we accept this, then strange ideas like <strong>specialize 'append/[value] [...]</strong> meaning "remove value parameter but set it to NULL" folds into the notion that you can just name any argument like this.  We can also imagine the idea of creating variations of a function where a previously mandatory argument becomes optional.</p>
<pre><code>&gt;&gt; apmaybe: unrequire 'append [value]

&gt;&gt; apmaybe [a b c]
== [a b c]

&gt;&gt; apmaybe/value [a b c] 10
== [a b c 10]
</code></pre>
<p>My point in bringing this up is that the one-parameter-per-name concept makes refinements and ordinary arguments have more in common.  So we can imagine the mechanism to remove a refinement from the interface (while still leaving it null) working on ordinary arguments that want to be fixed at null as well.</p>
<p><em>This is by no means unsolvable and we have a lot of the mechanics for doing it.</em>  It's just a question of what you write at source level, and can we do something nice that finesses it instead of looking like a mess.</p>
          <p><a href="https://forum.rebol.info/t/partial-specialization-syntax-in-a-null-refinement-world/1266/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/partial-specialization-syntax-in-a-null-refinement-world/1266/1</link>
        <pubDate>Wed, 04 Mar 2020 15:24:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1266-1</guid>
        <source url="https://forum.rebol.info/t/partial-specialization-syntax-in-a-null-refinement-world/1266.rss">Partial Specialization Syntax in a NULL-refinement world</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>2018 Retrospective: Elevating the Art</title>
    <link>https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992</link>
    <description>It seems like only a year ago that I was in a hotel in San Antonio [doing a write-up](https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443) that summarized Ren-C from its beginnings in early 2015, up until January 2018.

That&#39;s because it *was* a year ago.  Here we are again.  Whether you&#39;re here frequently, or only poke in when you can find the time...Happy New Year to you!!!  

---

I joked the other day to someone about why I worked on Rebol.  Said I: &quot;well, Forth was just TOO popular.  It wasn&#39;t cool anymore once everyone was doing it.  I wanted to go more indie/underground, away from all those *crowds*.&quot;  :stuck_out_tongue: 

But on the positive side of being such a small group, **I hope you feel like you&#39;re getting to play an important part in defining something you can be proud of--that makes you happy and makes you think--that will hopefully bring that same feeling to others one day.**  And you *are* making a difference.  You&#39;re making a difference to *me* (hopefully it&#39;s bigger than just that, but I can promise it&#39;s at *least* that!)

---

## First thing&#39;s first: a Vision Statement and Motto Re-cap

In film school they emphasized the importance of finding a short essential summary of your project.  When people wanted to make the movie &quot;Alien&quot;, they were pitching it around Hollywood simply as *&quot;Jaws...IN SPACE&quot;*.  Having an almost cartoonishly short vision statement was a touchstone for everyone working on it to be on the same page; what defines success, *how will we even know if we did succeed*.

So I&#39;ve dug my heels in on **&quot;The Minecraft of Programming&quot;**.  Because I want people to feel that sense of uniformity and texture.  A visceral relationship between you and the evaluator that feels like a wide open world, with all the satisfaction of [LEGO back when LEGO cared about design](https://www.reddit.com/r/DesignPorn/comments/7td00q/xpost_this_lego_ad/) or [a spirograph](https://www.fatbraintoys.com/toy_companies/kahootz/the_original_spirograph_deluxe_set.cfm).  (It was actually DocKimbel who sent me that LEGO ad, so there should be some level at which we are all on the same page about this kind of thing.)

So that&#39;s my version of a vision statement.  I don&#39;t think this is at odds with Carl&#39;s &quot;putting the personal back in personal computing&quot; phraseology.  It&#39;s complementary.

But I noticed also this year, that my catch-phrase [from circa 2015](https://trello.com/c/EeObOLam)...&quot;Modify With Confidence&quot;, wasn&#39;t something I was saying anymore.  But I don&#39;t say it for the best of reasons: we take it for granted that the interpreter can adapt and change without exploding.

So moving on...the new motto I&#39;ve used in 2018 is **&quot;Elevating the Art&quot;**.

The tail end of 2017 introduced a fledgling concept called &quot;invisibles&quot;.  I was egged on by @MarkEye to implement something I&#39;d flirted with as a concept to make COMMENTs evaluator-neutral.  Little did I know it would open doors to solutions to problems that seemed nothing to do with commenting.  When you looked closer you realized the mechanism was generic and extremely powerful, it is a gift that keeps giving.

I bring up invisibles as a watershed event--but not just for their functionality.  Also *that it was profound and could happen overnight*.  A conversation in chat was followed not by more weeks of chat and then nothing.  It went from thought to action immediately.

2018 followed suit, with features that moved at the speed of thought.  I said that Ren-C&#39;s development was planned so it could speed up vs. slow down.  Our limitations are the limits of our ability to fully articulate what we want...not the limits of a codebase [that had been stretched too far beyond its means](https://forum.rebol.info/t/back-to-personal-computing/186/5).

Things would &quot;just happen&quot;:

* A first cut of [CONST and MUTABLE](https://forum.rebol.info/t/source-mutability-const-and-mutable/976) was committed just a couple weeks ago.

* Right after that, doubled groups gave [neat new powers to COMPOSE](https://forum.rebol.info/t/double-your-pleasure-double-your-fun/968), and solved a whole branch of issues related to conditionality in PARSE.

* COLLECT-LINES and COLLECT-TEXT [showed up in an afternoon](https://forum.rebol.info/t/collect-lines-an-adaptation-story/945), demonstrating a creative use of ADAPT.

* At one point SHOVE **-&gt;** came on the scene to [settle enfix dispatch for paths](https://forum.rebol.info/t/letting-go-of-enfix-path-dreams-but-fixing-it-with-magic/794)...an old problem that had been a concern for me since the beginning of looking at the evaluator.

I don&#39;t want to keep going with a blow-by-blow of every interesting thing that happened, just read the posts or the commit log.  But there&#39;s a pattern here.  And it&#39;s a pattern that is showing no signs of slowing: just last week, I came up with a scheme to implement &quot;lit bit&quot;, the arbitrary level of escaping per value.  *(not quite finished, but it&#39;s remarkably close.)*

Time and again, things that once perhaps we could talk about--but have no clue how it could be done--those things are being done what seems like overnight.  I swear the changes are **elevating the art** of programming in Rebol.  Once people start using these features, they will realize they won&#39;t want to go back.

To me, the most interesting things that happened were things I didn&#39;t see coming.  So I wanted to talk about how well that&#39;s gone before hitting some of the bullet points from last year&#39;s post.  But, those bullet points were written down, so let&#39;s go over them.

## libRebol

Progress here has been *very* notable.  I don&#39;t think there&#39;s any C-based API out there quite like it, letting you mix up values and strings so smoothly.

I&#39;ve kind of outdone myself.  It&#39;s actually giving me a bit (just a bit) of empathy for those who are skeptics of C++, because just about every positive feature of RenCpp has been rethought in plain old C...and done even better.  The limitations forced it to a kind of simplicity and elegance that I think is going to please people.

Some big cloudy questions have been hammered out...and the biggest thing was engineering a solution to JavaScript promises in order to get [the illusion of synchronous interaction with the browser DOM](https://forum.rebol.info/t/on-giving-librebol-js-more-powers-than-javascript/849).  We have &quot;javascript natives&quot; now...functions whose specs are BLOCK!s and whose bodies are TEXT! of JS code using the API, including the &quot;AWAITER&quot; for simulated synchronous-ness.

&gt; **UPDATE:** [A WASM-based web console has been implemented](https://forum.rebol.info/t/web-repl-now-uses-console-extension/1064), and is now considered the most critical build for the near future!

The weakest areas are in exception handling and throws.  Part of what makes that hard is that it&#39;s an intrinsically hard problem in languages.  But I want to see it get shored up so we&#39;re at least no worse than any other language about this.

## UTF-8 Everywhere

While the branch has only been partially committed with some of the groundwork for it, I actually got [rather far with this](https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374/4?u=hostilefork).  There are some hitches regarding what it does to performance in PARSE, that I want to get straight.

Every time I have to merge this branch it&#39;s a pain.  I&#39;d like to get it committed, and maybe I can if we are willing to say that during a PARSE, the only way you can modify the input series is if you use parse instructions (CHANGE, INSERT, REMOVE) to do it, vs. code in a GROUP! changing it arbitrarily.  We need to talk about that.

Point is: Yes, it&#39;s still happening.  And the API has been strongly influenced by experience gained developing it so far.

## Derived Binding

Unless someone tells me otherwise, it seems to work. Code that would be intractable in Rebol2/R3-Alpha/Red can be quite zippy.  If you want to put your head around the following, be my guest:

    o-big: make object! collect [
        repeat n 256 [
            ;
            ; var-1: 1
            ; var-2: 2
            ; ...
            ; var-256: 256
            ;
            keep compose/only [
                (to set-word! unspaced [&quot;var-&quot; n]) (n)
            ]
        ]
        repeat n 256 [
            ;
            ; fun-1: method [] [var-1]
            ; fun-2: method [] [var-1 + var-2]
            ; ...
            ; fun-256: method [] [var-1 + var-2 ... + var-256]
            ;
            keep compose/only [
                (to set-word! unspaced [&quot;meth-&quot; n]) method [] (collect [
                    keep &#39;var-1
                    repeat i n - 1 [
                        keep compose [
                            + (to word! unspaced [&quot;var-&quot; i + 1])
                        ]
                    ]
                ])
            ]
        ]
    ]

    repeat i 2048 [
        derived: make o-big [var-1: 100000 + i]
        if derived/meth-255 &lt;&gt; 132639 + i [
            fail &quot;This should not happen.&quot;
        ]
    ]

    print &quot;Success!&quot;

The techniques that make this tractable are very clever--and are another example of the &quot;art being elevated&quot;.  And I hope the mechanics open doors to solutions to other kinds of problems...like threading context through the stack for parse rules, etc.

## Rebmu

Honestly, Rebmu didn&#39;t get the attention I&#39;d wanted to give it.  You&#39;d think it would be the &quot;fun&quot; thing--so it would be like goofing off, and I&#39;d do it before other more &quot;serious&quot; work.  But in truth, every time I get going on a feature there it shifts my attention back to developing some feature on the interpreter.

Bits of it feed back a little at a time.  For instance, there&#39;s some interesting functionality in DOES now that grabs the word after it and specializes that function:

    x: 1
    foo: does catch [
         if x = 1 [throw &lt;one&gt;]
         print &quot;Foo!&quot;
         throw &lt;other&gt;
    ]

    &gt;&gt; foo
    &lt;one&gt;

    &gt;&gt; x: 2

    &gt;&gt; foo
    Foo!
    &lt;other&gt;

That came directly from work on Rebmu.  Maybe this seems like a frivolous way to avoid one pair of brackets (e.g. two less characters than **does [catch [...]]**).  But as you see with it being used with CATCH here, it actually eases the burden of DOES not having its own RETURN.  It makes that more palatable, and there&#39;s good reasons why it *shouldn&#39;t* have its own return.

So I haven&#39;t forgotten about Rebmu--these points feed back into the system design.  I&#39;ll try and set aside more time for it in 2019--it&#39;s one of the things I want you to be able to boot up easily in the browser console.

## Debugging

Sadly, stepwise debugging didn&#39;t come online this year.  :bug:

It&#39;s critical that whatever methodology the debugger uses, it needs to be able to reuse 90% of it based on whether it&#39;s in the browser or in a native console.  I don&#39;t want to write *two* debuggers.  :-/  Pushing us a little further down the road was one important accomplishment: the console has been factored into an extension.  That&#39;s good news, as one of the big debugger issues is how to reuse the console in a nested way when a breakpoint happens.

I want to see the debugger and console and such be in usermode as much as possible, so I&#39;m trying to fit the pieces together so that can be the case.  Rushing it and doing it wrong wouldn&#39;t be very prudent.  But there&#39;s enough pieces of it there that are close to working that the concerns it brings up are always in mind.

## TLS 1.2

This wasn&#39;t on the list, and I&#39;d really hoped someone else would do it.  But the payment processing association deprecated TLS 1.0 this year, threatening any website that still used 1.0 with a negative security rating score.  That created an extremely strong incentive for people to update, and it was getting to where Rebol couldn&#39;t talk to very many sites anymore.

So I read the darn crypto spec and patched it up.  Super special thanks to @BlackATTR for sponsoring the work, making me feel less grumpy about having had to do it.  :-)  @iArnold chipped in a few dollars as well.

## ... and what will 2019 be ... ?  BETA/ONE

I don&#39;t make promises often (ever?) but here we go: Beta/One will release in 2019.

Clearly it won&#39;t be this month.  And I actually could have a lot of non-Rebol things to do in Q1, so who knows exactly when.

But we&#39;ve got to get a demo/tutorial online that can be selling itself 24 hours a day...worldwide.  That&#39;s the deliverable, and this is the year for it.  Anything that anyone can do to help get there would be greatly appreciated!  And one of the biggest things you can do is help think through things right here, on this forum (or in chat).

Happy 2019!  Let&#39;s do this!</description>
    
    <lastBuildDate>Sat, 05 Jan 2019 16:03:57 +0000</lastBuildDate>
    <category>Announcements</category>
    <atom:link href="https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>2018 Retrospective: Elevating the Art</title>
        <dc:creator><![CDATA[Mark-hi]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="5" data-topic="992">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>TCC integration has been advancing and we are probably not far from a bootstrap using only that (a tcc-powered Rebol that is the only tool you'd need on disk to build Rebol--no GNU make--no nothing else)...if that interests you, as well...more hands would help.</p>
</blockquote>
</aside>
<p>Duper awesome, I am even MORE interested in tcc-only. Dependency minimalist, me. I hope to be able to contribute in this direction very much, thanks!</p>
          <p><a href="https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992/6</link>
        <pubDate>Sat, 05 Jan 2019 16:03:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-992-6</guid>
        <source url="https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992.rss">2018 Retrospective: Elevating the Art</source>
      </item>
      <item>
        <title>2018 Retrospective: Elevating the Art</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="4" data-topic="992">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/mark-hi/40/212_2.png" class="avatar"> Mark-hi:</div>
<blockquote>
<p>I have a huge interest in using PARSE for lexing</p>
</blockquote>
</aside>
<p>TCC integration has been advancing and we are probably not far from a bootstrap using only that (a tcc-powered Rebol that is the only tool you'd need on disk to build Rebol--no GNU make--no nothing else)...if that interests you, as well...more hands would help.</p>
          <p><a href="https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992/5</link>
        <pubDate>Fri, 04 Jan 2019 17:52:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-992-5</guid>
        <source url="https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992.rss">2018 Retrospective: Elevating the Art</source>
      </item>
      <item>
        <title>2018 Retrospective: Elevating the Art</title>
        <dc:creator><![CDATA[Mark-hi]]></dc:creator>
        <description><![CDATA[
            <p>Awesome job as usual HF. Really looking forward to Beta/One.<br>
Will try to be both more supportive and more productive in 2019.<br>
(May not be your top priority, but I have a huge interest in using PARSE for lexing.)</p>
          <p><a href="https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992/4</link>
        <pubDate>Thu, 03 Jan 2019 20:51:10 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-992-4</guid>
        <source url="https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992.rss">2018 Retrospective: Elevating the Art</source>
      </item>
      <item>
        <title>2018 Retrospective: Elevating the Art</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>Best wishes for all, and this will definitely be something good.<br>
Personally I am getting up to understanding a few more things and there also will be progress alongside this.<br>
I will keep on to continue my (moral) support!</p>
          <p><a href="https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992/3</link>
        <pubDate>Thu, 03 Jan 2019 08:02:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-992-3</guid>
        <source url="https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992.rss">2018 Retrospective: Elevating the Art</source>
      </item>
      <item>
        <title>2018 Retrospective: Elevating the Art</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>W00t!! Great year, transformative progress! Bravissimo <a class="mention" href="/u/hostilefork">@hostilefork</a>!</p>
<p>Let’s see what kind of next-level art,  minekraftwerk we can make happen for Beta/One in 2019!!</p>
          <p><a href="https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992/2</link>
        <pubDate>Wed, 02 Jan 2019 23:34:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-992-2</guid>
        <source url="https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992.rss">2018 Retrospective: Elevating the Art</source>
      </item>
      <item>
        <title>2018 Retrospective: Elevating the Art</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>It seems like only a year ago that I was in a hotel in San Antonio <a href="https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443">doing a write-up</a> that summarized Ren-C from its beginnings in early 2015, up until January 2018.</p>
<p>That's because it <em>was</em> a year ago.  Here we are again.  Whether you're here frequently, or only poke in when you can find the time...Happy New Year to you!!!</p>
<hr>
<p>I joked the other day to someone about why I worked on Rebol.  Said I: "well, Forth was just TOO popular.  It wasn't cool anymore once everyone was doing it.  I wanted to go more indie/underground, away from all those <em>crowds</em>."  <img src="https://forum.rebol.info/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>But on the positive side of being such a small group, <strong>I hope you feel like you're getting to play an important part in defining something you can be proud of--that makes you happy and makes you think--that will hopefully bring that same feeling to others one day.</strong>  And you <em>are</em> making a difference.  You're making a difference to <em>me</em> (hopefully it's bigger than just that, but I can promise it's at <em>least</em> that!)</p>
<hr>
<h2>First thing's first: a Vision Statement and Motto Re-cap</h2>
<p>In film school they emphasized the importance of finding a short essential summary of your project.  When people wanted to make the movie "Alien", they were pitching it around Hollywood simply as <em>"Jaws...IN SPACE"</em>.  Having an almost cartoonishly short vision statement was a touchstone for everyone working on it to be on the same page; what defines success, <em>how will we even know if we did succeed</em>.</p>
<p>So I've dug my heels in on <strong>"The Minecraft of Programming"</strong>.  Because I want people to feel that sense of uniformity and texture.  A visceral relationship between you and the evaluator that feels like a wide open world, with all the satisfaction of <a href="https://www.reddit.com/r/DesignPorn/comments/7td00q/xpost_this_lego_ad/" rel="nofollow noopener">LEGO back when LEGO cared about design</a> or <a href="https://www.fatbraintoys.com/toy_companies/kahootz/the_original_spirograph_deluxe_set.cfm" rel="nofollow noopener">a spirograph</a>.  (It was actually DocKimbel who sent me that LEGO ad, so there should be some level at which we are all on the same page about this kind of thing.)</p>
<p>So that's my version of a vision statement.  I don't think this is at odds with Carl's "putting the personal back in personal computing" phraseology.  It's complementary.</p>
<p>But I noticed also this year, that my catch-phrase <a href="https://trello.com/c/EeObOLam" rel="nofollow noopener">from circa 2015</a>..."Modify With Confidence", wasn't something I was saying anymore.  But I don't say it for the best of reasons: we take it for granted that the interpreter can adapt and change without exploding.</p>
<p>So moving on...the new motto I've used in 2018 is <strong>"Elevating the Art"</strong>.</p>
<p>The tail end of 2017 introduced a fledgling concept called "invisibles".  I was egged on by <a class="mention" href="/u/markeye">@MarkEye</a> to implement something I'd flirted with as a concept to make COMMENTs evaluator-neutral.  Little did I know it would open doors to solutions to problems that seemed nothing to do with commenting.  When you looked closer you realized the mechanism was generic and extremely powerful, it is a gift that keeps giving.</p>
<p>I bring up invisibles as a watershed event--but not just for their functionality.  Also <em>that it was profound and could happen overnight</em>.  A conversation in chat was followed not by more weeks of chat and then nothing.  It went from thought to action immediately.</p>
<p>2018 followed suit, with features that moved at the speed of thought.  I said that Ren-C's development was planned so it could speed up vs. slow down.  Our limitations are the limits of our ability to fully articulate what we want...not the limits of a codebase <a href="https://forum.rebol.info/t/back-to-personal-computing/186/5">that had been stretched too far beyond its means</a>.</p>
<p>Things would "just happen":</p>
<ul>
<li>
<p>A first cut of <a href="https://forum.rebol.info/t/source-mutability-const-and-mutable/976">CONST and MUTABLE</a> was committed just a couple weeks ago.</p>
</li>
<li>
<p>Right after that, doubled groups gave <a href="https://forum.rebol.info/t/double-your-pleasure-double-your-fun/968">neat new powers to COMPOSE</a>, and solved a whole branch of issues related to conditionality in PARSE.</p>
</li>
<li>
<p>COLLECT-LINES and COLLECT-TEXT <a href="https://forum.rebol.info/t/collect-lines-an-adaptation-story/945">showed up in an afternoon</a>, demonstrating a creative use of ADAPT.</p>
</li>
<li>
<p>At one point SHOVE <strong>-&gt;</strong> came on the scene to <a href="https://forum.rebol.info/t/letting-go-of-enfix-path-dreams-but-fixing-it-with-magic/794">settle enfix dispatch for paths</a>...an old problem that had been a concern for me since the beginning of looking at the evaluator.</p>
</li>
</ul>
<p>I don't want to keep going with a blow-by-blow of every interesting thing that happened, just read the posts or the commit log.  But there's a pattern here.  And it's a pattern that is showing no signs of slowing: just last week, I came up with a scheme to implement "lit bit", the arbitrary level of escaping per value.  <em>(not quite finished, but it's remarkably close.)</em></p>
<p>Time and again, things that once perhaps we could talk about--but have no clue how it could be done--those things are being done what seems like overnight.  I swear the changes are <strong>elevating the art</strong> of programming in Rebol.  Once people start using these features, they will realize they won't want to go back.</p>
<p>To me, the most interesting things that happened were things I didn't see coming.  So I wanted to talk about how well that's gone before hitting some of the bullet points from last year's post.  But, those bullet points were written down, so let's go over them.</p>
<h2>libRebol</h2>
<p>Progress here has been <em>very</em> notable.  I don't think there's any C-based API out there quite like it, letting you mix up values and strings so smoothly.</p>
<p>I've kind of outdone myself.  It's actually giving me a bit (just a bit) of empathy for those who are skeptics of C++, because just about every positive feature of RenCpp has been rethought in plain old C...and done even better.  The limitations forced it to a kind of simplicity and elegance that I think is going to please people.</p>
<p>Some big cloudy questions have been hammered out...and the biggest thing was engineering a solution to JavaScript promises in order to get <a href="https://forum.rebol.info/t/on-giving-librebol-js-more-powers-than-javascript/849">the illusion of synchronous interaction with the browser DOM</a>.  We have "javascript natives" now...functions whose specs are BLOCK!s and whose bodies are TEXT! of JS code using the API, including the "AWAITER" for simulated synchronous-ness.</p>
<blockquote>
<p><strong>UPDATE:</strong> <a href="https://forum.rebol.info/t/web-repl-now-uses-console-extension/1064">A WASM-based web console has been implemented</a>, and is now considered the most critical build for the near future!</p>
</blockquote>
<p>The weakest areas are in exception handling and throws.  Part of what makes that hard is that it's an intrinsically hard problem in languages.  But I want to see it get shored up so we're at least no worse than any other language about this.</p>
<h2>UTF-8 Everywhere</h2>
<p>While the branch has only been partially committed with some of the groundwork for it, I actually got <a href="https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374/4">rather far with this</a>.  There are some hitches regarding what it does to performance in PARSE, that I want to get straight.</p>
<p>Every time I have to merge this branch it's a pain.  I'd like to get it committed, and maybe I can if we are willing to say that during a PARSE, the only way you can modify the input series is if you use parse instructions (CHANGE, INSERT, REMOVE) to do it, vs. code in a GROUP! changing it arbitrarily.  We need to talk about that.</p>
<p>Point is: Yes, it's still happening.  And the API has been strongly influenced by experience gained developing it so far.</p>
<h2>Derived Binding</h2>
<p>Unless someone tells me otherwise, it seems to work. Code that would be intractable in Rebol2/R3-Alpha/Red can be quite zippy.  If you want to put your head around the following, be my guest:</p>
<pre><code>o-big: make object! collect [
    repeat n 256 [
        ;
        ; var-1: 1
        ; var-2: 2
        ; ...
        ; var-256: 256
        ;
        keep compose/only [
            (to set-word! unspaced ["var-" n]) (n)
        ]
    ]
    repeat n 256 [
        ;
        ; fun-1: method [] [var-1]
        ; fun-2: method [] [var-1 + var-2]
        ; ...
        ; fun-256: method [] [var-1 + var-2 ... + var-256]
        ;
        keep compose/only [
            (to set-word! unspaced ["meth-" n]) method [] (collect [
                keep 'var-1
                repeat i n - 1 [
                    keep compose [
                        + (to word! unspaced ["var-" i + 1])
                    ]
                ]
            ])
        ]
    ]
]

repeat i 2048 [
    derived: make o-big [var-1: 100000 + i]
    if derived/meth-255 &lt;&gt; 132639 + i [
        fail "This should not happen."
    ]
]

print "Success!"
</code></pre>
<p>The techniques that make this tractable are very clever--and are another example of the "art being elevated".  And I hope the mechanics open doors to solutions to other kinds of problems...like threading context through the stack for parse rules, etc.</p>
<h2>Rebmu</h2>
<p>Honestly, Rebmu didn't get the attention I'd wanted to give it.  You'd think it would be the "fun" thing--so it would be like goofing off, and I'd do it before other more "serious" work.  But in truth, every time I get going on a feature there it shifts my attention back to developing some feature on the interpreter.</p>
<p>Bits of it feed back a little at a time.  For instance, there's some interesting functionality in DOES now that grabs the word after it and specializes that function:</p>
<pre><code>x: 1
foo: does catch [
     if x = 1 [throw &lt;one&gt;]
     print "Foo!"
     throw &lt;other&gt;
]

&gt;&gt; foo
&lt;one&gt;

&gt;&gt; x: 2

&gt;&gt; foo
Foo!
&lt;other&gt;
</code></pre>
<p>That came directly from work on Rebmu.  Maybe this seems like a frivolous way to avoid one pair of brackets (e.g. two less characters than <strong>does [catch [...]]</strong>).  But as you see with it being used with CATCH here, it actually eases the burden of DOES not having its own RETURN.  It makes that more palatable, and there's good reasons why it <em>shouldn't</em> have its own return.</p>
<p>So I haven't forgotten about Rebmu--these points feed back into the system design.  I'll try and set aside more time for it in 2019--it's one of the things I want you to be able to boot up easily in the browser console.</p>
<h2>Debugging</h2>
<p>Sadly, stepwise debugging didn't come online this year.  <img src="https://forum.rebol.info/images/emoji/twitter/bug.png?v=9" title=":bug:" class="emoji" alt=":bug:"></p>
<p>It's critical that whatever methodology the debugger uses, it needs to be able to reuse 90% of it based on whether it's in the browser or in a native console.  I don't want to write <em>two</em> debuggers.  :-/  Pushing us a little further down the road was one important accomplishment: the console has been factored into an extension.  That's good news, as one of the big debugger issues is how to reuse the console in a nested way when a breakpoint happens.</p>
<p>I want to see the debugger and console and such be in usermode as much as possible, so I'm trying to fit the pieces together so that can be the case.  Rushing it and doing it wrong wouldn't be very prudent.  But there's enough pieces of it there that are close to working that the concerns it brings up are always in mind.</p>
<h2>TLS 1.2</h2>
<p>This wasn't on the list, and I'd really hoped someone else would do it.  But the payment processing association deprecated TLS 1.0 this year, threatening any website that still used 1.0 with a negative security rating score.  That created an extremely strong incentive for people to update, and it was getting to where Rebol couldn't talk to very many sites anymore.</p>
<p>So I read the darn crypto spec and patched it up.  Super special thanks to <a class="mention" href="/u/blackattr">@BlackATTR</a> for sponsoring the work, making me feel less grumpy about having had to do it.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">  <a class="mention" href="/u/iarnold">@iArnold</a> chipped in a few dollars as well.</p>
<h2>... and what will 2019 be ... ?  BETA/ONE</h2>
<p>I don't make promises often (ever?) but here we go: Beta/One will release in 2019.</p>
<p>Clearly it won't be this month.  And I actually could have a lot of non-Rebol things to do in Q1, so who knows exactly when.</p>
<p>But we've got to get a demo/tutorial online that can be selling itself 24 hours a day...worldwide.  That's the deliverable, and this is the year for it.  Anything that anyone can do to help get there would be greatly appreciated!  And one of the biggest things you can do is help think through things right here, on this forum (or in chat).</p>
<p>Happy 2019!  Let's do this!</p>
          <p><a href="https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992/1</link>
        <pubDate>Wed, 02 Jan 2019 22:30:26 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-992-1</guid>
        <source url="https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992.rss">2018 Retrospective: Elevating the Art</source>
      </item>
  </channel>
</rss>

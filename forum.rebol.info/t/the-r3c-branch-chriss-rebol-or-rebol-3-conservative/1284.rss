<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</title>
    <link>https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284</link>
    <description>@rgchris has been between a rock and a hard place... being a Rebol-style code believer with a large corpus, who hasn&#39;t been particularly served by either Red or Ren-C.  Unwilling to jump ship for Python or other non-Rebol languages, this has kept him rather stuck in a Rebol2 world.

To make the best of a bad situation, he has put forth the idea of branching Ren-C circa two years ago.  The intent is not to stay there long term, but to believe that the dynamism of Ren-C is such that future versions will be able to emulate this point if desired (considering I&#39;ve stated that emulation of Rebol2 is a goal, this would be even easier).

I have mixed feelings about this plan, but his participation is valuable enough to be worth compromising to try it out.  So I&#39;ve [patched R3C to be buildable with more up-to-date compilers](https://github.com/metaeducation/ren-c/commit/aa15391754346c4d318262c4f326f33024917e21) in &quot;rigorous&quot; mode (I don&#39;t like building without all warnings on, and don&#39;t feel like having to install old GCC or MSVC to build an older branch).

I&#39;ve also done a few patches to try and make R3C closer to mainline.  So far:

* **[COLLECT and KEEP in PARSE](https://github.com/metaeducation/ren-c/commit/c2e0405513322cc6d8006e34d8ea95072d007639)** - This was a strongly-requested feature by @rgchris, and as such it doesn&#39;t make sense to have implemented it and leave it out of R3C.  The syntax is different than Red&#39;s version, per his request, and it does rollback...which Red also does not.
 
* **[Permissive Group Invisibility](https://github.com/metaeducation/ren-c/commit/99378cda9c2c317568ac46dfeedbdebcecf13e1f)** - At first I thought this idea wouldn&#39;t be useful.  But the more I used &quot;invisibles&quot;, the more I wanted to be able to group them like any other value.  [forum post](https://forum.rebol.info/t/permissive-group-invisibility/1153)

* **[ENBIN and DEBIN](https://github.com/metaeducation/ren-c/commit/a690320b4072e691d379b5f0d790dcf8ed6c2bc4)** - There are many ways to encode integers as binary or decode them.  Rebol&#39;s attempt to have a &quot;standard&quot; TO BINARY! for integers and TO INTEGER! of a binary wound up being a major pain point in the 32-bit to 64-bit conversion for integers.  This would only get worse with arbitrary precision numbers...the next frontier.  These dialects may not be the perfect design, but their weird names make them easy to find...and they&#39;re pretty good power tools for the purpose.  [forum post](https://forum.rebol.info/t/binary-dialected-encoding-decoding-instead-of-to-conversions/1270)

* **[TAKE returning NULL](https://github.com/metaeducation/ren-c/commit/e88ee79d9d0fea4ea0ca3605a7c5b1f5b0602b61)** - originally TAKE of an empty block was an error in Ren-C, to try and be &quot;safe&quot;... so you had to use a lower-level `TAKE*` that allowed it.  While it was one of the earliest examples of CHAIN mechanics--and offered benefit by testing that--it was probably not so great.  [forum post](https://forum.rebol.info/t/can-take-just-return-null/1265)

* **[PRINT NEWLINE is allowed](https://github.com/metaeducation/ren-c/commit/2054d94f6f414b57a52c8760562bc741d359e4e1)** - PRINT&#39;s attempt to avoid people getting blindsided by **print value** where value turns out to be something like **[format hard drive]** led it to be more prickly, so you know it&#39;s not the kind of thing to be used with ANY-VALUE!.  The compromise of only taking BLOCK! and TEXT! helped keep it from being a generic debug utility...making it a known quantity.  Regardless of this, being able to say PRINT NEWLINE looks nice...and have that mean printing one (and only one) newline.  [forum post](https://forum.rebol.info/t/limiting-print-to-block-text-perhaps-blank-to-opt-out/855/2?u=hostilefork)

---

One of the big goals is having feedback.  Here are a few things I pointed out that I haven&#39;t patched in yet, but consider review of the issues to be important:

* **[THEN returns its branch result unmodified](https://github.com/metaeducation/ren-c/commit/a2ff82017f13fe8c1526b0df96c3e53c28c51620)** - While this is a fairly minor change, it&#39;s probably more significant than it seems.  [forum post](https://forum.rebol.info/t/regarding-mutual-exclusivity-of-then-and-else/1174)

* **[VOID! assignments allowed in SET-WORD! and SET-PATH!](https://github.com/metaeducation/ren-c/commit/24d1b4d87e9d1729ce31ce46ce62c8c6a390da46)** - This was debated by the Rebol community historically (and has come up on the Red Gitter).  It&#39;s one of those things where the fundamental &quot;safety&quot; value is debatable, while it creates a very clear inconvenience.  Ren-C&#39;s rethinking of VOID! as a &quot;hot potato&quot; that hangs around and isn&#39;t really a problem unless you try to actually use it helps distinguish it from truly &quot;unsetting&quot; a variable, so the verbal paradox of &quot;setting to an unset&quot; isn&#39;t as jarring.  [forum post](https://forum.rebol.info/t/when-has-stopping-void-or-old-unset-assignments-helped-you/1206/)

* **Skippable COMPOSE marking** - Chris hasn&#39;t liked this, but I think the convolutions you have to do to avoid it are bad.  One need not use it if one doesn&#39;t like it, but I think you shoot yourself in the foot by not having it.  [forum post](https://forum.rebol.info/t/requirements-list-for-the-redbol-compatibility-module/722/21?u=hostilefork)

---

Really here, the idea is to get engagement on the design...and find out what answers would be satisfying to all involved for the main branch.  So the measure of that engagement will drive how much I can afford to work on accommodating bugfixes and feature patches onto the branch.  But it seems that this is more useful than Redbol--at least to him--at this point in time.</description>
    
    <lastBuildDate>Sat, 12 Dec 2020 21:58:30 +0000</lastBuildDate>
    <category>Announcements</category>
    <atom:link href="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I believe I was quite certain on what my goals are. I can't be more specific without reviewing the tests.</p>
          <p><a href="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284/9</link>
        <pubDate>Sat, 12 Dec 2020 21:58:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1284-9</guid>
        <source url="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284.rss">The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</source>
      </item>
      <item>
        <title>The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="7" data-topic="1284">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>if I didn't feel these things were important to me</p>
</blockquote>
</aside>
<p>This response shows a key problem: you get more vague instead of more specific.  I don't know what I said that you agree or disagree with, and I don't know your arguments.</p>
<p>You need to hold yourself up to standards of specificity that invoke code examples, and do something approximating line-by-line rebuttals to points I raise.  Failure to do so <em>will</em> be an impasse.</p>
<p>I doubt there will be one otherwise.</p>
          <p><a href="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284/8</link>
        <pubDate>Sat, 12 Dec 2020 21:38:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1284-8</guid>
        <source url="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284.rss">The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</source>
      </item>
      <item>
        <title>The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I don't want to say we're at an impasse here, but if I didn't feel these things were important to me, I wouldn't be evaluating this path. If you're suggesting that R3C adopt every Ren-Cism, then it a) isn't what I'm looking for right now, and b) doesn't really have a reason to exist.</p>
          <p><a href="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284/7</link>
        <pubDate>Sat, 12 Dec 2020 21:23:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1284-7</guid>
        <source url="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284.rss">The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</source>
      </item>
      <item>
        <title>The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="5" data-topic="1284">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>the previous PARSE positional return</p>
</blockquote>
</aside>
<p>One glaring problem with this is that PATH! and TUPLE!, as they lack positions, can't do it:</p>
<p>They can return the whole value back or null easily:</p>
<pre><code>&gt;&gt; parse 'a/1/1 [word! some integer!]
== a/1/1  ; can't be just `==` of nothing, *and you wouldn't want it to be*

&gt;&gt; parse 'a/1/1 [some integer! word!]
; null
</code></pre>
<p>My thought about /PROGRESS in this case would be that you get the result aliased as block or a position index.  But it feels more solid to get the original value back, here.</p>
<p>You can easily twist PARSE to get the "you have to put END on to trigger failure" and "give back progress" result through a shim.  We need to find a way of putting in a header "use version X conventions anyway", and if you think this idea is job <span class="hashtag">#1</span> for that then it's fine.</p>
<p>But defaulting to needing to get to the END was...I think...probably right in the original formulation.  So here's an area where I'm being conservative.</p>
<aside class="quote no-group" data-username="rgchris" data-post="5" data-topic="1284">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>original slate of datatypes</p>
</blockquote>
</aside>
<p>The new PATH! and TUPLE! types are powerful and coherent.  The old ones were garbage.  So we need to work you through any objections you feel you have.</p>
<p>I don't see why you'd want to throw out <strong>/foo/bar</strong> or <strong>abc/[def.g]/hij.txt</strong> as bricks in a dialecting toolbox.  <strong>/1</strong> is a good thing to have as a PATH!.  I think we need to concretely discuss why you'd object to this.</p>
<p>While dots in words give you more words, I think the sacrifice to use them in TUPLE! is well worth it; as I believe dots generally denote structural intent in the first place.  When you're dialecting with things like <strong>.foo</strong> you can hold bindings, that are more likely the ones you intended (e.g. a field in a context named "foo" instead of a field named ".foo")</p>
<p>Similarly, the ISSUE! and CHAR! fusion seems like nothing but a win to me.  CHAR! then becomes a <em>type constraint</em>, like REFINEMENT!.  I held off on the TOKEN! rename for the type, but I still think that's likely good; it suggests an immutable fragment of string material--which hasn't been bound--pretty well.</p>
<p>Requiring <span class="mention">@123xyz</span> be a string is something I hope you can let go of.  Having more bindable types is richer, and it helps make up for ISSUE! not having a binding.  You get a pretty good representational coverage being able to <strong>load {<span class="mention">@xyz123</span>}</strong> even if you have to <strong>load {@["123xyz]}</strong> for illegal words.  And all the EMAIL! still work.  We could make <strong>@"123xyz"</strong> and <strong>@"xyz123"</strong> be email string forms and that would be fine with me.</p>
<p>I'm kind of at a loss for what to do with DATATYPE! and TYPESET! themselves, so if you can articulate something that has properties you like it's as good as anything right now.  If you weigh all the considerations and solve, it--even better.  Please do that articulation.  But the one thing you've mentioned so far--that quoted types don't have a different datatype than the thing unquoted--is both inconsistent with history, and I believe a bad idea.</p>
<aside class="quote no-group" data-username="rgchris" data-post="5" data-topic="1284">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>conventional semantics for core functions</p>
</blockquote>
</aside>
<p>That inventory is important to get.</p>
<p>In the current design we can use predicates to give you COMPOSE in userspace that does "splicing unless you use /ONLY".  But even in light of our conversations about block-container-primacy and the behaviors of APPEND or MOLD, I think it's better to take advantage of the fact that COMPOSE is a dialect and isn't stuck with just a parameter in a slot... the ((...)) to splice is a win in my book.</p>
<p>(Note: The tests in the main branch are a bit of a mess right now with some broken ones that I skim over while I think about how to fix them.  Since I'm the only one dealing with it, I haven't worried about that, I just use them as a constant reminder forcing me to review them every time.  What may happen with some of them is they just get deleted...I have preferred to have daily meditation review so far, but I've done that just about long enough.)</p>
<p><strong>If at all possible, I'd like us to sort out the naming of all the terms if we go with something like BAD-WORD! instead of VOID!</strong>.  I've painted a picture of how void for invisibles has a consistency, e.g. with C's rebElide() returning void, so I can get behind this.</p>
          <p><a href="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284/6</link>
        <pubDate>Sat, 12 Dec 2020 20:29:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1284-6</guid>
        <source url="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284.rss">The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</source>
      </item>
      <item>
        <title>The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>In general, I'm on board with this.</p>
<p>The biggest distinctions (off the top of my head) for me are: original slate of datatypes, conventional semantics for core functions (NULL/VOID change notwithstanding), the previous PARSE positional return (I feel this is the right call even for a conservative branch). The one deviation I'm open to is generalised quoting, but I'd like to explore the direction I'd suggested re. reflection.</p>
<p>I try not to set targets I can't keep, but I intend this week to go through the current R3C test suite in order to constitute a spec for that branch. Once done, hopefully that will be stable going forward.</p>
          <p><a href="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284/5</link>
        <pubDate>Sat, 12 Dec 2020 16:00:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1284-5</guid>
        <source url="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284.rss">The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</source>
      </item>
      <item>
        <title>The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="2" data-topic="1284">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>The biggest deviations from Ren-C are</p>
</blockquote>
</aside>
<p>Due to the bootstrap binaries not running on GitHub actions for reasons unknown, new build executables are needed.  This means taking a moment to build a set of relatively versatile executables that don't have unwanted library dependencies and are likely to run everywhere.</p>
<p><strong>I want to use something rather close to the current state...as opposed to what is snapshotted as R3C at this moment.</strong></p>
<p>It is a win-win scenario if we hammer out a snapshot and maintain usable binaries for it.  You have a binary that changes only when you want it to.  We commit to keeping in sync and available for bootstrap, and have a shared stake in those executables having a certain minimum utility.</p>
<p>The small bit of R3C work so far hasn't been wasted; as it has meant inventorying and reviewing changes.  You've learned a little about what it takes to patch the code, and that is good.  You hopefully are clearing your mind of the patently false notion that your opinions aren't considered or important.  <img src="https://forum.rebol.info/images/emoji/twitter/see_no_evil.png?v=9" title=":see_no_evil:" class="emoji" alt=":see_no_evil:"></p>
<p><strong>One of the biggest trip-ups you mentioned...that of the frustrating behavior of "voidification" of branches...is gone now.</strong>  Corrupting branch results as a default behavior is no longer on the table.  So whatever mechanic powers ELSE and THEN won't be any <em>worse</em> than it is done now via the null isotope answer...even if that approach evolves.</p>
<p><strong>I think returning PARSE's default behavior to expect completion, then shift to partial acceptance via a /PROGRESS setting is good.</strong>  You do not have to use multi-return syntax if you do not want, and can just pass a variable to it (as you would in R3-Alpha's DO/NEXT).  <em>It is near-certain that this is the actual endgame for multi-returns...to only be syntax sugar for what you could do with an ordinary refinement</em>.</p>
<p><strong>Refinements being their own arguments is a change I think you can't-not-like.</strong>  The benefits to the model and code are tremendous.</p>
<p>Issues regarding things like TO or MAKE conversions, e.g. from WORD! to PATH! and back, need to be gotten right.  We can hammer this out whenever you're ready, and the right answer shouldn't be hard to patch in.</p>
<p><strong>You have the floor for voicing opinions and tuning the design, now.</strong>  The last couple of days here I'm showing just how adaptive the conventions can be--that the changes can be made about as quickly as they can be articulated.  Making a shim to change things backwards is nearly always going to be easier than the changes forwards, so hopefully you can have confidence in that.</p>
<p>We need the executables today-ish...including new mac binaries.  So it's a now thing.  They don't have to be exactly right...and you'll be the shot caller on how they are patched.</p>
          <p><a href="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284/4</link>
        <pubDate>Sat, 12 Dec 2020 10:21:32 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1284-4</guid>
        <source url="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284.rss">The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</source>
      </item>
      <item>
        <title>The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>It would be very instructive, <a class="mention" href="/u/rgchris">@rgchris</a>, if you kept a running commentary as you work about things you hit that you like or dislike... or maybe are indifferent to.  Also links you read in order to get up to speed that are more-or-less helpful.  This forum (and this thread, even) could be a place for that running commentary.</p>
<p>I'd be interested to know things like whether you are warming up to the COMPOSE change with <strong>(( ))</strong> to splice, and not splicing otherwise.  That's something I'm very partial to, and I think the "fatter, multiplicity" syntax for it has nice semiotics for what it does.</p>
<p>But as I've mentioned, it's the ability to customize these things that's of the essence.  Looking at Redbol's implementation for COMPOSE, for instance (ignore the weird name for APPLIQUE, it's weird on purpose because it's unlikely to be wanted for anything else):</p>
<pre><code>function [
    value "Ren-C composes ANY-ARRAY!: https://trello.com/c/8WMgdtMp"
        [any-value!]
    /deep "Ren-C recurses into PATH!s: https://trello.com/c/8WMgdtMp"
    /only
    /into "https://forum.rebol.info/t/stopping-the-into-virus/705"
        [any-array! any-string! binary!]
][
    if not block? :value [return :value]  ; `compose 1` is `1` in Rebol2

    composed: applique 'compose [
        value: :value
        deep: deep

        ; The predicate is a function that runs on whatever is generated
        ; in the COMPOSE'd slot.  If you put it in a block, that will
        ; splice but protect its contents from splicing (the default).
        ; We add the twist that VOID!s ("unset") won't compose in Rebol2.
        ;
        ;    rebol2&gt; type? either true [] []
        ;    == unset!
        ;
        ;    rebol2&gt; compose [(either true [] [])]
        ;    == []  ; would be a #[void] in Ren-C
        ;
        predicate: either only [:enblock-devoid] [:devoid]
    ]

    either into [insert into composed] [composed]
]
</code></pre>
<p>So the point is to build modular functions that are easily bent to what you want, without having to dig in and hack on C code.</p>
          <p><a href="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284/3</link>
        <pubDate>Fri, 03 Jul 2020 16:22:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1284-3</guid>
        <source url="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284.rss">The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</source>
      </item>
      <item>
        <title>The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>The biggest deviations from Ren-C are:</p>
<ul>
<li>
<p>No change to syntax* or range of datatypes from Rebol 3 Alpha (renaming notwithstanding, e.g. STRING! -&gt; TEXT!)</p>
</li>
<li>
<p>Mostly backward-compatible changes to PARSE grammar, with the following changes from the Rebol 3 Alpha PARSE:</p>
<ul>
<li>
<p>Returns position following last match.</p>
</li>
<li>
<p>COLLECT/KEEP (the aforementioned—based on Ren-C, not Red's implementation).</p>
</li>
</ul>
</li>
</ul>
<p>There are other things I'm exploring that would ease a transition from Rebol 2 (or other similar interpreters) once I've had a chance to evaluate the test suite.</p>
<p>* based on target usage, permitting leading '@' email values may be an exception here</p>
          <p><a href="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284/2</link>
        <pubDate>Wed, 01 Jul 2020 20:00:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1284-2</guid>
        <source url="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284.rss">The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</source>
      </item>
      <item>
        <title>The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="/u/rgchris">@rgchris</a> has been between a rock and a hard place... being a Rebol-style code believer with a large corpus, who hasn't been particularly served by either Red or Ren-C.  Unwilling to jump ship for Python or other non-Rebol languages, this has kept him rather stuck in a Rebol2 world.</p>
<p>To make the best of a bad situation, he has put forth the idea of branching Ren-C circa two years ago.  The intent is not to stay there long term, but to believe that the dynamism of Ren-C is such that future versions will be able to emulate this point if desired (considering I've stated that emulation of Rebol2 is a goal, this would be even easier).</p>
<p>I have mixed feelings about this plan, but his participation is valuable enough to be worth compromising to try it out.  So I've <a href="https://github.com/metaeducation/ren-c/commit/aa15391754346c4d318262c4f326f33024917e21" rel="nofollow noopener">patched R3C to be buildable with more up-to-date compilers</a> in "rigorous" mode (I don't like building without all warnings on, and don't feel like having to install old GCC or MSVC to build an older branch).</p>
<p>I've also done a few patches to try and make R3C closer to mainline.  So far:</p>
<ul>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c/commit/c2e0405513322cc6d8006e34d8ea95072d007639" rel="nofollow noopener">COLLECT and KEEP in PARSE</a></strong> - This was a strongly-requested feature by <a class="mention" href="/u/rgchris">@rgchris</a>, and as such it doesn't make sense to have implemented it and leave it out of R3C.  The syntax is different than Red's version, per his request, and it does rollback...which Red also does not.</p>
</li>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c/commit/99378cda9c2c317568ac46dfeedbdebcecf13e1f" rel="nofollow noopener">Permissive Group Invisibility</a></strong> - At first I thought this idea wouldn't be useful.  But the more I used "invisibles", the more I wanted to be able to group them like any other value.  <a href="https://forum.rebol.info/t/permissive-group-invisibility/1153">forum post</a></p>
</li>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c/commit/a690320b4072e691d379b5f0d790dcf8ed6c2bc4" rel="nofollow noopener">ENBIN and DEBIN</a></strong> - There are many ways to encode integers as binary or decode them.  Rebol's attempt to have a "standard" TO BINARY! for integers and TO INTEGER! of a binary wound up being a major pain point in the 32-bit to 64-bit conversion for integers.  This would only get worse with arbitrary precision numbers...the next frontier.  These dialects may not be the perfect design, but their weird names make them easy to find...and they're pretty good power tools for the purpose.  <a href="https://forum.rebol.info/t/binary-dialected-encoding-decoding-instead-of-to-conversions/1270">forum post</a></p>
</li>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c/commit/e88ee79d9d0fea4ea0ca3605a7c5b1f5b0602b61" rel="nofollow noopener">TAKE returning NULL</a></strong> - originally TAKE of an empty block was an error in Ren-C, to try and be "safe"... so you had to use a lower-level <code>TAKE*</code> that allowed it.  While it was one of the earliest examples of CHAIN mechanics--and offered benefit by testing that--it was probably not so great.  <a href="https://forum.rebol.info/t/can-take-just-return-null/1265">forum post</a></p>
</li>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c/commit/2054d94f6f414b57a52c8760562bc741d359e4e1" rel="nofollow noopener">PRINT NEWLINE is allowed</a></strong> - PRINT's attempt to avoid people getting blindsided by <strong>print value</strong> where value turns out to be something like <strong>[format hard drive]</strong> led it to be more prickly, so you know it's not the kind of thing to be used with ANY-VALUE!.  The compromise of only taking BLOCK! and TEXT! helped keep it from being a generic debug utility...making it a known quantity.  Regardless of this, being able to say PRINT NEWLINE looks nice...and have that mean printing one (and only one) newline.  <a href="https://forum.rebol.info/t/limiting-print-to-block-text-perhaps-blank-to-opt-out/855/2">forum post</a></p>
</li>
</ul>
<hr>
<p>One of the big goals is having feedback.  Here are a few things I pointed out that I haven't patched in yet, but consider review of the issues to be important:</p>
<ul>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c/commit/a2ff82017f13fe8c1526b0df96c3e53c28c51620" rel="nofollow noopener">THEN returns its branch result unmodified</a></strong> - While this is a fairly minor change, it's probably more significant than it seems.  <a href="https://forum.rebol.info/t/regarding-mutual-exclusivity-of-then-and-else/1174">forum post</a></p>
</li>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c/commit/24d1b4d87e9d1729ce31ce46ce62c8c6a390da46" rel="nofollow noopener">VOID! assignments allowed in SET-WORD! and SET-PATH!</a></strong> - This was debated by the Rebol community historically (and has come up on the Red Gitter).  It's one of those things where the fundamental "safety" value is debatable, while it creates a very clear inconvenience.  Ren-C's rethinking of VOID! as a "hot potato" that hangs around and isn't really a problem unless you try to actually use it helps distinguish it from truly "unsetting" a variable, so the verbal paradox of "setting to an unset" isn't as jarring.  <a href="https://forum.rebol.info/t/when-has-stopping-void-or-old-unset-assignments-helped-you/1206/">forum post</a></p>
</li>
<li>
<p><strong>Skippable COMPOSE marking</strong> - Chris hasn't liked this, but I think the convolutions you have to do to avoid it are bad.  One need not use it if one doesn't like it, but I think you shoot yourself in the foot by not having it.  <a href="https://forum.rebol.info/t/requirements-list-for-the-redbol-compatibility-module/722/21">forum post</a></p>
</li>
</ul>
<hr>
<p>Really here, the idea is to get engagement on the design...and find out what answers would be satisfying to all involved for the main branch.  So the measure of that engagement will drive how much I can afford to work on accommodating bugfixes and feature patches onto the branch.  But it seems that this is more useful than Redbol--at least to him--at this point in time.</p>
          <p><a href="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284/1</link>
        <pubDate>Wed, 01 Jul 2020 19:47:14 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1284-1</guid>
        <source url="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1284.rss">The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</source>
      </item>
  </channel>
</rss>

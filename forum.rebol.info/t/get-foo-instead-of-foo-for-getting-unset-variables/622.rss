<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>GET &#39;FOO instead of :FOO for getting unset variables</title>
    <link>https://forum.rebol.info/t/get-foo-instead-of-foo-for-getting-unset-variables/622</link>
    <description>When I first learned about the idea that GET-WORD! evaluation allowed you to get an UNSET!, I thought that was kind of cool.

But over time, it began to bother me, because when I&#39;d see a GET-WORD! I didn&#39;t really know why it was being used.  Was it to avoid invoking a function, or was it to avoid triggering a variable-is-unset error?  I&#39;d often get bitten by the case where I was trying to just disarm a function without realizing it was unset all along.

Ren-C&#39;s behavior of GET will return NULL if something is not set...allowing you to either work with that (or let it error if where you&#39;re passing it doesn&#39;t take NULL), or blankify it with **try get**, or trigger an error on the spot if it&#39;s not set with **really get**.  So if you write **get foo** you&#39;re getting the nullable behavior previously possible with just **:foo**.

This makes me wonder if it would be saner if GET-WORD! errored on unset variables.  That way, you could assume seeing :FOO meant you were trying to deactivate an action! so it wouldn&#39;t run (or it had some dialected purpose, or was passed to a soft quote, etc.)  But it would give people the certainty that the person who wrote :FOO intended for it to be bound and set.

Because historical R3-Alpha, Rebol2, and Red GET all error on unset variables, and GET-WORD! does not, this would be the reverse bias of their behavior.

But I think the GET form reads more naturally when combined with constructs that might operate on NULL.  Compare:

    x: :foo else [...]
    x: get &#39;foo else [...]

    x: try :foo
    x: try get &#39;foo

    x: :foo
    x: get &#39;foo

And as mentioned, I&#39;ve found that many cases of writing things like **x: :foo** wind up surprised when foo is not set, because they were trying to duplicate an action.

Any objections?  The change would obviously be for both GET-PATH! and GET-WORD!</description>
    
    <lastBuildDate>Sun, 20 Jun 2021 15:54:03 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/get-foo-instead-of-foo-for-getting-unset-variables/622.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>GET &#39;FOO instead of :FOO for getting unset variables</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="622">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>When I first learned about the idea that GET-WORD! evaluation allowed you to get an UNSET!, I thought that was kind of cool.</p>
<p>But over time, it began to bother me...</p>
</blockquote>
</aside>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="622">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>This makes me wonder if it would be saner if GET-WORD! errored on unset variables.</p>
</blockquote>
</aside>
<p>So when this post was originally written 3 years ago, NULL was synonymous with "unsetness".</p>
<p>Today's NULL is less ornery.  It can be retrieved by both word access and by GET.</p>
<p>However, "unsetness" is part of a family of "non-valued" BAD-WORD! <em>isotopes</em>.  And GET-WORD! will not fetch them, nor will plain GET.</p>
<p>So GET and GET-WORD! truly are equivalent now.  Which is pleasing.  And you don't get those accidents from GET-WORD! accidentally tolerating typos when all you meant to do was suppress function application.</p>
<p>In Redbol, this means we get compatibility with Rebol2's behavior for GET-WORD!...but not Red or R3-Alpha.  Only some kind of interpreter hook mechanism or command-line switch could override it in the Redbol emulation.</p>
<p>Overall, I'm pleased that ^META words/paths/groups/etc. and the parallel ^META parameters are the only way to deal with bad-word isotopes.</p>
          <p><a href="https://forum.rebol.info/t/get-foo-instead-of-foo-for-getting-unset-variables/622/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-foo-instead-of-foo-for-getting-unset-variables/622/3</link>
        <pubDate>Sun, 20 Jun 2021 15:54:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-622-3</guid>
        <source url="https://forum.rebol.info/t/get-foo-instead-of-foo-for-getting-unset-variables/622.rss">GET &#39;FOO instead of :FOO for getting unset variables</source>
      </item>
      <item>
        <title>GET &#39;FOO instead of :FOO for getting unset variables</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h3>Arguments Against</h3>
<ol>
<li>
<p>Unlike other changes, this is one that can't be twisted around to become backwards compatible.  There would be no way to be compatible with Red/Rebol2/R3-Alpha's behavior if the evaluator were changed in this way.</p>
</li>
<li>
<p>Having GET and GET-WORD! finally do the same thing in Ren-C...as they do at the moment...may be seen as a victory for clarity, and hence should be kept.</p>
</li>
<li>
<p>Casual code that uses GET-WORD! can easily be rewritten to use GET.  But some of the functions that need it most are generic, and having to write GET 'X introduces clutter into already tough-to-understand functions.  Plus, debugging them after the change is not pleasant.</p>
</li>
</ol>
<p>So if this is to be heeded, then it suggests perhaps SET should be null-tolerant by default as well.</p>
<p>What this may suggest is a need for a <a href="https://forum.rebol.info/t/we-really-need-a-better-name-for-really/1250">cheaper form of a check which ensures something is not null, if you are suspicious it might be</a>.</p>
          <p><a href="https://forum.rebol.info/t/get-foo-instead-of-foo-for-getting-unset-variables/622/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-foo-instead-of-foo-for-getting-unset-variables/622/2</link>
        <pubDate>Tue, 15 May 2018 15:02:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-622-2</guid>
        <source url="https://forum.rebol.info/t/get-foo-instead-of-foo-for-getting-unset-variables/622.rss">GET &#39;FOO instead of :FOO for getting unset variables</source>
      </item>
      <item>
        <title>GET &#39;FOO instead of :FOO for getting unset variables</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>When I first learned about the idea that GET-WORD! evaluation allowed you to get an UNSET!, I thought that was kind of cool.</p>
<p>But over time, it began to bother me, because when I'd see a GET-WORD! I didn't really know why it was being used.  Was it to avoid invoking a function, or was it to avoid triggering a variable-is-unset error?  I'd often get bitten by the case where I was trying to just disarm a function without realizing it was unset all along.</p>
<p>Ren-C's behavior of GET will return NULL if something is not set...allowing you to either work with that (or let it error if where you're passing it doesn't take NULL), or blankify it with <strong>try get</strong>, or trigger an error on the spot if it's not set with <strong>really get</strong>.  So if you write <strong>get foo</strong> you're getting the nullable behavior previously possible with just <strong>:foo</strong>.</p>
<p>This makes me wonder if it would be saner if GET-WORD! errored on unset variables.  That way, you could assume seeing :FOO meant you were trying to deactivate an action! so it wouldn't run (or it had some dialected purpose, or was passed to a soft quote, etc.)  But it would give people the certainty that the person who wrote :FOO intended for it to be bound and set.</p>
<p>Because historical R3-Alpha, Rebol2, and Red GET all error on unset variables, and GET-WORD! does not, this would be the reverse bias of their behavior.</p>
<p>But I think the GET form reads more naturally when combined with constructs that might operate on NULL.  Compare:</p>
<pre><code>x: :foo else [...]
x: get 'foo else [...]

x: try :foo
x: try get 'foo

x: :foo
x: get 'foo
</code></pre>
<p>And as mentioned, I've found that many cases of writing things like <strong>x: :foo</strong> wind up surprised when foo is not set, because they were trying to duplicate an action.</p>
<p>Any objections?  The change would obviously be for both GET-PATH! and GET-WORD!</p>
          <p><a href="https://forum.rebol.info/t/get-foo-instead-of-foo-for-getting-unset-variables/622/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-foo-instead-of-foo-for-getting-unset-variables/622/1</link>
        <pubDate>Tue, 15 May 2018 08:35:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-622-1</guid>
        <source url="https://forum.rebol.info/t/get-foo-instead-of-foo-for-getting-unset-variables/622.rss">GET &#39;FOO instead of :FOO for getting unset variables</source>
      </item>
  </channel>
</rss>

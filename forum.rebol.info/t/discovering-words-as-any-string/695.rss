<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Discovering Words as ANY-STRING!</title>
    <link>https://forum.rebol.info/t/discovering-words-as-any-string/695</link>
    <description>Rebol&#39;s extremely strange nature makes people wonder what they should or shouldn&#39;t be doing with it.  When I tried writing basically my &quot;first mezzanine&quot; ([COMBINE](http://blog.hostilefork.com/combine-alternative-rebol-red-rejoin/)) long ago, I faced questions pretty much anyone writing such a primitive would...like **Should a WORD! be treated casually as if it were an ANY-STRING!?**

     &gt;&gt; mode: &#39;depeche
     &gt;&gt; combine/with [&quot;a&quot; mode &quot;b&quot;] space
     == &quot;a depeche b&quot;

Back then, I didn&#39;t know if that should be an error or not.  And if WORD! would be legal, should SET-WORD! too?  Would it have a colon?  Or was there a higher purpose for these things in the dialect, and should a variable holding one act the same as if one were literally present in the block?

Ren-C is on the path of thinking of &quot;ANY-WORD!&quot; as being strings is correct.  Which led me to consider this piece of code from HELP:

    for-each [a b] [
        &quot;!&quot; &quot;-ex&quot;
        &quot;?&quot; &quot;-q&quot;
        &quot;*&quot; &quot;-mul&quot;
        &quot;+&quot; &quot;-plu&quot;
        &quot;/&quot; &quot;-div&quot;
        &quot;=&quot; &quot;-eq&quot;
        &quot;&lt;&quot; &quot;-lt&quot;
        &quot;&gt;&quot; &quot;-gt&quot;
        &quot;|&quot; &quot;-bar&quot;
    ][
        replace/all item a b
    ]

What it is doing is pretty simple.  It is trying to convert a Rebol name to one that is readable/safe to use in a URL, so the help website URL doesn&#39;t have &quot;weird&quot; characters in it.

But if we&#39;re all on board with WORD! as working as a string, do you really need all those quotes?  Couldn&#39;t you say:

    for-each [a b] [
        ! -ex
        ? -q
        * -mul
        + -plu
        / -div
        = -eq
        &lt; -lt
        &gt; -gt
        | -bar
    ][
        replace/all item a b
    ]

You can do that, though it won&#39;t work for everything.  e.g. `:` would not be a legal WORD!.  And `|` is BAR!...like how `_` is a BLANK!...one must wonder, if those will &quot;stringify&quot; to be how they look.  Is this a good practice?

What I want us to be saying clearly now is *YES: it&#39;s a good practice and you can count on writing code like this*.  I think it&#39;s foundational to what Rebol is about.

Though as a matter of taste, I actually think the following looks slightly better, because using different types creates a kind of delimiting:

    for-each [a b] [
        ! &quot;-ex&quot;
        ? &quot;-q&quot;
        * &quot;-mul&quot;
        + &quot;-plu&quot;
        / &quot;-div&quot;
        = &quot;-eq&quot;
        &lt; &quot;-lt&quot;
        &gt; &quot;-gt&quot;
        | &quot;-bar&quot;
    ][
        replace/all item a b
    ]

But that&#39;s just me.  YMMV.

When put together with the [null change](https://trello.com/c/rmsTJueg/89-click-here-and-on-cards-for-notes), this gives a reasoning to why **print [&quot;a&quot; _ &quot;b&quot;]** will actually print out `a _ b`, *with the underscore*.  That seemed annoying before, because &quot;who wants to actually see the underscore?&quot;  But now we know it&#39;s null&#39;s job to be invisible, and they&#39;re popping up in more places.  So when you consider this example, you understand that blanks might arise in places where they were being used source level for their &quot;underscore-ness&quot;...not for their BLANK!-ness.</description>
    
    <lastBuildDate>Sun, 17 Jun 2018 18:59:38 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/discovering-words-as-any-string/695.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Discovering Words as ANY-STRING!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Rebol's extremely strange nature makes people wonder what they should or shouldn't be doing with it.  When I tried writing basically my "first mezzanine" (<a href="http://blog.hostilefork.com/combine-alternative-rebol-red-rejoin/" rel="nofollow noopener">COMBINE</a>) long ago, I faced questions pretty much anyone writing such a primitive would...like <strong>Should a WORD! be treated casually as if it were an ANY-STRING!?</strong></p>
<pre><code> &gt;&gt; mode: 'depeche
 &gt;&gt; combine/with ["a" mode "b"] space
 == "a depeche b"
</code></pre>
<p>Back then, I didn't know if that should be an error or not.  And if WORD! would be legal, should SET-WORD! too?  Would it have a colon?  Or was there a higher purpose for these things in the dialect, and should a variable holding one act the same as if one were literally present in the block?</p>
<p>Ren-C is on the path of thinking of "ANY-WORD!" as being strings is correct.  Which led me to consider this piece of code from HELP:</p>
<pre><code>for-each [a b] [
    "!" "-ex"
    "?" "-q"
    "*" "-mul"
    "+" "-plu"
    "/" "-div"
    "=" "-eq"
    "&lt;" "-lt"
    "&gt;" "-gt"
    "|" "-bar"
][
    replace/all item a b
]
</code></pre>
<p>What it is doing is pretty simple.  It is trying to convert a Rebol name to one that is readable/safe to use in a URL, so the help website URL doesn't have "weird" characters in it.</p>
<p>But if we're all on board with WORD! as working as a string, do you really need all those quotes?  Couldn't you say:</p>
<pre><code>for-each [a b] [
    ! -ex
    ? -q
    * -mul
    + -plu
    / -div
    = -eq
    &lt; -lt
    &gt; -gt
    | -bar
][
    replace/all item a b
]
</code></pre>
<p>You can do that, though it won't work for everything.  e.g. <code>:</code> would not be a legal WORD!.  And <code>|</code> is BAR!...like how <code>_</code> is a BLANK!...one must wonder, if those will "stringify" to be how they look.  Is this a good practice?</p>
<p>What I want us to be saying clearly now is <em>YES: it's a good practice and you can count on writing code like this</em>.  I think it's foundational to what Rebol is about.</p>
<p>Though as a matter of taste, I actually think the following looks slightly better, because using different types creates a kind of delimiting:</p>
<pre><code>for-each [a b] [
    ! "-ex"
    ? "-q"
    * "-mul"
    + "-plu"
    / "-div"
    = "-eq"
    &lt; "-lt"
    &gt; "-gt"
    | "-bar"
][
    replace/all item a b
]
</code></pre>
<p>But that's just me.  YMMV.</p>
<p>When put together with the <a href="https://trello.com/c/rmsTJueg/89-click-here-and-on-cards-for-notes" rel="nofollow noopener">null change</a>, this gives a reasoning to why <strong>print ["a" _ "b"]</strong> will actually print out <code>a _ b</code>, <em>with the underscore</em>.  That seemed annoying before, because "who wants to actually see the underscore?"  But now we know it's null's job to be invisible, and they're popping up in more places.  So when you consider this example, you understand that blanks might arise in places where they were being used source level for their "underscore-ness"...not for their BLANK!-ness.</p>
          <p><a href="https://forum.rebol.info/t/discovering-words-as-any-string/695/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/discovering-words-as-any-string/695/1</link>
        <pubDate>Sun, 17 Jun 2018 18:59:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-695-1</guid>
        <source url="https://forum.rebol.info/t/discovering-words-as-any-string/695.rss">Discovering Words as ANY-STRING!</source>
      </item>
  </channel>
</rss>

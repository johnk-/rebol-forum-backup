<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Disambiguating `META OF` and the META-XXX! (^) Types</title>
    <link>https://forum.rebol.info/t/disambiguating-meta-of-and-the-meta-xxx-types/1631</link>
    <description>An idea that emerged early on in Ren-C was that there was often a need to associate an object with another object (or action), to give more information about it.

You could do this with a global MAP!.  But a built-in mechanism could be cheaper--and I foresaw the feature being foundational enough that efficiency would matter.  This would likely be needed for every ACTION!, every ERROR!, every MODULE!, and many other places...

This mechanism was called the &quot;meta&quot; information of the object or action.

## A New META in Town...

But now, the existence of the new **^word**, **^pa/th**, **^tu.p.le**, **^(gr o up)**, **^[bl o ck]** types give a category known as META-WORD!, META-PATH!, META-TUPLE!, etc.

I&#39;m confident that calling that META is good.  Given how foundational the technique is, I don&#39;t want to make understanding any harder by reusing the word for something completely unrelated.

It is likely that the lone word META will be a synonym for **^**, for those who don&#39;t like symbols.  Recall that it is lightly distinguished from QUOTE, e.g. that **^ null** is null (not **&#39;**) and it tolerates isotopes, returning the non-quoted BAD-WORD!:

    &gt;&gt; ~asdf~
    == ~asdf~  ; isotope

    &gt;&gt; first [~asdf~]
    == ~asdf~

    &gt;&gt; meta ~asdf~
    == ~asdf~

    &gt;&gt; meta first [~asdf~]
    == &#39;~asdf~

    &gt;&gt; meta null
    ; null

So what do we call the associated object?

* **auxiliary of ...**

* **linked of ...**

## Bigger Question: Is One Linked Object Enough?

Over time I&#39;ve come to wonder if keyed access is more important.  For instance, in JavaScript you are able to assign arbitrary field members to a function:

    &gt; function foo() {console.log(&quot;foo.x is &quot; + foo.x + &quot; and foo.y is &quot; + foo.y)}
    &gt; foo.x = 10
    &gt; foo.y = 20

    &gt; foo()
    &lt;- foo.x is 10 and foo.y is 20

Now that we can discern field access (foo.x) from refinement usage (foo/x), it makes it very tempting to follow suit and say that actions have arbitrary keyed fields like this.  This could be where the help lives.

If this was the case, then there&#39;s no need for a &quot;meta&quot; object or naming it.  You simply use dots.

This would require a re-imagining of how MODULE! works, but that&#39;s already happening in &quot;Sea of Words&quot;.  So it might mean that you can&#39;t link an arbitrary object to another object...you&#39;d make maps...which is what every other language does instead of having a &quot;secret&quot; place to scribble on.

In any case, it is likely that the old sense of META is going away entirely (though the mechanic it relies on would be exposed another way).  We&#39;ll see...

Internally in the macros I&#39;m thinking of calling it something like AUX_OF() to replace macros like META_OF().  You run out of these words eventually.  :frowning:</description>
    
    <lastBuildDate>Thu, 01 Jul 2021 16:51:53 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/disambiguating-meta-of-and-the-meta-xxx-types/1631.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Disambiguating `META OF` and the META-XXX! (^) Types</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>An idea that emerged early on in Ren-C was that there was often a need to associate an object with another object (or action), to give more information about it.</p>
<p>You could do this with a global MAP!.  But a built-in mechanism could be cheaper--and I foresaw the feature being foundational enough that efficiency would matter.  This would likely be needed for every ACTION!, every ERROR!, every MODULE!, and many other places...</p>
<p>This mechanism was called the "meta" information of the object or action.</p>
<h2>A New META in Town...</h2>
<p>But now, the existence of the new <strong>^word</strong>, <strong>^pa/th</strong>, <strong>^tu.p.le</strong>, <strong>^(gr o up)</strong>, <strong>^[bl o ck]</strong> types give a category known as META-WORD!, META-PATH!, META-TUPLE!, etc.</p>
<p>I'm confident that calling that META is good.  Given how foundational the technique is, I don't want to make understanding any harder by reusing the word for something completely unrelated.</p>
<p>It is likely that the lone word META will be a synonym for <strong>^</strong>, for those who don't like symbols.  Recall that it is lightly distinguished from QUOTE, e.g. that <strong>^ null</strong> is null (not <strong>'</strong>) and it tolerates isotopes, returning the non-quoted BAD-WORD!:</p>
<pre><code>&gt;&gt; ~asdf~
== ~asdf~  ; isotope

&gt;&gt; first [~asdf~]
== ~asdf~

&gt;&gt; meta ~asdf~
== ~asdf~

&gt;&gt; meta first [~asdf~]
== '~asdf~

&gt;&gt; meta null
; null
</code></pre>
<p>So what do we call the associated object?</p>
<ul>
<li>
<p><strong>auxiliary of ...</strong></p>
</li>
<li>
<p><strong>linked of ...</strong></p>
</li>
</ul>
<h2>Bigger Question: Is One Linked Object Enough?</h2>
<p>Over time I've come to wonder if keyed access is more important.  For instance, in JavaScript you are able to assign arbitrary field members to a function:</p>
<pre><code>&gt; function foo() {console.log("foo.x is " + foo.x + " and foo.y is " + foo.y)}
&gt; foo.x = 10
&gt; foo.y = 20

&gt; foo()
&lt;- foo.x is 10 and foo.y is 20
</code></pre>
<p>Now that we can discern field access (foo.x) from refinement usage (foo/x), it makes it very tempting to follow suit and say that actions have arbitrary keyed fields like this.  This could be where the help lives.</p>
<p>If this was the case, then there's no need for a "meta" object or naming it.  You simply use dots.</p>
<p>This would require a re-imagining of how MODULE! works, but that's already happening in "Sea of Words".  So it might mean that you can't link an arbitrary object to another object...you'd make maps...which is what every other language does instead of having a "secret" place to scribble on.</p>
<p>In any case, it is likely that the old sense of META is going away entirely (though the mechanic it relies on would be exposed another way).  We'll see...</p>
<p>Internally in the macros I'm thinking of calling it something like AUX_OF() to replace macros like META_OF().  You run out of these words eventually.  <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=9" title=":frowning:" class="emoji" alt=":frowning:"></p>
          <p><a href="https://forum.rebol.info/t/disambiguating-meta-of-and-the-meta-xxx-types/1631/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/disambiguating-meta-of-and-the-meta-xxx-types/1631/1</link>
        <pubDate>Thu, 01 Jul 2021 16:37:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1631-1</guid>
        <source url="https://forum.rebol.info/t/disambiguating-meta-of-and-the-meta-xxx-types/1631.rss">Disambiguating `META OF` and the META-XXX! (^) Types</source>
      </item>
  </channel>
</rss>

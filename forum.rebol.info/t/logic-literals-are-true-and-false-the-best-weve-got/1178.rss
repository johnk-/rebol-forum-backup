<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>LOGIC! Literals: are $true and $false the best we&#39;ve got?</title>
    <link>https://forum.rebol.info/t/logic-literals-are-true-and-false-the-best-weve-got/1178</link>
    <description>I&#39;ve wondered aloud in the past if Rebol truly needs a LOGIC! datatype.  One line of argumentation might say that TRUE and FALSE are really just a limited sense of an enumerated type, which could easily be expanded.  (To a [tribool](https://www.boost.org/doc/libs/1_59_0/doc/html/tribool/tutorial.html#idp473654464), even, with an &#39;indeterminate&#39; state that fails both tests for truth -and- falsehood...)

So if people are always going to be trying to get back to the WORD!s `true` and `false` (or `on` or `off`, `yes` or `no`, etc.) for output purposes, are we doing them any favors by having LOGIC! in the system as its own narrow type?  Doesn&#39;t it just delay the inevitable?

Perhaps NULL and BLANK! could be the only falsey types:

    &gt;&gt; 1 = 2
    == _

    &gt;&gt; 1 = 1
    == []  ; ...arbitrary truthy thing?

Or the devil&#39;s advocate might ask if the rule against &quot;reserved words&quot; be broken, and just take **true** and **false** away from WORD!?   e.g.

    &gt;&gt; type of first [true]
    == @logic!  ; see new datatype proposal post for why this would be @logic!

I&#39;ve never thought this to be a good idea.  So the nominal proposal has just been to make LOGIC! literals something like **$true** and **$false**.

## I&#39;m now convinced LOGIC! false as distinct from BLANK! is critical

The evolution of NULL over time has seen it come up as being nearly equivalent in meaning to BLANK!.  You see this in the variants of DELIMIT (e.g. SPACED, used by PRINT):

    &gt;&gt; var: try if false [&quot;opted out by variable&quot;]
    == _

    &gt;&gt; spaced [if false [&quot;opted out directly&quot;] &quot;stuff&quot; var]
    == &quot;stuff&quot;

BLANK!s give you a means of not triggering an error when accessing a variable.  But the behavior is often supposed to be the same in a dialect as a NULL that didn&#39;t go through a variable.  The same is true in PARSE:

    &gt;&gt; norule: _

    &gt;&gt; parse &quot;aaaccc&quot; [norule some &quot;a&quot; :(if false &#39;[some &quot;b&quot;]) some &quot;c&quot;]
    == &quot;&quot;  ; e.g. success

And PARSE is a good example of a dialect where I feel the result of a logical operation should be how we drive rules to fail.  This just seems to make sense for the meaning of LOGIC!, and is incredibly clean:

    &gt;&gt; mode: &#39;alpha

    &gt;&gt; parse &quot;aaa?bbb&quot; [
             some [
                 :(mode = &#39;alpha) &quot;a&quot;
                 |
                 :(mode = &#39;beta) &quot;b&quot;
                 |
                 &quot;?&quot; (mode: &#39;beta)
                 |
                 (fail &quot;This is a much better use of the FAIL term!&quot;)
             ]
     ]
     == &quot;&quot;

What I mean to say is that the result of a comparison operation feels like it needs a different semantic weight than something that opted out or went missing.  A distinct type is called for here.  Doing something weird like calling out one special @-style-word as falsey (e.g. @false) feels like bad mojo for accomplishing it.

## Why not stick with #[true] and #[false] ?

I really don&#39;t want to be getting the WORD!-look confused with the LOGIC!-type.

    rebol2&gt;&gt; type? 1 = 1
    == true  ; This is very anti-educational

So the way I see it, you&#39;re going to be seeing these LOGIC! literals in a true LOAD-able form a lot.

We&#39;ve discussed in the past being cutesy and not using words at all, like **`#[+]`** and **`#[-]`**.  Or some variant of **`:-)`** and **`:-(`** , and now that we have the full range of UTF-8 codepoints we have some emoji options I would suppose: ✅ and ❌ .

&quot;Nonsense&quot; aside...having the brackets around seems visually too heavy for something that will be coming up often that has such an atomic nature.  **$true** and **$false** aren&#39;t stellar, but they&#39;re at least decent.  But maybe **#[true]** and **#[false]** should be left as is.  I dunno.  This needs a pinned down answer, and the rendering needs to be able to LOAD back a LOGIC! and not get you a WORD!.

Anyway, my main point here is just about the idea that the LOGIC! type and literals of it seem of foundational importance...and that the BLANK! notion is truly no substitute any longer for falseness (as I once might have mused it could be).</description>
    
    <lastBuildDate>Wed, 19 Jun 2019 07:51:53 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/logic-literals-are-true-and-false-the-best-weve-got/1178.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>LOGIC! Literals: are $true and $false the best we&#39;ve got?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've wondered aloud in the past if Rebol truly needs a LOGIC! datatype.  One line of argumentation might say that TRUE and FALSE are really just a limited sense of an enumerated type, which could easily be expanded.  (To a <a href="https://www.boost.org/doc/libs/1_59_0/doc/html/tribool/tutorial.html#idp473654464" rel="nofollow noopener">tribool</a>, even, with an 'indeterminate' state that fails both tests for truth -and- falsehood...)</p>
<p>So if people are always going to be trying to get back to the WORD!s <code>true</code> and <code>false</code> (or <code>on</code> or <code>off</code>, <code>yes</code> or <code>no</code>, etc.) for output purposes, are we doing them any favors by having LOGIC! in the system as its own narrow type?  Doesn't it just delay the inevitable?</p>
<p>Perhaps NULL and BLANK! could be the only falsey types:</p>
<pre><code>&gt;&gt; 1 = 2
== _

&gt;&gt; 1 = 1
== []  ; ...arbitrary truthy thing?
</code></pre>
<p>Or the devil's advocate might ask if the rule against "reserved words" be broken, and just take <strong>true</strong> and <strong>false</strong> away from WORD!?   e.g.</p>
<pre><code>&gt;&gt; type of first [true]
== @logic!  ; see new datatype proposal post for why this would be @logic!
</code></pre>
<p>I've never thought this to be a good idea.  So the nominal proposal has just been to make LOGIC! literals something like <strong>$true</strong> and <strong>$false</strong>.</p>
<h2>I'm now convinced LOGIC! false as distinct from BLANK! is critical</h2>
<p>The evolution of NULL over time has seen it come up as being nearly equivalent in meaning to BLANK!.  You see this in the variants of DELIMIT (e.g. SPACED, used by PRINT):</p>
<pre><code>&gt;&gt; var: try if false ["opted out by variable"]
== _

&gt;&gt; spaced [if false ["opted out directly"] "stuff" var]
== "stuff"
</code></pre>
<p>BLANK!s give you a means of not triggering an error when accessing a variable.  But the behavior is often supposed to be the same in a dialect as a NULL that didn't go through a variable.  The same is true in PARSE:</p>
<pre><code>&gt;&gt; norule: _

&gt;&gt; parse "aaaccc" [norule some "a" :(if false '[some "b"]) some "c"]
== ""  ; e.g. success
</code></pre>
<p>And PARSE is a good example of a dialect where I feel the result of a logical operation should be how we drive rules to fail.  This just seems to make sense for the meaning of LOGIC!, and is incredibly clean:</p>
<pre><code>&gt;&gt; mode: 'alpha

&gt;&gt; parse "aaa?bbb" [
         some [
             :(mode = 'alpha) "a"
             |
             :(mode = 'beta) "b"
             |
             "?" (mode: 'beta)
             |
             (fail "This is a much better use of the FAIL term!")
         ]
 ]
 == ""
</code></pre>
<p>What I mean to say is that the result of a comparison operation feels like it needs a different semantic weight than something that opted out or went missing.  A distinct type is called for here.  Doing something weird like calling out one special @-style-word as falsey (e.g. <span class="mention">@false</span>) feels like bad mojo for accomplishing it.</p>
<h2>Why not stick with #[true] and #[false] ?</h2>
<p>I really don't want to be getting the WORD!-look confused with the LOGIC!-type.</p>
<pre><code>rebol2&gt;&gt; type? 1 = 1
== true  ; This is very anti-educational
</code></pre>
<p>So the way I see it, you're going to be seeing these LOGIC! literals in a true LOAD-able form a lot.</p>
<p>We've discussed in the past being cutesy and not using words at all, like <strong><code>#[+]</code></strong> and <strong><code>#[-]</code></strong>.  Or some variant of <strong><code>:-)</code></strong> and <strong><code>:-(</code></strong> , and now that we have the full range of UTF-8 codepoints we have some emoji options I would suppose: <img src="https://forum.rebol.info/images/emoji/twitter/white_check_mark.png?v=9" title=":white_check_mark:" class="emoji" alt=":white_check_mark:"> and <img src="https://forum.rebol.info/images/emoji/twitter/x.png?v=9" title=":x:" class="emoji" alt=":x:"> .</p>
<p>"Nonsense" aside...having the brackets around seems visually too heavy for something that will be coming up often that has such an atomic nature.  <strong>$true</strong> and <strong>$false</strong> aren't stellar, but they're at least decent.  But maybe <strong>#[true]</strong> and <strong>#[false]</strong> should be left as is.  I dunno.  This needs a pinned down answer, and the rendering needs to be able to LOAD back a LOGIC! and not get you a WORD!.</p>
<p>Anyway, my main point here is just about the idea that the LOGIC! type and literals of it seem of foundational importance...and that the BLANK! notion is truly no substitute any longer for falseness (as I once might have mused it could be).</p>
          <p><a href="https://forum.rebol.info/t/logic-literals-are-true-and-false-the-best-weve-got/1178/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/logic-literals-are-true-and-false-the-best-weve-got/1178/1</link>
        <pubDate>Wed, 19 Jun 2019 06:53:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1178-1</guid>
        <source url="https://forum.rebol.info/t/logic-literals-are-true-and-false-the-best-weve-got/1178.rss">LOGIC! Literals: are $true and $false the best we&#39;ve got?</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Weird Dynamic Binding Idea: Climbing The Chain?</title>
    <link>https://forum.rebol.info/t/weird-dynamic-binding-idea-climbing-the-chain/1752</link>
    <description>I&#39;ve lamented the performance impacts of having to search &quot;specifier&quot; binding chains to look things up, and how it&#39;s nice that it finds newly emerging elements (like declarations that get added to modules) but how uncacheable it is...

But there&#39;s an odd thing about a chain of lookup that keeps compounding, in that you could ask not to take the *first* match, but to involve a count of how many times you&#39;ve found it.

*There are already some ideas for what leading tuple might mean, **but***... let&#39;s imagine it being used for this purpose.  It could be something else:

    x: 10

    foo: func [x] [
        let x: 30
        print [x .x ..x]   ; What if this printed `30 20 10` ??
    ]

    foo 20

Just a thought.  Things are pretty chaotic in binding, and having code demonstrate such a &quot;meta-awareness&quot; of what&#39;s going on in the binding above seems like it could be moreso.  But it&#39;s crossed my mind a couple times so I thought I&#39;d mention it.</description>
    
    <lastBuildDate>Wed, 27 Oct 2021 09:11:12 +0000</lastBuildDate>
    <category>Binding</category>
    <atom:link href="https://forum.rebol.info/t/weird-dynamic-binding-idea-climbing-the-chain/1752.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Weird Dynamic Binding Idea: Climbing The Chain?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've lamented the performance impacts of having to search "specifier" binding chains to look things up, and how it's nice that it finds newly emerging elements (like declarations that get added to modules) but how uncacheable it is...</p>
<p>But there's an odd thing about a chain of lookup that keeps compounding, in that you could ask not to take the <em>first</em> match, but to involve a count of how many times you've found it.</p>
<p><em>There are already some ideas for what leading tuple might mean, <strong>but</strong></em>... let's imagine it being used for this purpose.  It could be something else:</p>
<pre><code>x: 10

foo: func [x] [
    let x: 30
    print [x .x ..x]   ; What if this printed `30 20 10` ??
]

foo 20
</code></pre>
<p>Just a thought.  Things are pretty chaotic in binding, and having code demonstrate such a "meta-awareness" of what's going on in the binding above seems like it could be moreso.  But it's crossed my mind a couple times so I thought I'd mention it.</p>
          <p><a href="https://forum.rebol.info/t/weird-dynamic-binding-idea-climbing-the-chain/1752/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/weird-dynamic-binding-idea-climbing-the-chain/1752/1</link>
        <pubDate>Wed, 27 Oct 2021 09:11:12 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1752-1</guid>
        <source url="https://forum.rebol.info/t/weird-dynamic-binding-idea-climbing-the-chain/1752.rss">Weird Dynamic Binding Idea: Climbing The Chain?</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Using Ren-C As The Shell In GitHub CI</title>
    <link>https://forum.rebol.info/t/using-ren-c-as-the-shell-in-github-ci/1547</link>
    <description>*(Check this out, @giuliolunati ...!)*

There&#39;s a feature in GitHub CI which lets you override the shell used in a workflow.  You can do it for the whole workflow, or even on a step-by-step basis.

This got me to wondering what it would be like to use Ren-C as the shell for a step.  It took a little tinkering, but I got it to work!

Here it is using an executable for Windows (that it just built) to test HTTPS reads:

    - name: HTTPS Read Test
      shell: r3 --fragment {0}
      run: |
        print {== Hello From R3 HTTPS Read Test! ==}
        parse as text! read https://example.com [
            thru &lt;h1&gt; copy header: to &lt;/h1&gt; to end
        ] else [
            fail &quot;Couldn&#39;t Capture Page Title&quot;
        ]
        assert [header = &quot;Example Domain&quot;]
        print [&quot;Succeeded:&quot; header]

**[And it works!!](https://github.com/metaeducation/ren-c/runs/2066230493?check_suite_focus=true#step:16:40)**

What GitHub is doing is it&#39;s taking the body of what&#39;s in the **`run`** section and writing it to a temporary file with a random name off in some weird directory.  Then it substitutes that weird name in for the `{0}` in the shell expression.

## The New `--fragment` Option

There were a lot of details on the path to getting that working.  But I&#39;ll just focus here on the new feature of saying that a script is a &quot;fragment&quot;.

* **We Don&#39;t Want To Change Into the Temporary Directory The Fragment Lives In**.  Rebol has historically switched to the directory a script lives in, and on balance I think that&#39;s the right default.  It helps the script find its own resources, where it has the most likely ability to neatly refer to files by short paths.  But this is a lone file...there&#39;s nothing to gain by doing that, and it&#39;s a disruption.

* **I Don&#39;t Think It Should Need A Header, Either**.  It would be a competitive disadvantage in this scenario--compared to other shells--if you had to put a dummy header in there.  By using a special name and a setting for &quot;fragment&quot; we have a way on the command line of saying &quot;hey, this has no header, and I meant that&quot;. 

* **GitHub CI Threw In CR LF, we need an excuse to tolerate it**.  Even though the YAML for the original code had just LF, the temp file for the run lines got CRs added.  I&#39;m still pretty bullish on saying we need to consider this just like a syntax error or any other illegal sequence of characters.  If a strong stance isn&#39;t taken, then it screws everyone forever.  But here the compromise is that you have declared this isn&#39;t the kind of file you&#39;d be sharing...not a &quot;full script&quot;...so it makes it a bit more okay to strip the CR LF silently (On Windows only, though!)

## :bulb: GitHub Action Dialects Might Have A Lot Of Potential :bulb: 

Not everyone has figured out that this is possible, yet.  But I found [a post on the Julia forum](https://discourse.julialang.org/t/tip-use-julia-as-custom-shell-in-github-actions/53377) while I was doing it, showing that a few people are catching on to the idea.

But what we can do in customization could potentially go quite a lot farther than &quot;Bash control structures but in a language you are more familiar with&quot;.  What the code does can be creatively tailored to the domain being solved.

A GitHub Action can make including the feature as easy as one line for users.  And we have the advantage of being able to make single-exe tools that could install on all the container types.  *(All of them are 64-bit.  Sorry, Red...)*

Could be interesting.  We&#39;ll see!</description>
    
    <lastBuildDate>Tue, 16 Mar 2021 11:37:11 +0000</lastBuildDate>
    <category>Build System</category>
    <atom:link href="https://forum.rebol.info/t/using-ren-c-as-the-shell-in-github-ci/1547.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Using Ren-C As The Shell In GitHub CI</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was split to a new topic: <a href="/t/the-new-ren-c-github-action-run-natively-run-on-web/1562">The New Ren-C GitHub Action: Run Natively, Run on Web!</a></p>
          <p><a href="https://forum.rebol.info/t/using-ren-c-as-the-shell-in-github-ci/1547/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/using-ren-c-as-the-shell-in-github-ci/1547/3</link>
        <pubDate>Tue, 16 Mar 2021 12:05:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1547-3</guid>
        <source url="https://forum.rebol.info/t/using-ren-c-as-the-shell-in-github-ci/1547.rss">Using Ren-C As The Shell In GitHub CI</source>
      </item>
      <item>
        <title>Using Ren-C As The Shell In GitHub CI</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1547">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But what we can do in customization could potentially go quite a lot farther than "Bash control structures but in a language you are more familiar with". What the code does can be creatively tailored to the domain being solved.</p>
</blockquote>
</aside>
<p>Agree <img src="https://forum.rebol.info/images/emoji/twitter/100.png?v=9" title=":100:" class="emoji" alt=":100:"> This area is interesting/exciting for a language like Ren-C, where the language flexibility ought to open up creative ways of semantically "wrapping" other tools with dialects.</p>
          <p><a href="https://forum.rebol.info/t/using-ren-c-as-the-shell-in-github-ci/1547/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/using-ren-c-as-the-shell-in-github-ci/1547/2</link>
        <pubDate>Tue, 09 Mar 2021 14:21:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1547-2</guid>
        <source url="https://forum.rebol.info/t/using-ren-c-as-the-shell-in-github-ci/1547.rss">Using Ren-C As The Shell In GitHub CI</source>
      </item>
      <item>
        <title>Using Ren-C As The Shell In GitHub CI</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em>(Check this out, <a class="mention" href="/u/giuliolunati">@giuliolunati</a> ...!)</em></p>
<p>There's a feature in GitHub CI which lets you override the shell used in a workflow.  You can do it for the whole workflow, or even on a step-by-step basis.</p>
<p>This got me to wondering what it would be like to use Ren-C as the shell for a step.  It took a little tinkering, but I got it to work!</p>
<p>Here it is using an executable for Windows (that it just built) to test HTTPS reads:</p>
<pre><code>- name: HTTPS Read Test
  shell: r3 --fragment {0}
  run: |
    print {== Hello From R3 HTTPS Read Test! ==}
    parse as text! read https://example.com [
        thru &lt;h1&gt; copy header: to &lt;/h1&gt; to end
    ] else [
        fail "Couldn't Capture Page Title"
    ]
    assert [header = "Example Domain"]
    print ["Succeeded:" header]
</code></pre>
<p><strong><a href="https://github.com/metaeducation/ren-c/runs/2066230493?check_suite_focus=true#step:16:40">And it works!!</a></strong></p>
<p>What GitHub is doing is it's taking the body of what's in the <strong><code>run</code></strong> section and writing it to a temporary file with a random name off in some weird directory.  Then it substitutes that weird name in for the <code>{0}</code> in the shell expression.</p>
<h2>The New <code>--fragment</code> Option</h2>
<p>There were a lot of details on the path to getting that working.  But I'll just focus here on the new feature of saying that a script is a "fragment".</p>
<ul>
<li>
<p><strong>We Don't Want To Change Into the Temporary Directory The Fragment Lives In</strong>.  Rebol has historically switched to the directory a script lives in, and on balance I think that's the right default.  It helps the script find its own resources, where it has the most likely ability to neatly refer to files by short paths.  But this is a lone file...there's nothing to gain by doing that, and it's a disruption.</p>
</li>
<li>
<p><strong>I Don't Think It Should Need A Header, Either</strong>.  It would be a competitive disadvantage in this scenario--compared to other shells--if you had to put a dummy header in there.  By using a special name and a setting for "fragment" we have a way on the command line of saying "hey, this has no header, and I meant that".</p>
</li>
<li>
<p><strong>GitHub CI Threw In CR LF, we need an excuse to tolerate it</strong>.  Even though the YAML for the original code had just LF, the temp file for the run lines got CRs added.  I'm still pretty bullish on saying we need to consider this just like a syntax error or any other illegal sequence of characters.  If a strong stance isn't taken, then it screws everyone forever.  But here the compromise is that you have declared this isn't the kind of file you'd be sharing...not a "full script"...so it makes it a bit more okay to strip the CR LF silently (On Windows only, though!)</p>
</li>
</ul>
<h2>
<img src="https://forum.rebol.info/images/emoji/twitter/bulb.png?v=9" title=":bulb:" class="emoji" alt=":bulb:"> GitHub Action Dialects Might Have A Lot Of Potential <img src="https://forum.rebol.info/images/emoji/twitter/bulb.png?v=9" title=":bulb:" class="emoji" alt=":bulb:">
</h2>
<p>Not everyone has figured out that this is possible, yet.  But I found <a href="https://discourse.julialang.org/t/tip-use-julia-as-custom-shell-in-github-actions/53377">a post on the Julia forum</a> while I was doing it, showing that a few people are catching on to the idea.</p>
<p>But what we can do in customization could potentially go quite a lot farther than "Bash control structures but in a language you are more familiar with".  What the code does can be creatively tailored to the domain being solved.</p>
<p>A GitHub Action can make including the feature as easy as one line for users.  And we have the advantage of being able to make single-exe tools that could install on all the container types.  <em>(All of them are 64-bit.  Sorry, Red...)</em></p>
<p>Could be interesting.  We'll see!</p>
          <p><a href="https://forum.rebol.info/t/using-ren-c-as-the-shell-in-github-ci/1547/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/using-ren-c-as-the-shell-in-github-ci/1547/1</link>
        <pubDate>Tue, 09 Mar 2021 12:37:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1547-1</guid>
        <source url="https://forum.rebol.info/t/using-ren-c-as-the-shell-in-github-ci/1547.rss">Using Ren-C As The Shell In GitHub CI</source>
      </item>
  </channel>
</rss>

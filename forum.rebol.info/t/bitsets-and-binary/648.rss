<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Bitsets and Binary</title>
    <link>https://forum.rebol.info/t/bitsets-and-binary/648</link>
    <description>With the divergence of STRING! and BINARY! you have two similarly diverging needs of BITSET!

* For STRING!—matching character sequences including higher unicode values:

```rebol
dashes: charset [&quot;-&quot; &quot;–&quot; &quot;—&quot;]
```

* For BINARY!—matching byte ranges:

```rebol
upper: charset [128 - 255]
```

However, there are situations where it&#39;d be desirable to mix usages, for example where UTF-8 sequences are delimited by certain byte sequences:

```rebol
parse some-stream [2 upper some dashes]
```

Presumably `some-stream` would be BINARY! as there&#39;d be no non-UTF-8 higher byte sequences in STRING!</description>
    
    <lastBuildDate>Sun, 03 Jun 2018 00:24:10 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/bitsets-and-binary/648.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Bitsets and Binary</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="1" data-topic="648">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>there are situations where it’d be desirable to mix usages,</p>
</blockquote>
</aside>
<p>I guess I had thought that whether you were parsing a BINARY! or an ANY-STRING! would provide the interpretation.  But you are right that when parsing a BINARY! one might want the codepoint interpretation vs. the byte interpretation.</p>
<p>There's really only two avenues of solution: a PARSE keyword to distinguish the usage, or a datatype distinction (byteset!)?  I have a vague feeling this is an esoteric problem for which PARSE's oddity should be paying the tax, and it should be a PARSE keyword...maybe even something strange like being able to go INTO a BINARY! from a string parse or vice versa, switching the interpretation mode?</p>
          <p><a href="https://forum.rebol.info/t/bitsets-and-binary/648/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/bitsets-and-binary/648/2</link>
        <pubDate>Sun, 03 Jun 2018 00:24:10 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-648-2</guid>
        <source url="https://forum.rebol.info/t/bitsets-and-binary/648.rss">Bitsets and Binary</source>
      </item>
      <item>
        <title>Bitsets and Binary</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>With the divergence of STRING! and BINARY! you have two similarly diverging needs of BITSET!</p>
<ul>
<li>For STRING!—matching character sequences including higher unicode values:</li>
</ul>
<pre><code class="lang-auto">dashes: charset ["-" "–" "—"]
</code></pre>
<ul>
<li>For BINARY!—matching byte ranges:</li>
</ul>
<pre><code class="lang-auto">upper: charset [128 - 255]
</code></pre>
<p>However, there are situations where it'd be desirable to mix usages, for example where UTF-8 sequences are delimited by certain byte sequences:</p>
<pre><code class="lang-auto">parse some-stream [2 upper some dashes]
</code></pre>
<p>Presumably <code>some-stream</code> would be BINARY! as there'd be no non-UTF-8 higher byte sequences in STRING!</p>
          <p><a href="https://forum.rebol.info/t/bitsets-and-binary/648/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/bitsets-and-binary/648/1</link>
        <pubDate>Mon, 28 May 2018 20:50:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-648-1</guid>
        <source url="https://forum.rebol.info/t/bitsets-and-binary/648.rss">Bitsets and Binary</source>
      </item>
  </channel>
</rss>

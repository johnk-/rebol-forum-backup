<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</title>
    <link>https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309</link>
    <description>**I pretty much consider being able to declare variables at the point they are first used to be a non-negotiable feature.**

This is why I was a big fan of FUNCT when I first saw it.  It looked for SET-WORD!s in your function and &quot;gathered&quot; them up implicitly as being local to that function.

     funct [arg1 arg2] [  ; R3-Alpha &quot;funct&quot;
         local1: 10
         local2: 20
         return (local1 + arg1) * (local2 + arg2)
     ]
     =&gt; func [arg1 arg2 /local local1 local2] [  ; equivalent R3-Alpha code
         local1: 10
         local2: 20
         return (local1 + arg1) * (local2 + arg2)
     ]

I was one of the proponents for it taking over the relatively-useless role of FUNCTION, which was previously a fairly lame contraction like this:

    function [arg1 arg2] [local1 local2] [...body...]   ; Rebol2 &quot;function&quot;
    =&gt; func [arg1 arg2 /local local1 local2] [...body...]  ; equivalent Rebol2 code

**As you write more sophisticated code, you start to realize the weakness of automatically assuming SET-WORD!s are local.**  There are many uses of SET-WORD!s that are not implied as being local variables, and if dialect authors are to be free with using them as labels or other purposes then there will be many more.

**[I&#39;ve written about the problems - Please Review if you haven&#39;t already.](https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150)**

## I&#39;ve experimented with LET as a replacement, but I&#39;m not happy yet.

Right now, LET works mechanically about the same as SET-WORD!s did.  **let x: 10** behaves in a FUNC or FUNCTION body just as **x: 10** did in a FUNCT(ION).

It&#39;s an improvement in the sense that it sacrifices a single word--instead of the whole class of values of SET-WORD!--for carrying the meaning of declaring a local.

There are questions about how this can interact with PARSE or other dialects, which had expanded their syntax e.g. to allow **copy x: [some &quot;a&quot;]** instead of just **copy x [some &quot;a&quot;]**.  Should that now enable **copy let x: [some &quot;a&quot;]**?  Who is responsible for these dialect syntax exceptions, where any point of providing a variable to assign might want to also declare that variable?

Beyond that... I have a nagging feeling that the way it works is wrong...injecting variables into the function definition and being scanned for.  I feel like it should work more like a USE does, and be dynamically binding the code that comes after it when it is encountered.  If you want to add variables to a function&#39;s definition you should always be able to do that with `&lt;local&gt;`.  But something tells me that LET should be a different beast...that uses a syntax trick to create a wave of binding that affects the statements after it instead of forcing your hand in making a code block the way USE does.

## Can we punt on it?

Rebol2 got a fair way with just `/local`.  I think it would have been safer if it had *unbound* any SET-WORD!s in the body that were not explicitly declared or imported.

One of the main reasons this would be a pain would be OBJECT!s that would want methodized access to things without explicitly `&lt;with&gt;`ing them.  But Ren-C has METHOD to take care of this *(and establishing the relationship to the object addresses other design holes, e.g. not having to deep copy and rebind all the functions in objects on each instance creation)*.

What if we went to a situation where you used `&lt;local&gt;` for now, and all SET-WORD!s were unbound that weren&#39;t covered by either the args or `&lt;local&gt;` or imported by `&lt;with&gt;` or on an object supplied by `&lt;in&gt;` (or implicitly via METHOD)?  We could limit the &quot;junk&quot; which might accrue by having it so that `&lt;local&gt;`s which do not have corresponding SET-WORD!s in the body raise an error.

**I&#39;m not floating the idea because I don&#39;t believe in being able to declare locals at their point of first usage.  I&#39;m suggesting it because I believe in the idea *too much* to see it done incorrectly, and what I&#39;ve seen so far feels wrong.**

Thoughts?  I do like the idea of [FUNC and FUNCTION being synonyms](https://forum.rebol.info/t/abbreviations-as-synonyms/1211), and would like to stay the course with that direction.</description>
    
    <lastBuildDate>Wed, 04 Nov 2020 23:13:00 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="iArnold" data-post="11" data-topic="1309">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/iarnold/40/226_2.png" class="avatar"> iArnold:</div>
<blockquote>
<p>y/print-name cannot work</p>
</blockquote>
</aside>
<p>The code works as is in current Ren-C.</p>
          <p><a href="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/12</link>
        <pubDate>Wed, 04 Nov 2020 23:13:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1309-12</guid>
        <source url="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309.rss">In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</source>
      </item>
      <item>
        <title>In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>y/print-name cannot work in this example, right?</p>
          <p><a href="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/11</link>
        <pubDate>Wed, 04 Nov 2020 18:14:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1309-11</guid>
        <source url="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309.rss">In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</source>
      </item>
      <item>
        <title>In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="9" data-topic="1309">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Functions are values in Rebol. The point of functions inside of an object that are not bound to that object is that the function is a value. :-/</p>
</blockquote>
</aside>
<p>So are blocks, but they <em>are</em> deep copied. I would posit that vastly more often than not a function value within an object has some relation to other values within that object or clone.</p>
<pre><code class="lang-nohighlight">&gt;&gt; x: make object! [name: "X" print-name: func [] name-printer: [print name]]
== make object! [
    name: "X"
    print-name: 'make action! [[] [...]]
    name-printer: [print name]
]

&gt;&gt; y: make x [name: "Y"]      
== make object! [
    name: "Y"
    print-name: 'make action! [[] [...]]
    name-printer: [print name]
]

&gt;&gt; do y/name-printer    
Y

&gt;&gt; y/print-name
X
</code></pre>
<p>Performance is obviously a concern and something that would have to be managed, however sanitizing this behaviour in the name of performance is next to useless.</p>
          <p><a href="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/10</link>
        <pubDate>Mon, 14 Sep 2020 17:19:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1309-10</guid>
        <source url="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309.rss">In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</source>
      </item>
      <item>
        <title>In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="8" data-topic="1309">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>it seems the solution is to use functions external to the object than a two-tier function solution with hidden metadata and be on the developer's head if they choose the costlier option.</p>
</blockquote>
</aside>
<p>Mechanically, there really is no such thing as "inside an object".  Objects only refer to functions.</p>
<aside class="quote no-group" data-post="8" data-topic="1309">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>but my concern is having different behaviour between blocks and functions in terms of binding. I'm not sure the point of a function inside of an object is if it's not bound to that object.</p>
</blockquote>
</aside>
<p>Functions are values in Rebol.  The point of functions inside of an object that are not bound to that object is that the function is a value.  :-/</p>
<p>If I make an object that wants to cache the old value of some operators I'm going to change from LIB, with intent to put them back later... then should these values get somehow tainted by the fact they were stored in object fields?  e.g.</p>
<pre><code>red&gt;&gt; cacher: make object! [
    saved: none
    save-func: func [f] [saved: :f]
]

red&gt;&gt; cacher/save-func :replace

red&gt;&gt; :cacher/saved = :replace
== true

red&gt;&gt; cacher2: make cacher []

red&gt;&gt; :cacher2/saved = :replace
== false
</code></pre>
<p>I call this bad--performance ramifications notwithstanding.</p>
          <p><a href="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/9</link>
        <pubDate>Sat, 05 Sep 2020 00:40:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1309-9</guid>
        <source url="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309.rss">In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</source>
      </item>
      <item>
        <title>In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I get the argument of efficiency here, but my concern is having different behaviour between blocks and functions in terms of binding. I'm not sure the point of a function inside of an object is if it's not bound to that object.</p>
<p>The scalability argument does sound compelling, but it seems the solution is to use functions external to the object than a two-tier function solution with hidden metadata and be on the developer's head if they choose the costlier option.</p>
          <p><a href="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/8</link>
        <pubDate>Tue, 01 Sep 2020 20:31:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1309-8</guid>
        <source url="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309.rss">In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</source>
      </item>
      <item>
        <title>In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="3" data-topic="1309">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I'm a bit ambivalent on METHOD as I think having functions be local to their object be the default,</p>
</blockquote>
</aside>
<p>Let me try to summarize an unfinished long response I had in I had hanging around a draft.</p>
<p><em>I'm committed to an implementation that does not require making deep copies of every method in a base object to make a new instance.</em>  That's working....based on storing a single pointer in ACTION! values (the "binding").  When that function is called, this pointer is threaded through execution of the body.  WORD! lookup uses it to know how to forward references to any of the base classes to the derived object.</p>
<p>You have to start putting these "bindings" on at some point.  METHOD is nice because it makes it explicit.  We <em>could</em> avoid METHOD and say that MAKE does it (kind of like how it did the body-copying before).  What you wind up with is sloppier, and I feel like it's harmful.</p>
<p>Consider what would happen:</p>
<pre><code>make parent-object [
    foo: func [...] [...]
    bar: :some-func
]
</code></pre>
<p>Here we are saying that before the MAKE call, <code>foo</code> would be a blank slate like any other function...with no binding of its own.  Without the help of METHOD, it also doesn't get implicit visibility of things declared in the parent object.  That alone seems unfortunate (wouldn't most languages expect the words in parent-object to be visible by default?)</p>
<p><code>bar</code> is coming from elsewhere.  This <code>some-func</code> could have <strong>no binding</strong>, it could be <strong>bound to parent-object (or one of its ancestors)</strong>, or it could be <strong>bound to an object from another ancestry</strong>.</p>
<p>In our METHOD-less world, MAKE has to decide what to do with each case:</p>
<ul>
<li>
<p>Overwriting bindings from the same hierarchy is a requirement for derived binding to work.  This is how we avoid making full-body copies of every method on a derivation.  It has to update those binding pointers to point to the new object being created.</p>
</li>
<li>
<p>Overwriting an existing binding that is not in the hierarchy would break that function--it would no longer refer to anything it thought it did.  (This damage would be systemic...e.g. if you'd said <strong>bar: :return</strong> for some return, for example, that return would lose its return target.)  These bindings can't be touched.</p>
</li>
</ul>
<p>The odd case out is when something does not have a binding.  Without METHOD having explicitly connected the member to the object, then the body of that function may-or-may-not contain references that need to be forwarded.</p>
<hr>
<p><strong>It's a little tough to articulate the full harm of slapping a binding on all actions that lack bindings during a MAKE.</strong>  A conceptually impure aspect is that functions would no longer appear to be the same when nothing is making them different.</p>
<pre><code>handler: func [x] [print [x + 1]]

obj1: make object! [h1: :handler]
obj2: make object! [h2: :handler]
</code></pre>
<p>If MAKE put a binding to <code>obj1</code> on <code>h1</code>...and MAKE put a binding to <code>obj2</code> on <code>h2</code>... then as far as the system is concerned these are now unique functions.  There's no longer a way to guarantee them as acting the same.  I don't like how it feels, as "contaminating without asking".  (Note that <code>handler</code> remains untouched, as it is a distinct value cell from h1 and h2...so its binding would remain as null in any case.)</p>
<p>We would lose the ability of objects to hold onto functions in their top-level that referred to a specific member of a base object by WORD!, without applying derivation.  Consider something like registering a callback:</p>
<pre><code> obj: make object! [
     x: 10
     foo: method [...] [
         global/register-callback func [y] [x: x + y]
     ]
 ]
</code></pre>
<p>It seems reasonable to assume that this callback that is being passed around will <em>always</em> refer to the <strong>x</strong> in <code>obj</code>.  I'd be nervous about any strategy which says that if you happen to store that callback in the wrong place at the wrong time, it suddenly refers to the <strong>x</strong> in another object.  But that is exactly what would happen if the global passed that handler back...you put it in a member variable of some class related by derivation of OBJ, and another derivation happened.  Calling out methods explicitly helps limit the reach of this behavior.</p>
<p>There's a small performance hit in lookup on each WORD! in the method body when the method has a binding.  We have to walk the binding down through to its base classes (0 steps in this case) and make sure that any references to those base classes are forwarded to the object.</p>
<p><em>(This points out an optimization, that bindings with no parents can be ignored at the moment of execution.  They're only relevant at the point of the next derivation.  I should do that adjustment now.)</em></p>
<hr>
<p><em>Those might be the only problems.</em>  But I'm not quite sure, and my intuition says it's not a good idea to avoid being explicit.</p>
<p><strong>Bear in mind that derived binding solves an actual issue.</strong>  Even just a thousand objects with 10 member functions with 10 arrays on average each, you get <code>1000 * 10 * 10</code> =&gt; 100000 arrays of overhead.  If each array averages 5 items, that is rounded up to length 8 arrays in the pool.  On a 64-bit system you're paying <code>8 * 4 =&gt; 32</code> bytes per cell, so times 8 that's 256 bytes per array.  <strong>Your 1000 <em>modest</em> object instances could easily incur 2560000 bytes of overhead for these deep copies.</strong></p>
<p>This is a foundational flaw in a general purpose "object language", and is not acceptable.  The problem is real: Atronix was forced to move methods out of their objects to be functions that took the objects as a parameter.  It wasn't even the memory that bothered them--their use case could add gigabytes if they needed it--it was the delay the GC incurred from having to traverse so many series.</p>
          <p><a href="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/7</link>
        <pubDate>Sat, 29 Aug 2020 06:43:09 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1309-7</guid>
        <source url="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309.rss">In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</source>
      </item>
      <item>
        <title>In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="3" data-topic="1309">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I'm not sure I get how LET works—is it a nothing pass-through word that is just used as a marker for locals gathering</p>
</blockquote>
</aside>
<p>Yes; it is an "invisible" (no return result).  It takes a skippable WORD!, so that if the thing that follows it is a plain word it will be consumed silently.</p>
<pre><code>let x  ; will just remain as VOID!, no error raised
</code></pre>
<p>But a SET-WORD! or SET-BLOCK! or whatever will not be consumed as an argument, hence it is not subject to the invisibility:</p>
<pre><code>&gt;&gt; print ["The let is invisible, but value is" let x: 10]
The let is invisible, but value is 10
</code></pre>
<p>I don't think it's particularly mysterious, but there are issues.  e.g. <strong>whether to enforce not using a LET'd variable before the LET, and how that might work</strong>.  (See also <a href="https://blog.bitsrc.io/hoisting-in-modern-javascript-let-const-and-var-b290405adfda" rel="nofollow noopener">"hoisting" in JavaScript</a> for difference between VAR and LET)</p>
<pre><code> foo: func [] [
    x: 10
    print ["Should this be legal?" x]
    let x: 20
    print ["Or only after the LET?" x]
]
</code></pre>
<p>There's the question of <strong>if dialects are responsible for adding support for LET</strong>.  I mention the early change that allowed SET-WORD! in COPY and SET for PARSE...e.g. <code>parse data [copy x: [some "a"]]</code>.  Does it need to support <code>[copy let x: [some "a"]]</code> now?  Does every dialect need to be involved?</p>
<p>I'd considered other ideas for LET's behavior, e.g.</p>
<pre><code>&gt;&gt; let x
== x  ; the variable itself
</code></pre>
<p>Which would permit the likes of <code>parse data [copy (let x) [some "a"]]</code>, modulo our debates over plain GROUP! injections.</p>
<p>But like I say: the collecting SET-WORD!s is a fairly unsustainable tactic.  And a "scanned for in the body" construct has the same problem of inadvertent locals:</p>
<pre><code> outer: function [x] [
     let inner: function [y] [
         let z: x + y  ; Both OUTER and INNER pick up this Z in body walking
         return z
     ]
     return inner
 ]
</code></pre>
<p>If LET had more of a runtime character... like USE... then only those bodies that actually needed the variable would get it.  This is what I mean when I say I'm looking for a pleasing answer that hasn't really emerged.  That unused Z in OUTER is symptomatic of a design flaw I want to see a way out of.</p>
          <p><a href="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/6</link>
        <pubDate>Mon, 27 Jul 2020 23:16:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1309-6</guid>
        <source url="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309.rss">In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</source>
      </item>
      <item>
        <title>In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="4" data-topic="1309">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/mark-hi/40/212_2.png" class="avatar"> Mark-hi:</div>
<blockquote>
<p>Writing a bunch of functions that communicate state with each other via global variables without requiring them all to be put inside an object seems like a reasonable desire</p>
</blockquote>
</aside>
<p>This is what <code>&lt;with&gt;</code> does, and I think being explicit about it isn't too much of a problem.  You only have to use it if you intend to write to the variable:</p>
<pre><code> global: _

 writer: func [x &lt;with&gt; global] [
     global: x
 ]

reader: func [] [
    return global
]</code></pre>
          <p><a href="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/5</link>
        <pubDate>Mon, 27 Jul 2020 19:56:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1309-5</guid>
        <source url="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309.rss">In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</source>
      </item>
      <item>
        <title>In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</title>
        <dc:creator><![CDATA[Mark-hi]]></dc:creator>
        <description><![CDATA[
            <p>Writing a bunch of functions that communicate state with each other via global variables without requiring them all to be put inside an object seems like a reasonable desire, and is/was a common pattern in R2.</p>
          <p><a href="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/4</link>
        <pubDate>Mon, 27 Jul 2020 18:11:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1309-4</guid>
        <source url="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309.rss">In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</source>
      </item>
      <item>
        <title>In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I tend to use FUNC for the most part anyhow as I feel the naming of locals is an important part of understanding the function as it's being written.</p>
<p>I'm a bit ambivalent on METHOD as I think having functions be local to their object be the default, though I understand this is not always the case (see the classic example of object usage in the Ten Steps doc). I sense that the desired non-copying behaviour of functions came from the usage of OBJECT! that MODULE! now covers. Could use more data points on that.</p>
<p>My feeling on functions in general is that they are effectively blocks with a spec, and that FUNC should reflect the native spec dialect of ACTION! (i.e. <strong>func: [spec body][make action! reduce [spec body]]</strong>)—that seems to be a little out of whack at the moment. This is with an eye to having some form of representation of function (<strong>[spec]:[body]</strong> or <strong>[spec]|[body]</strong> are spitballs with the <strong>']:['</strong> sequence being the key designation) where it's implied that the body behaves like BLOCK! in terms of obtaining context.</p>
<p>I'm not sure I get how LET works—is it a nothing pass-through word that is just used as a marker for locals gathering or is does it have meaning within FRAME! ? For me, it seems foreign.</p>
          <p><a href="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/3</link>
        <pubDate>Mon, 27 Jul 2020 14:21:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1309-3</guid>
        <source url="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309.rss">In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</source>
      </item>
      <item>
        <title>In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Sounds fine to me. I trust your intuition. I think you're saying you don't know what the answer is yet, and putting that on the back-burner for now sounds completely reasonable.</p>
          <p><a href="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/2</link>
        <pubDate>Sun, 26 Jul 2020 20:22:48 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1309-2</guid>
        <source url="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309.rss">In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</source>
      </item>
      <item>
        <title>In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><strong>I pretty much consider being able to declare variables at the point they are first used to be a non-negotiable feature.</strong></p>
<p>This is why I was a big fan of FUNCT when I first saw it.  It looked for SET-WORD!s in your function and "gathered" them up implicitly as being local to that function.</p>
<pre><code> funct [arg1 arg2] [  ; R3-Alpha "funct"
     local1: 10
     local2: 20
     return (local1 + arg1) * (local2 + arg2)
 ]
 =&gt; func [arg1 arg2 /local local1 local2] [  ; equivalent R3-Alpha code
     local1: 10
     local2: 20
     return (local1 + arg1) * (local2 + arg2)
 ]
</code></pre>
<p>I was one of the proponents for it taking over the relatively-useless role of FUNCTION, which was previously a fairly lame contraction like this:</p>
<pre><code>function [arg1 arg2] [local1 local2] [...body...]   ; Rebol2 "function"
=&gt; func [arg1 arg2 /local local1 local2] [...body...]  ; equivalent Rebol2 code
</code></pre>
<p><strong>As you write more sophisticated code, you start to realize the weakness of automatically assuming SET-WORD!s are local.</strong>  There are many uses of SET-WORD!s that are not implied as being local variables, and if dialect authors are to be free with using them as labels or other purposes then there will be many more.</p>
<p><strong><a href="https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150">I've written about the problems - Please Review if you haven't already.</a></strong></p>
<h2>I've experimented with LET as a replacement, but I'm not happy yet.</h2>
<p>Right now, LET works mechanically about the same as SET-WORD!s did.  <strong>let x: 10</strong> behaves in a FUNC or FUNCTION body just as <strong>x: 10</strong> did in a FUNCT(ION).</p>
<p>It's an improvement in the sense that it sacrifices a single word--instead of the whole class of values of SET-WORD!--for carrying the meaning of declaring a local.</p>
<p>There are questions about how this can interact with PARSE or other dialects, which had expanded their syntax e.g. to allow <strong>copy x: [some "a"]</strong> instead of just <strong>copy x [some "a"]</strong>.  Should that now enable <strong>copy let x: [some "a"]</strong>?  Who is responsible for these dialect syntax exceptions, where any point of providing a variable to assign might want to also declare that variable?</p>
<p>Beyond that... I have a nagging feeling that the way it works is wrong...injecting variables into the function definition and being scanned for.  I feel like it should work more like a USE does, and be dynamically binding the code that comes after it when it is encountered.  If you want to add variables to a function's definition you should always be able to do that with <code>&lt;local&gt;</code>.  But something tells me that LET should be a different beast...that uses a syntax trick to create a wave of binding that affects the statements after it instead of forcing your hand in making a code block the way USE does.</p>
<h2>Can we punt on it?</h2>
<p>Rebol2 got a fair way with just <code>/local</code>.  I think it would have been safer if it had <em>unbound</em> any SET-WORD!s in the body that were not explicitly declared or imported.</p>
<p>One of the main reasons this would be a pain would be OBJECT!s that would want methodized access to things without explicitly <code>&lt;with&gt;</code>ing them.  But Ren-C has METHOD to take care of this <em>(and establishing the relationship to the object addresses other design holes, e.g. not having to deep copy and rebind all the functions in objects on each instance creation)</em>.</p>
<p>What if we went to a situation where you used <code>&lt;local&gt;</code> for now, and all SET-WORD!s were unbound that weren't covered by either the args or <code>&lt;local&gt;</code> or imported by <code>&lt;with&gt;</code> or on an object supplied by <code>&lt;in&gt;</code> (or implicitly via METHOD)?  We could limit the "junk" which might accrue by having it so that <code>&lt;local&gt;</code>s which do not have corresponding SET-WORD!s in the body raise an error.</p>
<p><strong>I'm not floating the idea because I don't believe in being able to declare locals at their point of first usage.  I'm suggesting it because I believe in the idea <em>too much</em> to see it done incorrectly, and what I've seen so far feels wrong.</strong></p>
<p>Thoughts?  I do like the idea of <a href="https://forum.rebol.info/t/abbreviations-as-synonyms/1211">FUNC and FUNCTION being synonyms</a>, and would like to stay the course with that direction.</p>
          <p><a href="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309/1</link>
        <pubDate>Sun, 26 Jul 2020 19:50:06 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1309-1</guid>
        <source url="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309.rss">In the interest of shipping something: Rebol2-style `&lt;local&gt;`s only?</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Single Character Meanings (#, @, :, $, /)</title>
    <link>https://forum.rebol.info/t/single-character-meanings/1189</link>
    <description>With the coming of [modal arguments](https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187/4), it seems to me that:

    append data @ some expression

Might be cleaner than:

    append data @(some expression)

(Although **append data @item** or **append data @[bl o ck]** seems tighter than **append data @ item** or **append data @ [bl o ck]**)

While it may not be fully necessary, it seems that if a lone @ were legal it would be worth it to allow so you could skip the parentheses.  Which raises the question of what these odd lexical pieces should be standalone.

For an example of the kind of thinking that came in as precedent, Rebol2 considered # to be an empty-string-issue!:

    rebol2&gt;&gt; type? #
    == issue!

    rebol2&gt;&gt; to string! #
    == &quot;&quot;

When ISSUE! became an ANY-WORD! type in R3-Alpha, empty words were not legal.  So there was a little-known choice to make # mean NONE!

    r3-alpha&gt;&gt; # 
    == none  ; actually #[none]

I think if this idea were going to catch on, then it should have been the actual rendering for NONE! literals.  Which I did come to believe needed a single-character representation, but I think **_** is a lot better than #, and BLANK! has been a pretty good name.

Other exceptions have made these things WORD!s, e.g. the historical choice to make **/** a WORD! exemption.  I&#39;m not a huge fan of that one due to the bad combination with pathing, and I think we&#39;re better off making PATH! a more ergonomic generalized part, and push the burden of figuring out how to make a 2-element path with BLANK! and BLANK! do division by putting that on the evaluator.

But if @ was a WORD! that would be a bit disruptive to the mechanics of things like modal arguments, if you wanted a normal evaluation that became modal after it.  Because if people can say **@: 12**, then what if someone had meant **append data @** and want to add 12 to it?  Having it be a distinct type that can&#39;t have evaluator behavior override would make it more comfortable to use for this purpose.

If it can&#39;t be an &quot;empty&quot; &quot;SYM-WORD!/LIT-WORD!&quot;, what should it be?  A `LIT!`, `SYM!`, n `AT!` ?

Similar questions for what a lone colon could be exist too.  The non-overrideable nature of making these a separate datatype are appealing.  Anyone have strongly held opinions?</description>
    
    <lastBuildDate>Sun, 28 Jul 2019 20:42:36 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/single-character-meanings/1189.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Single Character Meanings (#, @, :, $, /)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>With the coming of <a href="https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187/4">modal arguments</a>, it seems to me that:</p>
<pre><code>append data @ some expression
</code></pre>
<p>Might be cleaner than:</p>
<pre><code>append data @(some expression)
</code></pre>
<p>(Although <strong>append data <span class="mention">@item</span></strong> or <strong>append data @[bl o ck]</strong> seems tighter than <strong>append data @ item</strong> or <strong>append data @ [bl o ck]</strong>)</p>
<p>While it may not be fully necessary, it seems that if a lone @ were legal it would be worth it to allow so you could skip the parentheses.  Which raises the question of what these odd lexical pieces should be standalone.</p>
<p>For an example of the kind of thinking that came in as precedent, Rebol2 considered # to be an empty-string-issue!:</p>
<pre><code>rebol2&gt;&gt; type? #
== issue!

rebol2&gt;&gt; to string! #
== ""
</code></pre>
<p>When ISSUE! became an ANY-WORD! type in R3-Alpha, empty words were not legal.  So there was a little-known choice to make # mean NONE!</p>
<pre><code>r3-alpha&gt;&gt; # 
== none  ; actually #[none]
</code></pre>
<p>I think if this idea were going to catch on, then it should have been the actual rendering for NONE! literals.  Which I did come to believe needed a single-character representation, but I think <strong>_</strong> is a lot better than #, and BLANK! has been a pretty good name.</p>
<p>Other exceptions have made these things WORD!s, e.g. the historical choice to make <strong>/</strong> a WORD! exemption.  I'm not a huge fan of that one due to the bad combination with pathing, and I think we're better off making PATH! a more ergonomic generalized part, and push the burden of figuring out how to make a 2-element path with BLANK! and BLANK! do division by putting that on the evaluator.</p>
<p>But if @ was a WORD! that would be a bit disruptive to the mechanics of things like modal arguments, if you wanted a normal evaluation that became modal after it.  Because if people can say <strong>@: 12</strong>, then what if someone had meant <strong>append data @</strong> and want to add 12 to it?  Having it be a distinct type that can't have evaluator behavior override would make it more comfortable to use for this purpose.</p>
<p>If it can't be an "empty" "SYM-WORD!/LIT-WORD!", what should it be?  A <code>LIT!</code>, <code>SYM!</code>, n <code>AT!</code> ?</p>
<p>Similar questions for what a lone colon could be exist too.  The non-overrideable nature of making these a separate datatype are appealing.  Anyone have strongly held opinions?</p>
          <p><a href="https://forum.rebol.info/t/single-character-meanings/1189/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/single-character-meanings/1189/1</link>
        <pubDate>Sun, 28 Jul 2019 20:42:36 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1189-1</guid>
        <source url="https://forum.rebol.info/t/single-character-meanings/1189.rss">Single Character Meanings (#, @, :, $, /)</source>
      </item>
  </channel>
</rss>

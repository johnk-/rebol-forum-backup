<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What to Do About FUNCT (including &quot;Not Calling It That&quot;)</title>
    <link>https://forum.rebol.info/t/what-to-do-about-funct-including-not-calling-it-that/1518</link>
    <description>FUNCT was an R3-Alpha-ism that made it easier to keep track of one&#39;s declaration of local variables in functions.  It walked the  body of the function looking for any SET-WORD! usages.  If those set-words didn&#39;t name arguments or explicit locals...and weren&#39;t explicitly specified as being non-local via the /EXTERN refinement...they would be automatically made local.

It gained popularity since declaring locals manually is more of a hassle--and stale locals are hard to notice and can linger after their references are all removed.  Since it was popular, several people (myself included) lobbied for it to get the name FUNCTION.

However:

* locals-gathering via SET-WORD! turned out to be [problematic for several reasons that I have repeatedly explained](https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150)

* I&#39;ve come to think that [having FUNC be anything other than a shorthand for FUNCTION is confusing](https://forum.rebol.info/t/abbreviations-as-synonyms/1211)...an abbreviation that has drastic changes in behavior seems bad.

I feel pretty good about the current plan to switch over to a mix of virtual-binding-based LET...with explicit `&lt;local&gt;` when it makes sense.  This means FUNCTION as we have known it (which is to say FUNCT) is going to die.


## Plan is to Temporarily Deprecate FUNCTION in favor of FUNC

I&#39;m going to deprecate FUNCTION for a while... and just use FUNC with LET (or `&lt;local&gt;`).    Once this has gotten wide acceptance, we can reintroduce FUNCTION as a synonym for FUNC.

This is a slow process, because doing the change across large bodies of code is exposing issues in the virtual binding mechanics.  So I don&#39;t know the exact time when FUNCTION will be going away.

But I have committed one step of moving away from the &quot;gathering of SET-WORD!s&quot; model.  I changed METHOD to no longer be the &quot;gathering form of METH&quot;.  This gave me an idea of how hard it would be to get a bootstrap executable to fake up LET mechanics...even though it doesn&#39;t have virtual binding.

I left behind METH/GATHER as a compatibility form... just because that&#39;s how it was implemented prior (**method: :meth/gather**).

Ideally you would not use METH/GATHER, instead you would convert your code to use LET... *unless* you think your code is too performance sensitive, in which case you would declare your **`&lt;local&gt;`** variables in the function spec.

## What&#39;s the Role of the /GATHER Mechanic, And What to Call It?

I think locals gathering through SET-WORD! is a good code golf tool.  But does it have a place in the system besides that?

I&#39;m not thrilled about leaving it on FUNC itself as part of the core &quot;important&quot; code... as a refinement or as part of the spec language.

**Does anyone have a super strong vote for it, or it needing a name, or does LET + `&lt;local&gt;` feel like it covers enough for what&#39;s needed in the box?**</description>
    
    <lastBuildDate>Wed, 24 Feb 2021 11:11:49 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/what-to-do-about-funct-including-not-calling-it-that/1518.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What to Do About FUNCT (including &quot;Not Calling It That&quot;)</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>If the FUNCTION that does the gathering of the locals gets another name, FUNC or FUNCT are indeed not the best names.</p>
<p>How about PERFORM?</p>
          <p><a href="https://forum.rebol.info/t/what-to-do-about-funct-including-not-calling-it-that/1518/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-do-about-funct-including-not-calling-it-that/1518/5</link>
        <pubDate>Wed, 24 Feb 2021 11:11:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1518-5</guid>
        <source url="https://forum.rebol.info/t/what-to-do-about-funct-including-not-calling-it-that/1518.rss">What to Do About FUNCT (including &quot;Not Calling It That&quot;)</source>
      </item>
      <item>
        <title>What to Do About FUNCT (including &quot;Not Calling It That&quot;)</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="1518">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>So I'm glad you agree it is bad.</p>
</blockquote>
</aside>
<p>To be clear, I don't know that I'd agree that <em>shallow</em> gathering in <strong>function</strong> (as-had-been-presumed) is necessarily bad. I still don't think that I'd use it, but I don't see it as the worst option. I agree that deep gathering is bad for any of the reasons you've described.</p>
          <p><a href="https://forum.rebol.info/t/what-to-do-about-funct-including-not-calling-it-that/1518/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-do-about-funct-including-not-calling-it-that/1518/4</link>
        <pubDate>Tue, 23 Feb 2021 18:15:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1518-4</guid>
        <source url="https://forum.rebol.info/t/what-to-do-about-funct-including-not-calling-it-that/1518.rss">What to Do About FUNCT (including &quot;Not Calling It That&quot;)</source>
      </item>
      <item>
        <title>What to Do About FUNCT (including &quot;Not Calling It That&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="2" data-topic="1518">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>didn't realize that <strong>function</strong> did a deep gathering of words (not being a consumer of said function), I'd assumed it was a shallow gathering similar to <strong>make object!</strong>â€”I definitely think deep gathering is bad</p>
</blockquote>
</aside>
<p>Red incorporated it for their FUNCTION as well:</p>
<pre><code>red&gt;&gt; f: function [] [do [x: 10]]
== func [/local x][do [x: 10]]
</code></pre>
<p>I advocated for FUNCTION taking this behavior when I knew less.  Having seen the damage, I think it's a dead-end idea and we need to drop it.  So I'm glad you agree it is bad.</p>
<p>However, I still think the following aspects are important:</p>
<ul>
<li>
<p>Being able to spontaneously make local variables without communicating with FUNC is important (e.g. something like USE needs to exist)</p>
</li>
<li>
<p>Being more efficient than historical USE is important (R3-Alpha does a MAKE OBJECT! and then has to deep copy and rebind the block to the new variables).</p>
</li>
<li>
<p>Not needing a new level of indentation just to introduce a variable is important.</p>
</li>
</ul>
<p>My goal is to make LET meet these needs.</p>
<aside class="quote no-group" data-username="rgchris" data-post="2" data-topic="1518">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p><strong>use</strong> is heavy handed and perhaps not entirely comparable, but is up-front and clear about its business.</p>
</blockquote>
</aside>
<p>If you look at the <a href="https://forum.rebol.info/t/dissecting-the-tls-emit-dialect/1498">TLS emit</a> example, you'd not be able to use it as a variable declaration surrogate like:</p>
<pre><code>emit ctx [
  TLSPlaintext:
    #{16}
    min-ver-bytes
  fragment-length:
    #{00 00}
]
...
change fragment-length enbin [be + 2] (length of Handshake)
...
</code></pre>
<p>You'd have to take a separate block of code as a parameter:</p>
<pre><code>emit ctx [
  TLSPlaintext:
    #{16}
    min-ver-bytes
  fragment-length:
    #{00 00}
] [
    ...
    change fragment-length enbin [be + 2] (length of Handshake)
    ...
]
</code></pre>
<p>I feel like variable declaration is something you might commonly want to abstract, and tying such an abstraction to "thou shalt make a new block" doesn't play to the master-of-disguise concept of the language.</p>
<p>Not that you can't choose USE or its ilk.  But I think you'd be in the minority for preferring it.</p>
<p>But the devil's in the details...making LET-like functions work is an exploratory and experimental thing that I am only starting to get my head around.  I think there's hope for it--although it may force us to rethink the garbage collection method (which needed rethinking anyway).</p>
          <p><a href="https://forum.rebol.info/t/what-to-do-about-funct-including-not-calling-it-that/1518/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-do-about-funct-including-not-calling-it-that/1518/3</link>
        <pubDate>Tue, 23 Feb 2021 12:41:14 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1518-3</guid>
        <source url="https://forum.rebol.info/t/what-to-do-about-funct-including-not-calling-it-that/1518.rss">What to Do About FUNCT (including &quot;Not Calling It That&quot;)</source>
      </item>
      <item>
        <title>What to Do About FUNCT (including &quot;Not Calling It That&quot;)</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>Naming local variables in the function spec is the worst form of locals declaration, except for all the others.</p>
<p>It's an awkward dance, but I don't know of any of the mainstream languages that don't have some awkwardness about them here. Obviously I'm not against locals gathering in principle or I'd never have gotten past using <strong>make object!</strong> so I can't quite put my finger on why I still tend to use <strong>func</strong> and eschew locals gathering for functions.</p>
<hr>
<p>Mulling it a little further, I'd say one aspectâ€”which sort of held until recently, but that contract has changedâ€”is that I want my spec to match the internal spec format. That is, I used to be able to say:</p>
<pre><code class="lang-nohighlight">spec: [foo /local bar]
body: [bar: foo + 1]
thing: func :spec :body

equal? :spec spec-of :thing
equal? :body body-of :thing
</code></pre>
<p>I understand there's a lot of subtleties going on with functions on Ren-C, but I miss that certainty as a start point.</p>
<hr>
<p>Not a solution, but I'm half tempted to write a gatherer for my text editor that will do auto-gathering in the current block and quantify the local words. As much as an exercise to see if such a thing could be useful.</p>
<hr>
<p>Before you'd posted this, I didn't realize that <strong>function</strong> did a deep gathering of words (not being a consumer of said function), I'd assumed it was a shallow gathering similar to <strong>make object!</strong>â€”I definitely think deep gathering is bad (and certainly proposes huge problems within modules which are likely not resolvable).</p>
<hr>
<p>I can't say thatâ€”at least that I can foreseeâ€”I'd use <strong>let</strong> over <strong>use</strong>. <strong>use</strong> is heavy handed and perhaps not entirely comparable, but is up-front and clear about its business.</p>
          <p><a href="https://forum.rebol.info/t/what-to-do-about-funct-including-not-calling-it-that/1518/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-do-about-funct-including-not-calling-it-that/1518/2</link>
        <pubDate>Tue, 23 Feb 2021 05:49:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1518-2</guid>
        <source url="https://forum.rebol.info/t/what-to-do-about-funct-including-not-calling-it-that/1518.rss">What to Do About FUNCT (including &quot;Not Calling It That&quot;)</source>
      </item>
      <item>
        <title>What to Do About FUNCT (including &quot;Not Calling It That&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>FUNCT was an R3-Alpha-ism that made it easier to keep track of one's declaration of local variables in functions.  It walked the  body of the function looking for any SET-WORD! usages.  If those set-words didn't name arguments or explicit locals...and weren't explicitly specified as being non-local via the /EXTERN refinement...they would be automatically made local.</p>
<p>It gained popularity since declaring locals manually is more of a hassle--and stale locals are hard to notice and can linger after their references are all removed.  Since it was popular, several people (myself included) lobbied for it to get the name FUNCTION.</p>
<p>However:</p>
<ul>
<li>
<p>locals-gathering via SET-WORD! turned out to be <a href="https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150">problematic for several reasons that I have repeatedly explained</a></p>
</li>
<li>
<p>I've come to think that <a href="https://forum.rebol.info/t/abbreviations-as-synonyms/1211">having FUNC be anything other than a shorthand for FUNCTION is confusing</a>...an abbreviation that has drastic changes in behavior seems bad.</p>
</li>
</ul>
<p>I feel pretty good about the current plan to switch over to a mix of virtual-binding-based LET...with explicit <code>&lt;local&gt;</code> when it makes sense.  This means FUNCTION as we have known it (which is to say FUNCT) is going to die.</p>
<h2>Plan is to Temporarily Deprecate FUNCTION in favor of FUNC</h2>
<p>I'm going to deprecate FUNCTION for a while... and just use FUNC with LET (or <code>&lt;local&gt;</code>).    Once this has gotten wide acceptance, we can reintroduce FUNCTION as a synonym for FUNC.</p>
<p>This is a slow process, because doing the change across large bodies of code is exposing issues in the virtual binding mechanics.  So I don't know the exact time when FUNCTION will be going away.</p>
<p>But I have committed one step of moving away from the "gathering of SET-WORD!s" model.  I changed METHOD to no longer be the "gathering form of METH".  This gave me an idea of how hard it would be to get a bootstrap executable to fake up LET mechanics...even though it doesn't have virtual binding.</p>
<p>I left behind METH/GATHER as a compatibility form... just because that's how it was implemented prior (<strong>method: :meth/gather</strong>).</p>
<p>Ideally you would not use METH/GATHER, instead you would convert your code to use LET... <em>unless</em> you think your code is too performance sensitive, in which case you would declare your <strong><code>&lt;local&gt;</code></strong> variables in the function spec.</p>
<h2>What's the Role of the /GATHER Mechanic, And What to Call It?</h2>
<p>I think locals gathering through SET-WORD! is a good code golf tool.  But does it have a place in the system besides that?</p>
<p>I'm not thrilled about leaving it on FUNC itself as part of the core "important" code... as a refinement or as part of the spec language.</p>
<p><strong>Does anyone have a super strong vote for it, or it needing a name, or does LET + <code>&lt;local&gt;</code> feel like it covers enough for what's needed in the box?</strong></p>
          <p><a href="https://forum.rebol.info/t/what-to-do-about-funct-including-not-calling-it-that/1518/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-do-about-funct-including-not-calling-it-that/1518/1</link>
        <pubDate>Tue, 23 Feb 2021 03:44:14 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1518-1</guid>
        <source url="https://forum.rebol.info/t/what-to-do-about-funct-including-not-calling-it-that/1518.rss">What to Do About FUNCT (including &quot;Not Calling It That&quot;)</source>
      </item>
  </channel>
</rss>

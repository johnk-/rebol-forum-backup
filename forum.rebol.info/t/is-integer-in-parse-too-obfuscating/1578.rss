<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Is INTEGER! in PARSE Too Obfuscating?</title>
    <link>https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578</link>
    <description>There&#39;s a bit of a problem in the combinator-based UPARSE with the historical convention of an INTEGER! rule, where if you have two integers in a row it indicates a range of how many things to accept.

    rebol2&gt; parse &quot;**&quot; [1 2 &quot;*&quot;]  ; between 1 and 2 stars
    == true

    rebol2&gt; parse &quot;**&quot; [3 4 &quot;*&quot;]  ; between 3 and 4 stars
    == false

It doesn&#39;t fit into the &quot;natural&quot; pattern of combinators, e.g. where **1 2 RULE** is the same as **1 [2 RULE]**.

That doesn&#39;t mean it can&#39;t be done...it just means it would have to be part of the BLOCK! combinator specifically to notice integer sequences *(vs dispatching to some generic INTEGER! combinator)*

But it brought me to a bigger question of how good an idea it is to have something that acts as a keyword be abstractable.  I&#39;ve often been confused when I see something like:

     parse ... [... something rule ...]

And SOMETHING is actually an integer.  It isn&#39;t a rule in its own right, it&#39;s picking up the next rule...like a keyword.

As a reader, I feel like a keyword like REPEAT is missing here.  I don&#39;t know how much we want to stick to the rule that every word resolve to a parse rule...if we did, then you&#39;d have to escape out of that with the likes of:

     parse ... [... repeat (2) rule ...]
     parse ... [... repeat (something + 1) rule ...]

But perhaps within PARSE, literal integers could be exempted...assumed to never match integers, but be passed as a parameter.

This doesn&#39;t answer what to do about ranges of integers (and BETWEEN is taken).  But just pointing out that I don&#39;t know that the current super-succinct integer syntax pays off all that well.  It might be better to be a little more verbose to make it clear that a repetition is happening.</description>
    
    <lastBuildDate>Fri, 15 Oct 2021 19:07:29 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Is INTEGER! in PARSE Too Obfuscating?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1578">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>As a reader, I feel like a keyword like REPEAT is missing here. I don't know how much we want to stick to the rule that every word resolve to a parse rule...if we did, then you'd have to escape out of that with the likes of:</p>
<pre><code>parse ... [... repeat (2) rule ...]
parse ... [... repeat (something + 1) rule ...]
</code></pre>
<p>But perhaps within PARSE, literal integers could be exempted...assumed to never match integers, but be passed as a parameter.</p>
</blockquote>
</aside>
<p>It's easy to get bitten by using literal integers with REPEAT.  You mean to write <strong>repeat (2) rule</strong> but you write <strong>repeat 2 rule</strong>, which in the generic architecture assumes that you want to use the result of <code>[2 rule]</code> as the repeat count for whatever comes afterward.</p>
<p>Most of the time you'll get an error, but the error isn't easy to sort out.</p>
<p>If we had skippable arguments for combinators, it might have a hard literal INTEGER! argument...and if it found there was one there, it could give an error.  That might be better than nothing, though any error in the other arguments might pre-empt being able to react to it (since you could only raise an error on the argument once the combinator was running).</p>
<p>This leads me to believe that REPEAT might be a case where it needs to use a different parameter convention which would give a coherent error if you put a literal integer in that slot.</p>
          <p><a href="https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578/8</link>
        <pubDate>Fri, 15 Oct 2021 19:07:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1578-8</guid>
        <source url="https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578.rss">Is INTEGER! in PARSE Too Obfuscating?</source>
      </item>
      <item>
        <title>Is INTEGER! in PARSE Too Obfuscating?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="6" data-topic="1578">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I think ranges of integers is a sufficiently rare pattern to warrant a combinator specific to the purpose, rather than breaking the coherence of the model to where <strong>2 [3 rule]</strong> and <strong>2 3 rule</strong> have distinct behavior.</p>
</blockquote>
</aside>
<p>Er...duh...why can't REPEAT just take a BLOCK! or somesuch?</p>
<pre><code>uparse "aaa" [repeat ([2 3]) "a"]
</code></pre>
<p>Got variables?  GET-BLOCK! is your friend for a lighter notation than REDUCE:</p>
<pre><code>uparse "..." [repeat (:[min max]) "a"]
</code></pre>
<p>Not entirely sure why this didn't occur to me sooner, but.  Now it did occur to me, so...we get it.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>But we've learned some things in the meantime.  The OPT rules I had put in as substitutes were what exposed things like the weaknesses above.</p>
          <p><a href="https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578/7</link>
        <pubDate>Sat, 14 Aug 2021 00:17:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1578-7</guid>
        <source url="https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578.rss">Is INTEGER! in PARSE Too Obfuscating?</source>
      </item>
      <item>
        <title>Is INTEGER! in PARSE Too Obfuscating?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><a href="https://github.com/metaeducation/ren-c/commit/3ad5499fda1d75fb28a1489669b7506d33a1f595"><strong>I have implemented the REPEAT combinator.</strong></a>  It's now in traditional native PARSE as well as UPARSE.</p>
<p>It's a bit "unfortunate" that you have to put integer variables in a GROUP!:</p>
<pre><code>&gt;&gt; var: 3
&gt;&gt; uparse? "aaa" [repeat (var) "a"]
== #[true]
</code></pre>
<p>We could consider if non-literal integers act as rules that do not advance the input and synthesize an integer <em>(in contrast with literal integers that indicate a repeat count)</em>.  That would make <strong>repeat var "a"</strong> different from <strong>repeat 3 "a"</strong> which creates irregularities.</p>
<p><strong>But on the plus side of the current behavior, you can write rules that get the repeat count from the input and apply it immediately.</strong>  The following example is contrived, but maybe not so much so that you couldn't see something like it ever happening:</p>
<pre><code>&gt;&gt; uparse? ["b" 3 "b" "b" "b"] [rule: &lt;any&gt;, repeat integer! rule]
== #[true]
</code></pre>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1578">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>This doesn't answer what to do about ranges of integers</p>
</blockquote>
</aside>
<p>I think ranges of integers is a sufficiently rare pattern to warrant a combinator specific to the purpose, rather than breaking the coherence of the model to where <strong>2 [3 rule]</strong> and <strong>2 3 rule</strong> have distinct behavior.</p>
<p>But I do notice that the pattern <strong>0 n rule</strong> is really just <strong>repeat (n) opt rule</strong>.</p>
<p>More generally <strong>repeat m n rule</strong> can be written as <strong>repeat (m) rule, repeat (n - m) opt rule</strong></p>
<p>So I'm going to be killing off ranged repetition in native PARSE.  We can discuss what the real answer should be, but that pattern can be used in the meantime.</p>
          <p><a href="https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578/6</link>
        <pubDate>Sun, 06 Jun 2021 14:30:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1578-6</guid>
        <source url="https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578.rss">Is INTEGER! in PARSE Too Obfuscating?</source>
      </item>
      <item>
        <title>Is INTEGER! in PARSE Too Obfuscating?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="IngoHohmann" data-post="4" data-topic="1578">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>when trying to understand someone else's code I find it a lot harder to understand, especially if words are used.</p>
</blockquote>
</aside>
<p>There's a basic question of whether abstractions-via-WORD! should be legal or not.  Rebol2 allows you to abstract keywords themselves:</p>
<pre><code>rebol2&gt; keyword: 'some
== some

rebol2&gt; parse "aaa" [keyword "a"]
== true
</code></pre>
<p>R3-Alpha did not support this:</p>
<pre><code>r3-alpha&gt; keyword: 'some
== some

r3-alpha&gt; parse "aaa" [keyword "a"]
** Script error: PARSE - invalid rule or usage of rule: keyword
</code></pre>
<p>Nor does Red:</p>
<pre><code>red&gt; keyword: 'some
== some

red&gt; parse "aaa" [keyword "a"]
*** Script Error: PARSE - invalid rule or usage of rule: some
</code></pre>
<p><strong>I don't think it's a good idea to permit WORD!-abstraction of PARSE keywords.</strong>  There does need to be a mechanism by which you can adjust the set of combinators...which I think is better hooked other ways.  That's the angle being pursued with the Redbol compatibility initiative (UPARSE2).</p>
<p>There is currently a workaround for this:</p>
<pre><code>&gt;&gt; keyword: 'some

&gt;&gt; uparse "aaa" [:(keyword) "a"]
== "aaa"
</code></pre>
<p>GET-GROUP! lets you do a sort of "live-COMPOSE" to use evaluated material as a rule.  While it's mostly used to splice in calculated BLOCK!s or LOGIC!s to continue the parse or not, it currently lets you put in lone keywords too.</p>
<p><strong>I think limiting the WORD!-abstraction of keywords probably carries a lesson for INTEGER!s being abstracted as well.</strong>  Perhaps you can use them literally in rules, but you use something like REPEAT when they are abstracted.</p>
<h2>Still Pondering Arity-2 LOOP and Arity-1 WHILE</h2>
<p>I've long wondered if WHILE and UNTIL should be paired.  The idea of making them both arity-1 came up but was often dismissed due to how much people like having an arity-2 WHILE.</p>
<p>But if you could write <strong>loop 2 [...]</strong> or <strong>loop [x &gt; 0] [...]</strong>, that seems to make up for it.  And it could help arity-1 WHILE make more sense in PARSE.</p>
<p>Then LOOP could step in to address this integer case.  It wouldn't help with the idea of matching a range of times, which doesn't have any parallels in DO.  (Range implies you are heeding the count <em>and</em> testing the truthiness of the loop... no such construct exists in DO.)</p>
<p><em>I've only used the range-of-times check fairly rarely, myself.</em>  I wonder how much worse it would be to use TALLY.  So think of:</p>
<pre><code> min max rule
</code></pre>
<p>...represented as:</p>
<pre><code> let n: tally rule, :(did all [n &gt;= min, n &lt;= max])
</code></pre>
<p>This gives you more freedom in expressing the bounds, while not being optimized for the specific case.  It also means that if N is much greater than max, you'll waste time running rule you wouldn't have to.</p>
          <p><a href="https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578/5</link>
        <pubDate>Thu, 22 Apr 2021 10:43:40 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1578-5</guid>
        <source url="https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578.rss">Is INTEGER! in PARSE Too Obfuscating?</source>
      </item>
      <item>
        <title>Is INTEGER! in PARSE Too Obfuscating?</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>Replying to the original question:<br>
I've never had a problem with plain number for repeat <em>in my own code</em> but when trying to understand someone else's code I find it a lot harder to understand, especially if words are used.</p>
          <p><a href="https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578/4</link>
        <pubDate>Tue, 20 Apr 2021 14:10:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1578-4</guid>
        <source url="https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578.rss">Is INTEGER! in PARSE Too Obfuscating?</source>
      </item>
      <item>
        <title>Is INTEGER! in PARSE Too Obfuscating?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>If REPEAT appeared in PARSE to mean "try and do this N times, otherwise fail" then it could mean that in ordinary code too.</p>
</blockquote>
<p>Or... if LOOP is the arity-2 form of looping which takes a number, what if it was just the generic arity-2 form...and if you gave it a block it assumed that was the condition?</p>
<pre><code>x: 10
loop [x &gt; 0] [
    print "Counting down"
    x: x - 1
]

loop 10 [
   print "Counting down"
]
</code></pre>
<p>This would make WHILE like the truthy-based UNTIL...and it would be the same in PARSE and DO.</p>
<pre><code>data: [a b]
while [take data]
</code></pre>
<p>Though we've discussed LOOP being a more powerful dialect, due to the short word.  Maybe REPEAT should be the arity-1 while-like thing?</p>
<pre><code>repeat [take data]
</code></pre>
<p>And then it would make more sense in PARSE if it were arity-1 there too.  Anyway, I feel like the inconsistency of WHILE is a bit jarring at the moment.</p>
<p>Consistency on WHILE and UNTIL was an old-ish question which would be resolved if they were both arity-1.  I don't know that making LOOP polymorphic w.r.t. BLOCK! vs. INTEGER! was suggested before, though maybe it was.</p>
          <p><a href="https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578/3</link>
        <pubDate>Wed, 14 Apr 2021 19:33:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1578-3</guid>
        <source url="https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578.rss">Is INTEGER! in PARSE Too Obfuscating?</source>
      </item>
      <item>
        <title>Is INTEGER! in PARSE Too Obfuscating?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1578">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>As a reader, I feel like a keyword like REPEAT is missing here.</p>
</blockquote>
</aside>
<p>I had a bit of a thought about the naming gap between COUNT-UP and REPEAT, which made me think about what REPEAT might mean that was different.</p>
<p>If REPEAT appeared in PARSE to mean "try and do this N times, otherwise fail" then it could mean that in ordinary code too.</p>
<pre><code> data: [a b]
 repeat 3 [not null? take data] then [
     print "Successfully took 3 elements"
 ] else [
     print "Failed to take 3 elements"
 ]
</code></pre>
<p>It's a thought on how the word might be used consistently.  Not necessarily a great thought, just a thought.</p>
          <p><a href="https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578/2</link>
        <pubDate>Wed, 14 Apr 2021 08:26:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1578-2</guid>
        <source url="https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578.rss">Is INTEGER! in PARSE Too Obfuscating?</source>
      </item>
      <item>
        <title>Is INTEGER! in PARSE Too Obfuscating?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There's a bit of a problem in the combinator-based UPARSE with the historical convention of an INTEGER! rule, where if you have two integers in a row it indicates a range of how many things to accept.</p>
<pre><code>rebol2&gt; parse "**" [1 2 "*"]  ; between 1 and 2 stars
== true

rebol2&gt; parse "**" [3 4 "*"]  ; between 3 and 4 stars
== false
</code></pre>
<p>It doesn't fit into the "natural" pattern of combinators, e.g. where <strong>1 2 RULE</strong> is the same as <strong>1 [2 RULE]</strong>.</p>
<p>That doesn't mean it can't be done...it just means it would have to be part of the BLOCK! combinator specifically to notice integer sequences <em>(vs dispatching to some generic INTEGER! combinator)</em></p>
<p>But it brought me to a bigger question of how good an idea it is to have something that acts as a keyword be abstractable.  I've often been confused when I see something like:</p>
<pre><code> parse ... [... something rule ...]
</code></pre>
<p>And SOMETHING is actually an integer.  It isn't a rule in its own right, it's picking up the next rule...like a keyword.</p>
<p>As a reader, I feel like a keyword like REPEAT is missing here.  I don't know how much we want to stick to the rule that every word resolve to a parse rule...if we did, then you'd have to escape out of that with the likes of:</p>
<pre><code> parse ... [... repeat (2) rule ...]
 parse ... [... repeat (something + 1) rule ...]
</code></pre>
<p>But perhaps within PARSE, literal integers could be exempted...assumed to never match integers, but be passed as a parameter.</p>
<p>This doesn't answer what to do about ranges of integers (and BETWEEN is taken).  But just pointing out that I don't know that the current super-succinct integer syntax pays off all that well.  It might be better to be a little more verbose to make it clear that a repetition is happening.</p>
          <p><a href="https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578/1</link>
        <pubDate>Sun, 28 Mar 2021 17:29:10 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1578-1</guid>
        <source url="https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578.rss">Is INTEGER! in PARSE Too Obfuscating?</source>
      </item>
  </channel>
</rss>

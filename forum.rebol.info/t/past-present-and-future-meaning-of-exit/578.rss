<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Past, present, and future meaning of EXIT</title>
    <link>https://forum.rebol.info/t/past-present-and-future-meaning-of-exit/578</link>
    <description>When C programmers think of EXIT, they think of something particularly severe...the termination of processes with an exit code:

http://en.cppreference.com/w/c/program/exit

The idea of EXIT meaning something &quot;big&quot; is also cultural, with exit signs being where you go in an emergency:

https://en.wikipedia.org/wiki/Exit_sign

Yet Rebol2 chose to use EXIT as the 0-arity form of RETURN.  So it was synonymous with **return ()**.  This seemed a bit pedestrian for such a word.

---

At one time I suggested that EXIT be the arity-1 form of QUIT, e.g. **exit 1** would act kind-of-like **quit/with 1**.  But unlike QUIT, it would not use the throw mechanics and be interceptible, it would really mean *exit the process*...no questions asked.  This would be something of an homage to C, and I felt it would seem natural to programmers...since the &quot;return&quot; sense felt like a mismatch for the word.

So when it came time to decide the 0-arity definitional version of RETURN for a PROCEDURE (with no result, as opposed to a FUNCTION), **leave** was chosen over **exit**, despite being less compatible.  &quot;Leaving&quot; sounded more benign, and on par with &quot;Returning&quot;.

But 0-arity EXIT hung around.  Partially because in those days being fully incompatible without a &quot;shim&quot; (e.g. `do &lt;r3-legacy&gt;`) was controversial.  But also, it was adopted as a non-definitional way of exiting whatever function was running.  It got a /WITH refinement so it could exit whatever function was running with a value:

    foo: does [
        print if true [
            exit/with &quot;hello&quot;
        ]
        print &quot;world&quot;
    ]
    foo

So the above would print &quot;hello&quot; and &quot;world&quot;, because EXIT will terminate the frame of the IF...having no specific relationship to the FUNCTION! that foo holds.

EXIT thus became very similar to something [recently introduced as END](https://trello.com/c/ouWSjwMc)... though END is a common noun-like variable name (for a variable holding an ending index), while EXIT is not.

The main use of EXIT eventually came via its /FROM refinement, which was the ability to specify exactly which frame to exit.  By doing so, it offered *the functionality to implement RETURN*.

    foo: make function! [[x &lt;local&gt; return] [
        return: make function! [[value] [exit/from/with (context of x) :value]]
        if true [
            return x + 1000
        ]
        304 ;-- never gets here
     ]]
     1020 = foo 20

But this meant that pretty much any EXIT had a /WITH, making the arity-0 form nearly useless (and as mentioned above, covered by END).

---

Years have passed, and I still strongly feel EXIT is not a good name for what LEAVE does today in a PROC/PROCEDURE.  EXIT has too much &quot;baggage&quot;.  Its current purpose for implementing definitional returns would probably be served better by something called JUMP, because it is effectively jumping up the stack the way C&#39;s [longjmp()](http://en.cppreference.com/w/c/program/longjmp) might...and I think that would be more understandable as an arity-1 function of where to jump...that had a /WITH refinement for what value to give it.

Hence I think my bias is for 0-arity EXIT to go away, and await reuse.  Perhaps it should indeed be a way to hard exit a process without submitting it as a THROW, the way QUIT does.  (If you quit from within a DO of a script, it only quits that script, the caller keeps running... @szeng had to add [EXIT-REBOL](https://github.com/metaeducation/ren-c/blob/ee2b12454af62e85de122c679b96aadc9ea50c6f/src/core/n-system.c#L90) when this functionality is needed.)</description>
    
    <lastBuildDate>Fri, 13 Sep 2019 17:31:42 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/past-present-and-future-meaning-of-exit/578.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Past, present, and future meaning of EXIT</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="1" data-topic="578">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Years have passed, and I still strongly feel EXIT is not a good name for what LEAVE does today in a PROC/PROCEDURE. EXIT has too much "baggage".</p>
</blockquote>
</aside>
<p><strong>More years have passed I'm feeling ever more confident that EXIT likely should mean hard exit to shell; with no opportunity to intercept it.</strong></p>
<p>I was thinking about this question because I couldn't remember how QUIT took its value parameter.  Then I realized it uses <code>&lt;end&gt;</code>-ability.  If you don't want QUIT to take a parameter, just don't put anything after it.</p>
<pre><code>if whatever [quit]  ; default (e.g. NULL to enclosing script, or 0 to shell) 
if whatever-else [quit 1]
</code></pre>
<p>That's the same technique used by RETURN and CONTINUE now (which is why LEAVE and PROC/PROCEDURE are gone, as is CONTINUE/WITH).</p>
<p><em>Note: BREAK/WITH is gone for a completely different reason, which is the <a href="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609">"loop result protocol"</a>... loops return NULL if-and-only-if they BREAK</em></p>
          <p><a href="https://forum.rebol.info/t/past-present-and-future-meaning-of-exit/578/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/past-present-and-future-meaning-of-exit/578/2</link>
        <pubDate>Fri, 13 Sep 2019 17:31:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-578-2</guid>
        <source url="https://forum.rebol.info/t/past-present-and-future-meaning-of-exit/578.rss">Past, present, and future meaning of EXIT</source>
      </item>
      <item>
        <title>Past, present, and future meaning of EXIT</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>When C programmers think of EXIT, they think of something particularly severe...the termination of processes with an exit code:</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://en.cppreference.com/favicon.ico" class="site-icon" width="32" height="32">
      <a href="https://en.cppreference.com/w/c/program/exit" target="_blank" rel="noopener">en.cppreference.com</a>
  </header>
  <article class="onebox-body">
    <img src="" class="thumbnail" width="" height="">

<h3><a href="https://en.cppreference.com/w/c/program/exit" target="_blank" rel="noopener">exit - cppreference.com</a></h3>



  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>The idea of EXIT meaning something "big" is also cultural, with exit signs being where you go in an emergency:</p>
<aside class="onebox wikipedia">
  <header class="source">
      <a href="https://en.wikipedia.org/wiki/Exit_sign" target="_blank" rel="noopener">en.wikipedia.org</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:200/200;"><img src="//upload.wikimedia.org/wikipedia/commons/thumb/7/74/PublicInformationSymbol_EmergencyExit.svg/200px-PublicInformationSymbol_EmergencyExit.svg.png" class="thumbnail" width="200" height="200"></div>

<h3><a href="https://en.wikipedia.org/wiki/Exit_sign" target="_blank" rel="noopener">Exit sign</a></h3>

<p>An exit sign is a device in a public facility (such as a building, aircraft, or boat) denoting the location of the closest emergency exit in case of fire or other emergency. Most relevant codes (fire, building, health, or safety) require exit signs to be permanently lit.
 Exit signs are designed to be absolutely unmistakable and understandable to anyone. In the past, this generally meant exit signs that show the word "EXIT" or the equivalent in the local language, but increasingly exit signs arou...</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>Yet Rebol2 chose to use EXIT as the 0-arity form of RETURN.  So it was synonymous with <strong>return ()</strong>.  This seemed a bit pedestrian for such a word.</p>
<hr>
<p>At one time I suggested that EXIT be the arity-1 form of QUIT, e.g. <strong>exit 1</strong> would act kind-of-like <strong>quit/with 1</strong>.  But unlike QUIT, it would not use the throw mechanics and be interceptible, it would really mean <em>exit the process</em>...no questions asked.  This would be something of an homage to C, and I felt it would seem natural to programmers...since the "return" sense felt like a mismatch for the word.</p>
<p>So when it came time to decide the 0-arity definitional version of RETURN for a PROCEDURE (with no result, as opposed to a FUNCTION), <strong>leave</strong> was chosen over <strong>exit</strong>, despite being less compatible.  "Leaving" sounded more benign, and on par with "Returning".</p>
<p>But 0-arity EXIT hung around.  Partially because in those days being fully incompatible without a "shim" (e.g. <code>do &lt;r3-legacy&gt;</code>) was controversial.  But also, it was adopted as a non-definitional way of exiting whatever function was running.  It got a /WITH refinement so it could exit whatever function was running with a value:</p>
<pre><code>foo: does [
    print if true [
        exit/with "hello"
    ]
    print "world"
]
foo
</code></pre>
<p>So the above would print "hello" and "world", because EXIT will terminate the frame of the IF...having no specific relationship to the FUNCTION! that foo holds.</p>
<p>EXIT thus became very similar to something <a href="https://trello.com/c/ouWSjwMc">recently introduced as END</a>... though END is a common noun-like variable name (for a variable holding an ending index), while EXIT is not.</p>
<p>The main use of EXIT eventually came via its /FROM refinement, which was the ability to specify exactly which frame to exit.  By doing so, it offered <em>the functionality to implement RETURN</em>.</p>
<pre><code>foo: make function! [[x &lt;local&gt; return] [
    return: make function! [[value] [exit/from/with (context of x) :value]]
    if true [
        return x + 1000
    ]
    304 ;-- never gets here
 ]]
 1020 = foo 20
</code></pre>
<p>But this meant that pretty much any EXIT had a /WITH, making the arity-0 form nearly useless (and as mentioned above, covered by END).</p>
<hr>
<p>Years have passed, and I still strongly feel EXIT is not a good name for what LEAVE does today in a PROC/PROCEDURE.  EXIT has too much "baggage".  Its current purpose for implementing definitional returns would probably be served better by something called JUMP, because it is effectively jumping up the stack the way C's <a href="http://en.cppreference.com/w/c/program/longjmp">longjmp()</a> might...and I think that would be more understandable as an arity-1 function of where to jump...that had a /WITH refinement for what value to give it.</p>
<p>Hence I think my bias is for 0-arity EXIT to go away, and await reuse.  Perhaps it should indeed be a way to hard exit a process without submitting it as a THROW, the way QUIT does.  (If you quit from within a DO of a script, it only quits that script, the caller keeps running... <a class="mention" href="/u/szeng">@szeng</a> had to add <a href="https://github.com/metaeducation/ren-c/blob/ee2b12454af62e85de122c679b96aadc9ea50c6f/src/core/n-system.c#L90">EXIT-REBOL</a> when this functionality is needed.)</p>
          <p><a href="https://forum.rebol.info/t/past-present-and-future-meaning-of-exit/578/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/past-present-and-future-meaning-of-exit/578/1</link>
        <pubDate>Thu, 22 Mar 2018 12:18:26 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-578-1</guid>
        <source url="https://forum.rebol.info/t/past-present-and-future-meaning-of-exit/578.rss">Past, present, and future meaning of EXIT</source>
      </item>
  </channel>
</rss>

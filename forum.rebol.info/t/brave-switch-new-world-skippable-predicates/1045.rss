<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Brave SWITCH new .WORLD [?] - Skippable Predicates</title>
    <link>https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045</link>
    <description>&gt; **Note:** This post was originally written to use REFINEMENT! for the predicates.  However, generalized TUPLE! has seemed more favorable, so that&#39;s what&#39;s used when talking about it now...even though generalized tuples do not exist at time of writing.

It&#39;s a bummer that all the Rebol functions like SWITCH or FIND use some kind of internal magic operator to decide if things are equal.  We&#39;d like that operator to be less opaque and more clearly documented and understandable, and it&#39;s in the long to-do-list... to try and figure out how it ties into IS-ness or MATCH-ness or whatever it is.

Still, no matter what the default is, we know we need a way to override it.  Ren-C had added a /STRICT refinement to SWITCH to deal with this case:

    &gt;&gt; switch 0.01 [1% [&lt;pretty lax...&gt;] 0.01 [&lt;stricter&gt;]]
    &lt;pretty lax...&gt;

    &gt;&gt; switch/strict 0.01 [1% [&lt;pretty lax...&gt;] 0.01 [&lt;stricter&gt;]]
    &lt;stricter&gt;

But the name &quot;strict&quot; wasn&#39;t something super agreed upon.  And it&#39;s just the tip of the iceberg, you kind of want to pass in more functions.  That seems kind of ugly.

    &gt;&gt; switch/compare 0.01 [1% [&lt;pretty lax...&gt;] 0.01 [&lt;stricter&gt;]] :==
    &lt;stricter&gt;

## Fancy New Experiment: Skippable Refinements that ARE the compare!

Dig this (and it will look even better when EQUAL? and = are strict by default, and IS is the lax operator...)

    &gt;&gt; switch 0.01 [1% [&lt;pretty lax...&gt;] 0.01 [&lt;stricter&gt;]]
    &lt;pretty lax...&gt;

    &gt;&gt; switch 0.01 /strict-equal? [1% [&lt;pretty lax...&gt;] 0.01 [&lt;stricter&gt;]]
    &lt;stricter&gt;

    &gt;&gt; switch 0.01 /== [1% [&lt;pretty lax...&gt;] 0.01 [&lt;stricter&gt;]]
    &lt;stricter&gt;

There&#39;s a skippable slot for a &quot;refinement&quot; (blank-headed PATH!) *between the thing you&#39;re switching on and the cases block*.  And it looks up to an ACTION!.

It also accepts literal ACTION!s.  You won&#39;t/can&#39;t type that in by hand...but that means if you&#39;re doing an APPLY there&#39;s a normal frame slot for your compare to go into.  (It&#39;s one of the nice things about skippable parameters being knownst to the system in a way that variadic parameters are not.)  If you need a SWITCH variation with a different interface you can make one out of this one.

Notice that the interpretation puts the switched-on expression on the *left* or in the *first* argument.

    &gt;&gt; x: 10
    == 10

    &gt;&gt; switch x /greater? [20 [&lt;nope&gt;] 5 [&lt;yep&gt;]]
    == &lt;yep&gt;

**Before we go propagating the idea all over the system, why not give this a spin.**  Kick the tires a bit.  *Write some tests!*

    &gt;&gt; x: 10

    &gt;&gt; switch x /(reduce pick [:greater? :lesser?] 1) [20 [&lt;a&gt;] 5 [&lt;b&gt;]]
    == &lt;b&gt;

    &gt;&gt; switch x /(reduce pick [:greater? :lesser?] 2) [20 [&lt;a&gt;] 5 [&lt;b&gt;]]
    == &lt;a&gt;</description>
    
    <lastBuildDate>Mon, 23 Aug 2021 05:05:52 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Brave SWITCH new .WORLD [?] - Skippable Predicates</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1045">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>&gt;&gt; x: 10
== 10

&gt;&gt; switch x .greater? [20 [&lt;nope&gt;] 5 [&lt;yep&gt;]]
== &lt;yep&gt;
</code></pre>
<p>Before we go propagating the idea all over the system, why not give this a spin.</p>
</blockquote>
</aside>
<p>Having given this the spin, I have found a couple of problems...</p>
<h2>ACTION!s Being Hard Quoted Instead of Run</h2>
<p>The /PREDICATE refinement not only takes TUPLE!, but it also is willing to take ACTION!.  That's in case you try to supply it explicitly, these would be equivalent:</p>
<pre><code>switch .greater? x [20 [&lt;nope&gt;] 5 [&lt;yep&gt;]] :greater?

switch/predicate x [20 [&lt;nope&gt;] 5 [&lt;yep&gt;]] :greater?
</code></pre>
<p>It didn't seem like it would conflict, because you don't see hard-quoted ACTION!s in people's code...</p>
<p><em>...unless they're using the API, or doing a COMPOSE.</em>  Internally this happens a lot:</p>
<pre><code>REBVAL *reversed = rebValue(Lib(REDUCE), Lib(REVERSE), some_block);
</code></pre>
<p><em>(The Lib() macro does a fast fetch of builtin functions without word lookup.)</em></p>
<p>What was trying to be written above was the effect of <strong><code>reduce reverse some-block</code></strong>.  But it's acting like <strong>do compose [(:reduce) (:reverse) (:some-block)]</strong>.</p>
<p>The slot where it looks for the predicate TUPLE!s now has the REVERSE action in it...which we're intending to run to negate the variable.  But it's picked up as a predicate.  <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=9" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p>I don't think the solution is to have separate /PREDICATE and /PREDICATE-ACTION refinements on every function!  Somehow any shorthands need to work with actions.</p>
<h2>I Think I Want Leading Dot TUPLE! to Mean Something Else</h2>
<p>It's difficult to read method code when you are mentioning a field in an object that was declared far away.  This is true in many languages... so C++ frequently has people write <strong><code>this-&gt;x</code></strong>, and the problem is exacerbated in Rust code which is crawling with <strong><code>self-&gt;x</code></strong>.</p>
<p>What if you could just say <strong><code>.field</code></strong>, and that would be assumed to mean something along the lines of <strong><code>self.field</code></strong> ?</p>
<p>What I'm thinking is that in Rebol's binding model, you'd have a way that  <strong><code>.field</code></strong> -- even though in memory it has a heart-byte that is a WORD! (single immutable cell) -- that could hold a binding for an implied object, <em>not</em> a binding for FIELD.</p>
<p>This concept has gotten me intrigued to where the predicate use seems far less advantageous.</p>
<h2>Going to Drop Special Predicate Notation for Now</h2>
<p>Given the various issues I've encountered, I'm going to just make /PREDICATE take a normal action for now...with no shorthand.</p>
<p>With new APPLY, it's not too onerous to supply a predicate.  And you can write a whole function in place...which is probably something you'd often want to do:</p>
<pre><code>apply :switch [
    x [20 [&lt;nope&gt;] 5 [&lt;yep&gt;]]
    /predicate func [a b] [a &gt; b]
]
</code></pre>
<p><em>We know that notation will have to be supported, regardless.</em>  So let's put that as a stake in the ground so the functions still have the predicate ability.  And work on the shorthand notations as time permits.</p>
          <p><a href="https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045/8</link>
        <pubDate>Sun, 22 Aug 2021 23:11:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1045-8</guid>
        <source url="https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045.rss">Brave SWITCH new .WORLD [?] - Skippable Predicates</source>
      </item>
      <item>
        <title>Brave SWITCH new .WORLD [?] - Skippable Predicates</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="6" data-topic="1045">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Yet I mentioned that I thought having TUPLE! be the inert form of PATH! was an interesting idea, as it would provide historical compatibility as well as open up new options. We don't have it yet, but its inert status would make it the clear better choice for this function.</p>
</blockquote>
</aside>
<p>My idea of tuples not being inert, but operating the same as paths but with constrained rules (<a href="https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330">"thing to the left of a dot is not a function"</a>) has such strong advantages I'm hard-pressed to justify tuple as being <em>generically</em> inert.</p>
<p>But if your tuple starts with an inert value, then making it inert offers compatibility advantages (e.g. 128.0.0.1).  Then things like <strong>.foo.bar</strong> should also be inert, because they technically start with BLANK!.</p>
<p>So that part is good, but it still has the problem that the type alone can't dictate whether you want a predicate.  If a TUPLE! can evaluate to a thing to be found like a WORD! would, you don't want all TUPLE!s to get sucked up by a skippable parameter that only sees a TUPLE!.</p>
<p>So you want a <em>constrained type</em>.  If it's a TUPLE! (or PATH! or whatever) you're only interested in it as a predicate if it starts with BLANK!.</p>
<p>Of course constraining the instance of the value based on something more than just its raw type is a desirable feature.  I've talked about constructing things like EVEN-INTEGER!.  So if <strong><code>/foo</code></strong> is a REFINEMENT! and <strong><code>.foo</code></strong> is a PREDICATE! in this constrained-type universe, I guess that's all right.</p>
<p>The part I find a bit unfortunate about all of this is that it kind of seals the deal that BLANK!-headed paths (and hence "refinements") remain inert in the evaluator.  Not that I knew exactly what else they were going to do, but I thought they might have some kind of meaning in namespacing (or something).  This may be the final nail in that coffin.</p>
<p>But hey, many other wishes have come true.  Can't have everything.  But predicates are needed, I want to be able to say <strong>any .even? [1 7 5 9 10 3]</strong> and such, and have been bothered that these generic things aren't available...when they should be easy to make.  (Notationally, <strong>any/predicate [1 7 5 9 10 3] :even?</strong> is just too awkward...though you would still be able to say that with a skippable parameter at another position!)</p>
          <p><a href="https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045/7</link>
        <pubDate>Sun, 20 Sep 2020 22:42:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1045-7</guid>
        <source url="https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045.rss">Brave SWITCH new .WORLD [?] - Skippable Predicates</source>
      </item>
      <item>
        <title>Brave SWITCH new .WORLD [?] - Skippable Predicates</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="5" data-topic="1045">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>find ["A" 10 20] /matches @[integer]</p>
</blockquote>
</aside>
<p>There's a technical problem I hadn't noticed until REFINEMENT! and PATH! unified (which we may discuss) but that is that PATH!s are not inert.  This means it's hard to distinguish the above from:</p>
<pre><code> &gt;&gt; find [a b c] obj/thing-to-find   ; evaluative
 ** Error: predicate is not an ACTION!
</code></pre>
<p>e.g. the hard quote recognition of a PATH! sucks in things you might legitimately want to look up and find.  :-/  You don't want to have to subvert this with <strong>find [a b c] (obj/thing-to-find)</strong> or other nonsense.</p>
<p>I'm still rather bullish on <strong>/a/b</strong> being both <em>legal</em> as something in the parts box and the "same-flavored" thing as <strong>/a</strong>.  I'm also not confident that the evaluative advantage of an inert <strong>/a</strong> exceeds being able to get that with <strong>'/a</strong>.  We may not know what the purpose of that leading slash could be, but it is presumably related to how binding is treated.</p>
<p>Yet I mentioned that I thought having TUPLE! be the inert form of PATH! was an interesting idea, as it would provide historical compatibility as well as open up new options.  We don't have it yet, but its inert status would make it the clear better choice for this function.</p>
          <p><a href="https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045/6</link>
        <pubDate>Fri, 17 Jan 2020 15:31:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1045-6</guid>
        <source url="https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045.rss">Brave SWITCH new .WORLD [?] - Skippable Predicates</source>
      </item>
      <item>
        <title>Brave SWITCH new .WORLD [?] - Skippable Predicates</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Predicates are becoming more critical to think through, as Ren-C tries to pin down some formalisms for off-the-cuff Rebol2-isms.</p>
<p>For instance, consider how Rebol2 blurred lines by considering both literal datatype matches and values-of-that-type to match:</p>
<pre><code> rebol2&gt; find ["A" 10 20] integer!
 == [10 20]

 rebol2&gt; find reduce [string! integer! block!] integer!
 == [integer! block!]  ;...and, it looks like WORD!s :-/
</code></pre>
<p>In moving to using the @[bl o ck] type to represent datatypes, Ren-C is making this more formal:</p>
<pre><code>&gt;&gt; integer!: @[integer]

&gt;&gt; find reduce [text! integer! block!] integer!
== [@[integer] @[block]]  ; distinct from WORD!s
</code></pre>
<p>By and large, the interpretation most natives (including PARSE) will be taking is that <em>often</em> when you are using such an @[bl o ck], you mean to specify a type.  But not always.  Your dialects are free to interpret these other ways.</p>
<p>So I feel that if you want to do a FIND where you're matching against a pattern, that's a job for a predicate.  But where should it go?  How should the parameters be mapped?</p>
<p>Consider that you can write <strong><code>match integer! 10</code></strong> and get 10, but <strong><code>match integer! &lt;tag&gt;</code></strong> and get null.  That means the datatype parameter comes <em>first</em> and the thing to test comes <em>second</em>.  So this predicate looks a bit backwards:</p>
<pre><code> find /match ["A" 10 20] @[integer]
</code></pre>
<p>There's a routine called MATCHES which reverses the order:</p>
<pre><code>&gt;&gt; 10 matches integer!
== 10
</code></pre>
<p>So we might use that instead:</p>
<pre><code>find /matches ["A" 10 20] @[integer]
</code></pre>
<p>But would it look better if it were <em>between</em> ?</p>
<pre><code>find ["A" 10 20] /matches @[integer]
</code></pre>
<p>Or does that only apply for things that are infix?  It's hard to say.</p>
<p>But what I do think is that for a "fancy function" that does something other than an equality comparison on FIND, you should have to ask for it.  We should make it easy to ask, and then people will likely appreciate the more deterministic and reliable behavior.</p>
          <p><a href="https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045/5</link>
        <pubDate>Tue, 01 Oct 2019 11:18:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1045-5</guid>
        <source url="https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045.rss">Brave SWITCH new .WORLD [?] - Skippable Predicates</source>
      </item>
      <item>
        <title>Brave SWITCH new .WORLD [?] - Skippable Predicates</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="3" data-topic="1045" data-full="true">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>I find that tuple looks better, and wins when it comes to ergonomics.</p>
</blockquote>
</aside>
<p>Using something different than refinement could also have another advantage, that it could be interpreted as a kind of chain.  If we assume SWITCH usually goes with IS, you might want to use = for strict equality.  You also might want to use a more literate "equals".  But there isn't any particularly nice way to say "unequals".</p>
<p>So what about just good old:</p>
<pre><code> switch x .not.equals [
     &lt;whatever&gt;
 ]
</code></pre>
<p>Then imagine if we've define IS as <strong>is: :equals/lax</strong>.  So there's a refinement on equals, and you might also call it as:</p>
<pre><code> switch x .not.equals/lax [
     &lt;whatever&gt;
 ]
</code></pre>
<p>So that's an interesting potential advantage.  Though the proposal I have for tuples is that paths take priority, so it would see that as the PATH! [.not.equals lax].  But if the chain is specializing that should still work, e.g. (=&gt; NOT EQUALS) could produce a function that takes one argument and has a /LAX refinement.</p>
<p><em>(This is all pretty out there, and easier said than done...but it does tie into stuff I'd like to see be able to work.  I'm just putting in another point of notational advantage for TUPLE! here.)</em></p>
<p>This also suggests the possibility that a GET-TUPLE! might have a purpose as a chaining generator, e.g.</p>
<pre><code> chain [:a | :b | :c]
      =&gt; get c.b.a 
      =&gt; :c.b.a
</code></pre>
<p>We also might consider if CHAIN should be reversed, which is something that came up before.</p>
          <p><a href="https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045/4</link>
        <pubDate>Sun, 03 Feb 2019 00:27:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1045-4</guid>
        <source url="https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045.rss">Brave SWITCH new .WORLD [?] - Skippable Predicates</source>
      </item>
      <item>
        <title>Brave SWITCH new .WORLD [?] - Skippable Predicates</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>I find that tuple looks better, and wins when it comes to ergonomics.</p>
          <p><a href="https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045/3</link>
        <pubDate>Sat, 02 Feb 2019 14:52:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1045-3</guid>
        <source url="https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045.rss">Brave SWITCH new .WORLD [?] - Skippable Predicates</source>
      </item>
      <item>
        <title>Brave SWITCH new .WORLD [?] - Skippable Predicates</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I feel like maybe this should be done with generalized TUPLE! instead.</p>
<pre><code>switch obj/value /matches [...]

switch obj/value .matches [...]
</code></pre>
<p>Because the plan is that TUPLE!s will be inert, there's not much odds of you switching on one literally.  But PATH!s you will want to switch on.</p>
<p>As the approach goes on, this will make it harder to do things like FIND on explicit tuples</p>
<pre><code>do [find data .matches integer!]  ; yay, works

do [find css-stuff .class]  ; oops, tries to call CLASS as the predicate
</code></pre>
<p>But with generalized quoting, you'll be able to get around it:</p>
<pre><code>do [find css-stuff '.class]

do [find css-stuff lit .class]
</code></pre>
<p>You just have to understand that TUPLE! has a purpose that is "effectively evaluative", kind of like you have to understand when you go to find WORD!s.  <code>find data my-word</code> already needs a quote or lit.  It comes with the territory.</p>
<p>I'm a little bummed because it kind of feels like these "are refinements", but I think that re-imagining it and saying tuples starting with dot act as predicates (by convention) probably has better bones.</p>
          <p><a href="https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045/2</link>
        <pubDate>Sat, 02 Feb 2019 01:30:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1045-2</guid>
        <source url="https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045.rss">Brave SWITCH new .WORLD [?] - Skippable Predicates</source>
      </item>
      <item>
        <title>Brave SWITCH new .WORLD [?] - Skippable Predicates</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p><strong>Note:</strong> This post was originally written to use REFINEMENT! for the predicates.  However, generalized TUPLE! has seemed more favorable, so that's what's used when talking about it now...even though generalized tuples do not exist at time of writing.</p>
</blockquote>
<p>It's a bummer that all the Rebol functions like SWITCH or FIND use some kind of internal magic operator to decide if things are equal.  We'd like that operator to be less opaque and more clearly documented and understandable, and it's in the long to-do-list... to try and figure out how it ties into IS-ness or MATCH-ness or whatever it is.</p>
<p>Still, no matter what the default is, we know we need a way to override it.  Ren-C had added a /STRICT refinement to SWITCH to deal with this case:</p>
<pre><code>&gt;&gt; switch 0.01 [1% [&lt;pretty lax...&gt;] 0.01 [&lt;stricter&gt;]]
&lt;pretty lax...&gt;

&gt;&gt; switch/strict 0.01 [1% [&lt;pretty lax...&gt;] 0.01 [&lt;stricter&gt;]]
&lt;stricter&gt;
</code></pre>
<p>But the name "strict" wasn't something super agreed upon.  And it's just the tip of the iceberg, you kind of want to pass in more functions.  That seems kind of ugly.</p>
<pre><code>&gt;&gt; switch/compare 0.01 [1% [&lt;pretty lax...&gt;] 0.01 [&lt;stricter&gt;]] :==
&lt;stricter&gt;
</code></pre>
<h2>Fancy New Experiment: Skippable Refinements that ARE the compare!</h2>
<p>Dig this (and it will look even better when EQUAL? and = are strict by default, and IS is the lax operator...)</p>
<pre><code>&gt;&gt; switch 0.01 [1% [&lt;pretty lax...&gt;] 0.01 [&lt;stricter&gt;]]
&lt;pretty lax...&gt;

&gt;&gt; switch 0.01 /strict-equal? [1% [&lt;pretty lax...&gt;] 0.01 [&lt;stricter&gt;]]
&lt;stricter&gt;

&gt;&gt; switch 0.01 /== [1% [&lt;pretty lax...&gt;] 0.01 [&lt;stricter&gt;]]
&lt;stricter&gt;
</code></pre>
<p>There's a skippable slot for a "refinement" (blank-headed PATH!) <em>between the thing you're switching on and the cases block</em>.  And it looks up to an ACTION!.</p>
<p>It also accepts literal ACTION!s.  You won't/can't type that in by hand...but that means if you're doing an APPLY there's a normal frame slot for your compare to go into.  (It's one of the nice things about skippable parameters being knownst to the system in a way that variadic parameters are not.)  If you need a SWITCH variation with a different interface you can make one out of this one.</p>
<p>Notice that the interpretation puts the switched-on expression on the <em>left</em> or in the <em>first</em> argument.</p>
<pre><code>&gt;&gt; x: 10
== 10

&gt;&gt; switch x /greater? [20 [&lt;nope&gt;] 5 [&lt;yep&gt;]]
== &lt;yep&gt;
</code></pre>
<p><strong>Before we go propagating the idea all over the system, why not give this a spin.</strong>  Kick the tires a bit.  <em>Write some tests!</em></p>
<pre><code>&gt;&gt; x: 10

&gt;&gt; switch x /(reduce pick [:greater? :lesser?] 1) [20 [&lt;a&gt;] 5 [&lt;b&gt;]]
== &lt;b&gt;

&gt;&gt; switch x /(reduce pick [:greater? :lesser?] 2) [20 [&lt;a&gt;] 5 [&lt;b&gt;]]
== &lt;a&gt;</code></pre>
          <p><a href="https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045/1</link>
        <pubDate>Thu, 31 Jan 2019 11:16:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1045-1</guid>
        <source url="https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045.rss">Brave SWITCH new .WORLD [?] - Skippable Predicates</source>
      </item>
  </channel>
</rss>

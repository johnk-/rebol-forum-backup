<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Validating Subseries Data In PARSE... INPUT or INTO TAG!s?</title>
    <link>https://forum.rebol.info/t/validating-subseries-data-in-parse-input-or-into-tag-s/1737</link>
    <description>If you want to validate a block of input and return that block, how do you do it?

By default, UPARSE gives you the last rule match:

    &gt;&gt; uparse [1 2 &lt;three&gt; &quot;four&quot;] [some integer! tag! text!] 
    == &quot;four&quot;

You can bend that last-result behavior to your advantage by invoking a rule that returns the input.  The tag! combinator **`&lt;input&gt;`** does exactly that!

    &gt;&gt; uparse [1 2 &lt;three&gt; &quot;four&quot;] [some integer! tag! text! &lt;input&gt;] 
    == [1 2 &lt;three&gt; &quot;four&quot;]

Pretty slick.  But what if it&#39;s a *nested* block?  Does `&lt;input&gt;` give you the INTO series, or the original series?

Right now it gives you the INTO series.  e.g. what `&lt;input&gt;` returns is whatever the *currently parsed input* is:

    &gt;&gt; uparse [zero [1 2 &lt;three&gt; &quot;four&quot;]] [
          word: word!
          validated: into block! [some integer! tag! text! &lt;input&gt;]
          (&quot;some overall result&quot;)
     ]
    == &quot;some overall result&quot;

    &gt;&gt; validated
    == [1 2 &lt;three&gt; &quot;four&quot;]

    &gt;&gt; word
    == zero

That&#39;s nice, but... you can also imagine being inside some nested rule like this where you want to make a decision like **`return &lt;input&gt;`** which wants to imply accepting the original input to the parse.

Should **`&lt;input&gt;`** always return the overall parser input, and a separate rule like **`&lt;into&gt;`** give back the current sub-input?

* At a combinator level, the currently processed argument is always called INPUT.  So calling it `&lt;input&gt;` and returning the currently applicable input is consistent with the implementation.

    * Well...it&#39;s actually only partially consistent.  Because the INPUT to each combinator actually is at the current position.  So it&#39;s more like HERE.

        * I&#39;m actually not that bothered by this

* INTO is not the only combinator that we can conceive of can that can go to a nested level.  So calling the tag `&lt;into&gt;` might not be a good idea.  Also, that doesn&#39;t have the ring of generality to return the input at wherever you currently are...e.g. return the main input if you haven&#39;t done an INTO

    * Shades of meaning are difficult here with other words, as `&lt;current&gt;` (for instance) is hard to distinguish from `&lt;here&gt;`... e.g. you&#39;d think it would include the position.

**In any case...I lean toward thinking `&lt;input&gt;` reflecting the *current* input is the best answer.**  I think this suggests a special term for the main input, like `&lt;main-input&gt;`.  A better choice for this would maybe be `&lt;original&gt;`.</description>
    
    <lastBuildDate>Mon, 04 Oct 2021 15:26:52 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/validating-subseries-data-in-parse-input-or-into-tag-s/1737.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Validating Subseries Data In PARSE... INPUT or INTO TAG!s?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>If you want to validate a block of input and return that block, how do you do it?</p>
<p>By default, UPARSE gives you the last rule match:</p>
<pre><code>&gt;&gt; uparse [1 2 &lt;three&gt; "four"] [some integer! tag! text!] 
== "four"
</code></pre>
<p>You can bend that last-result behavior to your advantage by invoking a rule that returns the input.  The tag! combinator <strong><code>&lt;input&gt;</code></strong> does exactly that!</p>
<pre><code>&gt;&gt; uparse [1 2 &lt;three&gt; "four"] [some integer! tag! text! &lt;input&gt;] 
== [1 2 &lt;three&gt; "four"]
</code></pre>
<p>Pretty slick.  But what if it's a <em>nested</em> block?  Does <code>&lt;input&gt;</code> give you the INTO series, or the original series?</p>
<p>Right now it gives you the INTO series.  e.g. what <code>&lt;input&gt;</code> returns is whatever the <em>currently parsed input</em> is:</p>
<pre><code>&gt;&gt; uparse [zero [1 2 &lt;three&gt; "four"]] [
      word: word!
      validated: into block! [some integer! tag! text! &lt;input&gt;]
      ("some overall result")
 ]
== "some overall result"

&gt;&gt; validated
== [1 2 &lt;three&gt; "four"]

&gt;&gt; word
== zero
</code></pre>
<p>That's nice, but... you can also imagine being inside some nested rule like this where you want to make a decision like <strong><code>return &lt;input&gt;</code></strong> which wants to imply accepting the original input to the parse.</p>
<p>Should <strong><code>&lt;input&gt;</code></strong> always return the overall parser input, and a separate rule like <strong><code>&lt;into&gt;</code></strong> give back the current sub-input?</p>
<ul>
<li>
<p>At a combinator level, the currently processed argument is always called INPUT.  So calling it <code>&lt;input&gt;</code> and returning the currently applicable input is consistent with the implementation.</p>
<ul>
<li>
<p>Well...it's actually only partially consistent.  Because the INPUT to each combinator actually is at the current position.  So it's more like HERE.</p>
<ul>
<li>I'm actually not that bothered by this</li>
</ul>
</li>
</ul>
</li>
<li>
<p>INTO is not the only combinator that we can conceive of can that can go to a nested level.  So calling the tag <code>&lt;into&gt;</code> might not be a good idea.  Also, that doesn't have the ring of generality to return the input at wherever you currently are...e.g. return the main input if you haven't done an INTO</p>
<ul>
<li>Shades of meaning are difficult here with other words, as <code>&lt;current&gt;</code> (for instance) is hard to distinguish from <code>&lt;here&gt;</code>... e.g. you'd think it would include the position.</li>
</ul>
</li>
</ul>
<p><strong>In any case...I lean toward thinking <code>&lt;input&gt;</code> reflecting the <em>current</em> input is the best answer.</strong>  I think this suggests a special term for the main input, like <code>&lt;main-input&gt;</code>.  A better choice for this would maybe be <code>&lt;original&gt;</code>.</p>
          <p><a href="https://forum.rebol.info/t/validating-subseries-data-in-parse-input-or-into-tag-s/1737/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/validating-subseries-data-in-parse-input-or-into-tag-s/1737/1</link>
        <pubDate>Mon, 04 Oct 2021 15:11:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1737-1</guid>
        <source url="https://forum.rebol.info/t/validating-subseries-data-in-parse-input-or-into-tag-s/1737.rss">Validating Subseries Data In PARSE... INPUT or INTO TAG!s?</source>
      </item>
  </channel>
</rss>

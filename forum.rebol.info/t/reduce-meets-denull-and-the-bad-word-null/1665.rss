<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>REDUCE meets DENULL and the BAD-WORD! ~NULL~</title>
    <link>https://forum.rebol.info/t/reduce-meets-denull-and-the-bad-word-null/1665</link>
    <description>The question of what to do when REDUCE encounters NULL has been a thorn ever since its introduction.  By definition you can&#39;t put NULL in a BLOCK!.

So you&#39;ve seemingly got three choices:

* Vaporize the expression slot: **reduce [1 null 2]** =&gt; **[1 2]**

* Raise an error: **reduce [1 null 2]** =&gt; **`** Error: NULLs illegal in REDUCE`**

* Put some value there: **reduce [1 null 2]** =&gt; **[1 ~null~ 2]** or **[1 _ 2]**

I&#39;m exaggerating to call these the &quot;only options&quot;.  When you throw in refinements or pass in functions, you&#39;ve got more options.  I&#39;ve also made the REDUCE-EACH function, which lets you get involved with the result of each expression evaluation...sky&#39;s the limit:

    collect [
        reduce-each x [1 + 2 null 10 + 20] [
            if integer? x [keep quote :[&lt;int&gt; x]]
            if null? x [keep &lt;null&gt;]
        ]
    ]
    == [[&lt;int&gt; 3] &lt;null&gt; [&lt;int&gt; 30]]

But with no parameterization I think there are only three reasonable choices: You vaporize, you error, or you put **~null~** or **_** there.

## Several People Have Favored Vaporization

I myself have *usually* usually been on the side of erroring.

But the place that vaporization feels most convenient is when you&#39;re doing something like an append of data to a block, and you want to cut out some items.

    &gt;&gt; use-preface: false

    &gt;&gt; append data reduce [if use-preface [&lt;preface&gt;] 1 + 2 &quot;Hello&quot;]
    == [1 + 2 &quot;Hello&quot;]

The key to why vaporization works here is that **you&#39;re dealing with a situation that has no positional expectations**.

But I don&#39;t generally use REDUCE in these cases.  It can&#39;t splice (which I usually want to be able to do).

## We&#39;ve Now Tried Vaporization and... *I Don&#39;t Think I Like It*

Let&#39;s look at situations like the use of GET-BLOCK! (I believe must be a synonym for REDUCE) to do ranges in UPARSE.

    ; Set min to null so we can easily test if it has been set or not, but is
    ; still &quot;a little ornery&quot;.  Must set it before running the rule.
    ;
    min: null

    ; Set max to blank so it can opt out by default if we have no max
    ;
    max: _
    
    &lt;&lt;BUNCH OF CODE THAT MUST SET MIN AND MAY OR MAY NOT SET MAX&gt;&gt;

    uparse data [repeat (:[min max]) rule]

The reason I didn&#39;t say **`(min: ~)`** or **`(min: ~overwrite-me~)`** is because I wanted min to be &quot;middlingly ornery&quot;.  So I wanted to use it in expressions like **any [min, ...]** but I didn&#39;t want it to be able to be used as an opt out intention.  This is the weird zone that NULL occupies and we&#39;re making the most of it.

Under this understanding...I&#39;d be displeased if that turned into **`[repeat ([_]) rule]`**, because I&#39;d have liked to have been told about the issue.

**Remember that it was not too long ago that the non-valued state would error on the variable fetch itself.**  We&#39;ve made a lot of concessions to get to the point where it is falsey and can be retrieved without a problem.

So long as the answer isn&#39;t vaporization, it would have been okay.  Making **`[repeat ([~null~ _]) rule]`** would have been poisonous enough to cause a problem.  And raising an error would have been fine too.

## A Compromise: DENULL... where DENULL NULL vanishes?

If you really want a REDUCE to make nulls go away instead of becoming a ~null~ BAD-WORD! or raising an error, how about this?

    &gt;&gt; reduce [1 denull if true [&lt;x&gt;] 2]
    == [1 &lt;x&gt; 2]

    &gt;&gt; reduce [1 denull if false [&lt;x&gt;] 2]
    == [1 2]

    &gt;&gt; reduce [1 if false [&lt;x&gt;] 2]
    == [1 ~null~ 2]

This gives the tool for removing things conditionally, while keeping the REDUCE number of expressions consistent.

Like I say... COMPOSE is my preferred tool for when you want splicing... not just letting you go from 1 expression to 0 values, but from 1 expression to N values.

## We Can Also Make a REDUCE* Which Drops NULLs

...and I&#39;ve talked about predicates and all the other possibilities.  But I think vaporization just isn&#39;t the default I want.  DENULL seems a good way to get past the problem.

The middle ground of **~null~** -- even though it&#39;s not an isotope -- gives a compromise that I think is more discoverable when it goes wrong than vaporization.

It seems worth trying out.</description>
    
    <lastBuildDate>Mon, 16 Aug 2021 02:13:44 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/reduce-meets-denull-and-the-bad-word-null/1665.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>REDUCE meets DENULL and the BAD-WORD! ~NULL~</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The question of what to do when REDUCE encounters NULL has been a thorn ever since its introduction.  By definition you can't put NULL in a BLOCK!.</p>
<p>So you've seemingly got three choices:</p>
<ul>
<li>
<p>Vaporize the expression slot: <strong>reduce [1 null 2]</strong> =&gt; <strong>[1 2]</strong></p>
</li>
<li>
<p>Raise an error: <strong>reduce [1 null 2]</strong> =&gt; <strong><code>** Error: NULLs illegal in REDUCE</code></strong></p>
</li>
<li>
<p>Put some value there: <strong>reduce [1 null 2]</strong> =&gt; <strong>[1 ~null~ 2]</strong> or <strong>[1 _ 2]</strong></p>
</li>
</ul>
<p>I'm exaggerating to call these the "only options".  When you throw in refinements or pass in functions, you've got more options.  I've also made the REDUCE-EACH function, which lets you get involved with the result of each expression evaluation...sky's the limit:</p>
<pre><code>collect [
    reduce-each x [1 + 2 null 10 + 20] [
        if integer? x [keep quote :[&lt;int&gt; x]]
        if null? x [keep &lt;null&gt;]
    ]
]
== [[&lt;int&gt; 3] &lt;null&gt; [&lt;int&gt; 30]]
</code></pre>
<p>But with no parameterization I think there are only three reasonable choices: You vaporize, you error, or you put <strong>~null~</strong> or <strong>_</strong> there.</p>
<h2>Several People Have Favored Vaporization</h2>
<p>I myself have <em>usually</em> usually been on the side of erroring.</p>
<p>But the place that vaporization feels most convenient is when you're doing something like an append of data to a block, and you want to cut out some items.</p>
<pre><code>&gt;&gt; use-preface: false

&gt;&gt; append data reduce [if use-preface [&lt;preface&gt;] 1 + 2 "Hello"]
== [1 + 2 "Hello"]
</code></pre>
<p>The key to why vaporization works here is that <strong>you're dealing with a situation that has no positional expectations</strong>.</p>
<p>But I don't generally use REDUCE in these cases.  It can't splice (which I usually want to be able to do).</p>
<h2>We've Now Tried Vaporization and... <em>I Don't Think I Like It</em>
</h2>
<p>Let's look at situations like the use of GET-BLOCK! (I believe must be a synonym for REDUCE) to do ranges in UPARSE.</p>
<pre><code>; Set min to null so we can easily test if it has been set or not, but is
; still "a little ornery".  Must set it before running the rule.
;
min: null

; Set max to blank so it can opt out by default if we have no max
;
max: _

&lt;&lt;BUNCH OF CODE THAT MUST SET MIN AND MAY OR MAY NOT SET MAX&gt;&gt;

uparse data [repeat (:[min max]) rule]
</code></pre>
<p>The reason I didn't say <strong><code>(min: ~)</code></strong> or <strong><code>(min: ~overwrite-me~)</code></strong> is because I wanted min to be "middlingly ornery".  So I wanted to use it in expressions like <strong>any [min, ...]</strong> but I didn't want it to be able to be used as an opt out intention.  This is the weird zone that NULL occupies and we're making the most of it.</p>
<p>Under this understanding...I'd be displeased if that turned into <strong><code>[repeat ([_]) rule]</code></strong>, because I'd have liked to have been told about the issue.</p>
<p><strong>Remember that it was not too long ago that the non-valued state would error on the variable fetch itself.</strong>  We've made a lot of concessions to get to the point where it is falsey and can be retrieved without a problem.</p>
<p>So long as the answer isn't vaporization, it would have been okay.  Making <strong><code>[repeat ([~null~ _]) rule]</code></strong> would have been poisonous enough to cause a problem.  And raising an error would have been fine too.</p>
<h2>A Compromise: DENULL... where DENULL NULL vanishes?</h2>
<p>If you really want a REDUCE to make nulls go away instead of becoming a ~null~ BAD-WORD! or raising an error, how about this?</p>
<pre><code>&gt;&gt; reduce [1 denull if true [&lt;x&gt;] 2]
== [1 &lt;x&gt; 2]

&gt;&gt; reduce [1 denull if false [&lt;x&gt;] 2]
== [1 2]

&gt;&gt; reduce [1 if false [&lt;x&gt;] 2]
== [1 ~null~ 2]
</code></pre>
<p>This gives the tool for removing things conditionally, while keeping the REDUCE number of expressions consistent.</p>
<p>Like I say... COMPOSE is my preferred tool for when you want splicing... not just letting you go from 1 expression to 0 values, but from 1 expression to N values.</p>
<h2>We Can Also Make a REDUCE* Which Drops NULLs</h2>
<p>...and I've talked about predicates and all the other possibilities.  But I think vaporization just isn't the default I want.  DENULL seems a good way to get past the problem.</p>
<p>The middle ground of <strong>~null~</strong> -- even though it's not an isotope -- gives a compromise that I think is more discoverable when it goes wrong than vaporization.</p>
<p>It seems worth trying out.</p>
          <p><a href="https://forum.rebol.info/t/reduce-meets-denull-and-the-bad-word-null/1665/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/reduce-meets-denull-and-the-bad-word-null/1665/1</link>
        <pubDate>Mon, 16 Aug 2021 02:13:44 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1665-1</guid>
        <source url="https://forum.rebol.info/t/reduce-meets-denull-and-the-bad-word-null/1665.rss">REDUCE meets DENULL and the BAD-WORD! ~NULL~</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Symbol WORD!s for Things Like $ or $$</title>
    <link>https://forum.rebol.info/t/symbol-word-s-for-things-like-or/1397</link>
    <description>I had solid reasons for why I didn&#39;t want the slash character (**`/`**) to be a WORD!, which I think are panning out pretty well.  Its properties of being a PATH! with a blank on the left and a blank on the right help it merge into the general logic of path handling. The trick that lets it *act like a WORD!* when used in evaluative contexts is holding up fairly well.

But I&#39;ve suggested a [very powerful argument for **%** and **%%**](https://forum.rebol.info/t/the-newpath-finesse-make-file-lit/1386/2).  And there&#39;s not really the same reason for why something like **$** or **$$** can&#39;t be a WORD!.  These aren&#39;t in conflict with an array delimiter the way slash was, so they simply aren&#39;t in the same problem space.

As with my proposed use of `%%`, the combinatorics of being able to operate on an arbitrary structure gives tremendous power.  You can define all the dialected variations, and with quoting you can get tight representations like **$ WORD** and **$ (GR O UP)** and **$ [BL O CK]**

One application I was thinking of for plain $ was to look up environment variables.  This would be of tremendous use in shell scripting.

     &gt;&gt; $ HOME
     == &quot;/home/hostilefork&quot;

     &gt;&gt; $ (fourth [NO PLACE LIKE HOME])
     == &quot;/home/hostilefork&quot;

You could even imagine it being a variadic, letting you set the environment as well:

     &gt;&gt; $ CLEVEREST_INTERPRETER: &quot;/home/hostilefork/ren-c&quot;
     == &quot;/home/hostilefork/ren-c&quot;

     &gt;&gt; $ CLEVEREST_INTERPRETER
     == &quot;/home/hostilefork/ren-c&quot;

Of course if you&#39;re not shell scripting, you might want to define it for something else.  But that just seems like too much of a killer example to not have available.

It could get even more fun than that.  Remember [the most vexing evaluation?](https://forum.rebol.info/t/the-most-vexing-evaluation-lambda-meets-then-else/1361)  How about letting the left-quote of lambda override the right escapable quote, and saying that you can pass $ a function which enumerates over all the environment variables...

     &gt;&gt; $ [key value] -&gt; [  ; should lambda allow `key/value -&gt; [...]` ?
              print [key &quot;=&gt;&quot; mold value]
          ]
     HOME =&gt; &quot;/home/hostilefork&quot;
     CLEVEREST_INTERPRETER =&gt; &quot;/home/hostilefork/ren-c&quot;

## How Many Symbols Should We Take?

This is where things start to get fuzzy.

I feel like **a$b** is asking for trouble.  But if **$$** and **%%** are legal, should **$%** be legal?  **%$** should be a file.

We can even ask if taking **%%** is too aggressive, as files beginning with **%** might be common when unicode escaping is taken into account.  But I think the tradeoff of having to say **%&quot;%&quot;** is worth it, and perhaps all files with `%` in them should need to be in quotes.

I&#39;ve been wanting **@** for a datatype so that modal parameters can be used at callsites without a GROUP.  That would preclude its usage as a WORD! operator.

     &gt;&gt; append [a b c] @ reverse [d e]
     == [a b c [e d]]

There&#39;s discussion in Red gitter at the moment about caret (^), and if it looks better for exponentiation than `**`.  I agree `**` is poor for exponentiation and it has other better uses.  But if caret is used for escaping, you don&#39;t want it to become an operator that people use in commonplace code.

**So when I look at the keyboard, this really does seem to be about $, $$, and %, %%.**

I&#39;ve wondered if the allowance of vertical bar in mid-word is misguided, since **a|b** makes a fairly bad &quot;word!&quot;.  If it were restricted to arrow-words like **|&gt;** and **|** and **|||** that might be wise.  It could even leave room for a notation of &quot;words with spaces&quot;, which we have discussed:

     &gt;&gt; word? &#39;|word with spaces|
     == #[true]

We&#39;d have to get comfortable with the idea that **||** would be a word spelled &quot;||&quot; and not a word with no content, but that doesn&#39;t seem to be something all that hard to get around...compared with the general larger issues surrounding what allowing words-with-spaces would mean (and what sort of confusion and bad habits it would cause).

Conservatively, I&#39;d say we should rule out vertical bars in non-arrow words for now.

Any thoughts? (besides &quot;wow that environment variable operator sounds awesome!&quot;)</description>
    
    <lastBuildDate>Wed, 11 Nov 2020 18:34:13 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/symbol-word-s-for-things-like-or/1397.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Symbol WORD!s for Things Like $ or $$</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>Yes great thing that environment variable!</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji only-emoji" alt=":smiley:"></p>
<p>And besides that I feel that Dollar(sign) will be replaced by the Euro (sign) soon, money type will be representing Euro.</p>
          <p><a href="https://forum.rebol.info/t/symbol-word-s-for-things-like-or/1397/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/symbol-word-s-for-things-like-or/1397/3</link>
        <pubDate>Wed, 11 Nov 2020 18:34:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1397-3</guid>
        <source url="https://forum.rebol.info/t/symbol-word-s-for-things-like-or/1397.rss">Symbol WORD!s for Things Like $ or $$</source>
      </item>
      <item>
        <title>Symbol WORD!s for Things Like $ or $$</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>wow that environment variable operator sounds awesome!</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji only-emoji" alt=":slight_smile:"></p>
<p>On my keyboard i have &amp; and paragraph symbol very exposed as well, though the last one not on my phone as I notice right now.</p>
          <p><a href="https://forum.rebol.info/t/symbol-word-s-for-things-like-or/1397/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/symbol-word-s-for-things-like-or/1397/2</link>
        <pubDate>Tue, 10 Nov 2020 21:27:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1397-2</guid>
        <source url="https://forum.rebol.info/t/symbol-word-s-for-things-like-or/1397.rss">Symbol WORD!s for Things Like $ or $$</source>
      </item>
      <item>
        <title>Symbol WORD!s for Things Like $ or $$</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I had solid reasons for why I didn't want the slash character (<strong><code>/</code></strong>) to be a WORD!, which I think are panning out pretty well.  Its properties of being a PATH! with a blank on the left and a blank on the right help it merge into the general logic of path handling. The trick that lets it <em>act like a WORD!</em> when used in evaluative contexts is holding up fairly well.</p>
<p>But I've suggested a <a href="https://forum.rebol.info/t/the-newpath-finesse-make-file-lit/1386/2">very powerful argument for <strong>%</strong> and <strong>%%</strong></a>.  And there's not really the same reason for why something like <strong>$</strong> or <strong>$$</strong> can't be a WORD!.  These aren't in conflict with an array delimiter the way slash was, so they simply aren't in the same problem space.</p>
<p>As with my proposed use of <code>%%</code>, the combinatorics of being able to operate on an arbitrary structure gives tremendous power.  You can define all the dialected variations, and with quoting you can get tight representations like <strong>$ WORD</strong> and <strong>$ (GR O UP)</strong> and <strong>$ [BL O CK]</strong></p>
<p>One application I was thinking of for plain $ was to look up environment variables.  This would be of tremendous use in shell scripting.</p>
<pre><code> &gt;&gt; $ HOME
 == "/home/hostilefork"

 &gt;&gt; $ (fourth [NO PLACE LIKE HOME])
 == "/home/hostilefork"
</code></pre>
<p>You could even imagine it being a variadic, letting you set the environment as well:</p>
<pre><code> &gt;&gt; $ CLEVEREST_INTERPRETER: "/home/hostilefork/ren-c"
 == "/home/hostilefork/ren-c"

 &gt;&gt; $ CLEVEREST_INTERPRETER
 == "/home/hostilefork/ren-c"
</code></pre>
<p>Of course if you're not shell scripting, you might want to define it for something else.  But that just seems like too much of a killer example to not have available.</p>
<p>It could get even more fun than that.  Remember <a href="https://forum.rebol.info/t/the-most-vexing-evaluation-lambda-meets-then-else/1361">the most vexing evaluation?</a>  How about letting the left-quote of lambda override the right escapable quote, and saying that you can pass $ a function which enumerates over all the environment variables...</p>
<pre><code> &gt;&gt; $ [key value] -&gt; [  ; should lambda allow `key/value -&gt; [...]` ?
          print [key "=&gt;" mold value]
      ]
 HOME =&gt; "/home/hostilefork"
 CLEVEREST_INTERPRETER =&gt; "/home/hostilefork/ren-c"
</code></pre>
<h2>How Many Symbols Should We Take?</h2>
<p>This is where things start to get fuzzy.</p>
<p>I feel like <strong>a$b</strong> is asking for trouble.  But if <strong>$$</strong> and <strong>%%</strong> are legal, should <strong>$%</strong> be legal?  <strong>%$</strong> should be a file.</p>
<p>We can even ask if taking <strong>%%</strong> is too aggressive, as files beginning with <strong>%</strong> might be common when unicode escaping is taken into account.  But I think the tradeoff of having to say <strong>%"%"</strong> is worth it, and perhaps all files with <code>%</code> in them should need to be in quotes.</p>
<p>I've been wanting <strong>@</strong> for a datatype so that modal parameters can be used at callsites without a GROUP.  That would preclude its usage as a WORD! operator.</p>
<pre><code> &gt;&gt; append [a b c] @ reverse [d e]
 == [a b c [e d]]
</code></pre>
<p>There's discussion in Red gitter at the moment about caret (^), and if it looks better for exponentiation than <code>**</code>.  I agree <code>**</code> is poor for exponentiation and it has other better uses.  But if caret is used for escaping, you don't want it to become an operator that people use in commonplace code.</p>
<p><strong>So when I look at the keyboard, this really does seem to be about $, $$, and %, %%.</strong></p>
<p>I've wondered if the allowance of vertical bar in mid-word is misguided, since <strong>a|b</strong> makes a fairly bad "word!".  If it were restricted to arrow-words like <strong>|&gt;</strong> and <strong>|</strong> and <strong>|||</strong> that might be wise.  It could even leave room for a notation of "words with spaces", which we have discussed:</p>
<pre><code> &gt;&gt; word? '|word with spaces|
 == #[true]
</code></pre>
<p>We'd have to get comfortable with the idea that <strong>||</strong> would be a word spelled "||" and not a word with no content, but that doesn't seem to be something all that hard to get around...compared with the general larger issues surrounding what allowing words-with-spaces would mean (and what sort of confusion and bad habits it would cause).</p>
<p>Conservatively, I'd say we should rule out vertical bars in non-arrow words for now.</p>
<p>Any thoughts? (besides "wow that environment variable operator sounds awesome!")</p>
          <p><a href="https://forum.rebol.info/t/symbol-word-s-for-things-like-or/1397/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/symbol-word-s-for-things-like-or/1397/1</link>
        <pubDate>Tue, 10 Nov 2020 05:59:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1397-1</guid>
        <source url="https://forum.rebol.info/t/symbol-word-s-for-things-like-or/1397.rss">Symbol WORD!s for Things Like $ or $$</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>CLI Dialect</title>
    <link>https://forum.rebol.info/t/cli-dialect/1651</link>
    <description>A long time ago, earl and I discussed the concept of making it so that a script&#39;s header would use something like the function spec dialect to define the command line arguments for a script.  So if you declared a refinement like **/foo [integer!]** that would be translated into something appropriate for your platform, like an argument to your script taken as **--foo=3** on Linux or **/foo 3** on Windows.  Or whatever.

Regular args would be required arguments, you&#39;d get automatic help from the string descriptions in the spec, etc.

Red&#39;s Boris has done nearly exactly this...but he isn&#39;t putting a spec into the script header.  He has you make a function and then pass that function to a CLI dialect processor:

  https://gitlab.com/hiiamboris/red-cli/

I do still like the aesthetics of putting it in the script header; it feels like a good place.  Though that would bake it in somewhat more...and introduces the question of what scope the arguments are in.  Would you have to say **system.processed-args.foo**, or would it be a globally scoped **foo** to the whole script?

And he mentions a good point of making this something you can apply to any function:

&gt; *&quot;You can turn any Red function into a command line utility with one or two words. Suppose you have a `grep` function that is to be used from Red. Prefix it with `process-into`, add `print` for the output, compile it, and you have a `grep` utility!&quot;*

That is worth thinking about.  You can say **--do &quot;...&quot;** on the command line to run arbitrary code, but what if you could specify a script name and say **--function &quot;func-name&quot;**, and have that function suddenly get its arguments from the command line?

If that sounds dumb compared to **--do &quot;func-name/refine arg1 arg2&quot;** just consider that sometimes you do want to integrate with the shell, and getting arguments spliced via the shell into such a --do string can be a mess.  It also can&#39;t be aliased into a single shell command.

Anyway, their experience with this is worth looking at, as it&#39;s something I&#39;ve wanted for a while.  Whether there&#39;s a way of offering this in a script&#39;s header or not, I think I&#39;m sold on the &quot;you should be able to do it to any function if you want&quot; angle.</description>
    
    <lastBuildDate>Sat, 07 Aug 2021 17:43:15 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/cli-dialect/1651.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>CLI Dialect</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A long time ago, earl and I discussed the concept of making it so that a script's header would use something like the function spec dialect to define the command line arguments for a script.  So if you declared a refinement like <strong>/foo [integer!]</strong> that would be translated into something appropriate for your platform, like an argument to your script taken as <strong>--foo=3</strong> on Linux or <strong>/foo 3</strong> on Windows.  Or whatever.</p>
<p>Regular args would be required arguments, you'd get automatic help from the string descriptions in the spec, etc.</p>
<p>Red's Boris has done nearly exactly this...but he isn't putting a spec into the script header.  He has you make a function and then pass that function to a CLI dialect processor:</p>
<p><a href="https://gitlab.com/hiiamboris/red-cli/" class="inline-onebox">hi i am boris / CLI dialect for Red Â· GitLab</a></p>
<p>I do still like the aesthetics of putting it in the script header; it feels like a good place.  Though that would bake it in somewhat more...and introduces the question of what scope the arguments are in.  Would you have to say <strong>system.processed-args.foo</strong>, or would it be a globally scoped <strong>foo</strong> to the whole script?</p>
<p>And he mentions a good point of making this something you can apply to any function:</p>
<blockquote>
<p><em>"You can turn any Red function into a command line utility with one or two words. Suppose you have a <code>grep</code> function that is to be used from Red. Prefix it with <code>process-into</code>, add <code>print</code> for the output, compile it, and you have a <code>grep</code> utility!"</em></p>
</blockquote>
<p>That is worth thinking about.  You can say <strong>--do "..."</strong> on the command line to run arbitrary code, but what if you could specify a script name and say <strong>--function "func-name"</strong>, and have that function suddenly get its arguments from the command line?</p>
<p>If that sounds dumb compared to <strong>--do "func-name/refine arg1 arg2"</strong> just consider that sometimes you do want to integrate with the shell, and getting arguments spliced via the shell into such a --do string can be a mess.  It also can't be aliased into a single shell command.</p>
<p>Anyway, their experience with this is worth looking at, as it's something I've wanted for a while.  Whether there's a way of offering this in a script's header or not, I think I'm sold on the "you should be able to do it to any function if you want" angle.</p>
          <p><a href="https://forum.rebol.info/t/cli-dialect/1651/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/cli-dialect/1651/1</link>
        <pubDate>Sat, 07 Aug 2021 15:21:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1651-1</guid>
        <source url="https://forum.rebol.info/t/cli-dialect/1651.rss">CLI Dialect</source>
      </item>
  </channel>
</rss>

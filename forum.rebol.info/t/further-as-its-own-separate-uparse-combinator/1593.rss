<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>FURTHER as its own separate UPARSE combinator</title>
    <link>https://forum.rebol.info/t/further-as-its-own-separate-uparse-combinator/1593</link>
    <description>So UPARSE design is really clicking along now, and here&#39;s a new idea that helps address the loss of the advancement behaviors traditionally built into old ANY/SOME when using the new WHILE/SOME 

The idea is to break out a test for advancing as a rule of its own:

    &gt;&gt; uparse &quot;a&quot; [further [opt &quot;a&quot; opt &quot;b&quot;] (&lt;at least one!&gt;)]
    == &lt;at least one!&gt;

    &gt;&gt; uparse &quot;b&quot; [further [opt &quot;a&quot; opt &quot;b&quot;] (&lt;at least one!&gt;)]
    == &lt;at least one!&gt;

    &gt;&gt; uparse &quot;&quot; [further [opt &quot;a&quot; opt &quot;b&quot;] (&lt;at least one!&gt;)]
    ; null

*(Note: I had originally called this ADVANCING, but FURTHER is less likely to be used as a variable name to track an advancing state, e.g. `advancing: true`.  And ADVANCES sounds like it might actually be taking an action.  FURTHER is a shorter word that is a strange part of speech that is unlikely to be a variable or misunderstood as taking action.  Feedback welcome.)*

You wouldn&#39;t have to use it with loops.  But if you use it with a loop, it&#39;s quite clear, and stops you from infinite looping when everything &quot;opts out&quot; yet still succeeds a rule:

    &gt;&gt; uparse &quot;abba&quot; [
           while further [opt [&quot;a&quot; (print &quot;A&quot;)] opt [&quot;b&quot; (print &quot;B&quot;)]]
       ]
    A
    B
    B
    A
    ; null-2

*OOO...So much beauty, I cannot take it.*

https://sinfest.xyz/btphp/comics/2000-09-17.gif</description>
    
    <lastBuildDate>Tue, 04 May 2021 19:08:10 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/further-as-its-own-separate-uparse-combinator/1593.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>FURTHER as its own separate UPARSE combinator</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I managed to get the system to boot after removing the "must make progress rule" from ANY and SOME in historical PARSE.</p>
<p>Only one change was needed, to CLEAN-PATH.  I've extracted the relevant bit so you can get a sense of what kinds of situations the old behavior was for:</p>
<pre><code>parse reverse target [  ; actually processing file path string *backwards*
    some [
        "../" (handle-slash-dot-dot)  ; backwards, remember?
        |
        "./" (handle-slash-dot)
        |
        "/" (handle-slash)
        |
        copy part: [to "/" | to end] (handle-fragment part)
    ]
]
</code></pre>
<p>Once you reach END, this will loop forever.</p>
<p>The reason why is that in this list of alternates, the last alternate decays to [TO END].  And TO END will always succeed.</p>
<p>This could be changed to use SOME FURTHER and it would resolve the problem.  But there's a couple of oddities on this code.  It's using SOME and it doesn't actually check the parse result at all...so it could have used ANY and it would have made no difference.</p>
<p>But FURTHER kind of says more than it wants to say.  It wants to say that if the loop reaches END then it should consider itself done.  Why not just say that?</p>
<pre><code>parse reverse target [  ; actually processing file path string *backwards*
    while [not end [
        "../" (handle-slash-dot-dot)  ; backwards, remember?
        |
        "./" (handle-slash-dot)
        |
        "/" (handle-slash)
        |
        copy part: [to "/" | to end] (handle-fragment part)
    ]]
]
</code></pre>
<p>And hey...that seems like a good job for the <a href="https://forum.rebol.info/t/as-an-inline-sequencing-operator-for-uparse/1594">inline sequencing operator!</a></p>
<pre><code>parse reverse target [  ; actually processing file path string *backwards*
    while [
        not end
        ||
        "../" (handle-slash-dot-dot)  ; backwards, remember?
        |
        "./" (handle-slash-dot)
        |
        "/" (handle-slash)
        |
        copy part: [to "/" | to end] (handle-fragment part)
    ]
]
</code></pre>
<p>For this case, it would be my preference over WHILE FURTHER.  Because it's really about wanting to make sure the loop stops at the end.  But if you're talking about something that isn't end-specific, that wouldn't work.</p>
<p>Anyway, hopefully this makes sense.  I think it's a lot clearer than before!</p>
          <p><a href="https://forum.rebol.info/t/further-as-its-own-separate-uparse-combinator/1593/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/further-as-its-own-separate-uparse-combinator/1593/3</link>
        <pubDate>Tue, 04 May 2021 18:27:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1593-3</guid>
        <source url="https://forum.rebol.info/t/further-as-its-own-separate-uparse-combinator/1593.rss">FURTHER as its own separate UPARSE combinator</source>
      </item>
      <item>
        <title>FURTHER as its own separate UPARSE combinator</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>PARSE was always a jewel, but you're really transforming it into a diamond cutter. <img src="https://forum.rebol.info/images/emoji/twitter/gem.png?v=9" title=":gem:" class="emoji" alt=":gem:"></p>
          <p><a href="https://forum.rebol.info/t/further-as-its-own-separate-uparse-combinator/1593/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/further-as-its-own-separate-uparse-combinator/1593/2</link>
        <pubDate>Mon, 03 May 2021 12:44:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1593-2</guid>
        <source url="https://forum.rebol.info/t/further-as-its-own-separate-uparse-combinator/1593.rss">FURTHER as its own separate UPARSE combinator</source>
      </item>
      <item>
        <title>FURTHER as its own separate UPARSE combinator</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So UPARSE design is really clicking along now, and here's a new idea that helps address the loss of the advancement behaviors traditionally built into old ANY/SOME when using the new WHILE/SOME</p>
<p>The idea is to break out a test for advancing as a rule of its own:</p>
<pre><code>&gt;&gt; uparse "a" [further [opt "a" opt "b"] (&lt;at least one!&gt;)]
== &lt;at least one!&gt;

&gt;&gt; uparse "b" [further [opt "a" opt "b"] (&lt;at least one!&gt;)]
== &lt;at least one!&gt;

&gt;&gt; uparse "" [further [opt "a" opt "b"] (&lt;at least one!&gt;)]
; null
</code></pre>
<p><em>(Note: I had originally called this ADVANCING, but FURTHER is less likely to be used as a variable name to track an advancing state, e.g. <code>advancing: true</code>.  And ADVANCES sounds like it might actually be taking an action.  FURTHER is a shorter word that is a strange part of speech that is unlikely to be a variable or misunderstood as taking action.  Feedback welcome.)</em></p>
<p>You wouldn't have to use it with loops.  But if you use it with a loop, it's quite clear, and stops you from infinite looping when everything "opts out" yet still succeeds a rule:</p>
<pre><code>&gt;&gt; uparse "abba" [
       while further [opt ["a" (print "A")] opt ["b" (print "B")]]
   ]
A
B
B
A
; null-2
</code></pre>
<p><em>OOO...So much beauty, I cannot take it.</em></p>
<p>                    <a href="https://sinfest.xyz/btphp/comics/2000-09-17.gif" target="_blank" rel="noopener" class="onebox">
            <img src="https://sinfest.xyz/btphp/comics/2000-09-17.gif" width="677" height="276">
          </a>

</p>
          <p><a href="https://forum.rebol.info/t/further-as-its-own-separate-uparse-combinator/1593/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/further-as-its-own-separate-uparse-combinator/1593/1</link>
        <pubDate>Mon, 03 May 2021 12:17:44 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1593-1</guid>
        <source url="https://forum.rebol.info/t/further-as-its-own-separate-uparse-combinator/1593.rss">FURTHER as its own separate UPARSE combinator</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Skepticism of PARSE preserving *precise* input type</title>
    <link>https://forum.rebol.info/t/skepticism-of-parse-preserving-precise-input-type/1084</link>
    <description>A thorn in the side of those parsing BINARY! in Rebol2 was that with COPY, PARSE forgot that it was parsing a binary...and gave back a STRING!:

    rebol2&gt;&gt; parse #{AABBCC} [#{AA} copy data to end]
    == true

    rebol2&gt;&gt; data
    == &quot;»Ì&quot;

A seemingly-plausible line of thinking would say that COPY (or position marking) should preserve whatever the type of the input was.  That was done in R3-Alpha and Red.  It fixes the BINARY! problem, but had other consequences...like that you&#39;d capture a &quot;PAREN!&quot; and not a BLOCK! if your input was a &quot;PAREN!&quot;:

    red&gt;&gt; parse quote (aa bb cc) [&#39;aa copy data to end]
    == true

    red&gt;&gt; data
    == (bb cc)

As nice as that rule seems on the surface, it maybe doesn&#39;t make complete sense.  PARSE doesn&#39;t heed delimiters, it&#39;s processing content.

    red&gt;&gt; parse &lt;abcd&gt; [&quot;a&quot; copy data to &quot;d&quot; skip]
    == true

    red&gt;&gt; data
    == &lt;bc&gt;

That&#39;s... a little bit sketchy in the sense that you&#39;re getting `&lt;bc&gt;` back out of something that never had `&lt;` adjacent to `b`, or `&gt;` adjacent to `c`.  If you print it out, this has an air of fabricating something artificial... while a TEXT! string of &quot;bc&quot; would be more agnostic of a result, with no delimiter.  (This raises some questions about the semantics of COPY on such types more generally, so it may be a bigger discussion than just PARSE.)

But what about PATH!?

    red&gt;&gt; parse &#39;a/b/c [copy x some word!]
    == true

    red&gt;&gt; x
    == a/b/c

    red&gt;&gt; parse &#39;a/b/c [copy x [] &#39;a &#39;b &#39;c]
    == true

    red&gt;&gt; x
    ==

An empty path is an undesirable way to get a collection back (as is an element-1 path).  So undesirable--in fact--that Ren-C [has made construction of such paths illegal](https://forum.rebol.info/t/taming-the-pathology-of-path/1006).

Were people really clamoring to parse TAG! and get TAG!-bits out of it, or to parse PATH! and get PATH!-bits?  Are people having to take what they get and convert it to ordinary text strings or blocks anyway?

Is it perhaps the case that full type-preservation over-reached...when what was really needed was just to recognize BINARY! as its own category to be preserved?</description>
    
    <lastBuildDate>Sun, 24 Feb 2019 18:55:14 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/skepticism-of-parse-preserving-precise-input-type/1084.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Skepticism of PARSE preserving *precise* input type</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I suppose it’s possible that someone starting with a tag would want a tag back, but it doesn’t seem that valuable. I’ve never liked the TAG! value much to begin with, so I generally avoid using it in the first place.</p>
          <p><a href="https://forum.rebol.info/t/skepticism-of-parse-preserving-precise-input-type/1084/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/skepticism-of-parse-preserving-precise-input-type/1084/4</link>
        <pubDate>Sun, 24 Feb 2019 18:55:14 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1084-4</guid>
        <source url="https://forum.rebol.info/t/skepticism-of-parse-preserving-precise-input-type/1084.rss">Skepticism of PARSE preserving *precise* input type</source>
      </item>
      <item>
        <title>Skepticism of PARSE preserving *precise* input type</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="2" data-topic="1084">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/asampal/40/3_2.png" class="avatar"> asampal:</div>
<blockquote>
<p>I’ve wondered about the usefulness of this before and don’t see the value in it.</p>
</blockquote>
</aside>
<p>Wanting BINARY! seems very valid.  The rest, it seems to me that it's break-even, at best.</p>
<p>How often do people capturing characters out of a tag want a TAG!?</p>
          <p><a href="https://forum.rebol.info/t/skepticism-of-parse-preserving-precise-input-type/1084/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/skepticism-of-parse-preserving-precise-input-type/1084/3</link>
        <pubDate>Sun, 24 Feb 2019 17:34:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1084-3</guid>
        <source url="https://forum.rebol.info/t/skepticism-of-parse-preserving-precise-input-type/1084.rss">Skepticism of PARSE preserving *precise* input type</source>
      </item>
      <item>
        <title>Skepticism of PARSE preserving *precise* input type</title>
        <dc:creator><![CDATA[asampal]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="1" data-topic="1084">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Were people really clamoring to parse TAG! and get TAG!-bits out of it, or to parse PATH! and get PATH!-bits?</p>
</blockquote>
</aside>
<p>I've wondered about the usefulness of this before and don't see the value in it.</p>
          <p><a href="https://forum.rebol.info/t/skepticism-of-parse-preserving-precise-input-type/1084/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/skepticism-of-parse-preserving-precise-input-type/1084/2</link>
        <pubDate>Sun, 24 Feb 2019 17:30:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1084-2</guid>
        <source url="https://forum.rebol.info/t/skepticism-of-parse-preserving-precise-input-type/1084.rss">Skepticism of PARSE preserving *precise* input type</source>
      </item>
      <item>
        <title>Skepticism of PARSE preserving *precise* input type</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A thorn in the side of those parsing BINARY! in Rebol2 was that with COPY, PARSE forgot that it was parsing a binary...and gave back a STRING!:</p>
<pre><code>rebol2&gt;&gt; parse #{AABBCC} [#{AA} copy data to end]
== true

rebol2&gt;&gt; data
== "»Ì"
</code></pre>
<p>A seemingly-plausible line of thinking would say that COPY (or position marking) should preserve whatever the type of the input was.  That was done in R3-Alpha and Red.  It fixes the BINARY! problem, but had other consequences...like that you'd capture a "PAREN!" and not a BLOCK! if your input was a "PAREN!":</p>
<pre><code>red&gt;&gt; parse quote (aa bb cc) ['aa copy data to end]
== true

red&gt;&gt; data
== (bb cc)
</code></pre>
<p>As nice as that rule seems on the surface, it maybe doesn't make complete sense.  PARSE doesn't heed delimiters, it's processing content.</p>
<pre><code>red&gt;&gt; parse &lt;abcd&gt; ["a" copy data to "d" skip]
== true

red&gt;&gt; data
== &lt;bc&gt;
</code></pre>
<p>That's... a little bit sketchy in the sense that you're getting <code>&lt;bc&gt;</code> back out of something that never had <code>&lt;</code> adjacent to <code>b</code>, or <code>&gt;</code> adjacent to <code>c</code>.  If you print it out, this has an air of fabricating something artificial... while a TEXT! string of "bc" would be more agnostic of a result, with no delimiter.  (This raises some questions about the semantics of COPY on such types more generally, so it may be a bigger discussion than just PARSE.)</p>
<p>But what about PATH!?</p>
<pre><code>red&gt;&gt; parse 'a/b/c [copy x some word!]
== true

red&gt;&gt; x
== a/b/c

red&gt;&gt; parse 'a/b/c [copy x [] 'a 'b 'c]
== true

red&gt;&gt; x
==
</code></pre>
<p>An empty path is an undesirable way to get a collection back (as is an element-1 path).  So undesirable--in fact--that Ren-C <a href="https://forum.rebol.info/t/taming-the-pathology-of-path/1006">has made construction of such paths illegal</a>.</p>
<p>Were people really clamoring to parse TAG! and get TAG!-bits out of it, or to parse PATH! and get PATH!-bits?  Are people having to take what they get and convert it to ordinary text strings or blocks anyway?</p>
<p>Is it perhaps the case that full type-preservation over-reached...when what was really needed was just to recognize BINARY! as its own category to be preserved?</p>
          <p><a href="https://forum.rebol.info/t/skepticism-of-parse-preserving-precise-input-type/1084/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/skepticism-of-parse-preserving-precise-input-type/1084/1</link>
        <pubDate>Sun, 24 Feb 2019 10:39:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1084-1</guid>
        <source url="https://forum.rebol.info/t/skepticism-of-parse-preserving-precise-input-type/1084.rss">Skepticism of PARSE preserving *precise* input type</source>
      </item>
  </channel>
</rss>

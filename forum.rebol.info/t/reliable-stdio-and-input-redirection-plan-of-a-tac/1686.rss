<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Reliable Stdio and Input Redirection: Plan of a Tac</title>
    <link>https://forum.rebol.info/t/reliable-stdio-and-input-redirection-plan-of-a-tac/1686</link>
    <description>Rebol has historically in my experience been very bad at dealing with redirection.  [I&#39;ve summarized some of that before.](https://forum.rebol.info/t/how-should-redirected-input-work-for-the-console/1546)

I&#39;ve also summarized the varous reasons that the Device Model in R3-Alpha really amounted to obfuscating make-work.  Really it just asked you to unpack assembled Rebol cells into plain-C-only data buffers and types.  It did so all for the sake of throwing over the wall to an abstract OS that didn&#39;t match or model any existing OS...and lacked invariants or asserts.

*But as far as stdio goes, I&#39;ve managed to excise the &quot;REBDEV&quot; Device for it.*  And yet the stdio is all in an extension.  But it&#39;s an extension that knows what Rebol values are, and can speak in terms of them and talk to the OS without needing a middleman.

## And Now... [We Have Stdio Input and Output Redirection Tests!](https://github.com/metaeducation/ren-c-stdio/blob/9277c615fc8ad74278b1a5aaca7f053f4ecfb3b2/.github/workflows/test-stdio.yml#L88)

Not too many tests, but it was more than enough to keep me busy making them all work cross platform...while not screwing up the console experience.  The model for managing Ctrl-C cancellations is much better now.

At the moment [the tests are all passing](https://github.com/metaeducation/ren-c-stdio/actions/runs/1170800228).  I&#39;m hoping that we can get tests that check how Ctrl-C reactions are handled and do some dynamic typing in &quot;pseudoterminals&quot; so that the console gets tested.

Things will be bumpy for a bit, but to make a long story short...they&#39;re definitely on a *much* better track now.  It&#39;s getting under control which means that features will be easier tow rite.

## The Reverse Cat Test

For a first test program I picked something simple... to write a Ren-C version of the UNIX &quot;tac&quot; program.  This just reverses the lines in a file.  But I wanted it to do that to a stream of piped text...receive lines in, output reversed lines.

Here was how I thought to write it:

    write-stdout try delimit/tail newline reverse collect [
        until [not keep line: try read-line]
    ]

It makes use of a new feature of delimit: you can ask the delimiter be added at the /HEAD or /TAIL also:


    &gt;&gt; delimit/tail &quot;,&quot; [&quot;a&quot; &quot;b&quot; &quot;c&quot;]
    == &quot;a,b,c,&quot;

    &gt;&gt; delimit/head &quot;,&quot; [&quot;a&quot; &quot;b&quot; &quot;c&quot;]
    == &quot;,a,b,c&quot;

    &gt;&gt; delimit/head/tail &quot;,&quot; [&quot;a&quot; &quot;b&quot; &quot;c&quot;]
    == &quot;,a,b,c,&quot;

So when you&#39;re taking lines that have been read and given back to you without the newline on them, putting them back to having the newlines should involve adding newlines after each item.  Said another way: &quot;between all the items plus one after the last&quot;

## We Need More of These Programs!  More of These Tests!

There&#39;s a lot more I could say about this, but I&#39;m worn out at present.  So I&#39;ll just end the post with a plea that more of these small programs, data, and redirection be cooked up.

:sleeping_bed:</description>
    
    <lastBuildDate>Thu, 26 Aug 2021 14:49:24 +0000</lastBuildDate>
    <category>Console</category>
    <atom:link href="https://forum.rebol.info/t/reliable-stdio-and-input-redirection-plan-of-a-tac/1686.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Reliable Stdio and Input Redirection: Plan of a Tac</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Rebol has historically in my experience been very bad at dealing with redirection.  <a href="https://forum.rebol.info/t/how-should-redirected-input-work-for-the-console/1546">I've summarized some of that before.</a></p>
<p>I've also summarized the varous reasons that the Device Model in R3-Alpha really amounted to obfuscating make-work.  Really it just asked you to unpack assembled Rebol cells into plain-C-only data buffers and types.  It did so all for the sake of throwing over the wall to an abstract OS that didn't match or model any existing OS...and lacked invariants or asserts.</p>
<p><em>But as far as stdio goes, I've managed to excise the "REBDEV" Device for it.</em>  And yet the stdio is all in an extension.  But it's an extension that knows what Rebol values are, and can speak in terms of them and talk to the OS without needing a middleman.</p>
<h2>And Now... <a href="https://github.com/metaeducation/ren-c-stdio/blob/9277c615fc8ad74278b1a5aaca7f053f4ecfb3b2/.github/workflows/test-stdio.yml#L88">We Have Stdio Input and Output Redirection Tests!</a>
</h2>
<p>Not too many tests, but it was more than enough to keep me busy making them all work cross platform...while not screwing up the console experience.  The model for managing Ctrl-C cancellations is much better now.</p>
<p>At the moment <a href="https://github.com/metaeducation/ren-c-stdio/actions/runs/1170800228">the tests are all passing</a>.  I'm hoping that we can get tests that check how Ctrl-C reactions are handled and do some dynamic typing in "pseudoterminals" so that the console gets tested.</p>
<p>Things will be bumpy for a bit, but to make a long story short...they're definitely on a <em>much</em> better track now.  It's getting under control which means that features will be easier tow rite.</p>
<h2>The Reverse Cat Test</h2>
<p>For a first test program I picked something simple... to write a Ren-C version of the UNIX "tac" program.  This just reverses the lines in a file.  But I wanted it to do that to a stream of piped text...receive lines in, output reversed lines.</p>
<p>Here was how I thought to write it:</p>
<pre><code>write-stdout try delimit/tail newline reverse collect [
    until [not keep line: try read-line]
]
</code></pre>
<p>It makes use of a new feature of delimit: you can ask the delimiter be added at the /HEAD or /TAIL also:</p>
<pre><code>&gt;&gt; delimit/tail "," ["a" "b" "c"]
== "a,b,c,"

&gt;&gt; delimit/head "," ["a" "b" "c"]
== ",a,b,c"

&gt;&gt; delimit/head/tail "," ["a" "b" "c"]
== ",a,b,c,"
</code></pre>
<p>So when you're taking lines that have been read and given back to you without the newline on them, putting them back to having the newlines should involve adding newlines after each item.  Said another way: "between all the items plus one after the last"</p>
<h2>We Need More of These Programs!  More of These Tests!</h2>
<p>There's a lot more I could say about this, but I'm worn out at present.  So I'll just end the post with a plea that more of these small programs, data, and redirection be cooked up.</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/sleeping_bed.png?v=9" title=":sleeping_bed:" class="emoji only-emoji" alt=":sleeping_bed:"></p>
          <p><a href="https://forum.rebol.info/t/reliable-stdio-and-input-redirection-plan-of-a-tac/1686/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/reliable-stdio-and-input-redirection-plan-of-a-tac/1686/1</link>
        <pubDate>Thu, 26 Aug 2021 14:49:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1686-1</guid>
        <source url="https://forum.rebol.info/t/reliable-stdio-and-input-redirection-plan-of-a-tac/1686.rss">Reliable Stdio and Input Redirection: Plan of a Tac</source>
      </item>
  </channel>
</rss>

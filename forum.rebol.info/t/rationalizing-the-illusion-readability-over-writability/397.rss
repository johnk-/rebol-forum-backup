<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Rationalizing the Illusion: Readability over Writability</title>
    <link>https://forum.rebol.info/t/rationalizing-the-illusion-readability-over-writability/397</link>
    <description>Infix isn&#39;t common in languages Rebol would typically be compared with (maybe Haskell, but I&#39;m the only person who would probably see *any* parallels between Rebol and Haskell).

I&#39;ve defended the broader notion of &quot;enfix&quot; (which permits postfix, as well as [choosing to fall back as prefix](https://chat.stackoverflow.com/transcript/message/40226284#40226284), or behaving variadically with [multiple right hand side arguments](https://chat.stackoverflow.com/transcript/message/39989339#39989339)).  And I&#39;ve advocated pushing its usage even more to the forefront when it improves the rhythm of code--instead of considering it a guilty mechanism that is used as a last resort (which was @earl&#39;s take).

Then, when contrasting Rebol with its usual peer group (Forth, Kernel Lisp, etc.) I [made a comment](https://forum.rebol.info/t/the-role-of-infix-enfix-in-rebol/389/5) that is something worth challenging:

&gt; &quot;...I feel like having a language of equal power where I can write **if x = y + 2 [...]** feels better, even if I have to learn the ropes a bit to realize why I can&#39;t write if **y + 2 = x [...]** and expect that to work.&quot;
&gt; -- (Me)

So I say I like it.  But a confused user who tries to make that modification--and finds it won&#39;t work--might ask me why I&#39;m comfortable with that.  e.g.:

**Why would someone make a language where a program can be written to *appear* familiar, when what&#39;s *actually going on* will be non-obvious to beginners.**

The &quot;bad&quot; answer--which we should probably be cautious of--is not entirely untrue: that I like it because I like a good magic trick.  I think it&#39;s fun for people to have those little &quot;a ha&quot; moments in life.  There&#39;s a possibly perverse way in which I just like it *because* it&#39;s tricky...and I imagine people coming from their ALGOL-inspired languages (C, JavaScript, whatever) and having the strong impression that Rebol code is accessible and simple.  Then going &quot;wait, what?&quot;

I&#39;ll cite a remark made by Carl from his [&quot;Deep Lake&quot; post](https://forum.rebol.info/t/more-than-just-code-a-deep-lake/295/1):

&gt; &quot;Although we like to make REBOL look a lot like other programming languages, it is much deeper than it looks.&quot;
&gt; -- (Carl)

The surface illusion of looking like a simple scripting language--like one of any of the dozens of others people have seen--is a testimony to the bendability.  **x: 10** =&gt; &quot;oh, colon is the assignment operator&quot; =&gt; &quot;no, it isn&#39;t&quot;.

I think every time we get another one of these illusions under our belt, like [ELSE and THEN](https://trello.com/c/NPivtSdd), the game goes a little further.  I&#39;d have quit Rebol a long time ago if these breakthroughs weren&#39;t still coming along... each one probably buys one more month of my interest in the area of study.  (Kudos to @Brett for [buying another month](https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385/3) with OF.)

It&#39;s not necessarily a *bad* answer to say that Rebol&#39;s trick is all being done for fun.  Programming is supposed to be fun.  But let&#39;s rewind and try a different attack on the question I posed above:

&gt; **Why would someone make a language where a program can be written to *appear* familiar, when what&#39;s *actually going on* will be non-obvious to beginners.**

Carl thought, initially, that Rebol would be a good language for all programmers.  Especially new programmers...as was part of the target market, a kind of &quot;modern LOGO&quot;.  Until that didn&#39;t work, and so in a fox-in-the-grapes style he switched and said [&quot;REBOL, Not for Everyone&quot;](http://www.rebol.com/cgi-bin/blog.r?view=0374) (&quot;?&quot;)

&gt; &quot;Early on, many programmers who encountered REBOL looked at our simple scripts, and not diving any deeper, concluded that REBOL was too simple. Little did they know. REBOL is one of the deepest languages ever designed.&quot;
&gt; ...
&gt; &quot;I think it has come time to update our message and website. I should not pretend that REBOL is for everyone. It is not. REBOL is for those who of us who think differently.&quot;
&gt; -- (Carl)

Some people took this to mean that--for instance--infix be excised, e.g. guru Peter Wood:
 
&gt; &quot;...perhaps Rebol 3 would be a good opportunity for Rebol to rid itself of those unRebolish C-like infix functions.  Strict left to right evaluation will help with thinking differently!&quot;
&gt; -- (Peter)

Peter and I might agree on some niche point, like that **==** looks terrible, [isn&#39;t even consistent with C&#39;s pairing of == and !=](https://forum.rebol.info/t/strict-equality-lax-equality-equivalence-sameness-is-and/349/10) and shouldn&#39;t be polluting the codebase.  Unsurprisingly, I disagree with the premise--and think infix is actually what *makes* Rebol &quot;RebolIsh&quot;.

But I agree with some of what Carl says.  While it is sort of a cop-out to say [&quot;nobody understands my work, because I am too deep&quot;](https://www.youtube.com/watch?v=O-kHB2fWUS8), the analogy to poetry is apt for what the aim is.  And poetry isn&#39;t necessarily something you expect everyone to write (nor read), but once written it should usually be the case that anyone who wants to can appreciate it.  But customer #1 of your code is you.

This has wandered a bit, but I guess it&#39;s about making peace with the idea that Rebol serve its own users well, to make them individually happy with their coding and enjoying it.  So let them say things how they want to say.  Peter Wood can load up his &quot;all prefix&quot; skin and not be *wrong*, he can just have bad taste... and that kind of freedom is where we want to go.

As for helping with the understanding problem, what is needed--badly--is better debugging and visualization, of how the evaluator machine is grinding through code.  I think that will make a huge difference in how the language is perceived.  And the &quot;mind of the evaluator&quot; can be opened up and shown to people.</description>
    
    <lastBuildDate>Wed, 29 Nov 2017 20:39:57 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/rationalizing-the-illusion-readability-over-writability/397.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Rationalizing the Illusion: Readability over Writability</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Infix isn't common in languages Rebol would typically be compared with (maybe Haskell, but I'm the only person who would probably see <em>any</em> parallels between Rebol and Haskell).</p>
<p>I've defended the broader notion of "enfix" (which permits postfix, as well as <a href="https://chat.stackoverflow.com/transcript/message/40226284#40226284" rel="nofollow noopener">choosing to fall back as prefix</a>, or behaving variadically with <a href="https://chat.stackoverflow.com/transcript/message/39989339#39989339" rel="nofollow noopener">multiple right hand side arguments</a>).  And I've advocated pushing its usage even more to the forefront when it improves the rhythm of code--instead of considering it a guilty mechanism that is used as a last resort (which was <span class="mention">@earl</span>'s take).</p>
<p>Then, when contrasting Rebol with its usual peer group (Forth, Kernel Lisp, etc.) I <a href="https://forum.rebol.info/t/the-role-of-infix-enfix-in-rebol/389/5">made a comment</a> that is something worth challenging:</p>
<blockquote>
<p>"...I feel like having a language of equal power where I can write <strong>if x = y + 2 [...]</strong> feels better, even if I have to learn the ropes a bit to realize why I can't write if <strong>y + 2 = x [...]</strong> and expect that to work."<br>
-- (Me)</p>
</blockquote>
<p>So I say I like it.  But a confused user who tries to make that modification--and finds it won't work--might ask me why I'm comfortable with that.  e.g.:</p>
<p><strong>Why would someone make a language where a program can be written to <em>appear</em> familiar, when what's <em>actually going on</em> will be non-obvious to beginners.</strong></p>
<p>The "bad" answer--which we should probably be cautious of--is not entirely untrue: that I like it because I like a good magic trick.  I think it's fun for people to have those little "a ha" moments in life.  There's a possibly perverse way in which I just like it <em>because</em> it's tricky...and I imagine people coming from their ALGOL-inspired languages (C, JavaScript, whatever) and having the strong impression that Rebol code is accessible and simple.  Then going "wait, what?"</p>
<p>I'll cite a remark made by Carl from his <a href="https://forum.rebol.info/t/more-than-just-code-a-deep-lake/295/1">"Deep Lake" post</a>:</p>
<blockquote>
<p>"Although we like to make REBOL look a lot like other programming languages, it is much deeper than it looks."<br>
-- (Carl)</p>
</blockquote>
<p>The surface illusion of looking like a simple scripting language--like one of any of the dozens of others people have seen--is a testimony to the bendability.  <strong>x: 10</strong> =&gt; "oh, colon is the assignment operator" =&gt; "no, it isn't".</p>
<p>I think every time we get another one of these illusions under our belt, like <a href="https://trello.com/c/NPivtSdd" rel="nofollow noopener">ELSE and THEN</a>, the game goes a little further.  I'd have quit Rebol a long time ago if these breakthroughs weren't still coming along... each one probably buys one more month of my interest in the area of study.  (Kudos to <a class="mention" href="/u/brett">@Brett</a> for <a href="https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385/3">buying another month</a> with OF.)</p>
<p>It's not necessarily a <em>bad</em> answer to say that Rebol's trick is all being done for fun.  Programming is supposed to be fun.  But let's rewind and try a different attack on the question I posed above:</p>
<blockquote>
<p><strong>Why would someone make a language where a program can be written to <em>appear</em> familiar, when what's <em>actually going on</em> will be non-obvious to beginners.</strong></p>
</blockquote>
<p>Carl thought, initially, that Rebol would be a good language for all programmers.  Especially new programmers...as was part of the target market, a kind of "modern LOGO".  Until that didn't work, and so in a fox-in-the-grapes style he switched and said <a href="http://www.rebol.com/cgi-bin/blog.r?view=0374" rel="nofollow noopener">"REBOL, Not for Everyone"</a> ("?")</p>
<blockquote>
<p>"Early on, many programmers who encountered REBOL looked at our simple scripts, and not diving any deeper, concluded that REBOL was too simple. Little did they know. REBOL is one of the deepest languages ever designed."<br>
...<br>
"I think it has come time to update our message and website. I should not pretend that REBOL is for everyone. It is not. REBOL is for those who of us who think differently."<br>
-- (Carl)</p>
</blockquote>
<p>Some people took this to mean that--for instance--infix be excised, e.g. guru Peter Wood:</p>
<blockquote>
<p>"...perhaps Rebol 3 would be a good opportunity for Rebol to rid itself of those unRebolish C-like infix functions.  Strict left to right evaluation will help with thinking differently!"<br>
-- (Peter)</p>
</blockquote>
<p>Peter and I might agree on some niche point, like that <strong>==</strong> looks terrible, <a href="https://forum.rebol.info/t/strict-equality-lax-equality-equivalence-sameness-is-and/349/10">isn't even consistent with C's pairing of == and !=</a> and shouldn't be polluting the codebase.  Unsurprisingly, I disagree with the premise--and think infix is actually what <em>makes</em> Rebol "RebolIsh".</p>
<p>But I agree with some of what Carl says.  While it is sort of a cop-out to say <a href="https://www.youtube.com/watch?v=O-kHB2fWUS8" rel="nofollow noopener">"nobody understands my work, because I am too deep"</a>, the analogy to poetry is apt for what the aim is.  And poetry isn't necessarily something you expect everyone to write (nor read), but once written it should usually be the case that anyone who wants to can appreciate it.  But customer <span class="hashtag">#1</span> of your code is you.</p>
<p>This has wandered a bit, but I guess it's about making peace with the idea that Rebol serve its own users well, to make them individually happy with their coding and enjoying it.  So let them say things how they want to say.  Peter Wood can load up his "all prefix" skin and not be <em>wrong</em>, he can just have bad taste... and that kind of freedom is where we want to go.</p>
<p>As for helping with the understanding problem, what is needed--badly--is better debugging and visualization, of how the evaluator machine is grinding through code.  I think that will make a huge difference in how the language is perceived.  And the "mind of the evaluator" can be opened up and shown to people.</p>
          <p><a href="https://forum.rebol.info/t/rationalizing-the-illusion-readability-over-writability/397/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/rationalizing-the-illusion-readability-over-writability/397/1</link>
        <pubDate>Wed, 29 Nov 2017 17:46:48 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-397-1</guid>
        <source url="https://forum.rebol.info/t/rationalizing-the-illusion-readability-over-writability/397.rss">Rationalizing the Illusion: Readability over Writability</source>
      </item>
  </channel>
</rss>

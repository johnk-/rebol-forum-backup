<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Philosophy of Security in Rebol</title>
    <link>https://forum.rebol.info/t/the-philosophy-of-security-in-rebol/172</link>
    <description>At its core, Rebol has the idea that any PATH! or WORD! might be a function, and it might wind up dispatching it.  There is no special syntax for function calls or delimiting.  Reading a line of code like:

    foo baz bar/:mumble frotz

...could be pretty much anything.

    &gt;&gt; foo: 10
    &gt;&gt; baz: 20
    &gt;&gt; bar: [asdf ghijk 30 lmno pqrs]
    &gt;&gt; mumble: 3
    &gt;&gt; frotz: 40
    &gt;&gt; reduce [foo baz bar/:mumble frotz]
    [10 20 30 40]

    &gt;&gt; foo: func [a b c] [a + b + c]
    &gt;&gt; reduce [foo baz bar/:mumble frotz]
    [90]

    &gt;&gt; bar: object [something: does [print &quot;all your base!&quot; 1000]]
    &gt;&gt; mumble: &#39;something
    &gt;&gt; reduce [foo baz bar/:mumble frotz]
    all your base!
    == [1060]

Love it or hate it, this idea is central to the language.  As per the infamous [&quot;deep lake&quot;](http://www.rebol.com/article/0103.html), this is the freeform aspect.  You can create more restricted dialects if you want to...**BUT** the moment you invoke the evaluator (via `DO`, `REDUCE`, `PRINT`, `COMPOSE` etc.) you&#39;re opening a can of worms.

I&#39;d say that if you run untrusted code in Rebol, you&#39;re pretty much dancing with the devil.  So the better way to think about security is perhaps more in terms of what the executable is allowed to do in terms of its sandbox, it&#39;s very difficult to &quot;secure&quot; against hostile libraries.

Ren-C has tried to take patterns of &quot;defense&quot; seen authored by BrianH and others and find better ways.  For instance, he noticed that it was possible to slip values for locals in and fool system routines...e.g.

    do-thing: func [filename /local x] [
        if has-property filename [
            x: filename
        ]
        if x [delete x]
        ...
    ]

He noticed that someone could call `do-thing/local %irrelevant.txt %important-file.txt`.  Since Rebol treated /local as any refinement, that was not disallowed.  So he&#39;d &quot;bulletproof&quot; the routines by purposefully blanking arguments to the local refinement, to ensure no leakage occurred.

Ren-C has tried, where possible, to take patterns like this and mitigate them.  So for instance, `do-thing: func [filename &lt;local&gt; x] [...]` mechanically ensures that x will be not set when `do-thing` runs.  And if you choose to call your refinement `/local` that follows the rules of refinements, so `time/local` is legitimate.

Noticing these patterns has led to other, more potentially questionable choices.  See for instance, [&quot;Should function arguments to functions be disallowed by default&quot;](https://forum.rebol.info/t/should-function-arguments-to-functions-be-disallowed-by-default/167).  Is this a help or a hindrance?  We have a bit of time experimenting with it, so feedback is welcome... but it&#39;s designed to try and change the balance of needing to write &quot;defensive&quot; routines... in the spirit of thinking a &quot;savvy&quot; coder is supposed to blank locals to dodge them being passed in with the /local refinement.

But, is this closing the barn door after the horse is gone?  How do people consider Rebol&#39;s security premise?  I&#39;ve given a couple of examples, and I wonder if people have opinions here.</description>
    
    <lastBuildDate>Mon, 03 Jul 2017 15:48:23 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/the-philosophy-of-security-in-rebol/172.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Philosophy of Security in Rebol</title>
        <dc:creator><![CDATA[draegtun]]></dc:creator>
        <description><![CDATA[
            <p>I have never used Rebol 2 security system so can't comment on that.</p>
<p>But I have used Perl's <a href="https://perldoc.perl.org/perlsec.html#Taint-mode" rel="nofollow noopener">Taint mode</a>, where any external input is TAINTED and so will throw a runtime error if used unless that input is UNTAINTED first.  Perhaps this is something worth looking at?</p>
          <p><a href="https://forum.rebol.info/t/the-philosophy-of-security-in-rebol/172/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-philosophy-of-security-in-rebol/172/2</link>
        <pubDate>Mon, 03 Jul 2017 15:48:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-172-2</guid>
        <source url="https://forum.rebol.info/t/the-philosophy-of-security-in-rebol/172.rss">The Philosophy of Security in Rebol</source>
      </item>
      <item>
        <title>The Philosophy of Security in Rebol</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>At its core, Rebol has the idea that any PATH! or WORD! might be a function, and it might wind up dispatching it.  There is no special syntax for function calls or delimiting.  Reading a line of code like:</p>
<pre><code>foo baz bar/:mumble frotz
</code></pre>
<p>...could be pretty much anything.</p>
<pre><code>&gt;&gt; foo: 10
&gt;&gt; baz: 20
&gt;&gt; bar: [asdf ghijk 30 lmno pqrs]
&gt;&gt; mumble: 3
&gt;&gt; frotz: 40
&gt;&gt; reduce [foo baz bar/:mumble frotz]
[10 20 30 40]

&gt;&gt; foo: func [a b c] [a + b + c]
&gt;&gt; reduce [foo baz bar/:mumble frotz]
[90]

&gt;&gt; bar: object [something: does [print "all your base!" 1000]]
&gt;&gt; mumble: 'something
&gt;&gt; reduce [foo baz bar/:mumble frotz]
all your base!
== [1060]
</code></pre>
<p>Love it or hate it, this idea is central to the language.  As per the infamous <a href="http://www.rebol.com/article/0103.html" rel="nofollow noopener">"deep lake"</a>, this is the freeform aspect.  You can create more restricted dialects if you want to...<strong>BUT</strong> the moment you invoke the evaluator (via <code>DO</code>, <code>REDUCE</code>, <code>PRINT</code>, <code>COMPOSE</code> etc.) you're opening a can of worms.</p>
<p>I'd say that if you run untrusted code in Rebol, you're pretty much dancing with the devil.  So the better way to think about security is perhaps more in terms of what the executable is allowed to do in terms of its sandbox, it's very difficult to "secure" against hostile libraries.</p>
<p>Ren-C has tried to take patterns of "defense" seen authored by BrianH and others and find better ways.  For instance, he noticed that it was possible to slip values for locals in and fool system routines...e.g.</p>
<pre><code>do-thing: func [filename /local x] [
    if has-property filename [
        x: filename
    ]
    if x [delete x]
    ...
]
</code></pre>
<p>He noticed that someone could call <code>do-thing/local %irrelevant.txt %important-file.txt</code>.  Since Rebol treated /local as any refinement, that was not disallowed.  So he'd "bulletproof" the routines by purposefully blanking arguments to the local refinement, to ensure no leakage occurred.</p>
<p>Ren-C has tried, where possible, to take patterns like this and mitigate them.  So for instance, <code>do-thing: func [filename &lt;local&gt; x] [...]</code> mechanically ensures that x will be not set when <code>do-thing</code> runs.  And if you choose to call your refinement <code>/local</code> that follows the rules of refinements, so <code>time/local</code> is legitimate.</p>
<p>Noticing these patterns has led to other, more potentially questionable choices.  See for instance, <a href="https://forum.rebol.info/t/should-function-arguments-to-functions-be-disallowed-by-default/167">"Should function arguments to functions be disallowed by default"</a>.  Is this a help or a hindrance?  We have a bit of time experimenting with it, so feedback is welcome... but it's designed to try and change the balance of needing to write "defensive" routines... in the spirit of thinking a "savvy" coder is supposed to blank locals to dodge them being passed in with the /local refinement.</p>
<p>But, is this closing the barn door after the horse is gone?  How do people consider Rebol's security premise?  I've given a couple of examples, and I wonder if people have opinions here.</p>
          <p><a href="https://forum.rebol.info/t/the-philosophy-of-security-in-rebol/172/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-philosophy-of-security-in-rebol/172/1</link>
        <pubDate>Thu, 29 Jun 2017 09:59:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-172-1</guid>
        <source url="https://forum.rebol.info/t/the-philosophy-of-security-in-rebol/172.rss">The Philosophy of Security in Rebol</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What Does &quot;Literal&quot; Mean In Rebol&#39;s Model?</title>
    <link>https://forum.rebol.info/t/what-does-literal-mean-in-rebols-model/1598</link>
    <description>In programming, the term &quot;literal&quot; generally refers to when a source item expresses a fundamental value and doesn&#39;t need to be looked up in a variable.  It is essentially inert.

For C:

    int value = 10;  // 10 seen here is an &quot;integer literal&quot;
    printf(&quot;The value is %d&quot;, value);  // &quot;string literal&quot; + &quot;integer variable&quot;

But in Rebol&#39;s world, the notion of &quot;what&#39;s a literal&quot; is context-dependent, and can be very bent up.

    is-this-literal?: func [&#39;word [word!]] [
        print [&quot;The word was&quot; word &quot;- you tell me if that was literal!&quot;]
    ]

    &gt;&gt; is-this-literal? foo
    The word was foo - you tell me if that was literal!

So what do you think...is FOO a &quot;literal word&quot; or not?

The answer is that we can&#39;t particularly answer whether a value is &quot;literal&quot; or not unless we know how it is being used.  *The term has kind of lost its meaning.*

All we can really say in a particular situation is if a value is being used in a &quot;literal way&quot; or not.
 
In terms of naming, Rebol historically called quoted things &quot;LIT&quot; things.

    rebol2&gt;&gt; type? first [&#39;foo]
    == lit-word!

But the evaluator gave LIT-WORD!s a behavior...they&#39;d drop their quote mark:

    rebol2&gt;&gt; &#39;foo
    == foo

So important to notice: **&quot;inertness&quot; wasn&#39;t implied by what was being called &quot;literalness&quot;**</description>
    
    <lastBuildDate>Wed, 18 Aug 2021 14:05:52 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/what-does-literal-mean-in-rebols-model/1598.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What Does &quot;Literal&quot; Mean In Rebol&#39;s Model?</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1598">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>We should be calling them "LITERAL ARGUMENTS" and not "QUOTED ARGUMENTS"</p>
</blockquote>
</aside>
<p>Agreed, quoted also sounds if there is a closing quotation marker, which there isn't.</p>
          <p><a href="https://forum.rebol.info/t/what-does-literal-mean-in-rebols-model/1598/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-does-literal-mean-in-rebols-model/1598/3</link>
        <pubDate>Wed, 18 Aug 2021 14:05:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1598-3</guid>
        <source url="https://forum.rebol.info/t/what-does-literal-mean-in-rebols-model/1598.rss">What Does &quot;Literal&quot; Mean In Rebol&#39;s Model?</source>
      </item>
      <item>
        <title>What Does &quot;Literal&quot; Mean In Rebol&#39;s Model?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1598">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>The answer is that we can't particularly answer whether a value is "literal" or not unless we know how it is being used. <em>The term has kind of lost its meaning.</em></p>
</blockquote>
</aside>
<p>Coming back to this question, I think the only real meaningful use of literal is to describe when something is taken "as-is".</p>
<p>So what we've called "quoted parameters" are probably better called "literal parameters"</p>
<pre><code>&gt;&gt; foo: func ['arg] [:arg]

&gt;&gt; foo x
== x
</code></pre>
<p>We've historically used the quote mark.  But it's a little bit hard to see, easy to overlook.</p>
<p>Today there is the "THE" operator:</p>
<pre><code>&gt;&gt; the x
== x
</code></pre>
<p>And the symbolic THE! value, an <strong><code>@</code></strong>, is a subtly different but similar thing:</p>
<pre><code>&gt;&gt; @ x
== x
</code></pre>
<p>In both these cases I would say that X was <em>"taken literally"</em>.</p>
<p>So I've started leaning to thinking that notationally, we might prefer @ for "literal parameters":</p>
<pre><code>&gt;&gt; foo: func [@arg] [:arg]

&gt;&gt; foo x
== x
</code></pre>
<p><strong>One huge advantage is that <span class="mention">@arg</span> is an ANY-WORD! type, not a QUOTED!.</strong>  Doing spec analysis is difficult when you are handling quoted items... and it's not like the generality was being exploited.  There weren't <strong>'param</strong>s and <strong>''''param</strong>s to be distinguished.  So when you noticed something was quoted there were more tests to do...to make sure it's only one level, that it's a word, etc. etc.</p>
<p>Quoting is powerful and useful when it's a fit for what you need.  But here it's busywork.  And if the busywork is not done then you wind up tolerating <strong>''''param</strong>s, which do not belong in specs so that's bad.  It's lose lose.</p>
<p><strong>Getting away from the term "quoted argument" is didactically beneficial.</strong>  If anything, META arguments would be "quoted arguments"!  <img src="https://forum.rebol.info/images/emoji/twitter/crazy_face.png?v=9" title=":crazy_face:" class="emoji" alt=":crazy_face:"></p>
<pre><code>&gt;&gt; foo: func [^arg] [arg]

&gt;&gt; foo x
== 'x
</code></pre>
<p><em>(Don't take what I just said seriously, ^META parameters should not have been called quoted parameters.  <strong>(^ null)</strong> is <strong>null</strong> and not <strong>'</strong> ... and <strong>(^ get/any 'asdfasdf)</strong> is <strong>~unset~</strong> which is de-isotoped, but not quoted.)</em></p>
<p><strong>The <code>@</code> is easier to see than a <code>'</code></strong> - When you think about just how significant the difference between the literal parameter convention and the evaluated parameter convention, doesn't it seem like it should be a bit more disruptive in the spec?</p>
<pre><code>foo: func [
    gatheredoneway [word! path! integer!]
    'radicallydifferent [word! path! integer!]
][
    print [gatheredoneway radicallydifferent]
]

bar: func [
    gatheredoneway [word! path! integer!]
    @radicallydifferent [word! path! integer!]
][
    print [gatheredoneway radicallydifferent]
]
</code></pre>
<h2>Seems Convincing, But What About Escapable-Literals?</h2>
<p>So I've been kind of stirring around my whole "GET-WORD! Symbolizes Function Fetching" theory.</p>
<p>To rehash my consistent rehashing of the idea: this is to say that iterations wouldn't give you ACTION! unless you used a GET-WORD! as the iterator:</p>
<pre><code>block: compose [1 (:append) "three"]

for-each x block [...]  ; FOR-EACH errors when it hits the APPEND ACTION!

for-each :x block [...]  ; FOR-EACH won't error, gives it to you as-is
</code></pre>
<p>This is based on my belief that 99 times out of a hundred you have no intention of executing an action, yet people who like dotting their i's and crossing their t's will pepper the code with GET-WORD! "just to be safe" (when in reality the code probably wouldn't work with an action anyway, you're just avoiding running arbitrary code, not so much for security but to avoid incomprehensible gibberish errors).</p>
<p>This feels ever more right because of the fact that GET-WORD! doesn't return "unset values" (more generally, BAD-WORD! isotopes).  It's exclusively for not running functions.  The two seem soul bound.</p>
<p><strong>If GET-WORD! Were Taken To Mean "This Argument Can Be An ACTION!", it raises two questions:</strong></p>
<ul>
<li>
<p>How could you take a parameter that was both literal <strong><code>@xxx</code></strong> and could be an action <strong><code>:xxx</code></strong> ?</p>
</li>
<li>
<p>What would step in as the notation for "escapable literals"?  e.g. FOR-EACH wants to take a variable name, but it may be computed...currently with GET-WORD!/GET-GROUP!/etc.</p>
<pre><code>for-each var [...]
for-each :name [...]
for-each :(first [var1 var2]) [...]
</code></pre>
</li>
</ul>
<p>With the recent revelations about the importance of SET-GROUP! acting as SET that I hadn't really grasped before, I'm pretty sure there's a parallel argument for why GET-GROUP! needs to act as GET.  If so, the following equivalence does not hold up:</p>
<pre><code>  for-each :(first [var1 var2]) [...]
  =&gt;
  for-each var1 [...]
</code></pre>
<p>Because :(first [var1 var2]) semantically needs to have some notion of GET-ting var1.</p>
<p><strong>This may suggest going back to the plain GROUP! for escapable literals</strong>.  I don't know if that implies that the parameters should look like:</p>
<pre><code> for-each: func [
      @(var) [...] ;  Is this good for escapable literals?
      data [...]
      block [...]
 ][
      ...
 ]
</code></pre>
<p>I really like the semiotics of that--especially if it's plain group that escapes.  But I've mentioned that I think it should be easy to make escapable literals, and it's the unescapable literals that should be the last resort.</p>
<h2>Maybe the @ is on the Type Block, Not The Variable ?</h2>
<pre><code>for-each: func [
     var @[word! ...]
     data [any-series! ...]
     body [block!]
][
     ...
]
</code></pre>
<p>That would solve the <strong>:var</strong> "can be an action" hint.  I feel it also looks a little bit better for literal refinements:</p>
<pre><code>@/var [word!]

 vs.

/var @[word!]
</code></pre>
<h2>Okay, This Is All Just Brainstorming, but...</h2>
<p>Nothing decided yet, but there's at least one takeway:</p>
<p><strong>We should be calling them "LITERAL ARGUMENTS" and not "QUOTED ARGUMENTS"</strong></p>
<p>So let's start doing that.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://forum.rebol.info/t/what-does-literal-mean-in-rebols-model/1598/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-does-literal-mean-in-rebols-model/1598/2</link>
        <pubDate>Sun, 15 Aug 2021 11:46:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1598-2</guid>
        <source url="https://forum.rebol.info/t/what-does-literal-mean-in-rebols-model/1598.rss">What Does &quot;Literal&quot; Mean In Rebol&#39;s Model?</source>
      </item>
      <item>
        <title>What Does &quot;Literal&quot; Mean In Rebol&#39;s Model?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In programming, the term "literal" generally refers to when a source item expresses a fundamental value and doesn't need to be looked up in a variable.  It is essentially inert.</p>
<p>For C:</p>
<pre><code>int value = 10;  // 10 seen here is an "integer literal"
printf("The value is %d", value);  // "string literal" + "integer variable"
</code></pre>
<p>But in Rebol's world, the notion of "what's a literal" is context-dependent, and can be very bent up.</p>
<pre><code>is-this-literal?: func ['word [word!]] [
    print ["The word was" word "- you tell me if that was literal!"]
]

&gt;&gt; is-this-literal? foo
The word was foo - you tell me if that was literal!
</code></pre>
<p>So what do you think...is FOO a "literal word" or not?</p>
<p>The answer is that we can't particularly answer whether a value is "literal" or not unless we know how it is being used.  <em>The term has kind of lost its meaning.</em></p>
<p>All we can really say in a particular situation is if a value is being used in a "literal way" or not.</p>
<p>In terms of naming, Rebol historically called quoted things "LIT" things.</p>
<pre><code>rebol2&gt;&gt; type? first ['foo]
== lit-word!
</code></pre>
<p>But the evaluator gave LIT-WORD!s a behavior...they'd drop their quote mark:</p>
<pre><code>rebol2&gt;&gt; 'foo
== foo
</code></pre>
<p>So important to notice: <strong>"inertness" wasn't implied by what was being called "literalness"</strong></p>
          <p><a href="https://forum.rebol.info/t/what-does-literal-mean-in-rebols-model/1598/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-does-literal-mean-in-rebols-model/1598/1</link>
        <pubDate>Thu, 06 May 2021 13:53:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1598-1</guid>
        <source url="https://forum.rebol.info/t/what-does-literal-mean-in-rebols-model/1598.rss">What Does &quot;Literal&quot; Mean In Rebol&#39;s Model?</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Show the Love for SHOVE (&gt;-)</title>
    <link>https://forum.rebol.info/t/show-the-love-for-shove/1039</link>
    <description>## `&gt;-`

Despite having a bit tricky to implement, it&#39;s very easy to understand.  **It just pushes the argument on its left to be the first argument of the operation on its right:**

    &gt;&gt; 1 &gt;- add 2 * 3
    == 7  ; as if you&#39;d written `add 1 2 * 3`

Simple, right?  You might think it&#39;s not something you would use... *but you&#39;d be thinking wrong!*

## Invoke enfix functions in modules or libraries

Enfix execution cannot work with paths ([this isn&#39;t a bug, it *shouldn&#39;t* work](https://forum.rebol.info/t/letting-go-of-enfix-path-dreams-but-fixing-it-with-magic/794)):

    r3-alpha&gt;&gt; 1 lib/+ 2 * 3
    ** Script error: op! type is not allowed here

But shove has your back:

    &gt;&gt; 1 &gt;- lib/+ 2 * 3
    == 9  ; as if you&#39;d written `1 + 2 * 3`

*(Note the result is different from what you get with add, since + is enfix.)*

**This is only going to get more critical as modules and namespacing move forward.** And anyone who&#39;s redefined an operator--but wants to temporarily reach for another implementation--will want this.

## Invoke refinements on enfix executions

Historically there aren&#39;t really refinements on infix functions, because you&#39;d never be able to use them.  Now you can:

    &gt;&gt; ++: enfixed func [a b /double] [a + either double [2 * b] [b]]

    &gt;&gt; 10 ++ 20
    == 30

    &gt;&gt; 10 &gt;- ++/double 20
    == 50

In the common case, you hope that your operator doesn&#39;t need refinements.  But when a special case comes up, it&#39;s nice to not have to define a prefix form just for that one instance. (which means coming up with a new name that people need to know also).  Now you can take for granted that shove is there when you need it.

## Symbol-y, but not symbol soup: it communicates!

Being an &quot;arrow word&quot; is crucial to showing its disruption of the evaluation order.  That&#39;s not going to be conveyed by a short alphabetic name:

    &gt;&gt; 1 shove lib/+ 2 * 3   ; lame and wordy
    == 9

Invoking enfix functions from modules/namespaces and using refinements with them is *fundamental behavior*.  So it needs to be very short and light.  You want people to take this thing for granted!

## Extra credit: tweak the argument precedence

Rebol is well known for having a difference in interpretation when you use an infix operator vs. not:

    &gt;&gt; add 1 2 * 3
    == 7

    &gt;&gt; 1 + 2 * 3
    == 9

*(If you don&#39;t know why that is--and wonder why such a &quot;quirk&quot; hasn&#39;t been changed despite a lot of thought--[you can read more than you ever wanted to about it](https://forum.rebol.info/t/the-beta-one-enfix-covenant/1023))*.

Above I showed that shove takes its cue on how to act based on the enfixedness of what you&#39;re shoving into:

    &gt;&gt; 1 &gt;- lib/add 2 * 3
    == 7  ; as if you&#39;d said `add 1 2 * 3`

    &gt;&gt; 1 &gt;- lib/+ 2 * 3
    == 9  ; as if you&#39;d said `1 + 2 * 3`

**But it might be argued that since `&gt;-` is enfix, the overall operation is always enfix, which intuitively would suggest both of the above should be 9.**

It&#39;s tough to say.  But I liked the simple definition of *&quot;shove uses the value on the left as the first argument&quot;*.  Imagine what the &quot;as if you&#39;d said&quot; would have to be if the shove into ADD above gave 9, if you couldn&#39;t take for granted another known another name for the operation (like `+`):

    &gt;&gt; 1 &gt;- lib/add 2 * 3  ; let&#39;s say it&#39;s the hypothetical enfix-always version
    == 9  ; as if you&#39;d said `temp: enfixed :add | 1 temp 2 * 3`

But for sake of completeness...I introduced &quot;force enfix behavior (**-&gt;-**)&quot; and  &quot;force prefix behavior (**&gt;--**)&quot; forms:

    &gt;&gt; 1 -&gt;- lib/add 2 * 3
    == 9  ; as if you&#39;d said `1 + 2 * 3`

    &gt;&gt; 1 &gt;-- lib/+ 2 * 3
    == 7  ; as if you&#39;d said `add 1 2 * 3`

I think it&#39;s cute that **`-&gt;-`** looks like a picture of args on the left and right of an operator, suggesting infix... while **`&gt;--`** looks like no args on the left with two args on the right!

But you could also just use parentheses:

    &gt;&gt; (1 &gt;- lib/add 2) * 3
    == 9

    &gt;&gt; 1 &gt;- lib/+ (2 * 3)
    == 7

So whether `-&gt;-` and `&gt;--` survive or not is an open question.  If anyone actually uses them, I&#39;d be interested to know.</description>
    
    <lastBuildDate>Wed, 23 Sep 2020 03:59:14 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/show-the-love-for-shove/1039.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Show the Love for SHOVE (&gt;-)</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>You always manage to amaze. The only downside is, that it gets harder and harder to keep track of all the new features.</p>
          <p><a href="https://forum.rebol.info/t/show-the-love-for-shove/1039/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/show-the-love-for-shove/1039/4</link>
        <pubDate>Tue, 29 Jan 2019 07:37:08 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1039-4</guid>
        <source url="https://forum.rebol.info/t/show-the-love-for-shove/1039.rss">Show the Love for SHOVE (&gt;-)</source>
      </item>
      <item>
        <title>Show the Love for SHOVE (&gt;-)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h2><code>&gt;-</code></h2>
<p>Despite having a bit tricky to implement, it's very easy to understand.  <strong>It just pushes the argument on its left to be the first argument of the operation on its right:</strong></p>
<pre><code>&gt;&gt; 1 &gt;- add 2 * 3
== 7  ; as if you'd written `add 1 2 * 3`
</code></pre>
<p>Simple, right?  You might think it's not something you would use... <em>but you'd be thinking wrong!</em></p>
<h2>Invoke enfix functions in modules or libraries</h2>
<p>Enfix execution cannot work with paths (<a href="https://forum.rebol.info/t/letting-go-of-enfix-path-dreams-but-fixing-it-with-magic/794">this isn't a bug, it <em>shouldn't</em> work</a>):</p>
<pre><code>r3-alpha&gt;&gt; 1 lib/+ 2 * 3
** Script error: op! type is not allowed here
</code></pre>
<p>But shove has your back:</p>
<pre><code>&gt;&gt; 1 &gt;- lib/+ 2 * 3
== 9  ; as if you'd written `1 + 2 * 3`
</code></pre>
<p><em>(Note the result is different from what you get with add, since + is enfix.)</em></p>
<p><strong>This is only going to get more critical as modules and namespacing move forward.</strong> And anyone who's redefined an operator--but wants to temporarily reach for another implementation--will want this.</p>
<h2>Invoke refinements on enfix executions</h2>
<p>Historically there aren't really refinements on infix functions, because you'd never be able to use them.  Now you can:</p>
<pre><code>&gt;&gt; ++: enfixed func [a b /double] [a + either double [2 * b] [b]]

&gt;&gt; 10 ++ 20
== 30

&gt;&gt; 10 &gt;- ++/double 20
== 50
</code></pre>
<p>In the common case, you hope that your operator doesn't need refinements.  But when a special case comes up, it's nice to not have to define a prefix form just for that one instance. (which means coming up with a new name that people need to know also).  Now you can take for granted that shove is there when you need it.</p>
<h2>Symbol-y, but not symbol soup: it communicates!</h2>
<p>Being an "arrow word" is crucial to showing its disruption of the evaluation order.  That's not going to be conveyed by a short alphabetic name:</p>
<pre><code>&gt;&gt; 1 shove lib/+ 2 * 3   ; lame and wordy
== 9
</code></pre>
<p>Invoking enfix functions from modules/namespaces and using refinements with them is <em>fundamental behavior</em>.  So it needs to be very short and light.  You want people to take this thing for granted!</p>
<h2>Extra credit: tweak the argument precedence</h2>
<p>Rebol is well known for having a difference in interpretation when you use an infix operator vs. not:</p>
<pre><code>&gt;&gt; add 1 2 * 3
== 7

&gt;&gt; 1 + 2 * 3
== 9
</code></pre>
<p><em>(If you don't know why that is--and wonder why such a "quirk" hasn't been changed despite a lot of thought--<a href="https://forum.rebol.info/t/the-beta-one-enfix-covenant/1023">you can read more than you ever wanted to about it</a>)</em>.</p>
<p>Above I showed that shove takes its cue on how to act based on the enfixedness of what you're shoving into:</p>
<pre><code>&gt;&gt; 1 &gt;- lib/add 2 * 3
== 7  ; as if you'd said `add 1 2 * 3`

&gt;&gt; 1 &gt;- lib/+ 2 * 3
== 9  ; as if you'd said `1 + 2 * 3`
</code></pre>
<p><strong>But it might be argued that since <code>&gt;-</code> is enfix, the overall operation is always enfix, which intuitively would suggest both of the above should be 9.</strong></p>
<p>It's tough to say.  But I liked the simple definition of <em>"shove uses the value on the left as the first argument"</em>.  Imagine what the "as if you'd said" would have to be if the shove into ADD above gave 9, if you couldn't take for granted another known another name for the operation (like <code>+</code>):</p>
<pre><code>&gt;&gt; 1 &gt;- lib/add 2 * 3  ; let's say it's the hypothetical enfix-always version
== 9  ; as if you'd said `temp: enfixed :add | 1 temp 2 * 3`
</code></pre>
<p>But for sake of completeness...I introduced "force enfix behavior (<strong>-&gt;-</strong>)" and  "force prefix behavior (<strong>&gt;--</strong>)" forms:</p>
<pre><code>&gt;&gt; 1 -&gt;- lib/add 2 * 3
== 9  ; as if you'd said `1 + 2 * 3`

&gt;&gt; 1 &gt;-- lib/+ 2 * 3
== 7  ; as if you'd said `add 1 2 * 3`
</code></pre>
<p>I think it's cute that <strong><code>-&gt;-</code></strong> looks like a picture of args on the left and right of an operator, suggesting infix... while <strong><code>&gt;--</code></strong> looks like no args on the left with two args on the right!</p>
<p>But you could also just use parentheses:</p>
<pre><code>&gt;&gt; (1 &gt;- lib/add 2) * 3
== 9

&gt;&gt; 1 &gt;- lib/+ (2 * 3)
== 7
</code></pre>
<p>So whether <code>-&gt;-</code> and <code>&gt;--</code> survive or not is an open question.  If anyone actually uses them, I'd be interested to know.</p>
          <p><a href="https://forum.rebol.info/t/show-the-love-for-shove/1039/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/show-the-love-for-shove/1039/1</link>
        <pubDate>Mon, 28 Jan 2019 01:32:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1039-1</guid>
        <source url="https://forum.rebol.info/t/show-the-love-for-shove/1039.rss">Show the Love for SHOVE (&gt;-)</source>
      </item>
  </channel>
</rss>

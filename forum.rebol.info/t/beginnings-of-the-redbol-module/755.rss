<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Beginnings of the &quot;Redbol&quot; Module</title>
    <link>https://forum.rebol.info/t/beginnings-of-the-redbol-module/755</link>
    <description>There have been three areas of backwards compatibility effort so far:

* **r3-legacy** - This started as a collection of runtime switches and shim code to revert Ren-C to act like R3-Alpha.  Over time the runtime switches were phased out, as more and more adaptation could be accomplished in usermode.

* **warnings** - Various constructs were changed to offer warnings or errors.  So rather than UNSET? just start acting completely different, it gave a deprecation message.

* **r3-future** - This is a shim which would allow an R3-Alpha to be used for bootstrap, so that the bootstrap code could be written in more modern/idiomatic Ren-C.

---

I&#39;ve gone ahead and factored out r3-legacy to its own file, [%redbol.reb](https://github.com/metaeducation/ren-c/blob/master/scripts/redbol.reb) -- the renewed focus of this will be to be Rebol2/Red compatibility.

It&#39;s not a module yet, but it makes a pretty good pathological test case of a module...due to how much it alters the system.  It wants to export something like UNSET? with the &quot;old&quot; meaning (similar to NULL?), while at the same time use the current meaning within its own implementation.  Right now I&#39;ve just boxed all the definitions inside of something called EMULATE which binds it into lib, but modules may need to offer support for this kind of situation more generally.

Then I&#39;ve broken out the warnings into [%r2warn.reb](https://github.com/metaeducation/ren-c/blob/master/scripts/r2warn.reb).  There really is overlap with what knowledge it takes to emulate Rebol2 along with what it would take to warn someone writing to new conventions where something might have a confusing new behavior.  So it would be nice to have whether there is emulation, warnings, or both... just as options on %redbol.reb.  But right now modules don&#39;t do parameterizations (beyond versioning) so let&#39;s hold that thought.

With the direction headed toward emulation and legacy support coming from files outside the core, I&#39;ve gone ahead and bitten the bullet and pulled all the support for things like PAREN! or FOREACH or other things.  They &quot;weren&#39;t causing any trouble&quot;, but they were cluttering things.  I&#39;d like to see any hypothetical user who would be depending on those definitions to be hacking on %redbol.reb, to be able to pick all or part of what they wanted...and try and start getting the core tightened up so it&#39;s easy to see what&#39;s there.

### There&#39;s some really impressive stuff going on here

When you look at the code, it&#39;s really pretty awesome.  Even something small, like [the change to the splicing behavior](https://forum.rebol.info/t/justifiable-asymmetry-to-on-block/751):

    oldsplicer: helper [
        func [action [action!]] [
            adapt :action [
                all [not only | any-array? :series | any-path? :value] then [
                    value: as block! value ;-- guarantees splicing
                ]
                ;-- fall through to action&#39;s normal implementation
            ]
        ]
    ]

    append: emulate [oldsplicer :append]
    insert: emulate [oldsplicer :insert]
    change: emulate [oldsplicer :change]

Ren-C&#39;s behavior changed to the point of being able to say appending a PATH! didn&#39;t splice unless it was to another path.  And here you have a surgical tweak that can reverse this--in usermode.  All while giving you the same interface and refinements for the functions.

You can try and imagine yourself what doing this would be like in Rebol2, R3-Alpha, or Red.  

### Modules are hard and there&#39;s a long road ahead, there

We see that JavaScript still doesn&#39;t have modules sorted out--and it&#39;s been quite a long time with a world of people working on it.  Rebol&#39;s landscape is even more complex.  And modules are very tied up in binding, which still has a lot of open questions.

What I think has to happen is that I have to sit down and look at the fundamentals.  I don&#39;t see how anything too big can happen too soon, so really it&#39;s probably just going to be one feature at a time.</description>
    
    <lastBuildDate>Tue, 28 Jul 2020 08:49:40 +0000</lastBuildDate>
    <category>Redbol</category>
    <atom:link href="https://forum.rebol.info/t/beginnings-of-the-redbol-module/755.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Beginnings of the &quot;Redbol&quot; Module</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There have been three areas of backwards compatibility effort so far:</p>
<ul>
<li>
<p><strong>r3-legacy</strong> - This started as a collection of runtime switches and shim code to revert Ren-C to act like R3-Alpha.  Over time the runtime switches were phased out, as more and more adaptation could be accomplished in usermode.</p>
</li>
<li>
<p><strong>warnings</strong> - Various constructs were changed to offer warnings or errors.  So rather than UNSET? just start acting completely different, it gave a deprecation message.</p>
</li>
<li>
<p><strong>r3-future</strong> - This is a shim which would allow an R3-Alpha to be used for bootstrap, so that the bootstrap code could be written in more modern/idiomatic Ren-C.</p>
</li>
</ul>
<hr>
<p>I've gone ahead and factored out r3-legacy to its own file, <a href="https://github.com/metaeducation/ren-c/blob/master/scripts/redbol.reb" rel="nofollow noopener">%redbol.reb</a> -- the renewed focus of this will be to be Rebol2/Red compatibility.</p>
<p>It's not a module yet, but it makes a pretty good pathological test case of a module...due to how much it alters the system.  It wants to export something like UNSET? with the "old" meaning (similar to NULL?), while at the same time use the current meaning within its own implementation.  Right now I've just boxed all the definitions inside of something called EMULATE which binds it into lib, but modules may need to offer support for this kind of situation more generally.</p>
<p>Then I've broken out the warnings into <a href="https://github.com/metaeducation/ren-c/blob/master/scripts/r2warn.reb" rel="nofollow noopener">%r2warn.reb</a>.  There really is overlap with what knowledge it takes to emulate Rebol2 along with what it would take to warn someone writing to new conventions where something might have a confusing new behavior.  So it would be nice to have whether there is emulation, warnings, or both... just as options on %redbol.reb.  But right now modules don't do parameterizations (beyond versioning) so let's hold that thought.</p>
<p>With the direction headed toward emulation and legacy support coming from files outside the core, I've gone ahead and bitten the bullet and pulled all the support for things like PAREN! or FOREACH or other things.  They "weren't causing any trouble", but they were cluttering things.  I'd like to see any hypothetical user who would be depending on those definitions to be hacking on %redbol.reb, to be able to pick all or part of what they wanted...and try and start getting the core tightened up so it's easy to see what's there.</p>
<h3>There's some really impressive stuff going on here</h3>
<p>When you look at the code, it's really pretty awesome.  Even something small, like <a href="https://forum.rebol.info/t/justifiable-asymmetry-to-on-block/751">the change to the splicing behavior</a>:</p>
<pre><code>oldsplicer: helper [
    func [action [action!]] [
        adapt :action [
            all [not only | any-array? :series | any-path? :value] then [
                value: as block! value ;-- guarantees splicing
            ]
            ;-- fall through to action's normal implementation
        ]
    ]
]

append: emulate [oldsplicer :append]
insert: emulate [oldsplicer :insert]
change: emulate [oldsplicer :change]
</code></pre>
<p>Ren-C's behavior changed to the point of being able to say appending a PATH! didn't splice unless it was to another path.  And here you have a surgical tweak that can reverse this--in usermode.  All while giving you the same interface and refinements for the functions.</p>
<p>You can try and imagine yourself what doing this would be like in Rebol2, R3-Alpha, or Red.</p>
<h3>Modules are hard and there's a long road ahead, there</h3>
<p>We see that JavaScript still doesn't have modules sorted out--and it's been quite a long time with a world of people working on it.  Rebol's landscape is even more complex.  And modules are very tied up in binding, which still has a lot of open questions.</p>
<p>What I think has to happen is that I have to sit down and look at the fundamentals.  I don't see how anything too big can happen too soon, so really it's probably just going to be one feature at a time.</p>
          <p><a href="https://forum.rebol.info/t/beginnings-of-the-redbol-module/755/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/beginnings-of-the-redbol-module/755/1</link>
        <pubDate>Wed, 25 Jul 2018 05:35:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-755-1</guid>
        <source url="https://forum.rebol.info/t/beginnings-of-the-redbol-module/755.rss">Beginnings of the &quot;Redbol&quot; Module</source>
      </item>
  </channel>
</rss>

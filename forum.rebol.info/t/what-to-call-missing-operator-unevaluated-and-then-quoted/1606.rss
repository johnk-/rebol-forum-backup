<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What To Call Missing Operator: Unevaluated and then Quoted</title>
    <link>https://forum.rebol.info/t/what-to-call-missing-operator-unevaluated-and-then-quoted/1606</link>
    <description>[quote=&quot;hostilefork, post:5, topic:1605&quot;]
   append data &#39;word
      =&gt; append data [word]  ; best
      =&gt; append data quote &#39;word
      =&gt; append data ^ &#39;word
      =&gt; append data ^(just word)
[/quote]

It strikes me looking at these examples that we are missing an operator:

    &gt;&gt; operatorX foo
    == &#39;foo

    &gt;&gt; operatorX (1 + 2)
    == &#39;(1 + 2)

This operator is basically **QUOTE UNEVALUATED** (or **^ UNEVALUATED**).  It takes a value as-is and then adds a quote level to it.

We might imagine calling this operator ONLY, even though it does something different than what /ONLY traditionally did:

     &gt;&gt; only word
     == &#39;word

     &gt;&gt; append [a b c] only word
     == [a b c word]

**This would be nice for is someone who is trying to avoid putting in brackets or apostrophes or other things to cloud what they&#39;re writing.**

Although **append [a b c] [word]** does *work*, the extra block can get in the way a bit.  Consider:

    if find [a b c] [word] [
        print {Consider how &quot;blocky&quot; this looks.}
    ]

    if find [a b c] ^ &#39;word [
        print {This looks one step more symbol-y than with apostrophe alone.}
    ]

    if find [a b c] only word [
        print {This might be preferable, and (could) perform better.}
    ]

Or it could be called JUST, and we could find another name for JUST.  :-/

     &gt;&gt; just word
     == &#39;word

     &gt;&gt; append [a b c] just word
     == [a b c word]

Though personally have gotten a bit attached to JUST doing what it does today, but we could consider THE for that:

     &gt;&gt; the x
     == x  ; not &#39;x

THE doesn&#39;t seem like a great fit for this operator on its own:

     &gt;&gt; the word
     == &#39;word

     &gt;&gt; append [a b c] the word
     == [a b c word]

Something about JUST makes it seem like it would be a little more subtle and sneaky than THE.  (If I asked you between JUST and THE which you&#39;d imagine doing something more basic, you&#39;d say THE, right?)*

Could work.  It&#39;s not like you&#39;d have to use it, but it gives an option.

This also gives the option of ONLY being the way of creating a single element block, which could come in handy for something, and makes a little more sense:

    &gt;&gt; only [a b]
    == [[a b]]

    &gt;&gt; only 1 + 2  ; it&#39;s evaluative
    == [3]

    &gt;&gt; only &#39;x  ; one more symbol than you want
    == [x]</description>
    
    <lastBuildDate>Sat, 15 May 2021 08:03:38 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/what-to-call-missing-operator-unevaluated-and-then-quoted/1606.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What To Call Missing Operator: Unevaluated and then Quoted</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="1605">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/should-we-repurpose-to-what-is-now-doing/1605/5">Should We Repurpose ^ To What @ Is Now Doing?</a>
</div>
<blockquote>
<p>append data 'word<br>
=&gt; append data [word]  ; best<br>
=&gt; append data quote 'word<br>
=&gt; append data ^ 'word<br>
=&gt; append data ^(just word)</p>
</blockquote>
</aside>
<p>It strikes me looking at these examples that we are missing an operator:</p>
<pre><code>&gt;&gt; operatorX foo
== 'foo

&gt;&gt; operatorX (1 + 2)
== '(1 + 2)
</code></pre>
<p>This operator is basically <strong>QUOTE UNEVALUATED</strong> (or <strong>^ UNEVALUATED</strong>).  It takes a value as-is and then adds a quote level to it.</p>
<p>We might imagine calling this operator ONLY, even though it does something different than what /ONLY traditionally did:</p>
<pre><code> &gt;&gt; only word
 == 'word

 &gt;&gt; append [a b c] only word
 == [a b c word]
</code></pre>
<p><strong>This would be nice for is someone who is trying to avoid putting in brackets or apostrophes or other things to cloud what they're writing.</strong></p>
<p>Although <strong>append [a b c] [word]</strong> does <em>work</em>, the extra block can get in the way a bit.  Consider:</p>
<pre><code>if find [a b c] [word] [
    print {Consider how "blocky" this looks.}
]

if find [a b c] ^ 'word [
    print {This looks one step more symbol-y than with apostrophe alone.}
]

if find [a b c] only word [
    print {This might be preferable, and (could) perform better.}
]
</code></pre>
<p>Or it could be called JUST, and we could find another name for JUST.  :-/</p>
<pre><code> &gt;&gt; just word
 == 'word

 &gt;&gt; append [a b c] just word
 == [a b c word]
</code></pre>
<p>Though personally have gotten a bit attached to JUST doing what it does today, but we could consider THE for that:</p>
<pre><code> &gt;&gt; the x
 == x  ; not 'x
</code></pre>
<p>THE doesn't seem like a great fit for this operator on its own:</p>
<pre><code> &gt;&gt; the word
 == 'word

 &gt;&gt; append [a b c] the word
 == [a b c word]
</code></pre>
<p>Something about JUST makes it seem like it would be a little more subtle and sneaky than THE.  (If I asked you between JUST and THE which you'd imagine doing something more basic, you'd say THE, right?)*</p>
<p>Could work.  It's not like you'd have to use it, but it gives an option.</p>
<p>This also gives the option of ONLY being the way of creating a single element block, which could come in handy for something, and makes a little more sense:</p>
<pre><code>&gt;&gt; only [a b]
== [[a b]]

&gt;&gt; only 1 + 2  ; it's evaluative
== [3]

&gt;&gt; only 'x  ; one more symbol than you want
== [x]</code></pre>
          <p><a href="https://forum.rebol.info/t/what-to-call-missing-operator-unevaluated-and-then-quoted/1606/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-call-missing-operator-unevaluated-and-then-quoted/1606/1</link>
        <pubDate>Sat, 15 May 2021 07:56:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1606-1</guid>
        <source url="https://forum.rebol.info/t/what-to-call-missing-operator-unevaluated-and-then-quoted/1606.rss">What To Call Missing Operator: Unevaluated and then Quoted</source>
      </item>
  </channel>
</rss>

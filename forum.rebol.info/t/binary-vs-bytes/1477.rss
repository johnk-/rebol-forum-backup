<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>BINARY! vs. BYTES!</title>
    <link>https://forum.rebol.info/t/binary-vs-bytes/1477</link>
    <description>It has occurred to me that it might be nice to have a datatype which represents a string of bits, where you don&#39;t have to have exactly multiples of 8 of them...and where positions were on a bit-level.

If there were such a type, it might be called BITS! to not conflict...but either way it does point out that BINARY! is kind of a misleading name.

Since today&#39;s BINARY! is a series managed in multiples of 8 bits, wouldn&#39;t it be better to call it BYTES! ?

I&#39;ll add that I&#39;m kind of leaning toward saying that the representation be **${FFFF}** or **$&quot;FFFF&quot;** as opposed to using **&amp;** to replace **#**.   This is more of a nod to historical $ sign for hex... leaves &amp; free for other applications...and gives the ability to put characters in quoted strings cleanly, like:
 
    rebElide(&quot;some-char: #{c}&quot;);

Although that particular case can be done without delimiters as **#c** ... but we need to work through what is and isn&#39;t legal to do without quotes or braces.</description>
    
    <lastBuildDate>Wed, 27 Jan 2021 20:20:12 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/binary-vs-bytes/1477.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>BINARY! vs. BYTES!</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>In COBOL the BINARY got replaced by COMPUTATIONAL or  COMP.</p>
<p>It is indeed a little remarkable that there is not an arbitrary length bits field. Just enough bits for all flags used. But then again the whole memory is divided in words of some bytes length.</p>
<p>I think I do remember the $ hex notation being used....</p>
          <p><a href="https://forum.rebol.info/t/binary-vs-bytes/1477/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/binary-vs-bytes/1477/2</link>
        <pubDate>Wed, 27 Jan 2021 20:20:12 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1477-2</guid>
        <source url="https://forum.rebol.info/t/binary-vs-bytes/1477.rss">BINARY! vs. BYTES!</source>
      </item>
      <item>
        <title>BINARY! vs. BYTES!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>It has occurred to me that it might be nice to have a datatype which represents a string of bits, where you don't have to have exactly multiples of 8 of them...and where positions were on a bit-level.</p>
<p>If there were such a type, it might be called BITS! to not conflict...but either way it does point out that BINARY! is kind of a misleading name.</p>
<p>Since today's BINARY! is a series managed in multiples of 8 bits, wouldn't it be better to call it BYTES! ?</p>
<p>I'll add that I'm kind of leaning toward saying that the representation be <strong>${FFFF}</strong> or <strong>$"FFFF"</strong> as opposed to using <strong>&amp;</strong> to replace <strong>#</strong>.   This is more of a nod to historical $ sign for hex... leaves &amp; free for other applications...and gives the ability to put characters in quoted strings cleanly, like:</p>
<pre><code>rebElide("some-char: #{c}");
</code></pre>
<p>Although that particular case can be done without delimiters as <strong><span class="hashtag">#c</span></strong> ... but we need to work through what is and isn't legal to do without quotes or braces.</p>
          <p><a href="https://forum.rebol.info/t/binary-vs-bytes/1477/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/binary-vs-bytes/1477/1</link>
        <pubDate>Wed, 27 Jan 2021 00:47:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1477-1</guid>
        <source url="https://forum.rebol.info/t/binary-vs-bytes/1477.rss">BINARY! vs. BYTES!</source>
      </item>
  </channel>
</rss>

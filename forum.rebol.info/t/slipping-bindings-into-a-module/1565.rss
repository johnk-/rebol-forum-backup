<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Slipping Bindings Into a MODULE</title>
    <link>https://forum.rebol.info/t/slipping-bindings-into-a-module/1565</link>
    <description>When you give a block as the body to the MODULE function in R3-Alpha, you lose essentially any bindings you had in it:

    r3-alpha&gt;&gt; obj: make object! [print: func [x] [lib/print &quot;unused override&quot;]]

    r3-alpha&gt;&gt; m: module [] compose/deep [test: does [(bind &#39;print obj) &quot;Hello&quot;]]

    r3-alpha&gt;&gt; m/test
    Hello

So we put a PRINT word bound into OBJ inside that module material, but it got wiped out and used the plain old LIB/PRINT instead.

[There&#39;s an UNBIND/DEEP call](https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/mezz/base-funcs.r#L87) right in the implementation of the R3-Alpha MODULE function, so that&#39;s at least *one* reason why.  But there are more reasons...it kind of just...*doesn&#39;t work* to leave the bindings on.  There&#39;s too much potential for stray bindings you never intended to have meaning being treated as legitimate.

The very confusingly-named /MIXIN refinement is actually a very blunt tool for passing an object to bind to *before* the body runs:

    r3-alpha&gt;&gt; obj: make object! [print: func [x] [lib/print &quot;mixed in!&quot;]]

    r3-alpha&gt;&gt; m: module/mixin [] [test: does [print &quot;Hello&quot;]] obj

    r3-alpha&gt;&gt; m/test
    mixed in!

So now you know why that exists.  Since it&#39;s going to throw away all your bindings, it gives you at least one chance to inject some overrides.

## Module Inheritance May Give New Possibilites

One of the key things I want to see is the ability to say that a module uses a baseline other than the default LIB.

For example: If you want to run a module of Rebol2 or Red code, then you would want to use Redbol as the &quot;lib&quot; (and then perhaps expose Ren-C&#39;s functions via a &quot;newlib&quot; variable)...

Anyway, the point is that I think you basically have to accept that whatever you toss at the module in terms of a body will have its bindings completely lost.  You have to use a facility like /MIXIN or module inheritance.</description>
    
    <lastBuildDate>Fri, 19 Mar 2021 11:28:32 +0000</lastBuildDate>
    <category>Binding</category>
    <atom:link href="https://forum.rebol.info/t/slipping-bindings-into-a-module/1565.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Slipping Bindings Into a MODULE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>When you give a block as the body to the MODULE function in R3-Alpha, you lose essentially any bindings you had in it:</p>
<pre><code>r3-alpha&gt;&gt; obj: make object! [print: func [x] [lib/print "unused override"]]

r3-alpha&gt;&gt; m: module [] compose/deep [test: does [(bind 'print obj) "Hello"]]

r3-alpha&gt;&gt; m/test
Hello
</code></pre>
<p>So we put a PRINT word bound into OBJ inside that module material, but it got wiped out and used the plain old LIB/PRINT instead.</p>
<p><a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/mezz/base-funcs.r#L87">There's an UNBIND/DEEP call</a> right in the implementation of the R3-Alpha MODULE function, so that's at least <em>one</em> reason why.  But there are more reasons...it kind of just...<em>doesn't work</em> to leave the bindings on.  There's too much potential for stray bindings you never intended to have meaning being treated as legitimate.</p>
<p>The very confusingly-named /MIXIN refinement is actually a very blunt tool for passing an object to bind to <em>before</em> the body runs:</p>
<pre><code>r3-alpha&gt;&gt; obj: make object! [print: func [x] [lib/print "mixed in!"]]

r3-alpha&gt;&gt; m: module/mixin [] [test: does [print "Hello"]] obj

r3-alpha&gt;&gt; m/test
mixed in!
</code></pre>
<p>So now you know why that exists.  Since it's going to throw away all your bindings, it gives you at least one chance to inject some overrides.</p>
<h2>Module Inheritance May Give New Possibilites</h2>
<p>One of the key things I want to see is the ability to say that a module uses a baseline other than the default LIB.</p>
<p>For example: If you want to run a module of Rebol2 or Red code, then you would want to use Redbol as the "lib" (and then perhaps expose Ren-C's functions via a "newlib" variable)...</p>
<p>Anyway, the point is that I think you basically have to accept that whatever you toss at the module in terms of a body will have its bindings completely lost.  You have to use a facility like /MIXIN or module inheritance.</p>
          <p><a href="https://forum.rebol.info/t/slipping-bindings-into-a-module/1565/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/slipping-bindings-into-a-module/1565/1</link>
        <pubDate>Fri, 19 Mar 2021 11:28:32 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1565-1</guid>
        <source url="https://forum.rebol.info/t/slipping-bindings-into-a-module/1565.rss">Slipping Bindings Into a MODULE</source>
      </item>
  </channel>
</rss>

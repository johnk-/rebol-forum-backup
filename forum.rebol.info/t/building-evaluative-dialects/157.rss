<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Building evaluative dialects</title>
    <link>https://forum.rebol.info/t/building-evaluative-dialects/157</link>
    <description>@rgchris asked the question [in the rebol chat room](https://chat.stackoverflow.com/transcript/message/37793920#37793920) &quot;Has anyone written anything on building dialects with some evaluative behaviour?&quot;

Don&#39;t know of a document but it would be useful. Espeically on design considerations.

Some possible evaluation strategies I&#39;ve used:

* Obviously Parse, but it doesn&#39;t offer much more than recognising tokens. It&#39;s awkward to manage the evaluation.
* In [rowsets.r](https://github.com/codebybrett/rebol2/blob/master/scripts/rowsets.r) I wanted a SQL like dialect for series. I selectively bind the SQLish keywords in a block then just DO the block.  The keywords when used together with their arguments form a chained expression.
* In [math.reb](https://github.com/codebybrett/reb/blob/master/math.reb) I used a Top Down Operator Precedence Parser ([Pratt Parser](http://tdop.github.io/)). This is the go to example for Pratt parsing. Pratt parsing can be arbitrarily more complex. I think there is a good fit for Pratt parsing in Rebol dialects.  However, all the work @hostilefork has put into evaluation in the DO dialect (enfix, etc), takes quite a bit of territory that Pratt parsing covers, so it makes sense to seek to leverage Ren-c&#39;s Do where possible before resorting to Pratt.
* I have used expression rewriting in a number of places including rewriting parse rules. It&#39;s a good trick to keep up one&#39;s sleeve. [Rewrite](https://github.com/codebybrett/reb/blob/master/rewrite.reb) was written by Gabriele for pattern rewriting blocks, I&#39;ve modified it heavily. Only problem with it is if you&#39;ve rewritten the expression and have an error then reporting back to the user where the error occurred could be a problem (you rewrote it!).

----------

I&#39;ve spent quite a bit of time trying to get varied articles on Pratt parsing so I&#39;m just going to dump them here for posterity:

Top Down Operator Precedence (Vaughan R. Pratt)
* https://tdop.github.io/ (remastered version)
* The repo for this site contains a link to the original version.

Top-Down operator precedence parsing (Eli Bendersky)
* http://eli.thegreenplace.net/2010/01/02/top-down-operator-precedence-parsing/

Pratt Parsers: Expression Parsing Made Easy (Bob Nystrom)
* http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/

Top Down Operator Precedence (Douglas Crockford)
* http://javascript.crockford.com/tdop/tdop.html
* Note the commentary on statements in the above and at https://pythonhosted.org/PrattParse/tutorial.html#adding-statements

A Monadic Pratt Parser (Matthew Manela) - see discussion of someFunction.
* http://matthewmanela.com/blog/a-monadic-pratt-parser/
* (for background on function call syntax in haskell see https://www.fpcomplete.com/school/starting-with-haskell/basics-of-haskell/function-application)

A number of good articles by the one author on Pratt (Andy Chu)
* http://www.oilshell.org/blog/2016/11/03.html
* See the blog for the other articles, in particular comments on other articles I&#39;ve referenced here.

Top Down Operator Precedence Parsing in Go (Cristian Dima)
* http://www.cristiandima.com/top-down-operator-precedence-parsing-in-go/
* Implementing a small dynamic language

CGOL - An algebraic notation for MACLISP users (Vaughan R. Pratt)
* https://people.eecs.berkeley.edu/~fateman/cgol/cgol.1/pratt.memo
* Contains additional explanations related to the algorithm.</description>
    
    <lastBuildDate>Thu, 29 Jun 2017 21:41:54 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/building-evaluative-dialects/157.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Building evaluative dialects</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>Perhaps the links should be here instead of in chat.</p>
<p><a href="https://chat.stackoverflow.com/transcript/message/37872603#37872603" class="onebox" target="_blank" rel="nofollow noopener">https://chat.stackoverflow.com/transcript/message/37872603#37872603</a></p>
          <p><a href="https://forum.rebol.info/t/building-evaluative-dialects/157/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/building-evaluative-dialects/157/3</link>
        <pubDate>Thu, 29 Jun 2017 21:41:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-157-3</guid>
        <source url="https://forum.rebol.info/t/building-evaluative-dialects/157.rss">Building evaluative dialects</source>
      </item>
      <item>
        <title>Building evaluative dialects</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>Thanks Brett, no shortage of material here for sure!</p>
          <p><a href="https://forum.rebol.info/t/building-evaluative-dialects/157/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/building-evaluative-dialects/157/2</link>
        <pubDate>Sat, 24 Jun 2017 02:49:59 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-157-2</guid>
        <source url="https://forum.rebol.info/t/building-evaluative-dialects/157.rss">Building evaluative dialects</source>
      </item>
      <item>
        <title>Building evaluative dialects</title>
        <dc:creator><![CDATA[Brett]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="/u/rgchris">@rgchris</a> asked the question <a href="https://chat.stackoverflow.com/transcript/message/37793920#37793920" rel="nofollow noopener">in the rebol chat room</a> "Has anyone written anything on building dialects with some evaluative behaviour?"</p>
<p>Don't know of a document but it would be useful. Espeically on design considerations.</p>
<p>Some possible evaluation strategies I've used:</p>
<ul>
<li>Obviously Parse, but it doesn't offer much more than recognising tokens. It's awkward to manage the evaluation.</li>
<li>In <a href="https://github.com/codebybrett/rebol2/blob/master/scripts/rowsets.r" rel="nofollow noopener">rowsets.r</a> I wanted a SQL like dialect for series. I selectively bind the SQLish keywords in a block then just DO the block.  The keywords when used together with their arguments form a chained expression.</li>
<li>In <a href="https://github.com/codebybrett/reb/blob/master/math.reb" rel="nofollow noopener">math.reb</a> I used a Top Down Operator Precedence Parser (<a href="http://tdop.github.io/" rel="nofollow noopener">Pratt Parser</a>). This is the go to example for Pratt parsing. Pratt parsing can be arbitrarily more complex. I think there is a good fit for Pratt parsing in Rebol dialects.  However, all the work <a class="mention" href="/u/hostilefork">@hostilefork</a> has put into evaluation in the DO dialect (enfix, etc), takes quite a bit of territory that Pratt parsing covers, so it makes sense to seek to leverage Ren-c's Do where possible before resorting to Pratt.</li>
<li>I have used expression rewriting in a number of places including rewriting parse rules. It's a good trick to keep up one's sleeve. <a href="https://github.com/codebybrett/reb/blob/master/rewrite.reb" rel="nofollow noopener">Rewrite</a> was written by Gabriele for pattern rewriting blocks, I've modified it heavily. Only problem with it is if you've rewritten the expression and have an error then reporting back to the user where the error occurred could be a problem (you rewrote it!).</li>
</ul>
<hr>
<p>I've spent quite a bit of time trying to get varied articles on Pratt parsing so I'm just going to dump them here for posterity:</p>
<p>Top Down Operator Precedence (Vaughan R. Pratt)</p>
<ul>
<li>
<a href="https://tdop.github.io/" rel="nofollow noopener">https://tdop.github.io/</a> (remastered version)</li>
<li>The repo for this site contains a link to the original version.</li>
</ul>
<p>Top-Down operator precedence parsing (Eli Bendersky)</p>
<ul>
<li><a href="http://eli.thegreenplace.net/2010/01/02/top-down-operator-precedence-parsing/" rel="nofollow noopener">http://eli.thegreenplace.net/2010/01/02/top-down-operator-precedence-parsing/</a></li>
</ul>
<p>Pratt Parsers: Expression Parsing Made Easy (Bob Nystrom)</p>
<ul>
<li><a href="http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/" rel="nofollow noopener">http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/</a></li>
</ul>
<p>Top Down Operator Precedence (Douglas Crockford)</p>
<ul>
<li><a href="http://javascript.crockford.com/tdop/tdop.html" rel="nofollow noopener">http://javascript.crockford.com/tdop/tdop.html</a></li>
<li>Note the commentary on statements in the above and at <a href="https://pythonhosted.org/PrattParse/tutorial.html#adding-statements" rel="nofollow noopener">https://pythonhosted.org/PrattParse/tutorial.html#adding-statements</a>
</li>
</ul>
<p>A Monadic Pratt Parser (Matthew Manela) - see discussion of someFunction.</p>
<ul>
<li><a href="http://matthewmanela.com/blog/a-monadic-pratt-parser/" rel="nofollow noopener">http://matthewmanela.com/blog/a-monadic-pratt-parser/</a></li>
<li>(for background on function call syntax in haskell see <a href="https://www.fpcomplete.com/school/starting-with-haskell/basics-of-haskell/function-application" rel="nofollow noopener">https://www.fpcomplete.com/school/starting-with-haskell/basics-of-haskell/function-application</a>)</li>
</ul>
<p>A number of good articles by the one author on Pratt (Andy Chu)</p>
<ul>
<li><a href="http://www.oilshell.org/blog/2016/11/03.html" rel="nofollow noopener">http://www.oilshell.org/blog/2016/11/03.html</a></li>
<li>See the blog for the other articles, in particular comments on other articles I've referenced here.</li>
</ul>
<p>Top Down Operator Precedence Parsing in Go (Cristian Dima)</p>
<ul>
<li><a href="http://www.cristiandima.com/top-down-operator-precedence-parsing-in-go/" rel="nofollow noopener">http://www.cristiandima.com/top-down-operator-precedence-parsing-in-go/</a></li>
<li>Implementing a small dynamic language</li>
</ul>
<p>CGOL - An algebraic notation for MACLISP users (Vaughan R. Pratt)</p>
<ul>
<li><a href="https://people.eecs.berkeley.edu/~fateman/cgol/cgol.1/pratt.memo" rel="nofollow noopener">https://people.eecs.berkeley.edu/~fateman/cgol/cgol.1/pratt.memo</a></li>
<li>Contains additional explanations related to the algorithm.</li>
</ul>
          <p><a href="https://forum.rebol.info/t/building-evaluative-dialects/157/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/building-evaluative-dialects/157/1</link>
        <pubDate>Sat, 24 Jun 2017 02:22:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-157-1</guid>
        <source url="https://forum.rebol.info/t/building-evaluative-dialects/157.rss">Building evaluative dialects</source>
      </item>
  </channel>
</rss>

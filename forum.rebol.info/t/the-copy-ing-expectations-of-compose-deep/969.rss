<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The COPY-ing expectations of COMPOSE/DEEP</title>
    <link>https://forum.rebol.info/t/the-copy-ing-expectations-of-compose-deep/969</link>
    <description>Rebol sort of had an ethos of &quot;modify by default&quot;...but not everywhere.  REDUCE and COMPOSE made new arrays.

Typically in usage, this is what you want...as the same template of code is used many times.  Saying **data: compose copy [foo: (bar) baz: (mumble)]** gets to be a mouthful.

So you can pretty much take for granted you get a new array out of a COMPOSE, but what about a COMPOSE/DEEP?  Are things copied if no substitutions exist underneath them?  What about the material that gets inserted...does it get copied?

Ren-C lets you know what&#39;s up pretty easily, because you get an error if you try to mutate source things without copying them.  Let&#39;s try:

    &gt;&gt; x: compose/deep [a [b c] ([d [e f]])]
    == [a [b c] d [e f]]

    &gt;&gt; append x/2 &lt;1&gt;
    == [b c &lt;1&gt;]

    &gt;&gt; append x/4 &lt;2&gt;
    ** Access Error: series is source or permanently locked, can&#39;t modify

    &gt;&gt; append x &lt;3&gt;
    == [a [b c &lt;1&gt;] d [e f] &lt;3&gt;]

The outer array got copied.  Then **[b c]** got copied even though it didn&#39;t technically *need* to be...there were no compositions underneath it.  But the inserted material didn&#39;t get copied, it was just put in as-is.

## Why not have COMPOSE/DEEP only copy as-needed?

It seems that the outer level should always be copied--people tend to take that for granted.

But once you go deeper than that, why copy anything that doesn&#39;t need a substitution underneath it?  You&#39;re not getting automatic copies of anything you&#39;re inserting, so it&#39;s not like there&#39;s any big guarantee you have an all-new deep data structure.

Think of the efficiency gain if you say something like:

     make object! compose/deep [
         x: (...) // the one substitution
         y: [... [... [... [
             // some huge bunch of stuff that doesn&#39;t
             // have any GROUP!s in it at all...
         ] ...] ...] ...]
      ]

So I&#39;m going to change it.  If anyone notices, let me know.  We can always have a COMPOSE/DEEP/FULL or somesuch.

Now you&#39;ll see this:

    &gt;&gt; x: compose/deep [a [b c] ([d [e f]])]
    == [a [b c] d [e f]]

    &gt;&gt; append x/2 &lt;1&gt;
    ** Access Error: series is source or permanently locked, can&#39;t modify

    &gt;&gt; append x/4 &lt;2&gt;
    ** Access Error: series is source or permanently locked, can&#39;t modify

    &gt;&gt; append x &lt;3&gt;
    == [a [b c] d [e f] &lt;3&gt;]</description>
    
    <lastBuildDate>Fri, 21 Dec 2018 02:31:07 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/the-copy-ing-expectations-of-compose-deep/969.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The COPY-ing expectations of COMPOSE/DEEP</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Rebol sort of had an ethos of "modify by default"...but not everywhere.  REDUCE and COMPOSE made new arrays.</p>
<p>Typically in usage, this is what you want...as the same template of code is used many times.  Saying <strong>data: compose copy [foo: (bar) baz: (mumble)]</strong> gets to be a mouthful.</p>
<p>So you can pretty much take for granted you get a new array out of a COMPOSE, but what about a COMPOSE/DEEP?  Are things copied if no substitutions exist underneath them?  What about the material that gets inserted...does it get copied?</p>
<p>Ren-C lets you know what's up pretty easily, because you get an error if you try to mutate source things without copying them.  Let's try:</p>
<pre><code>&gt;&gt; x: compose/deep [a [b c] ([d [e f]])]
== [a [b c] d [e f]]

&gt;&gt; append x/2 &lt;1&gt;
== [b c &lt;1&gt;]

&gt;&gt; append x/4 &lt;2&gt;
** Access Error: series is source or permanently locked, can't modify

&gt;&gt; append x &lt;3&gt;
== [a [b c &lt;1&gt;] d [e f] &lt;3&gt;]
</code></pre>
<p>The outer array got copied.  Then <strong>[b c]</strong> got copied even though it didn't technically <em>need</em> to be...there were no compositions underneath it.  But the inserted material didn't get copied, it was just put in as-is.</p>
<h2>Why not have COMPOSE/DEEP only copy as-needed?</h2>
<p>It seems that the outer level should always be copied--people tend to take that for granted.</p>
<p>But once you go deeper than that, why copy anything that doesn't need a substitution underneath it?  You're not getting automatic copies of anything you're inserting, so it's not like there's any big guarantee you have an all-new deep data structure.</p>
<p>Think of the efficiency gain if you say something like:</p>
<pre><code> make object! compose/deep [
     x: (...) // the one substitution
     y: [... [... [... [
         // some huge bunch of stuff that doesn't
         // have any GROUP!s in it at all...
     ] ...] ...] ...]
  ]
</code></pre>
<p>So I'm going to change it.  If anyone notices, let me know.  We can always have a COMPOSE/DEEP/FULL or somesuch.</p>
<p>Now you'll see this:</p>
<pre><code>&gt;&gt; x: compose/deep [a [b c] ([d [e f]])]
== [a [b c] d [e f]]

&gt;&gt; append x/2 &lt;1&gt;
** Access Error: series is source or permanently locked, can't modify

&gt;&gt; append x/4 &lt;2&gt;
** Access Error: series is source or permanently locked, can't modify

&gt;&gt; append x &lt;3&gt;
== [a [b c] d [e f] &lt;3&gt;]</code></pre>
          <p><a href="https://forum.rebol.info/t/the-copy-ing-expectations-of-compose-deep/969/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-copy-ing-expectations-of-compose-deep/969/1</link>
        <pubDate>Fri, 21 Dec 2018 02:31:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-969-1</guid>
        <source url="https://forum.rebol.info/t/the-copy-ing-expectations-of-compose-deep/969.rss">The COPY-ing expectations of COMPOSE/DEEP</source>
      </item>
  </channel>
</rss>

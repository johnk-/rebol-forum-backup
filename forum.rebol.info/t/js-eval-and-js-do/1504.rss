<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>JS-EVAL and JS-DO</title>
    <link>https://forum.rebol.info/t/js-eval-and-js-do/1504</link>
    <description>*(I knew I&#39;d written this up but couldn&#39;t find it...the reason was because it was a git commit message, not a forum post.  Reprinting here.)*

This is a fun usage of the new @-types, which lets you refer to Rebol values more easily in JS-DO and JS-EVAL expressions. By doing so you not only save on typing, but it finesses what would be hairy escaping situations if your only currency was text:

    &gt;&gt; text: { ykcirT&quot; a s&#39;tI}

    &gt;&gt; js-eval [{reb.Spell(&quot;reverse&quot;,} @text {) + &quot;String&quot; + &#39;&quot;&#39;}]
    == {It&#39;s a &quot;Tricky String&quot;}

So what&#39;s going on there is it&#39;s generating a temporary API handle to refer to the value fetched from TEXT. This API handle is then used literally as one of the arguments to the variadic/evaluating
extraction routines in the API (mixed here with some JavaScript `+` string concatenation). The variadic knows to free this handle after it is done processing it, (so it is like a reb.RELEASING() or reb.R()
handle).

This is more powerful than just treating a block as running JS-EVAL UNSPACED [...]. But if you want that, you can still use a plain GROUP!:

    &gt;&gt; text: &quot;gnirob&quot;

    &gt;&gt; js-eval [{&quot;} (reverse text) { group&quot;}]
    == &quot;boring group&quot;

You can use @path/values, @(computed values). Although INTEGER! Rebol values aren&#39;t the best example (since you could pass them fine via their string representations), they&#39;ll work too *(just easier to demo in a PR than Blobs for BINARY! and such...)*

    &gt;&gt; x: 1000
    &gt;&gt; y: 20
    &gt;&gt; js-eval [{reb.Unbox(} @(x + y) {)}]
    == 1020

And to make things even more succinct, WORD!s in this dialect can be
used to generate the reb.XXX() calls for you:

    &gt;&gt; x: 1000
    &gt;&gt; js-eval [{20 +} unbox @x]
    == 1020

Currently there&#39;s support for UNBOX and SPELL, but this could expand.

(Note: JS-DO and JS-EVAL are similar, except JS-EVAL tries to return a result to Rebol translated from the JavaScript it is given...and cannot declare variables in global scope. See technical notes in the implementation if interested.)</description>
    
    <lastBuildDate>Fri, 26 Nov 2021 16:07:43 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/js-eval-and-js-do/1504.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>JS-EVAL and JS-DO</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1504">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>&gt;&gt; text: { ykcirT" a s'tI}

&gt;&gt; js-eval [{reb.Spell("reverse",} @text {) + "String" + '"'}]
== {It's a "Tricky String"}
</code></pre>
</blockquote>
</aside>
<p>If string binding works, we can do better than this...</p>
<pre><code>&gt;&gt; js-eval {reb.Spell("reverse", @text) + "String"}
== {It's a "Tricky String"}
</code></pre>
<p>What's going on here isn't a simple string substitution (which would screw up) but actually resolving to an API handle.</p>
<p>That's a lot more readable!</p>
<p><em>(Though I should point out this requires a JavaScript parser, at least enough of one to know when you're in a string literal or not.  You don't want the string <code>"@text"</code> to be substituted.)</em></p>
          <p><a href="https://forum.rebol.info/t/js-eval-and-js-do/1504/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/js-eval-and-js-do/1504/2</link>
        <pubDate>Wed, 27 Oct 2021 07:05:10 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1504-2</guid>
        <source url="https://forum.rebol.info/t/js-eval-and-js-do/1504.rss">JS-EVAL and JS-DO</source>
      </item>
      <item>
        <title>JS-EVAL and JS-DO</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em>(I knew I'd written this up but couldn't find it...the reason was because it was a git commit message, not a forum post.  Reprinting here.)</em></p>
<p>This is a fun usage of the new @-types, which lets you refer to Rebol values more easily in JS-DO and JS-EVAL expressions. By doing so you not only save on typing, but it finesses what would be hairy escaping situations if your only currency was text:</p>
<pre><code>&gt;&gt; text: { ykcirT" a s'tI}

&gt;&gt; js-eval [{reb.Spell("reverse",} @text {) + "String" + '"'}]
== {It's a "Tricky String"}
</code></pre>
<p>So what's going on there is it's generating a temporary API handle to refer to the value fetched from TEXT. This API handle is then used literally as one of the arguments to the variadic/evaluating<br>
extraction routines in the API (mixed here with some JavaScript <code>+</code> string concatenation). The variadic knows to free this handle after it is done processing it, (so it is like a reb.RELEASING() or reb.R()<br>
handle).</p>
<p>This is more powerful than just treating a block as running JS-EVAL UNSPACED [...]. But if you want that, you can still use a plain GROUP!:</p>
<pre><code>&gt;&gt; text: "gnirob"

&gt;&gt; js-eval [{"} (reverse text) { group"}]
== "boring group"
</code></pre>
<p>You can use <span class="mention">@path</span>/values, @(computed values). Although INTEGER! Rebol values aren't the best example (since you could pass them fine via their string representations), they'll work too <em>(just easier to demo in a PR than Blobs for BINARY! and such...)</em></p>
<pre><code>&gt;&gt; x: 1000
&gt;&gt; y: 20
&gt;&gt; js-eval [{reb.Unbox(} @(x + y) {)}]
== 1020
</code></pre>
<p>And to make things even more succinct, WORD!s in this dialect can be<br>
used to generate the reb.XXX() calls for you:</p>
<pre><code>&gt;&gt; x: 1000
&gt;&gt; js-eval [{20 +} unbox @x]
== 1020
</code></pre>
<p>Currently there's support for UNBOX and SPELL, but this could expand.</p>
<p>(Note: JS-DO and JS-EVAL are similar, except JS-EVAL tries to return a result to Rebol translated from the JavaScript it is given...and cannot declare variables in global scope. See technical notes in the implementation if interested.)</p>
          <p><a href="https://forum.rebol.info/t/js-eval-and-js-do/1504/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/js-eval-and-js-do/1504/1</link>
        <pubDate>Fri, 12 Feb 2021 14:07:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1504-1</guid>
        <source url="https://forum.rebol.info/t/js-eval-and-js-do/1504.rss">JS-EVAL and JS-DO</source>
      </item>
  </channel>
</rss>

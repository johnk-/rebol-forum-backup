<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Understanding VARARGS!</title>
    <link>https://forum.rebol.info/t/understanding-varargs/1495</link>
    <description>I don&#39;t think I fully understand varargs. First up I get an error in ReplPad when I try and specify a basic example:

```plain
&gt;&gt; ints: func [i [integer! &lt;...&gt;]][collect [while [not tail? i] [keep take i]]]
** Script Error: Failure on bad value (no additional info): &lt;...&gt;
```

(I checked [the tests](https://github.com/hostilefork/ren-c/blob/master/tests/datatypes/varargs.test.reb#L2) to see if it was still the right syntax)

Trying on an older version, this works:

```plain
&gt;&gt; ints: func [i [integer! &lt;...&gt;]][collect [while [not tail? i][keep take i]]]
== make action! [[i return:] [...]]

&gt;&gt; probe ints 1 2 3 | 4 5
[1 2 3]
== 5
```
But if I switch to hard quoting, it ignores the type:

```plain
&gt;&gt; ints: func [:i [integer! &lt;...&gt;]][collect [while [not tail? i][keep take i]]]
== make action! [[:i return:] [...]]

&gt;&gt; probe ints 1 2 3 | 4 5
ⓘ Note: use WHY for error information
** Script Error: ints does not allow bar! for its i argument
```

(I don&#39;t see a test for hard quoting in this way)

Soft quoting gets closer to what I&#39;m looking for—at least using the expression barrier, but bombs on the wrong type:

```plain
&gt;&gt; ints: func [&#39;i [integer! &lt;...&gt;]][collect [while [not tail? i][keep take i]]]  
== make action! [[&#39;i return:] [...]]

&gt;&gt; ints 1 2 3 | 4.0 5                                                           
== 5

&gt;&gt; ints 1 2 3 4.0 5   
** Script Error: ints does not allow decimal! for its i argument
```</description>
    
    <lastBuildDate>Tue, 09 Feb 2021 18:50:47 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/understanding-varargs/1495.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Understanding VARARGS!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="4" data-topic="1495">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>Quoted variadics wouldn't necessarily need to be last</p>
</blockquote>
</aside>
<p>One example of where the tradeoff was made between "what someone could write themselves with a variadic interface" vs. "what you endorse as a parameter convention", see <code>&lt;skip&gt;</code>:</p>
<p><a href="https://forum.rebol.info/t/skip-able-arguments/1013">Skippable Arguments</a></p>
<p>We can make that tradeoff for other things too...since there's not too much abstractly stopping you from using a PARSE rule as your parameter gathering mode.  You just have to only go forwards.</p>
<p>For the moment, the main thing is to cover the mechanics.  Some of the questions are agonizingly detailed... <a href="https://github.com/metaeducation/ren-c/issues/912#issuecomment-455934830">this one comes to mind</a>  :-/</p>
<p>But I'd like to see the parameter gathering not fully baked in, to the point where people can hack on something FUNC-like to give features like your <code>&lt;some&gt;</code> and <code>&lt;any&gt;</code> above, or to add <code>&lt;skip&gt;</code> if it didn't exist already...</p>
          <p><a href="https://forum.rebol.info/t/understanding-varargs/1495/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/understanding-varargs/1495/5</link>
        <pubDate>Tue, 09 Feb 2021 18:50:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1495-5</guid>
        <source url="https://forum.rebol.info/t/understanding-varargs/1495.rss">Understanding VARARGS!</source>
      </item>
      <item>
        <title>Understanding VARARGS!</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="1495">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It is now <code>&lt;variadic&gt;</code>... because <code>&lt;...&gt;</code> is a TUPLE! under our current rules, similar to <strong>a...b</strong></p>
</blockquote>
</aside>
<p>Ugh, just realised I was looking at hostilefork/ren-c tests, my bad. Not quite sure how I got there.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="1495">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Variadics are old, and haven't gone through much review, to pare back their weird design to something maybe more fitting to their common uses.</p>
</blockquote>
</aside>
<p>I understand the dicey nature of peering out ahead (see also, <a href="https://forum.rebol.info/t/should-evaluate-bomb-on-an-error/1491/2">EVALUATION question</a>), but there seems a potential to quoted variadics vs. non-quoted that is currently unrealised. Perhaps they should be two different concerns.</p>
<ul>
<li>
<p>Quoted variadics wouldn't necessarily need to be last</p>
</li>
<li>
<p>Is fixed in scope based purely on type</p>
</li>
<li>
<p>Value could be handled as a block instead of a pseudotype</p>
</li>
</ul>
<p>Could use   flags that would throw an error if used in conjunction with a non-quoted arg:</p>
<pre><code class="lang-nohighlight">any-nums: func [
    'values [&lt;any&gt; integer! decimal!]
    other-arg [non-number!]
][
    true = block? values
]

any-nums 1 2 3 &lt;thing&gt;
any-nums &lt;thing&gt;

some-nums: func [
    'values [&lt;some&gt; integer! decimal!]
    other-arg [non-number!]
][
    true = block? values
]

some-nums 1 2 3 &lt;thing&gt;
</code></pre>
          <p><a href="https://forum.rebol.info/t/understanding-varargs/1495/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/understanding-varargs/1495/4</link>
        <pubDate>Tue, 09 Feb 2021 18:36:44 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1495-4</guid>
        <source url="https://forum.rebol.info/t/understanding-varargs/1495.rss">Understanding VARARGS!</source>
      </item>
      <item>
        <title>Understanding VARARGS!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="1" data-topic="1495">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>First up I get an error in ReplPad when I try and specify a basic example:</p>
</blockquote>
</aside>
<p>It is now <code>&lt;variadic&gt;</code>... because <code>&lt;...&gt;</code> is a TUPLE! under our current rules, similar to <strong>a...b</strong></p>
<p>If you believe it should be legal to say <strong>&lt;/foo</strong> to call &lt; with a refinement, or <strong>&lt;.foo</strong> to field select out of &lt;, then <strong>&lt;...&gt;</strong> being a tuple makes sense.</p>
<blockquote>
<p>But if I switch to hard quoting, it ignores the type:</p>
<pre><code>&gt;&gt; ints: func [:i [integer! &lt;...&gt;]][collect [while [not tail? i][keep take i]]]
== make action! [[:i return:] [...]]
</code></pre>
</blockquote>
<p>Hard quoting is now <strong>'param</strong> due to my seemingly logical belief that <strong>:param</strong> is more semiotic for suggesting "can be escaped with a colon at the callsite".  <a href="https://forum.rebol.info/t/function-escapable-literal-parameters-x-or-x/1433">I discuss that maybe <strong>':param</strong> is better for "escapable quotable"</a></p>
<blockquote>
<p>Soft quoting gets closer to what I'm looking for, at least using the expression barrier, but bombs on the wrong type:</p>
</blockquote>
<p>COMMA! has replaced | as the expression barrier.</p>
<blockquote>
<p>ints: func [:i [any-value! &lt;...&gt;] d [decimal!]]</p>
</blockquote>
<p>Variadics always take from the end, no matter where you put them.  This function would expect a decimal parameter as its first argument.</p>
<blockquote>
<p>** Script Error: ints does not allow decimal! for its i argument</p>
</blockquote>
<p>A typed variadic parameter doesn't discern the lookahead from TAKE-ing in terms of being constrained to types.  This is why I will sometimes separate out a <strong><code>'look [&lt;opt&gt; any-value! &lt;variadic&gt;]</code></strong> parameter used for looking, so that the variables that do the TAKE-ing can remain typed.</p>
<pre><code>ints: func ['look [&lt;opt&gt; any-value! &lt;variadic&gt;] 'i [integer! &lt;variadic&gt;]] [
    collect [while [integer? first look] [keep take i]]
]

&gt;&gt; x: ints 1 2 3 4.0
== 4.0

&gt;&gt; x
== [1 2 3]
</code></pre>
<p><strong>Variadics are old, and haven't gone through much review, to pare back their weird design to something maybe more fitting to their common uses.</strong></p>
          <p><a href="https://forum.rebol.info/t/understanding-varargs/1495/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/understanding-varargs/1495/3</link>
        <pubDate>Tue, 09 Feb 2021 18:06:53 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1495-3</guid>
        <source url="https://forum.rebol.info/t/understanding-varargs/1495.rss">Understanding VARARGS!</source>
      </item>
      <item>
        <title>Understanding VARARGS!</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I think I'm getting into trouble because I'm trying to do something like this:</p>
<pre><code class="lang-nohighlight">&gt;&gt; ints: func [:i [any-value! &lt;...&gt;] d [decimal!]][collect [probe while [match [integer!] first i][keep take i]]]
== make action! [[:i d return:] [...]]

&gt;&gt; probe ints 1 2 3 4.0 5                                                                                         
** Script Error: ints does not allow integer! for its d argument
</code></pre>
          <p><a href="https://forum.rebol.info/t/understanding-varargs/1495/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/understanding-varargs/1495/2</link>
        <pubDate>Tue, 09 Feb 2021 16:26:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1495-2</guid>
        <source url="https://forum.rebol.info/t/understanding-varargs/1495.rss">Understanding VARARGS!</source>
      </item>
      <item>
        <title>Understanding VARARGS!</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I don't think I fully understand varargs. First up I get an error in ReplPad when I try and specify a basic example:</p>
<pre><code class="lang-nohighlight">&gt;&gt; ints: func [i [integer! &lt;...&gt;]][collect [while [not tail? i] [keep take i]]]
** Script Error: Failure on bad value (no additional info): &lt;...&gt;
</code></pre>
<p>(I checked <a href="https://github.com/hostilefork/ren-c/blob/master/tests/datatypes/varargs.test.reb#L2">the tests</a> to see if it was still the right syntax)</p>
<p>Trying on an older version, this works:</p>
<pre><code class="lang-nohighlight">&gt;&gt; ints: func [i [integer! &lt;...&gt;]][collect [while [not tail? i][keep take i]]]
== make action! [[i return:] [...]]

&gt;&gt; probe ints 1 2 3 | 4 5
[1 2 3]
== 5
</code></pre>
<p>But if I switch to hard quoting, it ignores the type:</p>
<pre><code class="lang-nohighlight">&gt;&gt; ints: func [:i [integer! &lt;...&gt;]][collect [while [not tail? i][keep take i]]]
== make action! [[:i return:] [...]]

&gt;&gt; probe ints 1 2 3 | 4 5
ⓘ Note: use WHY for error information
** Script Error: ints does not allow bar! for its i argument
</code></pre>
<p>(I don't see a test for hard quoting in this way)</p>
<p>Soft quoting gets closer to what I'm looking for—at least using the expression barrier, but bombs on the wrong type:</p>
<pre><code class="lang-nohighlight">&gt;&gt; ints: func ['i [integer! &lt;...&gt;]][collect [while [not tail? i][keep take i]]]  
== make action! [['i return:] [...]]

&gt;&gt; ints 1 2 3 | 4.0 5                                                           
== 5

&gt;&gt; ints 1 2 3 4.0 5   
** Script Error: ints does not allow decimal! for its i argument
</code></pre>
          <p><a href="https://forum.rebol.info/t/understanding-varargs/1495/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/understanding-varargs/1495/1</link>
        <pubDate>Tue, 09 Feb 2021 15:59:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1495-1</guid>
        <source url="https://forum.rebol.info/t/understanding-varargs/1495.rss">Understanding VARARGS!</source>
      </item>
  </channel>
</rss>

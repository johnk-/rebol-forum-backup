<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Plugging The Script Header Hole</title>
    <link>https://forum.rebol.info/t/plugging-the-script-header-hole/1430</link>
    <description>In the [&quot;MOLD and LOAD Parity&quot;](https://forum.rebol.info/t/mold-and-load-parity/1429) thread, @rgchris suggests something I have been wanting to do (but hadn&#39;t) which is to make LOAD always return a BLOCK!.

Now that is done:

[**GitHub Commit: LOAD of code always BLOCK!, LOAD-VALUE for 1 item**](https://github.com/metaeducation/ren-c/commit/96000bd594c36281e18055518aa66b58d67d8bea)

## But...What About Script Headers?

If I&#39;d just blindly flipped a switch that /ALL was true, we&#39;d have gotten the historical behavior that LOAD/ALL includes headers as part of the data:

    rebol2&gt;&gt; load &quot;Rebol [] 1 2 3&quot;
    == [1 2 3]

    rebol2&gt;&gt; load/all &quot;Rebol [] 1 2 3&quot;
    == [Rebol [] 1 2 3]

So I didn&#39;t do that.  Even though a block is always returned now, it still does header processing.

But there&#39;s a catch:

    &gt;&gt; load &quot;rebol [%.r %.r3] ren-c [%.r %.reb] red [%.red %.reds]&quot;
    ** syntax Error: script header is not valid:

So now, how are you supposed to LOAD a string that starts with the (legitimate) WORD! Rebol?  More broadly we want more signals than this, based on the dialect or sublanguage...that would be *any* word (or path?)  What can be done about this?

## The Header Needs A Special Signal

**I&#39;m quite certain it&#39;s a design flaw that the header signal can be conflated with what could be legal data.**

Contrast with something that didn&#39;t have that property:

    &gt;&gt; load/all {$Rebol [Title: &quot;stuff&quot;] no contention here}
    == [no contention here]

    &gt;&gt; load/all {3.0-Rebol [Title: &quot;stuff&quot;] non symbolic option}
    == [non symbolic option]

I know a symbol might be a bit off-putting, but everything &quot;pleasant&quot; is already taken in-band for the mainline of the data format.

    ^Rebol [
        Title: {My Script}
    ]

    $Rebol [
        Title: {My Script}
    ]

    \Rebol [
        Title: {My Script}
    ]

    Rebol=[
        Title: {My Script}
    ]

    rebol&gt;&gt; [
        Title: {My Script}
    ]

    Rebol&gt; [
        Title: {My Script}
    ]

Okay, I actually like that &quot;prompt-looking&quot; last idea.  **Rebol&gt;** seems nice and light enough... it&#39;s even kind of &quot;pointing at&quot; the header block to say it&#39;s special and not part of the data.  And we&#39;ve pretty clearly ruled out **Xyz&gt;** as a WORD!.  It can cover any name vs. encoding a word like &quot;Rebol&quot; specifically.

LOAD/HEADER could slipstream whatever was in front of the `&gt;` to be in-band in the returned header.

     &gt;&gt; [data hdr]: load {StyleTalk/3.0&gt; [Title: &quot;Whatever&quot;] your data here}
     == [your data here]

     &gt;&gt; hdr
     == make object! [
         Format: &#39;StyleTalk/3.0
         Title: &quot;Whatever&quot;
     ]

But maybe allowing paths that opens too many cans of worms (**`Rebol/&lt;tag-in-path&gt;&gt; [...]`**) and it should have to just be a WORD! otherwise, with everything else you need broken out in the header.

Looks good to me.  Thoughts?</description>
    
    <lastBuildDate>Mon, 01 Feb 2021 17:59:10 +0000</lastBuildDate>
    <category>Modules</category>
    <atom:link href="https://forum.rebol.info/t/plugging-the-script-header-hole/1430.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Plugging The Script Header Hole</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I think the right answer is to use the <a href="https://forum.rebol.info/t/using-the-type-header/1299">TYPE header</a>.</p>
          <p><a href="https://forum.rebol.info/t/plugging-the-script-header-hole/1430/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/plugging-the-script-header-hole/1430/6</link>
        <pubDate>Mon, 01 Feb 2021 17:59:10 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1430-6</guid>
        <source url="https://forum.rebol.info/t/plugging-the-script-header-hole/1430.rss">Plugging The Script Header Hole</source>
      </item>
      <item>
        <title>Plugging The Script Header Hole</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="4" data-topic="1430">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>Could we codify that every Rebol derivative begin with 'Re'</p>
</blockquote>
</aside>
<p>For whatever it's worth as an observation: Red's "DiaGrammar" app has <a href="https://www.redlake-tech.com/blog/2021/01/diagrammar-1.1-available-now/">changed from saying <code>Red [...]</code> at the top of the files to <code>DiaGrammar [...]</code></a>.</p>
          <p><a href="https://forum.rebol.info/t/plugging-the-script-header-hole/1430/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/plugging-the-script-header-hole/1430/5</link>
        <pubDate>Mon, 01 Feb 2021 09:29:09 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1430-5</guid>
        <source url="https://forum.rebol.info/t/plugging-the-script-header-hole/1430.rss">Plugging The Script Header Hole</source>
      </item>
      <item>
        <title>Plugging The Script Header Hole</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="1430">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>One possibility we might say in a UTF-8 everywhere world is that the distinction comes from whether the input is BINARY! or TEXT!, where binary input to LOAD is expected to always have a header and text isn't.</p>
</blockquote>
</aside>
<p>Seems a better distinction.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="1430">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I also think forcing files to have headers is inflexible, and when you are going to open up the first word in the file to being more than just "Rebol" (which it will have to be, considering that's not going to be the language name), then you're suddenly saying that you will mis-identify anything that starts with a WORD! when read as a file if you didn't use a header.</p>
</blockquote>
</aside>
<p>Could we codify that every Rebol derivative begin with 'Re'? <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="1430">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>We also have to think about what the rule is that permits leading lines like the <strong><code>#/usr/bin/r3</code></strong> instruction to UNIX shells.</p>
</blockquote>
</aside>
<pre><code class="lang-auto">parse file [
    opt ["#!" thru newline any newline]
    ... script rule ...
]
</code></pre>
<p>May possibly be worth storing this information somewhere as script metadata.</p>
          <p><a href="https://forum.rebol.info/t/plugging-the-script-header-hole/1430/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/plugging-the-script-header-hole/1430/4</link>
        <pubDate>Fri, 11 Dec 2020 18:48:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1430-4</guid>
        <source url="https://forum.rebol.info/t/plugging-the-script-header-hole/1430.rss">Plugging The Script Header Hole</source>
      </item>
      <item>
        <title>Plugging The Script Header Hole</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="2" data-topic="1430">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>My inclination would be to leave as-is</p>
</blockquote>
</aside>
<p>One possibility we might say in a UTF-8 everywhere world is that the distinction comes from whether the input is BINARY! or TEXT!, where binary input to LOAD is expected to always have a header and text isn't.  Just mentioning it as I thought of it.</p>
<p>But you lose a lot by not having the ability to copy/paste code from a file into <strong>do "..."</strong> or <strong>code: load "...", do code</strong> and get the same behavior as running the file.  The header contains information important to the function of code...which is going to become even more true.  You'd need a parallel track of "header-aware execution" to "header-unaware execution", and it's error prone.</p>
<p>I also think forcing files to have headers is inflexible, and when you are going to open up the first word in the file to being more than just "Rebol" (which it will have to be, considering that's not going to be the language name), then you're suddenly saying that you will mis-identify anything that starts with a WORD! when read as a file if you didn't use a header.</p>
<p>So let's keep all this in mind while studying the problem.  It's now more in our face than before.  If you're taking away the ability to DO things copy/pasted with header information then a complete story is needed for all the places that rely on information in the header to execute code.  <em>The fact is that everything that's been done so far as a detection mechanism is way too flaky!</em></p>
<p>We also have to think about what the rule is that permits leading lines like the <strong><code>#/usr/bin/r3</code></strong> instruction to UNIX shells.</p>
          <p><a href="https://forum.rebol.info/t/plugging-the-script-header-hole/1430/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/plugging-the-script-header-hole/1430/3</link>
        <pubDate>Fri, 11 Dec 2020 15:59:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1430-3</guid>
        <source url="https://forum.rebol.info/t/plugging-the-script-header-hole/1430.rss">Plugging The Script Header Hole</source>
      </item>
      <item>
        <title>Plugging The Script Header Hole</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>My inclination would be to leave as-is, and discern between a string and a file/url as to whether a header is expected.</p>
          <p><a href="https://forum.rebol.info/t/plugging-the-script-header-hole/1430/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/plugging-the-script-header-hole/1430/2</link>
        <pubDate>Fri, 11 Dec 2020 15:06:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1430-2</guid>
        <source url="https://forum.rebol.info/t/plugging-the-script-header-hole/1430.rss">Plugging The Script Header Hole</source>
      </item>
      <item>
        <title>Plugging The Script Header Hole</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In the <a href="https://forum.rebol.info/t/mold-and-load-parity/1429">"MOLD and LOAD Parity"</a> thread, <a class="mention" href="/u/rgchris">@rgchris</a> suggests something I have been wanting to do (but hadn't) which is to make LOAD always return a BLOCK!.</p>
<p>Now that is done:</p>
<p><a href="https://github.com/metaeducation/ren-c/commit/96000bd594c36281e18055518aa66b58d67d8bea"><strong>GitHub Commit: LOAD of code always BLOCK!, LOAD-VALUE for 1 item</strong></a></p>
<h2>But...What About Script Headers?</h2>
<p>If I'd just blindly flipped a switch that /ALL was true, we'd have gotten the historical behavior that LOAD/ALL includes headers as part of the data:</p>
<pre><code>rebol2&gt;&gt; load "Rebol [] 1 2 3"
== [1 2 3]

rebol2&gt;&gt; load/all "Rebol [] 1 2 3"
== [Rebol [] 1 2 3]
</code></pre>
<p>So I didn't do that.  Even though a block is always returned now, it still does header processing.</p>
<p>But there's a catch:</p>
<pre><code>&gt;&gt; load "rebol [%.r %.r3] ren-c [%.r %.reb] red [%.red %.reds]"
** syntax Error: script header is not valid:
</code></pre>
<p>So now, how are you supposed to LOAD a string that starts with the (legitimate) WORD! Rebol?  More broadly we want more signals than this, based on the dialect or sublanguage...that would be <em>any</em> word (or path?)  What can be done about this?</p>
<h2>The Header Needs A Special Signal</h2>
<p><strong>I'm quite certain it's a design flaw that the header signal can be conflated with what could be legal data.</strong></p>
<p>Contrast with something that didn't have that property:</p>
<pre><code>&gt;&gt; load/all {$Rebol [Title: "stuff"] no contention here}
== [no contention here]

&gt;&gt; load/all {3.0-Rebol [Title: "stuff"] non symbolic option}
== [non symbolic option]
</code></pre>
<p>I know a symbol might be a bit off-putting, but everything "pleasant" is already taken in-band for the mainline of the data format.</p>
<pre><code>^Rebol [
    Title: {My Script}
]

$Rebol [
    Title: {My Script}
]

\Rebol [
    Title: {My Script}
]

Rebol=[
    Title: {My Script}
]

rebol&gt;&gt; [
    Title: {My Script}
]

Rebol&gt; [
    Title: {My Script}
]
</code></pre>
<p>Okay, I actually like that "prompt-looking" last idea.  <strong>Rebol&gt;</strong> seems nice and light enough... it's even kind of "pointing at" the header block to say it's special and not part of the data.  And we've pretty clearly ruled out <strong>Xyz&gt;</strong> as a WORD!.  It can cover any name vs. encoding a word like "Rebol" specifically.</p>
<p>LOAD/HEADER could slipstream whatever was in front of the <code>&gt;</code> to be in-band in the returned header.</p>
<pre><code> &gt;&gt; [data hdr]: load {StyleTalk/3.0&gt; [Title: "Whatever"] your data here}
 == [your data here]

 &gt;&gt; hdr
 == make object! [
     Format: 'StyleTalk/3.0
     Title: "Whatever"
 ]
</code></pre>
<p>But maybe allowing paths that opens too many cans of worms (<strong><code>Rebol/&lt;tag-in-path&gt;&gt; [...]</code></strong>) and it should have to just be a WORD! otherwise, with everything else you need broken out in the header.</p>
<p>Looks good to me.  Thoughts?</p>
          <p><a href="https://forum.rebol.info/t/plugging-the-script-header-hole/1430/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/plugging-the-script-header-hole/1430/1</link>
        <pubDate>Fri, 11 Dec 2020 01:44:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1430-1</guid>
        <source url="https://forum.rebol.info/t/plugging-the-script-header-hole/1430.rss">Plugging The Script Header Hole</source>
      </item>
  </channel>
</rss>

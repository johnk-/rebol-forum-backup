<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Revisiting The ZIP Dialect</title>
    <link>https://forum.rebol.info/t/revisiting-the-zip-dialect/1548</link>
    <description>Vincent Ecuyer&#39;s [ZIP Dialect](http://www.rebol.org/view-script.r?script=rebzip.r) is an example of tool in a domain that pretty much everyone knows and uses: zipping and unzipping files.

I&#39;d thought its source code might be a good place to study the power of BINARY! parsing...until I realized how lacking binary parsing actually was in practice.  With UPARSE, I hope to attack those problems.  If so, then ZIP may yet become a showcase of how something like the zip file specification can become easily absorbed as usermode code.

**But another opportunity may come from making the ZIP dialect a tool people would actually want to use for its powers.**

It&#39;s already a little bit dialected.  When you pass it a block, you don&#39;t just specify filenames.  You can also give it literal blobs of BINARY! data, or URL!s to fetch.  This means you don&#39;t have to do calls to `curl` to get a temporary file, rename that file, and then pass the filename to a zip tool... the tool itself has smarts.

Here&#39;s what the options were in the original script:

    you can zip a single file:
        zip %new-zip.zip %my-file

    a block of files:
        zip %new-zip.zip [%file-1.txt %file-2.exe]

    a block of data (binary!/string!) and files:
        zip %new-zip.zip [%my-file &quot;my data&quot;]

    a entire directory:
        zip/deep %new-zip.zip %my-directory/

    from an url:
        zip %new-zip.zip ftp://192.168.1.10/my-file.txt

    any combination of these:
        zip/deep %new-zip.zip  [
            %readme.txt &quot;An example&quot; 
            ftp://192.168.1.10/my-file.txt
            %my-directory
         ]

When you think of this being used alongside my demo of [steps in GitHub Actions](https://forum.rebol.info/t/using-ren-c-as-the-shell-in-github-actions/1547) we could pack it up.  Here&#39;s a sketch of what that might look like:

     - uses: hostilefork/zip-github-action@v1
       output: new-zip.zip
       deep: true
       run: |
           %readme.txt &quot;An example&quot; 
           ftp://192.168.1.10/my-file.txt
           %my-directory

The ideal would be that there be a very easy way to make such a packaging for any given ACTION!.  You want to be able to get the non-dialect arguments and refinements split out from the body (the way the output filename and /DEEP is split out here).

## This Seems Like A Good Example to Try And Hone

It doesn&#39;t really get any simpler than this.  So why don&#39;t we ask:

**Can we make the ZIP dialect something so compelling that anyone who wanted to make a ZIP file on GitHub Actions would be a fool not to use it, if it had a zero-effort usage pattern like the above?**

The dialect could take advantage of new parts in the box.  e.g. SET-BLOCK! if you want to use a different filename than what something has already:

    ; Make a file in the zip called bar.txt, with contents of foo.txt
    zip %output.zip [[%bar.txt]: %foo.txt]

    ; Make a file in the zip called foo.txt, with contents of foo.txt
    zip %output.zip [%foo.txt]

Talking to @BlackATTR about it, I wondered if it&#39;s the kind of dialect where plain WORD!, PATH!, and TUPLE! should be interpreted as filenames, just to reduce the level of noise.  So **readme.txt** would be a legal alternative to **%readme.txt** and you would use GROUP!s to run code.  This introduces a lot of questions, [but I&#39;ve brought up the question elsewhere, e.g. with FORM](https://forum.rebol.info/t/form-of-group-s-get-word-s/1543).

Playing along better with bash would be nice.  Maybe allow **$ (some bash expression)**?  I&#39;ve got a post about a SHELL dialect I&#39;ve been thinking about.

Anyway, if we can&#39;t do this, we probably can&#39;t do anything more complicated.  So it&#39;s time to start putting our code where our mouth is and seeing if this can actually make something anyone wanted to use.</description>
    
    <lastBuildDate>Wed, 10 Mar 2021 01:08:46 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/revisiting-the-zip-dialect/1548.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Revisiting The ZIP Dialect</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1548">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Can we make the ZIP dialect something so compelling that anyone who wanted to make a ZIP file on GitHub Actions would be a fool not to use it, if it had a zero-effort usage pattern like the above?</p>
</blockquote>
</aside>
<p>I think this is a good way to look at it. In other words, view it from the angle of somebody who doesn't care in the slightest about ren-c or rebol, they just want a useful easy-to-pick-up tool that does one or two things well.</p>
<p>Most people just want the banana, they don't want the banana which is attached to the gorilla and the rest of the whole jungle that goes along with it (apologies to Joe Armstrong).</p>
<p>With that in mind, I think this kind dialect should look more like a syntax the developer might already be familiar with, as opposed to something which delves into syntax/idioms of rebol.</p>
<p>And yes, this is a pretty good exercise to see if ren-c can do a good job in this space. And bonus points are in order if the dialect is designed in such a way so that <strong>other dialects</strong> can easily invoke it/output to it. <img src="https://forum.rebol.info/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          <p><a href="https://forum.rebol.info/t/revisiting-the-zip-dialect/1548/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/revisiting-the-zip-dialect/1548/2</link>
        <pubDate>Wed, 10 Mar 2021 01:08:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1548-2</guid>
        <source url="https://forum.rebol.info/t/revisiting-the-zip-dialect/1548.rss">Revisiting The ZIP Dialect</source>
      </item>
      <item>
        <title>Revisiting The ZIP Dialect</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Vincent Ecuyer's <a href="http://www.rebol.org/view-script.r?script=rebzip.r">ZIP Dialect</a> is an example of tool in a domain that pretty much everyone knows and uses: zipping and unzipping files.</p>
<p>I'd thought its source code might be a good place to study the power of BINARY! parsing...until I realized how lacking binary parsing actually was in practice.  With UPARSE, I hope to attack those problems.  If so, then ZIP may yet become a showcase of how something like the zip file specification can become easily absorbed as usermode code.</p>
<p><strong>But another opportunity may come from making the ZIP dialect a tool people would actually want to use for its powers.</strong></p>
<p>It's already a little bit dialected.  When you pass it a block, you don't just specify filenames.  You can also give it literal blobs of BINARY! data, or URL!s to fetch.  This means you don't have to do calls to <code>curl</code> to get a temporary file, rename that file, and then pass the filename to a zip tool... the tool itself has smarts.</p>
<p>Here's what the options were in the original script:</p>
<pre><code>you can zip a single file:
    zip %new-zip.zip %my-file

a block of files:
    zip %new-zip.zip [%file-1.txt %file-2.exe]

a block of data (binary!/string!) and files:
    zip %new-zip.zip [%my-file "my data"]

a entire directory:
    zip/deep %new-zip.zip %my-directory/

from an url:
    zip %new-zip.zip ftp://192.168.1.10/my-file.txt

any combination of these:
    zip/deep %new-zip.zip  [
        %readme.txt "An example" 
        ftp://192.168.1.10/my-file.txt
        %my-directory
     ]
</code></pre>
<p>When you think of this being used alongside my demo of <a href="https://forum.rebol.info/t/using-ren-c-as-the-shell-in-github-actions/1547">steps in GitHub Actions</a> we could pack it up.  Here's a sketch of what that might look like:</p>
<pre><code> - uses: hostilefork/zip-github-action@v1
   output: new-zip.zip
   deep: true
   run: |
       %readme.txt "An example" 
       ftp://192.168.1.10/my-file.txt
       %my-directory
</code></pre>
<p>The ideal would be that there be a very easy way to make such a packaging for any given ACTION!.  You want to be able to get the non-dialect arguments and refinements split out from the body (the way the output filename and /DEEP is split out here).</p>
<h2>This Seems Like A Good Example to Try And Hone</h2>
<p>It doesn't really get any simpler than this.  So why don't we ask:</p>
<p><strong>Can we make the ZIP dialect something so compelling that anyone who wanted to make a ZIP file on GitHub Actions would be a fool not to use it, if it had a zero-effort usage pattern like the above?</strong></p>
<p>The dialect could take advantage of new parts in the box.  e.g. SET-BLOCK! if you want to use a different filename than what something has already:</p>
<pre><code>; Make a file in the zip called bar.txt, with contents of foo.txt
zip %output.zip [[%bar.txt]: %foo.txt]

; Make a file in the zip called foo.txt, with contents of foo.txt
zip %output.zip [%foo.txt]
</code></pre>
<p>Talking to <a class="mention" href="/u/blackattr">@BlackATTR</a> about it, I wondered if it's the kind of dialect where plain WORD!, PATH!, and TUPLE! should be interpreted as filenames, just to reduce the level of noise.  So <strong>readme.txt</strong> would be a legal alternative to <strong>%readme.txt</strong> and you would use GROUP!s to run code.  This introduces a lot of questions, <a href="https://forum.rebol.info/t/form-of-group-s-get-word-s/1543">but I've brought up the question elsewhere, e.g. with FORM</a>.</p>
<p>Playing along better with bash would be nice.  Maybe allow <strong>$ (some bash expression)</strong>?  I've got a post about a SHELL dialect I've been thinking about.</p>
<p>Anyway, if we can't do this, we probably can't do anything more complicated.  So it's time to start putting our code where our mouth is and seeing if this can actually make something anyone wanted to use.</p>
          <p><a href="https://forum.rebol.info/t/revisiting-the-zip-dialect/1548/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/revisiting-the-zip-dialect/1548/1</link>
        <pubDate>Wed, 10 Mar 2021 00:55:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1548-1</guid>
        <source url="https://forum.rebol.info/t/revisiting-the-zip-dialect/1548.rss">Revisiting The ZIP Dialect</source>
      </item>
  </channel>
</rss>

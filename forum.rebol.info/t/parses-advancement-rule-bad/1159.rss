<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>PARSE&#39;s Advancement Rule - Bad?</title>
    <link>https://forum.rebol.info/t/parses-advancement-rule-bad/1159</link>
    <description>The following behavior in Red seems pretty reasonable, doesn&#39;t it?

    red&gt;&gt; str: &quot;aaa&quot;
    == &quot;aaa&quot;

    red&gt;&gt; parse str [any [remove &quot;a&quot;]]
    == true

    red&gt;&gt; str
    == &quot;&quot;

So why doesn&#39;t R3-Alpha do the same?

    r3-alpha&gt;&gt; str: &quot;aaa&quot;
    == &quot;aaa&quot;

    r3-alpha&gt;&gt; parse str [any [remove &quot;a&quot;]]
    == false

    r3-alpha&gt;&gt; str
    == &quot;aa&quot;

Believe it or not, this was by design.  The concept is that if a rule doesn&#39;t advance the index, it isn&#39;t considered &quot;successful&quot;:

https://github.com/rebol/rebol-issues/issues/1401

**I am not a fan.**  A successful rule is one that matched.  The REMOVE matched.

While the REMOVE works in Red, it seems there&#39;s still some infinite-loop-avoidance through an advancement in the rules:

    red&gt;&gt; parse &quot;a&quot; [any [ahead &quot;a&quot;]]
    == false

I&#39;m not sure where to draw the line.  Personally I&#39;d think that *should* be an infinite loop.  Last I checked, this is a language where infinite loops are possible in a general sense, and it&#39;s [counter-intuitive to me to see mystery behaviors trying to avoid them](https://forum.rebol.info/t/infinite-loops-vs-errors/936)</description>
    
    <lastBuildDate>Sat, 04 May 2019 19:35:32 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/parses-advancement-rule-bad/1159.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>PARSE&#39;s Advancement Rule - Bad?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="2" data-topic="1159">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>This perhaps explains the reluctance to allow unfettered looping.</p>
</blockquote>
</aside>
<p>Bad cancellation may have played a role, but I found out what the actual reason was:</p>
<aside class="onebox githubissue">
  <header class="source">
      <a href="https://github.com/metaeducation/rebol-issues/issues/1268" target="_blank" rel="noopener">github.com/metaeducation/rebol-issues</a>
  </header>
  <article class="onebox-body">
    <div class="github-row">
  <div class="github-icon-container" title="Issue">
	  <svg width="60" height="60" class="github-icon" viewBox="0 0 14 16" aria-hidden="true"><path d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg>
  </div>

  <div class="github-info-container">
    <h4>
      <a href="https://github.com/metaeducation/rebol-issues/issues/1268" target="_blank" rel="noopener">PARSE ANY quirk</a>
    </h4>

    <div class="github-info">
      <div class="date">
        opened <span class="discourse-local-date" data-format="ll" data-date="2009-10-10" data-time="19:05:16" data-timezone="UTC">07:05PM - 10 Oct 09 UTC</span>
      </div>

        <div class="date">
          closed <span class="discourse-local-date" data-format="ll" data-date="2016-01-12" data-time="12:58:22" data-timezone="UTC">12:58PM - 12 Jan 16 UTC</span>
        </div>

      <div class="user">
        <a href="https://github.com/rebolbot" target="_blank" rel="noopener">
          <img alt="rebolbot" src="https://avatars2.githubusercontent.com/u/13850819?v=4" class="onebox-avatar-inline" width="20" height="20">
          rebolbot
        </a>
      </div>
    </div>
  </div>
</div>

<div class="github-row">
  <p class="github-content">Submitted by: Ladislav
I expect ANY to behave so, that a: [any b] is an iterative equivalent of the recursive a: [b...</p>
</div>

<div class="labels">
    <span style="display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;">Status.important</span>
    <span style="display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;">Status.resolved</span>
    <span style="display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;">Test.written</span>
    <span style="display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;">Type.bug</span>
</div>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>Ladislav wanted <strong>a: [any b]</strong> to be an iterative equivalent of the recursive <strong>a: [b a |]</strong>  Then, he wanted this to produce <code>i = 3</code>:</p>
<pre><code>a: [a |]
parse "" [(i: 0) 3 [["a" |] (i: i + 1)] end]
</code></pre>
<p>If you mix all that in with the desire to have <code>any [... | end]</code> <em>not</em> be an infinite loop, something has to give somewhere.  But I think the "no progress" rule is the wrong answer.</p>
<p>I posted my remarks on the issue....that I think this should be the true purpose of the WHILE vs ANY distinction.  ANY and SOME will break on END, but a while won't.  So it's actually <strong>a: [while b]</strong> to be an iterative equivalent of the recursive <strong>a: [b a |]</strong>, with ANY and SOME having the historical behavior.</p>
<p><em>So WHILE actually has a reason to exist, after all.</em>  Who knew.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://forum.rebol.info/t/parses-advancement-rule-bad/1159/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/parses-advancement-rule-bad/1159/4</link>
        <pubDate>Sat, 04 May 2019 19:35:32 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1159-4</guid>
        <source url="https://forum.rebol.info/t/parses-advancement-rule-bad/1159.rss">PARSE&#39;s Advancement Rule - Bad?</source>
      </item>
      <item>
        <title>PARSE&#39;s Advancement Rule - Bad?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="1159">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>Consider in Rebol 2 the difference hitting ESCAPE while performing the following:</p>
</blockquote>
</aside>
<p>Interesting.</p>
<p>Well that <a href="https://github.com/metaeducation/ren-c/commit/23e4f5b4ac3fcdc3b26eb97148855070b41cde8c" rel="nofollow noopener">has has been recently addressed</a>, so in Ren-C you can break a <code>forever []</code> (now CYCLE).  You'd be able to break an infinite looping PARSE, too.</p>
<p><strong>[]</strong> is a match on any input.  And I'd like <strong>any []</strong> to be an infinite loop.</p>
<p>I mention in my linked post that sometimes decaying to infinite loops is a feature...and here it certainly can be.  Consider <strong>any [:(...)]</strong>.  It may be that on one iteration it evaluates to null and hence vaporizes.  But on the next pass it might evaluate to a rule which splices.</p>
<p>(Curiously, there's a difference between <strong><code>any [:(...)]</code></strong> and <strong><code>any :(...)</code></strong>, because the first evaluates the group on each pass while the second evaluates just once.)</p>
<h3>...and with that...I'm convinced...</h3>
<p>The progress rule is bad mojo.  Let's toss it.</p>
          <p><a href="https://forum.rebol.info/t/parses-advancement-rule-bad/1159/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/parses-advancement-rule-bad/1159/3</link>
        <pubDate>Sat, 04 May 2019 05:05:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1159-3</guid>
        <source url="https://forum.rebol.info/t/parses-advancement-rule-bad/1159.rss">PARSE&#39;s Advancement Rule - Bad?</source>
      </item>
      <item>
        <title>PARSE&#39;s Advancement Rule - Bad?</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>Not excusing this avoidance in any way, but Parse has a checkered past with infinite loops.</p>
<p>Consider in Rebol 2 the difference hitting ESCAPE while performing the following:</p>
<pre><code class="lang-auto">parse "" [any []] ; unbreakable infinite loop
parse "" [any [()]] ; breakable infinite loop
</code></pre>
<p>This perhaps explains the reluctance to allow unfettered looping. On initial inspection, R3Alpha eventually returns TRUE for <code>parse "" [while []]</code>â€”it may be the unbreakable nature of Parse loops were already mitigated(?).</p>
          <p><a href="https://forum.rebol.info/t/parses-advancement-rule-bad/1159/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/parses-advancement-rule-bad/1159/2</link>
        <pubDate>Sat, 04 May 2019 04:51:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1159-2</guid>
        <source url="https://forum.rebol.info/t/parses-advancement-rule-bad/1159.rss">PARSE&#39;s Advancement Rule - Bad?</source>
      </item>
      <item>
        <title>PARSE&#39;s Advancement Rule - Bad?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The following behavior in Red seems pretty reasonable, doesn't it?</p>
<pre><code>red&gt;&gt; str: "aaa"
== "aaa"

red&gt;&gt; parse str [any [remove "a"]]
== true

red&gt;&gt; str
== ""
</code></pre>
<p>So why doesn't R3-Alpha do the same?</p>
<pre><code>r3-alpha&gt;&gt; str: "aaa"
== "aaa"

r3-alpha&gt;&gt; parse str [any [remove "a"]]
== false

r3-alpha&gt;&gt; str
== "aa"
</code></pre>
<p>Believe it or not, this was by design.  The concept is that if a rule doesn't advance the index, it isn't considered "successful":</p>
<aside class="onebox githubissue">
  <header class="source">
      <a href="https://github.com/metaeducation/rebol-issues/issues/1401" target="_blank" rel="noopener">github.com/metaeducation/rebol-issues</a>
  </header>
  <article class="onebox-body">
    <div class="github-row">
  <div class="github-icon-container" title="Issue">
	  <svg width="60" height="60" class="github-icon" viewBox="0 0 14 16" aria-hidden="true"><path d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg>
  </div>

  <div class="github-info-container">
    <h4>
      <a href="https://github.com/metaeducation/rebol-issues/issues/1401" target="_blank" rel="noopener">PARSE some remove problem</a>
    </h4>

    <div class="github-info">
      <div class="date">
        opened <span class="discourse-local-date" data-format="ll" data-date="2009-12-23" data-time="02:57:07" data-timezone="UTC">02:57AM - 23 Dec 09 UTC</span>
      </div>

        <div class="date">
          closed <span class="discourse-local-date" data-format="ll" data-date="2016-01-12" data-time="13:09:58" data-timezone="UTC">01:09PM - 12 Jan 16 UTC</span>
        </div>

      <div class="user">
        <a href="https://github.com/rebolbot" target="_blank" rel="noopener">
          <img alt="rebolbot" src="https://avatars2.githubusercontent.com/u/13850819?v=4" class="onebox-avatar-inline" width="20" height="20">
          rebolbot
        </a>
      </div>
    </div>
  </div>
</div>

<div class="github-row">
  <p class="github-content">Submitted by: Carl
When PARSE is used to remove multiple occurrences of a string, it does not.
str: "ababab"
parse str [some [to "a"...</p>
</div>

<div class="labels">
    <span style="display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;">Status.dismissed</span>
    <span style="display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;">Type.bug</span>
</div>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p><strong>I am not a fan.</strong>  A successful rule is one that matched.  The REMOVE matched.</p>
<p>While the REMOVE works in Red, it seems there's still some infinite-loop-avoidance through an advancement in the rules:</p>
<pre><code>red&gt;&gt; parse "a" [any [ahead "a"]]
== false
</code></pre>
<p>I'm not sure where to draw the line.  Personally I'd think that <em>should</em> be an infinite loop.  Last I checked, this is a language where infinite loops are possible in a general sense, and it's <a href="https://forum.rebol.info/t/infinite-loops-vs-errors/936">counter-intuitive to me to see mystery behaviors trying to avoid them</a></p>
          <p><a href="https://forum.rebol.info/t/parses-advancement-rule-bad/1159/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/parses-advancement-rule-bad/1159/1</link>
        <pubDate>Sat, 04 May 2019 03:21:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1159-1</guid>
        <source url="https://forum.rebol.info/t/parses-advancement-rule-bad/1159.rss">PARSE&#39;s Advancement Rule - Bad?</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Performance of INHERIT-META</title>
    <link>https://forum.rebol.info/t/performance-of-inherit-meta/1619</link>
    <description>I did a little bit of performance sampling and noticed a fair bit of boot time was spent in a function called INHERIT-META.  It&#39;s was called often, and it was slow.

Carl &amp; BrianH &amp; co were big fans of taking bottleneck functions and making them natives.  I&#39;ve tried to avoid that for &quot;weird&quot; functions, but I will make an exception here.

I&#39;m keeping a copy of the original code, which isn&#39;t even complete...despite being slow.  :-/

    inherit-meta: func* [
        return: &quot;Same as derived (assists in efficient chaining)&quot;
            [action!]
        derived [action!]
        original &quot;Passed as WORD! to use GET to avoid tainting cached label&quot;
            [word!]
        /augment &quot;Additional spec information to scan&quot;
            [block!]
    ][
        original: get original  ; GET so `specialize :foo [...]` keeps label foo

        if let m1: meta-of :original [
            set-meta :derived let m2: copy :m1  ; shallow copy
            if select m1 &#39;parameter-notes [  ; shallow copy, but make frame match
                m2/parameter-notes: make frame! :derived
                for-each [key value] m1/parameter-notes [
                    if in m2/parameter-notes key [
                        m2/parameter-notes/(key): get* &#39;value  ; !!! BAD-WORD!s
                    ]
                ]
            ]
            if select m1 &#39;parameter-types [  ; shallow copy, but make frame match
                m2/parameter-types: make frame! :derived
                for-each [key value] m1/parameter-types [
                    if in m2/parameter-types key [
                        m2/parameter-types/(key): get* &#39;value  ; !!! BAD-WORD!s
                    ]
                ]
            ]
        ]
        return get &#39;derived  ; no :derived name cache
    ]</description>
    
    <lastBuildDate>Fri, 04 Jun 2021 20:09:28 +0000</lastBuildDate>
    <category>Testing</category>
    <atom:link href="https://forum.rebol.info/t/performance-of-inherit-meta/1619.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Performance of INHERIT-META</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>Main point is, what is it supposed to do?</p>
          <p><a href="https://forum.rebol.info/t/performance-of-inherit-meta/1619/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/performance-of-inherit-meta/1619/2</link>
        <pubDate>Fri, 04 Jun 2021 20:09:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1619-2</guid>
        <source url="https://forum.rebol.info/t/performance-of-inherit-meta/1619.rss">Performance of INHERIT-META</source>
      </item>
      <item>
        <title>Performance of INHERIT-META</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I did a little bit of performance sampling and noticed a fair bit of boot time was spent in a function called INHERIT-META.  It's was called often, and it was slow.</p>
<p>Carl &amp; BrianH &amp; co were big fans of taking bottleneck functions and making them natives.  I've tried to avoid that for "weird" functions, but I will make an exception here.</p>
<p>I'm keeping a copy of the original code, which isn't even complete...despite being slow.  :-/</p>
<pre><code>inherit-meta: func* [
    return: "Same as derived (assists in efficient chaining)"
        [action!]
    derived [action!]
    original "Passed as WORD! to use GET to avoid tainting cached label"
        [word!]
    /augment "Additional spec information to scan"
        [block!]
][
    original: get original  ; GET so `specialize :foo [...]` keeps label foo

    if let m1: meta-of :original [
        set-meta :derived let m2: copy :m1  ; shallow copy
        if select m1 'parameter-notes [  ; shallow copy, but make frame match
            m2/parameter-notes: make frame! :derived
            for-each [key value] m1/parameter-notes [
                if in m2/parameter-notes key [
                    m2/parameter-notes/(key): get* 'value  ; !!! BAD-WORD!s
                ]
            ]
        ]
        if select m1 'parameter-types [  ; shallow copy, but make frame match
            m2/parameter-types: make frame! :derived
            for-each [key value] m1/parameter-types [
                if in m2/parameter-types key [
                    m2/parameter-types/(key): get* 'value  ; !!! BAD-WORD!s
                ]
            ]
        ]
    ]
    return get 'derived  ; no :derived name cache
]</code></pre>
          <p><a href="https://forum.rebol.info/t/performance-of-inherit-meta/1619/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/performance-of-inherit-meta/1619/1</link>
        <pubDate>Thu, 03 Jun 2021 21:26:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1619-1</guid>
        <source url="https://forum.rebol.info/t/performance-of-inherit-meta/1619.rss">Performance of INHERIT-META</source>
      </item>
  </channel>
</rss>

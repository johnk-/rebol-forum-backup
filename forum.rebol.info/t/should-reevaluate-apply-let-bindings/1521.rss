<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should REEVALUATE apply LET bindings?</title>
    <link>https://forum.rebol.info/t/should-reevaluate-apply-let-bindings/1521</link>
    <description>So the idea of REEVALUATE (short name REEVAL) is that you get the same behavior &quot;as if&quot; you had written the thing in place:

    &gt;&gt; x: 10
    &gt;&gt; reeval (first [x:]) 20  ; acts like X: 10
    &gt;&gt; x
    == 20

But how far should this &quot;as if you&#39;d written it there&quot; go?  Should the binding be applied?

    &gt;&gt; x: 1000
    &gt;&gt; code: &#39;(x + 20)
    &gt;&gt; do [let x: 284, reeval code]
    == ?

Does it see the new value for X?  Should that give you 1020, or 304?

I vote 1020.  Seems to me that only source-level code should see the LET&#39;s binding.

But there&#39;s an implementation problem because the evaluator has to know to suppress LET bindings on reevaluations.  REEVAL takes pains to make sure it&#39;s running through the same code path as the evaluator normally would.  It&#39;s not exactly clear what bits to check or flip to know how to control this behavior.

Tricky as that is, it would get even trickier if we said you *wanted* to apply the LET binding...because it gets hard to know whether you&#39;ve applied it twice.  Imagine if you said instead:

    &gt;&gt; x: 1000
    &gt;&gt; code: &#39;(x + 20)
    &gt;&gt; do compose [let x: 284, reeval &#39;(code)]
    == 304  ; we want it to see the LET X

How does REEVAL know if the **let x: 284** was taken into account already or not?  This depends on whether the argument was literal or fetched through a variable.  But REEVAL isn&#39;t supposed to know anything about its argument besides its value.  [I rigged up a fix](https://github.com/metaeducation/ren-c/commit/b1721727665d286be3ccafebb70461e2770b108a), and we can see how well it holds up.

**I think this points to the idea that LET and USE should probably stick to having near-parity in outcomes.**  That means the binding only applies to source, not things fetched and then &quot;treated as source&quot; later.

Anyway, difficult stuff...all on the way to [getting rid of FUNCT-behavior-of-FUNCTION](https://forum.rebol.info/t/what-to-do-about-funct-including-not-calling-it-that/1518).  Since there&#39;s such a big monster of a codebase to try it on (including the Mezzanine, Rebmake, and ReplPad) it&#39;s getting exercised fairly heavily.</description>
    
    <lastBuildDate>Wed, 24 Feb 2021 21:25:38 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/should-reevaluate-apply-let-bindings/1521.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should REEVALUATE apply LET bindings?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So the idea of REEVALUATE (short name REEVAL) is that you get the same behavior "as if" you had written the thing in place:</p>
<pre><code>&gt;&gt; x: 10
&gt;&gt; reeval (first [x:]) 20  ; acts like X: 10
&gt;&gt; x
== 20
</code></pre>
<p>But how far should this "as if you'd written it there" go?  Should the binding be applied?</p>
<pre><code>&gt;&gt; x: 1000
&gt;&gt; code: '(x + 20)
&gt;&gt; do [let x: 284, reeval code]
== ?
</code></pre>
<p>Does it see the new value for X?  Should that give you 1020, or 304?</p>
<p>I vote 1020.  Seems to me that only source-level code should see the LET's binding.</p>
<p>But there's an implementation problem because the evaluator has to know to suppress LET bindings on reevaluations.  REEVAL takes pains to make sure it's running through the same code path as the evaluator normally would.  It's not exactly clear what bits to check or flip to know how to control this behavior.</p>
<p>Tricky as that is, it would get even trickier if we said you <em>wanted</em> to apply the LET binding...because it gets hard to know whether you've applied it twice.  Imagine if you said instead:</p>
<pre><code>&gt;&gt; x: 1000
&gt;&gt; code: '(x + 20)
&gt;&gt; do compose [let x: 284, reeval '(code)]
== 304  ; we want it to see the LET X
</code></pre>
<p>How does REEVAL know if the <strong>let x: 284</strong> was taken into account already or not?  This depends on whether the argument was literal or fetched through a variable.  But REEVAL isn't supposed to know anything about its argument besides its value.  <a href="https://github.com/metaeducation/ren-c/commit/b1721727665d286be3ccafebb70461e2770b108a">I rigged up a fix</a>, and we can see how well it holds up.</p>
<p><strong>I think this points to the idea that LET and USE should probably stick to having near-parity in outcomes.</strong>  That means the binding only applies to source, not things fetched and then "treated as source" later.</p>
<p>Anyway, difficult stuff...all on the way to <a href="https://forum.rebol.info/t/what-to-do-about-funct-including-not-calling-it-that/1518">getting rid of FUNCT-behavior-of-FUNCTION</a>.  Since there's such a big monster of a codebase to try it on (including the Mezzanine, Rebmake, and ReplPad) it's getting exercised fairly heavily.</p>
          <p><a href="https://forum.rebol.info/t/should-reevaluate-apply-let-bindings/1521/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-reevaluate-apply-let-bindings/1521/1</link>
        <pubDate>Wed, 24 Feb 2021 20:13:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1521-1</guid>
        <source url="https://forum.rebol.info/t/should-reevaluate-apply-let-bindings/1521.rss">Should REEVALUATE apply LET bindings?</source>
      </item>
  </channel>
</rss>

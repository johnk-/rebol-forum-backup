<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Mutation and UPARSE: Winds of CHANGE</title>
    <link>https://forum.rebol.info/t/mutation-and-uparse-winds-of-change/1556</link>
    <description>Mutating operations in PARSE introduce a bag of issues that are a bit hard to manage.  Topaz decided to dismiss with it altogether.  I don&#39;t think one should be so quick to dismiss it, especially in a language which has an embrace of mutability kind of at its core.

Anyway...historically CHANGE has had the somewhat odd question of what its second argument represents.  The first is a rule that spans the region you want to replace.  And the second argument is...what, exactly?

You can do a literal:

    red&gt;&gt; str: &quot;(aaa)&quot;
    red&gt;&gt; parse str [&quot;(&quot; [change [some &quot;a&quot;] &quot;bbb&quot;] &quot;)&quot;]
    red&gt;&gt; str
    == &quot;(bbb)&quot;

Note that literal isn&#39;t a rule...it wasn&#39;t matched against any &quot;b&quot; in the input.  You could have also calculated the replacement via a GROUP!

    red&gt;&gt; str: &quot;(aaa)&quot;
    red&gt;&gt; parse str [&quot;(&quot; [change [some &quot;a&quot;] (reverse &quot;xyz&quot;)] &quot;)&quot;]
    red&gt;&gt; str
    == &quot;(zyx)&quot;

**But what if you wanted to make the replacement a function of the data it was replacing?**

I thought I&#39;d give a shot at a different way of thinking about this with UPARSE.  What if the second argument *was* a rule, just a value-bearing one?  And what if it processed the same input position that was given to the thing determining the span to replace?

Since (...) are value-bearing rules you have the choice of just dropping in a value with that:

    &gt;&gt; str: &quot;(aaa)&quot;
    &gt;&gt; uparse str [&quot;(&quot; [change [some &quot;a&quot;] (&quot;bbb&quot;)] &quot;)&quot;]
    &gt;&gt; str
    == &quot;(bbb)&quot;

For the cost of a couple more characters, you have the advantage of helping readers know that you are not matching that &quot;bbb&quot; against any input...but fabricating a value out of whole cloth.

But you&#39;re not just signaling that...because by making that second argument a *rule* slot, you can gather information.  We give the replacement rule the same position to look at.

Let&#39;s try a little differently.

    &gt;&gt; str: &quot;(aba)&quot;
    &gt;&gt; uparse str [
        &quot;(&quot;
        change [to &quot;)&quot;] collect [
            some [&quot;a&quot; keep (&quot;A&quot;) | skip]
        ]
        &quot;)&quot;
    ]
    &gt;&gt; str
    == &quot;(AA)&quot;

**This shows the added flexibility of making the second argument fit into the model of &quot;rule&quot;:  You can react to the input you are replacing.**

## Do Combinators (and PARSE) Need /LIMIT ?

So one thing that&#39;s weird about that rule is that the replacement rule isn&#39;t bounded by how far the first argument matched.  It seems like it might should be limited by that (?)

Yet this won&#39;t be 100% obvious, because it will be changing the *span* and not the *result*.  Trying to say **change [between &quot;(&quot; &quot;)&quot;] [...]** will be including the parentheses in the changed region, because you aren&#39;t changing the *generated value*, you&#39;re always changing the input.

So even if there were a limit, it would be a limit at the tail of the span...and the beginning would be the start of the span.  This boils down to there being a difference in using the consumed range of a rule vs. its product.

[Anyway, these changes are things anyone can hack on.](https://github.com/metaeducation/ren-c/commit/69ece73e75f762d2a9c1ca5cab577d9fabe1f396)</description>
    
    <lastBuildDate>Wed, 11 Aug 2021 07:43:32 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/mutation-and-uparse-winds-of-change/1556.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Mutation and UPARSE: Winds of CHANGE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Mutating operations in PARSE introduce a bag of issues that are a bit hard to manage.  Topaz decided to dismiss with it altogether.  I don't think one should be so quick to dismiss it, especially in a language which has an embrace of mutability kind of at its core.</p>
<p>Anyway...historically CHANGE has had the somewhat odd question of what its second argument represents.  The first is a rule that spans the region you want to replace.  And the second argument is...what, exactly?</p>
<p>You can do a literal:</p>
<pre><code>red&gt;&gt; str: "(aaa)"
red&gt;&gt; parse str ["(" [change [some "a"] "bbb"] ")"]
red&gt;&gt; str
== "(bbb)"
</code></pre>
<p>Note that literal isn't a rule...it wasn't matched against any "b" in the input.  You could have also calculated the replacement via a GROUP!</p>
<pre><code>red&gt;&gt; str: "(aaa)"
red&gt;&gt; parse str ["(" [change [some "a"] (reverse "xyz")] ")"]
red&gt;&gt; str
== "(zyx)"
</code></pre>
<p><strong>But what if you wanted to make the replacement a function of the data it was replacing?</strong></p>
<p>I thought I'd give a shot at a different way of thinking about this with UPARSE.  What if the second argument <em>was</em> a rule, just a value-bearing one?  And what if it processed the same input position that was given to the thing determining the span to replace?</p>
<p>Since (...) are value-bearing rules you have the choice of just dropping in a value with that:</p>
<pre><code>&gt;&gt; str: "(aaa)"
&gt;&gt; uparse str ["(" [change [some "a"] ("bbb")] ")"]
&gt;&gt; str
== "(bbb)"
</code></pre>
<p>For the cost of a couple more characters, you have the advantage of helping readers know that you are not matching that "bbb" against any input...but fabricating a value out of whole cloth.</p>
<p>But you're not just signaling that...because by making that second argument a <em>rule</em> slot, you can gather information.  We give the replacement rule the same position to look at.</p>
<p>Let's try a little differently.</p>
<pre><code>&gt;&gt; str: "(aba)"
&gt;&gt; uparse str [
    "("
    change [to ")"] collect [
        some ["a" keep ("A") | skip]
    ]
    ")"
]
&gt;&gt; str
== "(AA)"
</code></pre>
<p><strong>This shows the added flexibility of making the second argument fit into the model of "rule":  You can react to the input you are replacing.</strong></p>
<h2>Do Combinators (and PARSE) Need /LIMIT ?</h2>
<p>So one thing that's weird about that rule is that the replacement rule isn't bounded by how far the first argument matched.  It seems like it might should be limited by that (?)</p>
<p>Yet this won't be 100% obvious, because it will be changing the <em>span</em> and not the <em>result</em>.  Trying to say <strong>change [between "(" ")"] [...]</strong> will be including the parentheses in the changed region, because you aren't changing the <em>generated value</em>, you're always changing the input.</p>
<p>So even if there were a limit, it would be a limit at the tail of the span...and the beginning would be the start of the span.  This boils down to there being a difference in using the consumed range of a rule vs. its product.</p>
<p><a href="https://github.com/metaeducation/ren-c/commit/69ece73e75f762d2a9c1ca5cab577d9fabe1f396">Anyway, these changes are things anyone can hack on.</a></p>
          <p><a href="https://forum.rebol.info/t/mutation-and-uparse-winds-of-change/1556/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/mutation-and-uparse-winds-of-change/1556/1</link>
        <pubDate>Sat, 13 Mar 2021 17:06:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1556-1</guid>
        <source url="https://forum.rebol.info/t/mutation-and-uparse-winds-of-change/1556.rss">Mutation and UPARSE: Winds of CHANGE</source>
      </item>
  </channel>
</rss>

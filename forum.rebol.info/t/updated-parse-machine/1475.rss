<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Updated Parse Machine</title>
    <link>https://forum.rebol.info/t/updated-parse-machine/1475</link>
    <description>I&#39;ve an updated version of my [Parse Machine](https://gist.github.com/rgchris/b31ce985f5260e5f5bd0be76255669ab) (currently for R3C) that binds the whole operation to the SYSTEM/CODECS object.

Could use more thought about how it works, but I thought I&#39;d share in its current iteration as I&#39;m finding it increasingly useful.

# Features

* It somewhat standardizes a location for grammar rules
* It somewhat standardizes the FSM parsing method for any codecs written therein
* The above points together conceptually would permit mixing and matching grammars (e.g. CSS within Markup) as well as using fragments, though I&#39;d say there&#39;s likely more to figure out before that&#39;d all be practical.
* It somewhat separates grammar rules from the application logic that processes them, thus the same rules can be used for consuming whole files or on a token-by-token streaming basis
* Leans also to codecs rooted in the spirit of [*be liberal in what you accept*](https://en.wikipedia.org/wiki/Robustness_principle).

I&#39;ve used *somewhat* above to underscore that while this idea is opinionated about the conventions used, it does not dictate anything. There&#39;s still undiscovered patterns in there

# Limitations

* For efficiency, the machine only exists as a single module and can only institute one state value at a time, thus decoders built atop it either can&#39;t be called recursively or have to manage recursion explicitly
* The guts of the machine is a Parse WHILE loop which has to look up the current rule each iteration
* The state value is presumed to be a MAP! chosen for its less ornery handling of keys, not for its suitability/performance
* These two points would indicate that this approach could be optimized if it proves as useful as I believe it might
* The codec installer (PARSER/NEW) only has params for name, file extensions, options and grammar rules. It doesn&#39;t include encode/decode/identify functions. This could change to something like:

    ```plain
    parser/new &#39;name [
        suffixes: [...]
        identify?: func [...] [...]
        rules: [rule-1 [...] [...]]
        encode: func [...] [...]
        decode: func [...] [...]
    ]
    ```

    Although it&#39;s not certain that a codec may have it&#39;s own set of rules (e.g. &#39;markup can reuse &#39;html rules)

# Example

This example is a little contrived, but demonstrates how to install and deploy a grammar, and how flow can both be embedded in the grammar or in functions built around the Parse Machine API:

```plain
Rebol [
    Title: &quot;Test Parser Module&quot;
    Needs: [
        %parser.reb
    ]
]

make object! [
    parser/new &#39;abba [%.abba] [] [  ; the empty block is &#39;options
        is-a [
            #&quot;a&quot; (emit &#39;a-in-a)
            |
            #&quot;b&quot; (emit &#39;b-in-a-to-b use is-b)
            |
            #&quot;c&quot; (emit &#39;c?! stop)
            |
            skip (report [&quot;Misplaced &quot; to char! mark/1])
            |
            end (emit &#39;end-in-a use done)
        ]

        is-b [
            mark:
            #&quot;a&quot; (emit &#39;a-in-b-to-a use is-a) :mark
            |
            #&quot;b&quot; (emit &#39;b-in-b)
            |
            #&quot;c&quot; (emit &#39;c-in-b)
            |
            skip (report [&quot;Misplaced &quot; to char! mark/1])
            |
            end (emit &#39;end-in-b-to-a use is-a)
        ]

        done [
            end (emit &#39;done stop)
        ]
    ]

    system/codecs/abba/decode: func [
        blob [binary!]
        &lt;local&gt; state
    ][
        state: parser/init &#39;abba blob

        state/out: make block! 10
        state/errors: make block! 0

        state/emit: func [token] [
            append state/out token
        ]

        state/report: func [token] [
            append state/errors token
        ]

        parser/start

        case [
            not state/is-done [
                fail &quot;Blob did not meet strict ABBA requirements&quot;
            ]

            not empty? state/errors [
                probe state/errors
                fail &quot;Multiple ABBA errors&quot;
            ]

            &lt;else&gt; [
                state/out
            ]
        ]
    ]
]

probe equal? decode &#39;abba to binary! &quot;aba&quot;
[a-in-a b-in-a-to-b a-in-b-to-a a-in-a end-in-a done]

probe equal? decode &#39;abba to binary! &quot;bcab&quot;
[b-in-a-to-b c-in-b a-in-b-to-a a-in-a b-in-a-to-b end-in-b-to-a end-in-a done]

probe error? trap [decode &#39;abba to binary! &quot;abcd&quot;]
```</description>
    
    <lastBuildDate>Mon, 01 Feb 2021 06:22:23 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/updated-parse-machine/1475.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Updated Parse Machine</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>But this would raise a binding error:</p>
<pre><code>baz: [foo]
make object! compose/only [
    foo: 2
    bar: (baz)
]
=&gt; ** Baz already bound to context
</code></pre>
</blockquote>
<p>A problem with outlawing binding is that in the general case, code doesn't really know how much binding it has been through already.  That can be the loading process behind a module... or an abstract dialect that has slots in it where you can put code.</p>
<p>Just consider things like the <a href="https://github.com/hostilefork/whitespacers/blob/4f9e6ce0137658e3809dc24ac1bcc988f1119d83/ren-c/whitespace.reb#L353">OPERATION abstraction just added to Whitespace</a>.  You want the code in the body to be able to see library definitions you load in to the module as a whole--that foundation is done by a bunch of binding.  Then it's building a function behind the scenes...a process that means binding to locals and (synthesized) arguments.</p>
<p>While it's using "global" variables to access parts of the virtual machine state, this needs to change to something that's more narrow.  Maybe it gets at everything through one variable like your STATE approach, so it would have to say things like <strong>state/stack</strong>.  But as I mentioned that feels heavy-handed... I think it's nice to just have an implicit <strong>stack</strong> variable since messing with it is so common.  So broadening this set out to N implicit variables seems better, maybe just a few shorthands (e.g. STACK allowed instead of VM/STACK, but other things might require VM/XXX)</p>
<p>In such a layered world, what kind of rule could MAKE OBJECT! enforce to disallow binding?  What's the test it does on a block to say "hmm, this is too bound up".</p>
<aside class="quote no-group" data-username="rgchris" data-post="9" data-topic="1475">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>this is definitely half-baked</p>
</blockquote>
</aside>
<p>Yep!  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>But I'm <strong>very</strong> glad you are picking up involvement in this line of thinking.  Because having an <em>interest</em> in this topic at all seems to be pathologically absent from most of the Rebolverse (whereas I believe it is kind of <strong>the</strong> essential question of what the semantic basis for the language could possibly be...)</p>
<p>In terms of inch-by-inch progress: the baby step I've been trying for starters is to stop mutable binds from happening to CONST data.  Since functions make their bodies CONST, that means anything that would "bind implicitly" (such as MAKE OBJECT!) would have to be switched from BIND-style binding to IN-style binding.</p>
<p>There's actually still some violators, due to a lot of little technicalities in a very sprawling and organically evolved codebase.  But good news is that the compiler can catch the violations (just by making a C++ build).  There just have to be little "ignore the violation" tweaks in--for now--for some bits to run.</p>
<p>I hope you take a look through the <a href="https://forum.rebol.info/t/whitespace-interpreter-revisited/1482/5">steps to upgrade the Whitespace example</a> and some of the questions it raises.  Right out of the gate, it needed a variant of MAKE OBJECT! which didn't broadcast the bindings down through the body...and you can see how I did that <a href="https://github.com/hostilefork/whitespacers/commit/47d9c91505cd8922c170ed1ffbdf6d09df08ac59#diff-619ca62208d20bfa8042f5d5bec79e492afd7e59a84eadcc89e15e37e0aef660R64">in the CATEGORY implementation</a>.</p>
<p>This is a very excruciatingly manual form of what I talk about in "breaking MAKE OBJECT! into multiple operations".  <strong>But this is a very common need and people shouldn't have to write their own version of it.</strong></p>
<p>I doubt the needs are all that different from your Parse Machine.  But the advantage the whitespace case has is that it's a rather easy-to-understand and documented scenario that can be compared with implementations in other languages.  So I hope you can chime in on helping to solve these fundamental and mission-critical problems...what are the steps, what do we call them, and how does it all plug together to make a compelling story.</p>
<p>If a Redbol can't solve problems like this, then the big-picture promises are basically snake oil.  People are merely going down a Turing tarpit of making weirdly brittle spaghetti code in Rebol--simply because it can't <em>stop</em> you from solving a problem using it (not because it's providing material support).   I think Ren-C stands on reasonable ground to build the Actual Value solution.  But it needs your help.</p>
          <p><a href="https://forum.rebol.info/t/updated-parse-machine/1475/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/updated-parse-machine/1475/10</link>
        <pubDate>Mon, 01 Feb 2021 05:48:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1475-10</guid>
        <source url="https://forum.rebol.info/t/updated-parse-machine/1475.rss">Updated Parse Machine</source>
      </item>
      <item>
        <title>Updated Parse Machine</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1475">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>In any case...my point stands, that you likely only intended here to <strong>bind rules parser</strong>.</p>
</blockquote>
</aside>
<p>Another thought—and this is definitely half-baked, but in the same vein as CONSTANT/MUTABLE, I'd prefer to get an error when an implied binding operation happens on a 'locked' block. In this case, I might say <strong>bind/lock rules parser</strong> and get an error when the object tries to bind. Or it may be that blocks in source get one shot at implicit binding thus when you reference the block later on after reducing/composing, you get an error. Would need to think about the implications.</p>
<p>e.g.</p>
<p>This is fine:</p>
<pre><code class="lang-nohighlight">make object! [
    foo: 1
    bar: [foo]
]
</code></pre>
<p>But this would raise a binding error:</p>
<pre><code class="lang-nohighlight">baz: [foo]
make object! compose/only [
     foo: 2
     bar: (baz)
]
=&gt; ** Baz already bound to context
</code></pre>
          <p><a href="https://forum.rebol.info/t/updated-parse-machine/1475/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/updated-parse-machine/1475/9</link>
        <pubDate>Sun, 31 Jan 2021 14:44:14 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1475-9</guid>
        <source url="https://forum.rebol.info/t/updated-parse-machine/1475.rss">Updated Parse Machine</source>
      </item>
      <item>
        <title>Updated Parse Machine</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1475">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But parse machine seems like it would be a good test, and could push definition of these sorts of features forward.</p>
</blockquote>
</aside>
<p>It should indeed be a good test and could be way to solve the recursion issue. I presume if it encountered a word not in the object, it'd revert to the word's containing context?</p>
<p>If there's one advantage to using a MAP!*, it's that if you do use overlapping grammars**, you don't have to preset the object to use all the variables used by each grammar.</p>
<p>*<em>but I suppose can use a map within an object</em></p>
<p>**<em>latest monstrosity encountered today comes from Google: a semantic information schema encoded as JSON contained within the HTML content of a MIME-based email all designed to make your email look better in the Promotions tab in Gmail—data format mad-libs!</em></p>
          <p><a href="https://forum.rebol.info/t/updated-parse-machine/1475/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/updated-parse-machine/1475/8</link>
        <pubDate>Fri, 29 Jan 2021 22:47:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1475-8</guid>
        <source url="https://forum.rebol.info/t/updated-parse-machine/1475.rss">Updated Parse Machine</source>
      </item>
      <item>
        <title>Updated Parse Machine</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>Just haven't had a chance to think about it yet.</p>
          <p><a href="https://forum.rebol.info/t/updated-parse-machine/1475/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/updated-parse-machine/1475/7</link>
        <pubDate>Fri, 29 Jan 2021 18:06:14 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1475-7</guid>
        <source url="https://forum.rebol.info/t/updated-parse-machine/1475.rss">Updated Parse Machine</source>
      </item>
      <item>
        <title>Updated Parse Machine</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="5" data-topic="1475">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>My inclination though is to reach for <strong>map!</strong> instead</p>
</blockquote>
</aside>
<p>BIND does not currently work on MAP!.  So prior to the existence of PARSE/INSIDE, you wouldn't be able to use it in this way.</p>
<p>Is there a reason you haven't reacted to PARSE/INSIDE, when it has demonstrated a novel new feature I'd think would be interesting to you--given that you try things like this (and want to be able to separate parse rules across contexts)?</p>
          <p><a href="https://forum.rebol.info/t/updated-parse-machine/1475/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/updated-parse-machine/1475/6</link>
        <pubDate>Fri, 29 Jan 2021 17:39:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1475-6</guid>
        <source url="https://forum.rebol.info/t/updated-parse-machine/1475.rss">Updated Parse Machine</source>
      </item>
      <item>
        <title>Updated Parse Machine</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1475">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>In any case...my point stands, that you likely only intended here to <strong>bind rules parser</strong>. Yet with the historic workings of MAKE OBJECT!, when you do this with a COMPOSE and the block becomes a child of the object body, you will get the additional bindings of <code>name</code>, <code>suffixes</code>, <code>identify?</code>, <code>rules</code>, <code>options</code>, <code>decode</code>, <code>encode</code>... etc.</p>
</blockquote>
</aside>
<p>Ah, I get what you mean. Yep, that did catch me out. My inclination though is to reach for <strong>map!</strong> instead as it has no context and potentially doesn't require a preset list of fields, or another way of designating the rule (e.g. <strong>[rule: bind 'rule 'some-other-word-in-the-parent-context-that-isnt-in-the-object]</strong>—not ideal and a more nuanced constructor would be better in this instance). This goes back once again to thinking about what objects are for—1) single use, code-grouping objects such as this vs. 2) prototypes representing things in the classical object-oriented sense—which I'd still prefer to see prioritized. Again, I'm sympathetic to the need for different constructors, but still have reservations about the implications of <strong>my/method</strong> as a solution to binding when cloning. Anyways, this is more a response to <a href="https://forum.rebol.info/t/breaking-make-object-into-component-operations/1442">that topic</a> than this one.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1475">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Imagine adding <code>mark</code> to this list in your example...the user code bound to it could wind up corrupting state it wasn't supposed to see.</p>
</blockquote>
</aside>
<p>Specific usage of <strong>mark</strong> here is a behavioural legacy and a mistake, the convention I'm looking to use here would be <strong>state/mark</strong>. I'm not sure I see the <strong>state</strong> basket as being heavy handed, I think it's a reasonable response to the complexity of what I'm trying to achieve. Could well also be my familiarity bias too, but for now it's workable as a means to explore the Parse Machine concept to a conclusion.</p>
          <p><a href="https://forum.rebol.info/t/updated-parse-machine/1475/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/updated-parse-machine/1475/5</link>
        <pubDate>Fri, 29 Jan 2021 17:08:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1475-5</guid>
        <source url="https://forum.rebol.info/t/updated-parse-machine/1475.rss">Updated Parse Machine</source>
      </item>
      <item>
        <title>Updated Parse Machine</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="rgchris" data-post="3" data-topic="1475">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1475">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>So if the <strong>rules</strong> use the word "name" it would be redirected into this object</p>
</blockquote>
</aside>
<p>The convention I'm shooting for here is that you use the <strong>state</strong> map to track any variables.</p>
</blockquote>
</aside>
<p>That avoids naming conflicts, though it's a bit heavy-handed.  And even in this case it's not true of all variables you're using, e.g. <strong>mark</strong> has potential to collide.  <em>(BTW: Ren-C took MARK and SEEK as keywords.  There are several reasons, including that I never liked SET-WORD! and GET-WORD! for the purpose.)</em></p>
<p>In any case...my point stands, that you likely only intended here to <strong>bind rules parser</strong>.  Yet with the historic workings of MAKE OBJECT!, when you do this with a COMPOSE and the block becomes a child of the object body, you will get the additional bindings of <code>name</code>, <code>suffixes</code>, <code>identify?</code>, <code>rules</code>, <code>options</code>, <code>decode</code>, <code>encode</code>... etc.  Imagine adding <code>mark</code> to this list in your example...the user code bound to it could wind up corrupting state it wasn't supposed to see.</p>
<aside class="quote no-group" data-username="rgchris" data-post="3" data-topic="1475">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>Yes, though as <strong>parser</strong> only has one state value at a time, any rule 'outside' the binding just needs access to <strong>parser/state</strong> to access parsing details.</p>
</blockquote>
</aside>
<p>When people make these little "parse machine" snippets, I'd imagine they'd like to be able to take for granted that the parse machine engine could interpret those snippets without having to be given all of them up front in a block.  Especially if the snippet might be generated dynamically.  It would be nice if you could be on more of an even turf with the keywords of PARSE in this respect.</p>
<p>To try and move in this direction, I've gone ahead and pushed through PARSE/INSIDE:</p>
<p><a href="https://github.com/metaeducation/ren-c/blob/fa1050e1280942fce6adb0e75de61d6239108fb1/tests/parse/parse-inside.test.reb">%parse-inside.test.reb</a></p>
<p>The feature itself is fairly small, but the supporting commits to get it working with some level of efficiency were exhausting to look at and think about.  So there's not much in the way of tests.</p>
<p>But parse machine seems like it would be a good test, and could push definition of these sorts of features forward.</p>
<p>This is not the final form the feature would likely take.  It should be able to give bindings that apply more granularly.</p>
          <p><a href="https://forum.rebol.info/t/updated-parse-machine/1475/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/updated-parse-machine/1475/4</link>
        <pubDate>Fri, 29 Jan 2021 08:09:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1475-4</guid>
        <source url="https://forum.rebol.info/t/updated-parse-machine/1475.rss">Updated Parse Machine</source>
      </item>
      <item>
        <title>Updated Parse Machine</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1475">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>So if the <strong>rules</strong> use the word "name" it would be redirected into this object</p>
</blockquote>
</aside>
<p>The convention I'm shooting for here is that you use the <strong>state</strong> map to track any variables. As <strong>state</strong> is a consistent value through all grammars, every grammar shares the same view on, well, state. There's a few aspects where adhering to conventions such as this offer some insight in to what the system might be capable of.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1475">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Because if someone uses a component <strong>subrule</strong> that isn't a direct descendant of the <strong>rules</strong>, they presumably want access to the elements of <strong>parser</strong> as well.</p>
</blockquote>
</aside>
<p>Yes, though as <strong>parser</strong> only has one state value at a time, any rule 'outside' the binding just needs access to <strong>parser/state</strong> to access parsing details.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1475">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Retaking the term USE in DO-oriented code is one of those uncomfortable-yet-heretically-foundational ideas...</p>
</blockquote>
</aside>
<p>It's certainly something I've considered. Red doesn't have <strong>use</strong> and a common pattern is to create namespaces which are kind of what <strong>module!</strong> is for. Another unstated goal here is to make the code surrounding these grammars as basic as possible, to make them maintainable and optimize-able.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1475">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>jump this particular codebase to mainline Ren-C</p>
</blockquote>
</aside>
<p>I'm a little less familiar with latest Ren-C than I was, especially the Parse changes. It's not a complex module, but it may take a bit of effort demonstrating something useful.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1475">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>had been removed from R3C</p>
</blockquote>
</aside>
<p>There's a few such things that I've come across. Working to get them into tests.</p>
          <p><a href="https://forum.rebol.info/t/updated-parse-machine/1475/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/updated-parse-machine/1475/3</link>
        <pubDate>Tue, 26 Jan 2021 13:42:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1475-3</guid>
        <source url="https://forum.rebol.info/t/updated-parse-machine/1475.rss">Updated Parse Machine</source>
      </item>
      <item>
        <title>Updated Parse Machine</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I don't completely follow what it's <em>for</em>.  But it looks like a very good non-trivial use of binding to study and try to make better.</p>
<p>For instance, looking at:</p>
<pre><code>set in system/codecs grammar make object! compose/only [  ; why I like ((splice))
    name: quote (grammar)  ; today, this could be done as name: '(grammar)
    suffixes: (suffixes)
    identify?: _
    rules: (bind rules parser)  ; v-- see remarks below
    options: (options)
    decode: _
    encode: _
]
</code></pre>
<p>Here's one of those situations where <strong>(bind rules parser)</strong> not only mutably binds, but it yields something that gets further bound into the <code>make object!</code>.  So if the <strong>rules</strong> use the word "name" it would be redirected into this object.  Which is presumably not what you wanted.  It's an example of the need for the ideas in <a href="https://forum.rebol.info/t/breaking-make-object-into-component-operations/1442">"Breaking MAKE OBJECT! into Multiple Operations"</a>.</p>
<p>There's also an aspect here of <a href="https://forum.rebol.info/t/separating-parse-rules-across-contexts/313">"Separating Parse Rules Across Contexts"</a>.  Because if someone uses a component <strong>subrule</strong> that isn't a direct descendant of the <strong>rules</strong>, they presumably want access to the elements of <strong>parser</strong> as well.</p>
<p>The idea of having bindings that only apply to the GROUP! portions of code in a PARSE is a likely desired feature as well.</p>
<p>Retaking the term USE in DO-oriented code is one of those uncomfortable-yet-heretically-foundational ideas...and it makes you wonder exactly what the prescribed way of subverting that is.  (Do you always go through LIB/XXX?  How do people know what's bound out from under them and what isn't?<br>
I've wondered about this with things like adding keywords to PARSE...each new keyword you add runs the risk of breaking a use for another purpose...)</p>
<blockquote>
<p>I've an updated version of my <a href="https://gist.github.com/rgchris/b31ce985f5260e5f5bd0be76255669ab">Parse Machine </a> (currently for R3C)</p>
</blockquote>
<p>If you'd be willing to go ahead and jump this particular codebase to mainline Ren-C, and work up some tests for it, then it could be a lens for how we look at evolving these features.  I'd be able to help keep it running...so changes wouldn't be as much a hassle.</p>
<p>It's definitely not throwing softballs--which I like.  This is supposed to be a language you can extend, and that shouldn't entail <em>"write an entirely new evaluator and PARSE command if you want something that deviates a bit"</em>.</p>
<blockquote>
<p><code>keep []  ; force collect to return a block</code></p>
</blockquote>
<p>I thought the "null if empty" optimization had been removed from R3C.  In any case, <code>COLLECT</code> with no KEEPs currently returns an empty block... while <code>COLLECT*</code> returns NULL.</p>
          <p><a href="https://forum.rebol.info/t/updated-parse-machine/1475/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/updated-parse-machine/1475/2</link>
        <pubDate>Tue, 26 Jan 2021 03:45:09 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1475-2</guid>
        <source url="https://forum.rebol.info/t/updated-parse-machine/1475.rss">Updated Parse Machine</source>
      </item>
      <item>
        <title>Updated Parse Machine</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I've an updated version of my <a href="https://gist.github.com/rgchris/b31ce985f5260e5f5bd0be76255669ab">Parse Machine</a> (currently for R3C) that binds the whole operation to the SYSTEM/CODECS object.</p>
<p>Could use more thought about how it works, but I thought I'd share in its current iteration as I'm finding it increasingly useful.</p>
<h1>Features</h1>
<ul>
<li>It somewhat standardizes a location for grammar rules</li>
<li>It somewhat standardizes the FSM parsing method for any codecs written therein</li>
<li>The above points together conceptually would permit mixing and matching grammars (e.g. CSS within Markup) as well as using fragments, though I'd say there's likely more to figure out before that'd all be practical.</li>
<li>It somewhat separates grammar rules from the application logic that processes them, thus the same rules can be used for consuming whole files or on a token-by-token streaming basis</li>
<li>Leans also to codecs rooted in the spirit of <a href="https://en.wikipedia.org/wiki/Robustness_principle"><em>be liberal in what you accept</em></a>.</li>
</ul>
<p>I've used <em>somewhat</em> above to underscore that while this idea is opinionated about the conventions used, it does not dictate anything. There's still undiscovered patterns in there</p>
<h1>Limitations</h1>
<ul>
<li>
<p>For efficiency, the machine only exists as a single module and can only institute one state value at a time, thus decoders built atop it either can't be called recursively or have to manage recursion explicitly</p>
</li>
<li>
<p>The guts of the machine is a Parse WHILE loop which has to look up the current rule each iteration</p>
</li>
<li>
<p>The state value is presumed to be a MAP! chosen for its less ornery handling of keys, not for its suitability/performance</p>
</li>
<li>
<p>These two points would indicate that this approach could be optimized if it proves as useful as I believe it might</p>
</li>
<li>
<p>The codec installer (PARSER/NEW) only has params for name, file extensions, options and grammar rules. It doesn't include encode/decode/identify functions. This could change to something like:</p>
<pre><code class="lang-nohighlight">parser/new 'name [
    suffixes: [...]
    identify?: func [...] [...]
    rules: [rule-1 [...] [...]]
    encode: func [...] [...]
    decode: func [...] [...]
]
</code></pre>
<p>Although it's not certain that a codec may have it's own set of rules (e.g. 'markup can reuse 'html rules)</p>
</li>
</ul>
<h1>Example</h1>
<p>This example is a little contrived, but demonstrates how to install and deploy a grammar, and how flow can both be embedded in the grammar or in functions built around the Parse Machine API:</p>
<pre><code class="lang-nohighlight">Rebol [
    Title: "Test Parser Module"
    Needs: [
        %parser.reb
    ]
]

make object! [
    parser/new 'abba [%.abba] [] [  ; the empty block is 'options
        is-a [
            #"a" (emit 'a-in-a)
            |
            #"b" (emit 'b-in-a-to-b use is-b)
            |
            #"c" (emit 'c?! stop)
            |
            skip (report ["Misplaced " to char! mark/1])
            |
            end (emit 'end-in-a use done)
        ]

        is-b [
            mark:
            #"a" (emit 'a-in-b-to-a use is-a) :mark
            |
            #"b" (emit 'b-in-b)
            |
            #"c" (emit 'c-in-b)
            |
            skip (report ["Misplaced " to char! mark/1])
            |
            end (emit 'end-in-b-to-a use is-a)
        ]

        done [
            end (emit 'done stop)
        ]
    ]

    system/codecs/abba/decode: func [
        blob [binary!]
        &lt;local&gt; state
    ][
        state: parser/init 'abba blob

        state/out: make block! 10
        state/errors: make block! 0

        state/emit: func [token] [
            append state/out token
        ]

        state/report: func [token] [
            append state/errors token
        ]

        parser/start

        case [
            not state/is-done [
                fail "Blob did not meet strict ABBA requirements"
            ]

            not empty? state/errors [
                probe state/errors
                fail "Multiple ABBA errors"
            ]

            &lt;else&gt; [
                state/out
            ]
        ]
    ]
]

probe equal? decode 'abba to binary! "aba"
[a-in-a b-in-a-to-b a-in-b-to-a a-in-a end-in-a done]

probe equal? decode 'abba to binary! "bcab"
[b-in-a-to-b c-in-b a-in-b-to-a a-in-a b-in-a-to-b end-in-b-to-a end-in-a done]

probe error? trap [decode 'abba to binary! "abcd"]
</code></pre>
          <p><a href="https://forum.rebol.info/t/updated-parse-machine/1475/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/updated-parse-machine/1475/1</link>
        <pubDate>Mon, 25 Jan 2021 17:23:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1475-1</guid>
        <source url="https://forum.rebol.info/t/updated-parse-machine/1475.rss">Updated Parse Machine</source>
      </item>
  </channel>
</rss>

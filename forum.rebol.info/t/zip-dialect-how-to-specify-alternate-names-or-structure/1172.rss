<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>ZIP dialect - How to specify alternate names or structure?</title>
    <link>https://forum.rebol.info/t/zip-dialect-how-to-specify-alternate-names-or-structure/1172</link>
    <description>The ZIP dialect documentation outlines the following options, where a FILE! signifies the source of data you want to compress.  But it doesn&#39;t seem to have a way to specify an alternative naming or structure to your files.  Whatever you are compressing has to already be laid out with the names and directories that you want the archive to compress as:

        you can zip a single file:
            zip %new-zip.zip %my-file

        a block of files:
            zip %new-zip.zip [%file-1.txt %file-2.exe]

        a block of data (binary!/text!) and files:
            zip %new-zip.zip [%my-file &quot;my data&quot;]

        a entire directory:
            zip/deep %new-zip.zip %my-directory/

        from a url:
            zip %new-zip.zip ftp://192.168.1.10/my-file.txt

        any combination of these:
            zip/deep %new-zip.zip  [
                %readme.txt &quot;An example&quot;
                ftp://192.168.1.10/my-file.txt
                %my-directory
            ]

*(I&#39;ll also note that the /DEEP option seems it should apply to individual directories; you may want one directory to be zipped deeply and not others.)*

One way of working around the naming problem is to read the data yourself; which has a downside of making you read all the files you&#39;re working with into memory at the start of the zip (vs letting it read them one at a time as it goes along, possibly even doing streaming compression):

     zip compose [%new-name.dat (read %old-name.dat)]

Something seems a little tenuous to me about the pattern **%filename &quot;data&quot;** meaning the file is just a name, while **%filename** means the file is actually read.  You could use another datatype like ISSUE! for naming, which could perhaps be seen as like a &quot;label&quot;:

     zip [#new-name.dat %old-name.dat]

But that would be awkward on the unzip side, where FILE! is a pretty clean label there:

        you can uncompress to a directory (created if it does not exist):
            unzip %my-new-dir %my-zip-file.zip

        or a block:
            unzip my-block %my-zip-file.zip

            my-block == [%file-1.txt #{...} %file-2.exe #{...}]

**I think it should be the case that if you zip something up, then unzip it to a block...you should be able to use the unzipped block to re-generate the same archive again with zip.**  That seems a pretty good design goal.

So perhaps FILE! is always a label, and @ could be used for specifying contents other than the file itself?

    data: #{AEBDAE}
    zip [%new-name.dat @(%old.dat) %ae.dat @data %README.md @({Hello}) %as-is.txt]

Athough plain GROUP! would be cleaner...

    data: #{AEBDAE}
    zip [%new-name.dat (%old.dat) %ae.dat (data) %README.md ({Hello}) %as-is.txt]

That could get confusing if using COMPOSE to put the file names in non-literally, however.  If not for the limitations of ANY-WORD!, it seems this would be better as SET-WORD!

    data: #{AEBDAE}
    zip [new-name.dat: %old.dat ae.dat: data README.md: {Hello} as-is.txt: auto]

Anyway, the point is that today the only way to do it is if you put the filename and then COMPOSE in.  I&#39;m going to do that for the problem I&#39;m looking at right now, but wanted to raise the question of how this might improve.</description>
    
    <lastBuildDate>Tue, 04 Jun 2019 05:27:05 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/zip-dialect-how-to-specify-alternate-names-or-structure/1172.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>ZIP dialect - How to specify alternate names or structure?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I noticed another things about the current state of the ZIP dialect, which is that if you use a full path it actually stores the path.  For a single file you can again work around that with the compose <strong>[%new-name.dat (read %some/location/you/want/to/forget.dat)]</strong> strategy.  But if you want ZIP to be recursing deeply into a directory, then that's not an option.</p>
<p>The easiest thing to do is to go ahead and organize a directory structure how you want it, and then say "zip that whole directory, as is".  Though that's inefficient.  But perhaps there's a way to virtually create an organization through imperative steps vs. having a specification which declaratively lays out the entire mapping...</p>
<p>In any case, there were some bugs in the ZIP as it was which are now fixed.  But it does seem to raise a number of questions.  Maybe there's some other declarative ZIP tool to look at for inspiration.</p>
          <p><a href="https://forum.rebol.info/t/zip-dialect-how-to-specify-alternate-names-or-structure/1172/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/zip-dialect-how-to-specify-alternate-names-or-structure/1172/2</link>
        <pubDate>Tue, 04 Jun 2019 05:27:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1172-2</guid>
        <source url="https://forum.rebol.info/t/zip-dialect-how-to-specify-alternate-names-or-structure/1172.rss">ZIP dialect - How to specify alternate names or structure?</source>
      </item>
      <item>
        <title>ZIP dialect - How to specify alternate names or structure?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The ZIP dialect documentation outlines the following options, where a FILE! signifies the source of data you want to compress.  But it doesn't seem to have a way to specify an alternative naming or structure to your files.  Whatever you are compressing has to already be laid out with the names and directories that you want the archive to compress as:</p>
<pre><code>    you can zip a single file:
        zip %new-zip.zip %my-file

    a block of files:
        zip %new-zip.zip [%file-1.txt %file-2.exe]

    a block of data (binary!/text!) and files:
        zip %new-zip.zip [%my-file "my data"]

    a entire directory:
        zip/deep %new-zip.zip %my-directory/

    from a url:
        zip %new-zip.zip ftp://192.168.1.10/my-file.txt

    any combination of these:
        zip/deep %new-zip.zip  [
            %readme.txt "An example"
            ftp://192.168.1.10/my-file.txt
            %my-directory
        ]
</code></pre>
<p><em>(I'll also note that the /DEEP option seems it should apply to individual directories; you may want one directory to be zipped deeply and not others.)</em></p>
<p>One way of working around the naming problem is to read the data yourself; which has a downside of making you read all the files you're working with into memory at the start of the zip (vs letting it read them one at a time as it goes along, possibly even doing streaming compression):</p>
<pre><code> zip compose [%new-name.dat (read %old-name.dat)]
</code></pre>
<p>Something seems a little tenuous to me about the pattern <strong>%filename "data"</strong> meaning the file is just a name, while <strong>%filename</strong> means the file is actually read.  You could use another datatype like ISSUE! for naming, which could perhaps be seen as like a "label":</p>
<pre><code> zip [#new-name.dat %old-name.dat]
</code></pre>
<p>But that would be awkward on the unzip side, where FILE! is a pretty clean label there:</p>
<pre><code>    you can uncompress to a directory (created if it does not exist):
        unzip %my-new-dir %my-zip-file.zip

    or a block:
        unzip my-block %my-zip-file.zip

        my-block == [%file-1.txt #{...} %file-2.exe #{...}]
</code></pre>
<p><strong>I think it should be the case that if you zip something up, then unzip it to a block...you should be able to use the unzipped block to re-generate the same archive again with zip.</strong>  That seems a pretty good design goal.</p>
<p>So perhaps FILE! is always a label, and @ could be used for specifying contents other than the file itself?</p>
<pre><code>data: #{AEBDAE}
zip [%new-name.dat @(%old.dat) %ae.dat @data %README.md @({Hello}) %as-is.txt]
</code></pre>
<p>Athough plain GROUP! would be cleaner...</p>
<pre><code>data: #{AEBDAE}
zip [%new-name.dat (%old.dat) %ae.dat (data) %README.md ({Hello}) %as-is.txt]
</code></pre>
<p>That could get confusing if using COMPOSE to put the file names in non-literally, however.  If not for the limitations of ANY-WORD!, it seems this would be better as SET-WORD!</p>
<pre><code>data: #{AEBDAE}
zip [new-name.dat: %old.dat ae.dat: data README.md: {Hello} as-is.txt: auto]
</code></pre>
<p>Anyway, the point is that today the only way to do it is if you put the filename and then COMPOSE in.  I'm going to do that for the problem I'm looking at right now, but wanted to raise the question of how this might improve.</p>
          <p><a href="https://forum.rebol.info/t/zip-dialect-how-to-specify-alternate-names-or-structure/1172/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/zip-dialect-how-to-specify-alternate-names-or-structure/1172/1</link>
        <pubDate>Mon, 03 Jun 2019 19:46:55 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1172-1</guid>
        <source url="https://forum.rebol.info/t/zip-dialect-how-to-specify-alternate-names-or-structure/1172.rss">ZIP dialect - How to specify alternate names or structure?</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Hooking FAIL and PANIC...should DO of an ERROR! be &quot;unhookable&quot;?</title>
    <link>https://forum.rebol.info/t/hooking-fail-and-panic-should-do-of-an-error-be-unhookable/484</link>
    <description>One interesting feature that&#39;s coming online a bit here and there is the ability to hook *some* panics and *some* errors.

The way the hook is done is that there are native PANIC and FAIL functions which have trivial implementations.  C code calls out to these natives by using the evaluator.  Then, early in the bootstrap process these natives are HIJACK&#39;d with usermode implementations.  If your app then desires, it can further HIJACK those hijackings with adaptations that augment or replace the functionality with additional code.

In the case of panics, I say only &quot;some&quot; are hookable, because panics originating from the core need to terminate the executable.  *(They&#39;re a sort of &quot;blue screen of death&quot;, implying that continuing to run Rebol code would be unwise due to some fundamental corruption or problem.)*  But there are also panics which could be safely recovered from, or have things write to log files before exiting, e.g. direct calls to the PANIC or PANIC-VALUE natives from usermode code.

*(It may be that extensions using the rebPanic() API would mean the &quot;softer&quot; form of panic, or maybe they too have some kind of corruption of their state they don&#39;t want you to recover from.  Maybe there need to be two different APIs...what&#39;s more serious than a failure, but less serious than a panic?  rebProblem()?)*

In the case of errors, I say only &quot;some&quot; are hookable because there **must** be a way to invoke an error without it being hooked.  Consider today&#39;s implementation of FAIL, which will construct an error object out of whatever you pass it (if it isn&#39;t an ERROR! in the first place) and calls DO on it.  If that DO turned around and called into the fail hook again, you&#39;d have an infinite regress.

One simple answer is to say that DO of an ERROR! is an *unhookable failure*.  That would mean no longer casually writing **do make error! ...**.  But if we assume those people are willing to change that to **fail make error! ...** then this seems the easiest way to get the baseline unhookable error.  And since there&#39;s no appearance of FAIL at the callsite, people wouldn&#39;t be too surprised that hijacking FAIL wouldn&#39;t find out about these particular errors.

At one point, I&#39;d made DO not accept ERROR!s, because FAIL seemed much better at the callsite.  But I realized the only thing taking the ERROR! parameter away would be doing would be raising an &quot;invalid type&quot; error, obscuring what the error was.  :-/  So when that was combined ultimately with the idea that FAIL needed some way to invoke the errors that it was building, I put it back.

So is this a good answer?  That DO of an ERROR! is the low level mechanic for error delivery used in functions like FAIL which you will not get hooked when you HIJACK fail?  It makes some sense to me, but it means that almost no one should be using DO of an ERROR!, unless you are writing a FAIL implementation.

What worries me is if people don&#39;t get on board with this, or find it too hard to understand that DO of an ERROR! is not how you should be error&#39;ing, then someone who wants to hook just FAIL would start hooking DO &quot;just to be sure&quot; in case it was passed an ERROR!.  :-/</description>
    
    <lastBuildDate>Sat, 02 Oct 2021 19:56:31 +0000</lastBuildDate>
    <category>Errors</category>
    <atom:link href="https://forum.rebol.info/t/hooking-fail-and-panic-should-do-of-an-error-be-unhookable/484.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Hooking FAIL and PANIC...should DO of an ERROR! be &quot;unhookable&quot;?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>One interesting feature that's coming online a bit here and there is the ability to hook <em>some</em> panics and <em>some</em> errors.</p>
<p>The way the hook is done is that there are native PANIC and FAIL functions which have trivial implementations.  C code calls out to these natives by using the evaluator.  Then, early in the bootstrap process these natives are HIJACK'd with usermode implementations.  If your app then desires, it can further HIJACK those hijackings with adaptations that augment or replace the functionality with additional code.</p>
<p>In the case of panics, I say only "some" are hookable, because panics originating from the core need to terminate the executable.  <em>(They're a sort of "blue screen of death", implying that continuing to run Rebol code would be unwise due to some fundamental corruption or problem.)</em>  But there are also panics which could be safely recovered from, or have things write to log files before exiting, e.g. direct calls to the PANIC or PANIC-VALUE natives from usermode code.</p>
<p><em>(It may be that extensions using the rebPanic() API would mean the "softer" form of panic, or maybe they too have some kind of corruption of their state they don't want you to recover from.  Maybe there need to be two different APIs...what's more serious than a failure, but less serious than a panic?  rebProblem()?)</em></p>
<p>In the case of errors, I say only "some" are hookable because there <strong>must</strong> be a way to invoke an error without it being hooked.  Consider today's implementation of FAIL, which will construct an error object out of whatever you pass it (if it isn't an ERROR! in the first place) and calls DO on it.  If that DO turned around and called into the fail hook again, you'd have an infinite regress.</p>
<p>One simple answer is to say that DO of an ERROR! is an <em>unhookable failure</em>.  That would mean no longer casually writing <strong>do make error! ...</strong>.  But if we assume those people are willing to change that to <strong>fail make error! ...</strong> then this seems the easiest way to get the baseline unhookable error.  And since there's no appearance of FAIL at the callsite, people wouldn't be too surprised that hijacking FAIL wouldn't find out about these particular errors.</p>
<p>At one point, I'd made DO not accept ERROR!s, because FAIL seemed much better at the callsite.  But I realized the only thing taking the ERROR! parameter away would be doing would be raising an "invalid type" error, obscuring what the error was.  :-/  So when that was combined ultimately with the idea that FAIL needed some way to invoke the errors that it was building, I put it back.</p>
<p>So is this a good answer?  That DO of an ERROR! is the low level mechanic for error delivery used in functions like FAIL which you will not get hooked when you HIJACK fail?  It makes some sense to me, but it means that almost no one should be using DO of an ERROR!, unless you are writing a FAIL implementation.</p>
<p>What worries me is if people don't get on board with this, or find it too hard to understand that DO of an ERROR! is not how you should be error'ing, then someone who wants to hook just FAIL would start hooking DO "just to be sure" in case it was passed an ERROR!.  :-/</p>
          <p><a href="https://forum.rebol.info/t/hooking-fail-and-panic-should-do-of-an-error-be-unhookable/484/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/hooking-fail-and-panic-should-do-of-an-error-be-unhookable/484/1</link>
        <pubDate>Sun, 21 Jan 2018 12:53:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-484-1</guid>
        <source url="https://forum.rebol.info/t/hooking-fail-and-panic-should-do-of-an-error-be-unhookable/484.rss">Hooking FAIL and PANIC...should DO of an ERROR! be &quot;unhookable&quot;?</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Isotopes and Divergence in Function Spec Dialect</title>
    <link>https://forum.rebol.info/t/isotopes-and-divergence-in-function-spec-dialect/1667</link>
    <description>Right now we have a couple of dark alleys in the function spec dialect.

## &quot;Divergence&quot; (always throws, fails, etc....never returns)

Today&#39;s vocabulary word is [divergent functions](https://en.wikipedia.org/wiki/Divergence_(computer_science))...when a function never returns a result in a &quot;normal&quot; way.

All functions that can FAIL or be THROWN or RETURN&#39;d across have divergence as an *option* (which is, right now, all functions).  But it becomes an issue of what to say when there really is no type a function *ever* returns...what do you put in the spec?

Lately I&#39;ve been using just **`[return: []]`**.  That might look perfect...by saying there&#39;s no types you can return, then any return would generate an error.

But Ren-C is complicated... you&#39;ve got things like invisible functions, as well as BAD-WORD! isotopes.  And NULL which is a bit of a pickle too--**[I&#39;ve written about revisiting `&lt;opt&gt;` in its own post.](https://forum.rebol.info/t/revisiting-opt-in-the-func-spec-dialect/1658)**

## What About Isotopes?

If you say your function returns **[bad-word!]**, that doesn&#39;t cover isotope forms.

Right now, there&#39;s no type checking on isotopes.  Any function can return any isotope right now--they&#39;re outside of type checking.

We could narrow it down to just certain isotopes by putting them in the spec as BAD-WORD!s, like **[integer! ~none~]**...though there&#39;s no place to store a list of such isotopes at present :-/

Returning **[&lt;opt&gt; any-value!]** is already pretty wordy.  Having to say **[&lt;opt&gt; &lt;isotope&gt; any-value!]** is a hassle.  The reasoning I had for letting any function return any isotope was that they&#39;re close enough to being errors anyway to a caller...so erroring in the type checking didn&#39;t serve that much of a point, for the wordiness.

## What About Invisibility?

You can&#39;t say plain RETURN these days with no argument unless your function has **`&lt;invisible&gt;`** in the return spec (or if it has **`return: &lt;none&gt;`** which just ignores whatever you return anyway and gives back NONE).  That&#39;s another weird notational tic.

I just wanted to mention these issues.  No great answers right now, so we&#39;ve just got the mediocre answers.  It&#39;s working, so...not the biggest priority.</description>
    
    <lastBuildDate>Mon, 16 Aug 2021 02:35:54 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/isotopes-and-divergence-in-function-spec-dialect/1667.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Isotopes and Divergence in Function Spec Dialect</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Right now we have a couple of dark alleys in the function spec dialect.</p>
<h2>"Divergence" (always throws, fails, etc....never returns)</h2>
<p>Today's vocabulary word is <a href="https://en.wikipedia.org/wiki/Divergence_(computer_science)">divergent functions</a>...when a function never returns a result in a "normal" way.</p>
<p>All functions that can FAIL or be THROWN or RETURN'd across have divergence as an <em>option</em> (which is, right now, all functions).  But it becomes an issue of what to say when there really is no type a function <em>ever</em> returns...what do you put in the spec?</p>
<p>Lately I've been using just <strong><code>[return: []]</code></strong>.  That might look perfect...by saying there's no types you can return, then any return would generate an error.</p>
<p>But Ren-C is complicated... you've got things like invisible functions, as well as BAD-WORD! isotopes.  And NULL which is a bit of a pickle too--<strong><a href="https://forum.rebol.info/t/revisiting-opt-in-the-func-spec-dialect/1658">I've written about revisiting <code>&lt;opt&gt;</code> in its own post.</a></strong></p>
<h2>What About Isotopes?</h2>
<p>If you say your function returns <strong>[bad-word!]</strong>, that doesn't cover isotope forms.</p>
<p>Right now, there's no type checking on isotopes.  Any function can return any isotope right now--they're outside of type checking.</p>
<p>We could narrow it down to just certain isotopes by putting them in the spec as BAD-WORD!s, like <strong>[integer! ~none~]</strong>...though there's no place to store a list of such isotopes at present :-/</p>
<p>Returning <strong>[ any-value!]</strong> is already pretty wordy.  Having to say <strong>[  any-value!]</strong> is a hassle.  The reasoning I had for letting any function return any isotope was that they're close enough to being errors anyway to a caller...so erroring in the type checking didn't serve that much of a point, for the wordiness.</p>
<h2>What About Invisibility?</h2>
<p>You can't say plain RETURN these days with no argument unless your function has <strong><code>&lt;invisible&gt;</code></strong> in the return spec (or if it has <strong><code>return: &lt;none&gt;</code></strong> which just ignores whatever you return anyway and gives back NONE).  That's another weird notational tic.</p>
<p>I just wanted to mention these issues.  No great answers right now, so we've just got the mediocre answers.  It's working, so...not the biggest priority.</p>
          <p><a href="https://forum.rebol.info/t/isotopes-and-divergence-in-function-spec-dialect/1667/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/isotopes-and-divergence-in-function-spec-dialect/1667/1</link>
        <pubDate>Mon, 16 Aug 2021 02:35:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1667-1</guid>
        <source url="https://forum.rebol.info/t/isotopes-and-divergence-in-function-spec-dialect/1667.rss">Isotopes and Divergence in Function Spec Dialect</source>
      </item>
  </channel>
</rss>

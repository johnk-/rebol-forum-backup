<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Avoiding Having To Name Higher Order Function Variants</title>
    <link>https://forum.rebol.info/t/avoiding-having-to-name-higher-order-function-variants/1217</link>
    <description>Rebol&#39;s use of BLOCK! as currency for code distinguishes it from other languages, where the currency of code is pretty much always a function.

Ren-C actually began to allow for the use of functions as branches, which even received the value that triggered the branch (if it wished):

    &gt;&gt; if 1 + 2 (does [print &quot;Branch running, no arguments.&quot;])
    Branch running, no arguments.

    &gt;&gt; if 1 + 2 (func [x] [print [&quot;Branch received:&quot; x]])
    Branch received: 3

But what about concepts like FOR-EACH?  They take a quoted argument that serves as the variable to bind to a block that serves as the loop body:

    &gt;&gt; for-each x [1 2 3] [print [x]]
    1
    2
    3

But when you&#39;re passing a function for the code to run, you don&#39;t need to name a variable.  Today, you leave it blank:

    &gt;&gt; for-each _ [1 2 3] (func [x] [print [x]])
    1
    2
    3  ; this doesn&#39;t actually work today, but it should, so pretend it does

We can also write this in lambda form:

    &gt;&gt; for-each _ [1 2 3] (x =&gt; print [x])
    1
    2
    3  ; this doesn&#39;t actually work today, but it should, so pretend it does

Better, but the blank still feels a bit ugly.  Can we do better?

## Concept: Use `&lt;skip&gt;`pable quoted arguments

    &gt;&gt; for-each [1 2 3] (y =&gt; print [y])
    1
    2
    3

    &gt;&gt; for-each &#39;x [1 2 3] [print x]
    1
    2
    3

The cost here is that you have to signal somehow that you don&#39;t want a plain evaluation of your data.  e.g.:

    &gt;&gt; x: [1 2 3]
    &gt;&gt; for-each x (y =&gt; print [y])
    1
    2
    3

At the cost of forcing you to put a tick mark on variables when you want to use a block for code, it paves a way to the clean use of functions...the way that people are used to from other languages.  And as lambdas get more powerful and able to do implicit specializations, I think the desirability of using this form will go way up.

What do people think?  Is having to put the tick mark on the variables a bad thing?  It feels kind of good to me actually--because it hints at the callsite that you will not be evaluating that argument.</description>
    
    <lastBuildDate>Wed, 06 Nov 2019 04:56:40 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/avoiding-having-to-name-higher-order-function-variants/1217.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Avoiding Having To Name Higher Order Function Variants</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>Maybe it would be a better hint, but still disturbing.<br>
For me without the tick it's easier to understand what is meant, though my mental picture sees type as the active part. To understand what's really going on I need a little concentration.</p>
          <p><a href="https://forum.rebol.info/t/avoiding-having-to-name-higher-order-function-variants/1217/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/avoiding-having-to-name-higher-order-function-variants/1217/4</link>
        <pubDate>Wed, 06 Nov 2019 04:56:40 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1217-4</guid>
        <source url="https://forum.rebol.info/t/avoiding-having-to-name-higher-order-function-variants/1217.rss">Avoiding Having To Name Higher Order Function Variants</source>
      </item>
      <item>
        <title>Avoiding Having To Name Higher Order Function Variants</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="1217">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>There are a few places where I am always unsure wether I have to use the tick mark or not.</p>
</blockquote>
</aside>
<p>It's interesting that Ren-C makes it possible to even quote leftward, hence we get the likes of:</p>
<pre><code> switch type of value [...]
</code></pre>
<p>That seems it would read uglier as:</p>
<pre><code> switch 'type of value [...]
</code></pre>
<p>But is that a case where it would be a better hint at what's going on?  I'd be a bit disappointed because it actually takes quite a lot of work to make it possible to <em>not</em> have that tick there.</p>
          <p><a href="https://forum.rebol.info/t/avoiding-having-to-name-higher-order-function-variants/1217/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/avoiding-having-to-name-higher-order-function-variants/1217/3</link>
        <pubDate>Tue, 05 Nov 2019 10:43:32 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1217-3</guid>
        <source url="https://forum.rebol.info/t/avoiding-having-to-name-higher-order-function-variants/1217.rss">Avoiding Having To Name Higher Order Function Variants</source>
      </item>
      <item>
        <title>Avoiding Having To Name Higher Order Function Variants</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>There are a few places where I am always unsure wether I have to use the tick mark or not.<br>
Used this way, there is a clear rule, so I like it.</p>
          <p><a href="https://forum.rebol.info/t/avoiding-having-to-name-higher-order-function-variants/1217/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/avoiding-having-to-name-higher-order-function-variants/1217/2</link>
        <pubDate>Sun, 29 Sep 2019 21:54:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1217-2</guid>
        <source url="https://forum.rebol.info/t/avoiding-having-to-name-higher-order-function-variants/1217.rss">Avoiding Having To Name Higher Order Function Variants</source>
      </item>
      <item>
        <title>Avoiding Having To Name Higher Order Function Variants</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Rebol's use of BLOCK! as currency for code distinguishes it from other languages, where the currency of code is pretty much always a function.</p>
<p>Ren-C actually began to allow for the use of functions as branches, which even received the value that triggered the branch (if it wished):</p>
<pre><code>&gt;&gt; if 1 + 2 (does [print "Branch running, no arguments."])
Branch running, no arguments.

&gt;&gt; if 1 + 2 (func [x] [print ["Branch received:" x]])
Branch received: 3
</code></pre>
<p>But what about concepts like FOR-EACH?  They take a quoted argument that serves as the variable to bind to a block that serves as the loop body:</p>
<pre><code>&gt;&gt; for-each x [1 2 3] [print [x]]
1
2
3
</code></pre>
<p>But when you're passing a function for the code to run, you don't need to name a variable.  Today, you leave it blank:</p>
<pre><code>&gt;&gt; for-each _ [1 2 3] (func [x] [print [x]])
1
2
3  ; this doesn't actually work today, but it should, so pretend it does
</code></pre>
<p>We can also write this in lambda form:</p>
<pre><code>&gt;&gt; for-each _ [1 2 3] (x =&gt; print [x])
1
2
3  ; this doesn't actually work today, but it should, so pretend it does
</code></pre>
<p>Better, but the blank still feels a bit ugly.  Can we do better?</p>
<h2>Concept: Use <code>&lt;skip&gt;</code>pable quoted arguments</h2>
<pre><code>&gt;&gt; for-each [1 2 3] (y =&gt; print [y])
1
2
3

&gt;&gt; for-each 'x [1 2 3] [print x]
1
2
3
</code></pre>
<p>The cost here is that you have to signal somehow that you don't want a plain evaluation of your data.  e.g.:</p>
<pre><code>&gt;&gt; x: [1 2 3]
&gt;&gt; for-each x (y =&gt; print [y])
1
2
3
</code></pre>
<p>At the cost of forcing you to put a tick mark on variables when you want to use a block for code, it paves a way to the clean use of functions...the way that people are used to from other languages.  And as lambdas get more powerful and able to do implicit specializations, I think the desirability of using this form will go way up.</p>
<p>What do people think?  Is having to put the tick mark on the variables a bad thing?  It feels kind of good to me actually--because it hints at the callsite that you will not be evaluating that argument.</p>
          <p><a href="https://forum.rebol.info/t/avoiding-having-to-name-higher-order-function-variants/1217/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/avoiding-having-to-name-higher-order-function-variants/1217/1</link>
        <pubDate>Sun, 29 Sep 2019 13:29:53 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1217-1</guid>
        <source url="https://forum.rebol.info/t/avoiding-having-to-name-higher-order-function-variants/1217.rss">Avoiding Having To Name Higher Order Function Variants</source>
      </item>
  </channel>
</rss>

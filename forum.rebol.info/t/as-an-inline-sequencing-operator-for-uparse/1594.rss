<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>`||` as an Inline Sequencing Operator for UPARSE</title>
    <link>https://forum.rebol.info/t/as-an-inline-sequencing-operator-for-uparse/1594</link>
    <description>Let&#39;s say you have a rule like **[&quot;a&quot; | &quot;b&quot;]**, but you want to change it to sequence a &quot;C&quot; after it...like this:

    &gt;&gt; parse? &quot;ac&quot; [[&quot;a&quot; | &quot;b&quot;] &quot;c&quot;]
    == #[true]

    &gt;&gt; parse? &quot;bc&quot; [[&quot;a&quot; | &quot;b&quot;] &quot;c&quot;]
    == #[true]
 
Tacking on that &quot;C&quot; seems like more work than it should be.  You have to go a long way back to find the place to put the start of the block.

So... how about an operator that acts like &quot;everything on the left&quot; is in a block?  Let&#39;s call it **||**:

    &gt;&gt; parse? &quot;ac&quot; [&quot;a&quot; | &quot;b&quot; || &quot;c&quot;]
    == #[true]

    &gt;&gt; parse? &quot;bc&quot; [&quot;a&quot; | &quot;b&quot; || &quot;c&quot;]
    == #[true]

Slick.

I don&#39;t feel bothered by the fact that | means &quot;or&quot; and || means &quot;then&quot;, because they&#39;re both being picked due to the same property of creating a clean line of parts.

This illustration explains why I think **||** is an okay notation, because it kind of evokes **][**.

    [&quot;a&quot; | &quot;b&quot; || &quot;c&quot;] &lt;=&gt; [[ &quot;a&quot; | &quot;b&quot; ][ &quot;c&quot; ]]
    
There&#39;s a performance consequence to having this operator, because it means that a successful alternate match inside of a BLOCK! combinator doesn&#39;t mean you&#39;re done.  You have to scan ahead and make sure there isn&#39;t a sequencing operator coming up...in which case the block still has processing to do.

I&#39;m not that concerned about the performance issue.  You could ask to use a block combinator that supports it or not...it&#39;s your choice.  The default being more expressive is fine.  And truthfully this really just makes sequencing success perform with parity to matching failure...when a rule fails it has to seek to the end of the block for `|`.

## And Guess What... It&#39;s In UPARSE Right Now!

I actually noticed a bug in a rewrite of some command line argument processing I&#39;d suggested for Giulio&#39;s webserver:
 
    [&quot;-h&quot; | &quot;-help&quot; | &quot;--help&quot; (-help, quit)]

It would only print the help and quit for &quot;--help&quot;, not for &quot;-help&quot; or &quot;-h&quot;.

Inline sequencing to the rescue!

    [&quot;-h&quot; | &quot;-help&quot; | &quot;--help&quot; || (-help, quit)]

It&#39;s really nice for editing to be able to just throw in the **`||`** right where you mean it, instead of needing to put the individual **`[`** and **`]`** at different locations.

The hits just keep coming, don&#39;t they?</description>
    
    <lastBuildDate>Mon, 03 May 2021 22:23:00 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/as-an-inline-sequencing-operator-for-uparse/1594.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>`||` as an Inline Sequencing Operator for UPARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Let's say you have a rule like <strong>["a" | "b"]</strong>, but you want to change it to sequence a "C" after it...like this:</p>
<pre><code>&gt;&gt; parse? "ac" [["a" | "b"] "c"]
== #[true]

&gt;&gt; parse? "bc" [["a" | "b"] "c"]
== #[true]
</code></pre>
<p>Tacking on that "C" seems like more work than it should be.  You have to go a long way back to find the place to put the start of the block.</p>
<p>So... how about an operator that acts like "everything on the left" is in a block?  Let's call it <strong>||</strong>:</p>
<pre><code>&gt;&gt; parse? "ac" ["a" | "b" || "c"]
== #[true]

&gt;&gt; parse? "bc" ["a" | "b" || "c"]
== #[true]
</code></pre>
<p>Slick.</p>
<p>I don't feel bothered by the fact that | means "or" and || means "then", because they're both being picked due to the same property of creating a clean line of parts.</p>
<p>This illustration explains why I think <strong>||</strong> is an okay notation, because it kind of evokes <strong>][</strong>.</p>
<pre><code>["a" | "b" || "c"] &lt;=&gt; [[ "a" | "b" ][ "c" ]]
</code></pre>
<p>There's a performance consequence to having this operator, because it means that a successful alternate match inside of a BLOCK! combinator doesn't mean you're done.  You have to scan ahead and make sure there isn't a sequencing operator coming up...in which case the block still has processing to do.</p>
<p>I'm not that concerned about the performance issue.  You could ask to use a block combinator that supports it or not...it's your choice.  The default being more expressive is fine.  And truthfully this really just makes sequencing success perform with parity to matching failure...when a rule fails it has to seek to the end of the block for <code>|</code>.</p>
<h2>And Guess What... It's In UPARSE Right Now!</h2>
<p>I actually noticed a bug in a rewrite of some command line argument processing I'd suggested for Giulio's webserver:</p>
<pre><code>["-h" | "-help" | "--help" (-help, quit)]
</code></pre>
<p>It would only print the help and quit for "--help", not for "-help" or "-h".</p>
<p>Inline sequencing to the rescue!</p>
<pre><code>["-h" | "-help" | "--help" || (-help, quit)]
</code></pre>
<p>It's really nice for editing to be able to just throw in the <strong><code>||</code></strong> right where you mean it, instead of needing to put the individual <strong><code>[</code></strong> and <strong><code>]</code></strong> at different locations.</p>
<p>The hits just keep coming, don't they?</p>
          <p><a href="https://forum.rebol.info/t/as-an-inline-sequencing-operator-for-uparse/1594/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/as-an-inline-sequencing-operator-for-uparse/1594/1</link>
        <pubDate>Mon, 03 May 2021 21:29:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1594-1</guid>
        <source url="https://forum.rebol.info/t/as-an-inline-sequencing-operator-for-uparse/1594.rss">`||` as an Inline Sequencing Operator for UPARSE</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What if FUNCTION with explicit &lt;local&gt; tag behaved as FUNC?</title>
    <link>https://forum.rebol.info/t/what-if-function-with-explicit-local-tag-behaved-as-func/255</link>
    <description>The current behavior of FUNCTION with a `&lt;local&gt;` tag is to let you specify explicit locals, while still gathering SET-WORD!s in the body.  So a hypothetical example would be:

    foo: function [a b &lt;local&gt; c d] [
        set [c d] reduce [a b]
        x: c + d
        return x
    ]

The example is kind of dumb, because the SET line could have used **set [c: d:] ...** in this case and gotten locals gathering behavior.  In any case, the much more common case is to want to suppress locals gathering for a set-word (`&lt;with&gt;`, formerly known as /EXTERN) than to force locals gathering for non-SET-WORD!s.

FWIW, I&#39;ve never used `&lt;local&gt;` with it&#39;s current behavior in a FUNCTION.  There&#39;s also the ability to use SET-WORD! in the spec to specify locals without disabling locals gathering.  Plus I don&#39;t feel like there&#39;s a whole lot of uses of FUNC...where FUNCTION vs. FUNC would make a difference...that don&#39;t have a /LOCAL in it.

So what if `&lt;local&gt;` meant don&#39;t do locals gathering, and FUNC went away.  What we&#39;re really comparing here is:

     function [a b &lt;local&gt; c d]
     func [a b &lt;local&gt; c d]

At which point we&#39;re talking about a 4 character difference.  And people who wanted to could abbreviate FUNC for FUNCTION and still get to say they wanted locals gathering or not in the same length while using FUNC for locals gathering also.

@rgchris has suggested that in cases of functions that are declared inside objects, the ergonomics of having something that doesn&#39;t do locals-gathering in order to get at the object fields is important.  But I think there&#39;s a lot of work to be done there, with a METHOD that can somehow work with our new binding capabilities to avoid functions that have copies of their bodies made on every instance of an object class made.  It may change the dynamics of that situation entirely.

In any case, I think it would be pleasing if &quot;FUNC&quot; were not necessary or in the box, so it&#39;s worth thinking about.</description>
    
    <lastBuildDate>Wed, 16 Aug 2017 08:10:51 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/what-if-function-with-explicit-local-tag-behaved-as-func/255.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What if FUNCTION with explicit &lt;local&gt; tag behaved as FUNC?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="255">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>auto-gathering can only ever be clumsy</p>
</blockquote>
</aside>
<p>I see your point.  Though I'll also point out you haven't weighed in yet on what I would <em>think</em> would be a similar "clumsiness" of allowing random bindings to escape and lead to <a href="https://forum.rebol.info/t/what-happens-to-function-arguments-and-locals-when-the-call-ends/234">indefinite lifetimes of args/refinements/locals</a>!</p>
<p><em>IF</em> Rebol leans more to being an advanced, graspable, human-scale, natural-language-biased assembly language (with a wacky instruction set) than it is an abstract high-level language, it should be erring in these matters on the side of control and awareness.  To keep people close to the "metal" of the reality of the interpreter core, and yet able to accomplish great feats despite that design.</p>
<aside class="quote no-group" data-post="2" data-topic="255">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I suggest that auto-gathering should require a flag and func behaviour be the default for function.</p>
</blockquote>
</aside>
<p>A big thought, and as starting this thread indicates, I'm still encouraging the big thoughts.  (I have not given up on <strong>=</strong> meaning strict equality, and <strong>is</strong> being lax equality, with <strong>isn't</strong> pairing with IS, apostrophe and all.)</p>
<p>So yes, well worth noticing we could bend it the other way...the parallel suggestion would be thus that <code>function [foo &lt;with&gt;] [...]</code> mean "with nothing", e.g. no assignments via-set-word reach out of the environment of the function.</p>
<p>It is true that classic FUNC is the more "basic" tool of Rebol and maybe a mistake to hide it, the other questions aside.  I broke it down even further so that MAKE FUNCTION! is the <em>most</em> basic tool, which does not even define what the word RETURN means.</p>
<p>Lest people feel demoralized by the idea we're still talking about such "basic" questions, I'd like to remind people that today, we can do things like this:</p>
<pre><code> &gt;&gt; do-frame: function [f] [
      do f
      return "not returned from do-frame"
 ]

 &gt;&gt; something: function [y] [
     f: make frame! :return
     f/value: y
     do-frame f
     return "not returned from something"
 ]

 &gt;&gt; something 1020
 == 1020
</code></pre>
<p>I show that off--instead of just the usual "hey you can RETURN out of userspace loops"--because it was even harder to rig up inside the rules of the game.  The pieces are composing, a FRAME! based on a definitional return can reconnect with the specific RETURN it was made for.</p>
<p>The mechanics of how this all can tie together, and the fact that FUNCTION can be built entirely in userspace (with a different term used for RETURN, or variations at your choice), is something that I feel is worth at least a little sense of awe.</p>
<p>So I don't want us to underestimate the value of continuing to push on the ground definitions.  Maybe we not make any big moves until virtual binding advances a bit more, though.  Making headway on that--in my opinion--would be something that changes quite a lot of how we look at the language.</p>
          <p><a href="https://forum.rebol.info/t/what-if-function-with-explicit-local-tag-behaved-as-func/255/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-if-function-with-explicit-local-tag-behaved-as-func/255/3</link>
        <pubDate>Wed, 16 Aug 2017 08:10:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-255-3</guid>
        <source url="https://forum.rebol.info/t/what-if-function-with-explicit-local-tag-behaved-as-func/255.rss">What if FUNCTION with explicit &lt;local&gt; tag behaved as FUNC?</source>
      </item>
      <item>
        <title>What if FUNCTION with explicit &lt;local&gt; tag behaved as FUNC?</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>Not just objects but also using functions as callbacks where for the most part you want the function operating in the context of origin.</p>
<p>Looking again at <a href="http://rebol.info/rebolsteps.html#section-6" rel="nofollow noopener">ten steps</a>, a function is defined this <em>"... is a block which has local variables that are given new values each time the block is evaluated"</em>. Thinking along these lines <code>func</code> behaviour is the natural way to consider what a function is in Rebol. While auto-gathering helps avoid naive errors, it can lead to unexpected errors when working in more nuanced and complex situations (auto-gathering can only ever be clumsy). I suggest that auto-gathering should require a flag and <code>func</code> behaviour be the default for <code>function</code>.</p>
<p>And a pedantic counter-point, your suggestion is a 12 character difference for a basic <code>func</code>:</p>
<pre><code class="lang-auto">func [foo][...]
function [foo &lt;local&gt;][...]
</code></pre>
          <p><a href="https://forum.rebol.info/t/what-if-function-with-explicit-local-tag-behaved-as-func/255/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-if-function-with-explicit-local-tag-behaved-as-func/255/2</link>
        <pubDate>Wed, 16 Aug 2017 06:32:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-255-2</guid>
        <source url="https://forum.rebol.info/t/what-if-function-with-explicit-local-tag-behaved-as-func/255.rss">What if FUNCTION with explicit &lt;local&gt; tag behaved as FUNC?</source>
      </item>
      <item>
        <title>What if FUNCTION with explicit &lt;local&gt; tag behaved as FUNC?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The current behavior of FUNCTION with a <code>&lt;local&gt;</code> tag is to let you specify explicit locals, while still gathering SET-WORD!s in the body.  So a hypothetical example would be:</p>
<pre><code>foo: function [a b &lt;local&gt; c d] [
    set [c d] reduce [a b]
    x: c + d
    return x
]
</code></pre>
<p>The example is kind of dumb, because the SET line could have used <strong>set [c: d:] ...</strong> in this case and gotten locals gathering behavior.  In any case, the much more common case is to want to suppress locals gathering for a set-word (<code>&lt;with&gt;</code>, formerly known as /EXTERN) than to force locals gathering for non-SET-WORD!s.</p>
<p>FWIW, I've never used <code>&lt;local&gt;</code> with it's current behavior in a FUNCTION.  There's also the ability to use SET-WORD! in the spec to specify locals without disabling locals gathering.  Plus I don't feel like there's a whole lot of uses of FUNC...where FUNCTION vs. FUNC would make a difference...that don't have a /LOCAL in it.</p>
<p>So what if <code>&lt;local&gt;</code> meant don't do locals gathering, and FUNC went away.  What we're really comparing here is:</p>
<pre><code> function [a b &lt;local&gt; c d]
 func [a b &lt;local&gt; c d]
</code></pre>
<p>At which point we're talking about a 4 character difference.  And people who wanted to could abbreviate FUNC for FUNCTION and still get to say they wanted locals gathering or not in the same length while using FUNC for locals gathering also.</p>
<p><a class="mention" href="/u/rgchris">@rgchris</a> has suggested that in cases of functions that are declared inside objects, the ergonomics of having something that doesn't do locals-gathering in order to get at the object fields is important.  But I think there's a lot of work to be done there, with a METHOD that can somehow work with our new binding capabilities to avoid functions that have copies of their bodies made on every instance of an object class made.  It may change the dynamics of that situation entirely.</p>
<p>In any case, I think it would be pleasing if "FUNC" were not necessary or in the box, so it's worth thinking about.</p>
          <p><a href="https://forum.rebol.info/t/what-if-function-with-explicit-local-tag-behaved-as-func/255/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-if-function-with-explicit-local-tag-behaved-as-func/255/1</link>
        <pubDate>Wed, 16 Aug 2017 01:14:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-255-1</guid>
        <source url="https://forum.rebol.info/t/what-if-function-with-explicit-local-tag-behaved-as-func/255.rss">What if FUNCTION with explicit &lt;local&gt; tag behaved as FUNC?</source>
      </item>
  </channel>
</rss>

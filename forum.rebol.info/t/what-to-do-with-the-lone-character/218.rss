<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What to do with the lone ? character</title>
    <link>https://forum.rebol.info/t/what-to-do-with-the-lone-character/218</link>
    <description>Historically Rebol used **?** as a synonym for **HELP**.

I type the unshifted sequence **h-e-l-p** as fast (maybe faster) than the combined sequence **shift-/** to get the **?**.  Not only that, a console dialect could just as easily take H for help as it could take Q for QUIT, while keeping these abbreviations out of the language itself.

So *considering the rare number of single-character sequences and symbols available*, it seemed a waste to steal **?** away from some purpose you would actually find common use for in user code.

My first idea was that since we use things suffixed with a ? to mean a logical test for something, why not make a lone question mark some very common existential test?  My first idea was to make it a quoting operator testing variables for void, so that **? var** could mean **set? &#39;var**.

    if ? var [
       print &quot;var is set&quot;
    ] else [
       print &quot;var is not set&quot;
    ]

One thing that worried me is that **if? var [...]** is different, meaning &quot;give me back a LOGIC! of whether you ran the branch or not, don&#39;t give me the branch-result-or-a-void&quot;.  But, that&#39;s hardly the only space-significance issue out there, and one of the least surprising.  Also, I doubt people will be using IF? all *that* often.  I really haven&#39;t needed to use it yet.  :-/

&gt; **UPDATE circa 2018:** The IF?, CASE?, SWITCH? etc. variants [no longer exist](https://forum.rebol.info/t/dropping-find-while-if-unless-select-etc/498), due to better ideas.

I still think this operator choice is a pretty good idea.  I&#39;ve tried other things, like seeing what could be done with it as a postfix operator, like it was punctuating with a question mark.  But never felt like using that.  However, I would certainly use **? var** a lot... every day.

But how do other languages use it?  C-inspired languages make it a [ternary operator](https://en.wikipedia.org/wiki/Ternary_operation), which when combined with a **:** becomes more-or-less an EITHER.  So:

     x = condition ? expr1 : expr2;

Is basically equivalent to:

    x: either condition [expr1] [expr2]
    x: if condition [expr1] else [expr2]

While we can do some magic with variadics these days, Rebol doesn&#39;t encourage constructs that scan ahead for other delimiters.  *(Notably, that is not how THEN or ELSE work, which is part of what makes them awesome.)*

So I don&#39;t know if doing a ternary operator would be very good.  However, with the recent advances in left-hand-non-tight-enfix--and the death of the old meaning of IF/ONLY as &quot;block means block&quot;, we might consider an infix binary operator to take its place.

    &gt;&gt; x: 1 &lt; 2 ? [data]
    == [data]

    &gt;&gt; x: 1 &gt; 2 ? [data]
    ; no result

It would then share heritage with the ternary operator in the sense of being conditional, but bring something to the table that IF does not with the &quot;return the right hand side as-is&quot; property.

    spaced [&quot;(CONSOLE&quot; (unless proto-skin/updated? {not}) &quot;updated)&quot;]
        =&gt;
    spaced [&quot;(CONSOLE&quot; (not proto-skin/updated? ? {not}) &quot;updated)&quot;]
   
Well, maybe.  It does run up against that question of [whether 0-arity things should end in ?](https://forum.rebol.info/t/naming-logic-variables-with-a-at-the-end/200/12).  If they do, this will create a bit of visual unhappiness with postfix operators called **?**.  But what if it wasn&#39;t like that?

    spaced [&quot;(CONSOLE&quot; (not proto-skin/updated ? {not}) &quot;updated)&quot;]    

Something to think about.

Digging around in other languages, Haskell leaves it a legal operator for you to define how you wish (so does Rebol, you could still override it if you want).  Rust calls it a *&quot;unary suffix operator which can be placed on an expression to unwrap the value on the left hand side of ? while propagating any error through an early return&quot;*, or at least [proposed to be one](https://m4rw3r.github.io/rust-questionmark-operator).  That doesn&#39;t have a parallel in Rebol&#39;s world exactly.

What do people think?  I definitely don&#39;t think this should be wasted on a help synonym, at the detriment to all code everywhere...</description>
    
    <lastBuildDate>Tue, 16 Oct 2018 01:52:12 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/what-to-do-with-the-lone-character/218.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What to do with the lone ? character</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>If there are any good ideas in it.  That looks like one, but a purely optional one.  You can mix and match.</p>
<pre><code>condition ?? value-not-executed-if-block else [code]
if condition [code] !! value-not-executed-if-block
</code></pre>
<p>It's rather interesting.  And I still am pretty much wanting the <code># pound followed by space comments</code>.  Semicolon is never enough for me, I always have to do something dumb, like <code>;;</code> or <code>;--</code>, neither of which please me.</p>
          <p><a href="https://forum.rebol.info/t/what-to-do-with-the-lone-character/218/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-do-with-the-lone-character/218/8</link>
        <pubDate>Tue, 25 Jul 2017 04:56:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-218-8</guid>
        <source url="https://forum.rebol.info/t/what-to-do-with-the-lone-character/218.rss">What to do with the lone ? character</source>
      </item>
      <item>
        <title>What to do with the lone ? character</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>So, does this mean that convergence will result in Ren-c looking like Perl?</p>
          <p><a href="https://forum.rebol.info/t/what-to-do-with-the-lone-character/218/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-do-with-the-lone-character/218/7</link>
        <pubDate>Tue, 25 Jul 2017 04:54:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-218-7</guid>
        <source url="https://forum.rebol.info/t/what-to-do-with-the-lone-character/218.rss">What to do with the lone ? character</source>
      </item>
      <item>
        <title>What to do with the lone ? character</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>For anyone following the thread, we've <a href="https://github.com/metaeducation/ren-c/commit/1ccc80a82e5de150f6d72fcf8c9fc9fe8dc8f61c" rel="nofollow noopener">decided to try ?? and !!</a> instead of ? and ??.  It stands out a little better.  Compare:</p>
<pre><code>1 &gt; 2 ? [a] ?? () ?? () ?? [x] ?? () ?? [y]

1 &gt; 2 ?? [a] !! () !! () !! [x] !! () !! [y]
</code></pre>
<p>The latter also <a href="https://docs.perl6.org/language/operators#infix_??_!!" rel="nofollow noopener">lines up with Perl6</a>, somewhat, where it had formerly been <code>?</code> and <code>:</code> but this was deemed better "after long thought".</p>
<p>This means <code>? var</code> is free to experiment with for <code>set? 'var</code>, so we'll give that a shot...</p>
          <p><a href="https://forum.rebol.info/t/what-to-do-with-the-lone-character/218/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-do-with-the-lone-character/218/6</link>
        <pubDate>Mon, 24 Jul 2017 16:40:08 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-218-6</guid>
        <source url="https://forum.rebol.info/t/what-to-do-with-the-lone-character/218.rss">What to do with the lone ? character</source>
      </item>
      <item>
        <title>What to do with the lone ? character</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="3" data-topic="218">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/draegtun/40/230_2.png" class="avatar"> draegtun:</div>
<blockquote>
<p>I do have some code that uses old CASE/ONLY.  I have been thinking about replacing them with new CHOOSE func which replicates old CASE/ONLY.</p>
</blockquote>
</aside>
<p>I'm convinced.  CASE/ONLY was probably the most practically useful of the old-/ONLYs.</p>
<p><a href="https://github.com/metaeducation/ren-c/commit/53a26097b953de8d68eb17f4586172612199edcd" rel="nofollow noopener">Your wish is granted.</a>  All I ask in return is that you write me some tests.  <img src="//forum.rebol.info/images/emoji/twitter/slight_smile.png?v=7" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://forum.rebol.info/t/what-to-do-with-the-lone-character/218/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-do-with-the-lone-character/218/5</link>
        <pubDate>Mon, 24 Jul 2017 02:52:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-218-5</guid>
        <source url="https://forum.rebol.info/t/what-to-do-with-the-lone-character/218.rss">What to do with the lone ? character</source>
      </item>
      <item>
        <title>What to do with the lone ? character</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="3" data-topic="218">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/draegtun/40/230_2.png" class="avatar"> draegtun:</div>
<blockquote>
<p>&gt;&gt; any [1 &lt; 2 ? [data] | 1 != 1 ? [foo]]</p>
</blockquote>
</aside>
<p>That's interesting, and actually useful.</p>
<p>I guess the fact that this operator is a conditional in so many languages...not just C ones but even in languages like Perl and Ruby...means it's sort of in the zeitgeist for people to expect something like this.</p>
<aside class="quote no-group" data-post="3" data-topic="218">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/draegtun/40/230_2.png" class="avatar"> draegtun:</div>
<blockquote>
<p>I agree with <a class="mention" href="/u/gchiu">@gchiu</a> with using ? for above.   So definitely a <img src="//forum.rebol.info/images/emoji/twitter/thumbsup.png?v=7" title=":thumbsup:" class="emoji" alt=":thumbsup:"> from me.</p>
</blockquote>
</aside>
<p>Okay, well being useful, plus two votes against my "leaning toward SET? 'VAR" half-vote wins.  At least enough that we can experiment with it a while and see if we like it.</p>
<p>Though you could use it with ELSE and get ternary if you wanted, it doesn't seem very symmetrical.... since ELSE would run a block, and isn't as forgiving by default on expressions.  On a whim, I added ?? for this</p>
<pre><code>&gt;&gt; 1 &gt; 2 ? [hi] ?? [bye]
== [bye]

&gt;&gt; 1 &lt; 2 ? [hi] ?? [bye] 
== [hi]

&gt;&gt; 1 &lt; 2 ? 3 + 3 ?? 4 + 4
== 6

&gt;&gt; 1 &gt; 2 ? 3 + 3 ?? 4 + 4 
== 8
</code></pre>
<p>?? tests for a value on the left, passes it through if it's not void, otherwise gives you the right as-is.  You could do this indefinitely...</p>
<pre><code>&gt;&gt; 1 &gt; 2 ? [a] ?? () ?? () ?? [x] ?? () ?? [y]
== [x]
</code></pre>
<p><em>(For that matter, you can mix it all up... with THEN and ELSE and ? and ?? and <code>THEN*</code> and <code>ELSE*</code>... and wind up with some really unusual stuff, I bet.)</em></p>
<p>All right weirdos, <a href="https://github.com/metaeducation/ren-c/commit/ef33532545abdc7b266df5cff8d7e84c228f9993" rel="nofollow noopener">try it out and see how you like it</a>.  <img src="//forum.rebol.info/images/emoji/twitter/slight_smile.png?v=7" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://forum.rebol.info/t/what-to-do-with-the-lone-character/218/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-do-with-the-lone-character/218/4</link>
        <pubDate>Mon, 24 Jul 2017 01:15:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-218-4</guid>
        <source url="https://forum.rebol.info/t/what-to-do-with-the-lone-character/218.rss">What to do with the lone ? character</source>
      </item>
      <item>
        <title>What to do with the lone ? character</title>
        <dc:creator><![CDATA[draegtun]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="1" data-topic="218">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I type the unshifted sequence h-e-l-p as fast (maybe faster) than the combined sequence shift-/ to get the ?.  Not only that, a console dialect could just as easily take H for help as it could take Q for QUIT, while keeping these abbreviations out of the language itself.</p>
</blockquote>
</aside>
<p>I'm a touch-typist and so my h-e-l-p is also quick.  However my chord usage is ingrained and so shift-/ is still much quicker for me  <img src="//forum.rebol.info/images/emoji/twitter/stuck_out_tongue.png?v=7" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>While <code>?</code> is entrenched into my muscle memory for console usage I'm OK if it being used for an <em>operator</em>.   It's easy to fix with console shortcut and/or retrain my muscle memory to use a <code>H</code> shortcut instead.</p>
<aside class="quote no-group" data-post="1" data-topic="218">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>However, with the recent advances in left-hand-non-tight-enfix--and the death of the old meaning of IF/ONLY as "block means block", we might consider an infix binary operator to take its place.</p>
<p>&gt;&gt; x: 1 &lt; 2 ? [data]<br>
== [data]</p>
<p>&gt;&gt; x: 1 &gt; 2 ? [data]<br>
; no result</p>
</blockquote>
</aside>
<p>I agree with <a class="mention" href="/u/gchiu">@gchiu</a> with using <code>?</code> for above.   So definitely a <img src="//forum.rebol.info/images/emoji/twitter/thumbsup.png?v=7" title=":thumbsup:" class="emoji" alt=":thumbsup:"> from me.</p>
<p>Not sure about <code>??</code> for <code>set?</code> though?  Prefer it to be an <em>operator</em>.</p>
<p>BTW - I do have some code that uses old CASE/ONLY.  I have been thinking about replacing them with new CHOOSE func which replicates old CASE/ONLY...</p>
<pre><code>&gt;&gt; choose [1 &lt; 2 [data] 1 != 1 [foo]]
== [data]
</code></pre>
<p>... but could do this with suggested <code>?</code> like so:</p>
<pre><code>&gt;&gt; any [1 &lt; 2 ? [data] | 1 != 1 ? [foo]]
</code></pre>
<p>... but possible a <em>case</em> for having both <img src="//forum.rebol.info/images/emoji/twitter/slight_smile.png?v=7" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<aside class="quote no-group" data-post="1" data-topic="218">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>spaced ["(CONSOLE" (not proto-skin/updated? ? {not}) "updated)"]</p>
</blockquote>
</aside>
<p>Yeah that's not nice to look at <img src="//forum.rebol.info/images/emoji/twitter/frowning.png?v=7" title=":frowning:" class="emoji" alt=":frowning:">    However I do like my 0-arity <code>flags?</code>, so I would just keep to UNLESS example above that or change it to:</p>
<pre><code>spaced ["(CONSOLE" all [not proto-skin/updated? {not}] "updated)"]
</code></pre>
<aside class="quote no-group quote-modified" data-post="1" data-topic="218">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Rust calls it a "unary suffix operator which can be placed on an expression to unwrap the value on the left hand side of ? while propagating any error through an early return", or at least proposed to be one.  That doesn't have a parallel in Rebol's word exactly.</p>
</blockquote>
</aside>
<p>Probably something like <code>&amp;&amp;</code> would be better for this.</p>
          <p><a href="https://forum.rebol.info/t/what-to-do-with-the-lone-character/218/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-do-with-the-lone-character/218/3</link>
        <pubDate>Sun, 23 Jul 2017 15:40:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-218-3</guid>
        <source url="https://forum.rebol.info/t/what-to-do-with-the-lone-character/218.rss">What to do with the lone ? character</source>
      </item>
      <item>
        <title>What to do with the lone ? character</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>Why not use <code>??</code> as <code>set?</code> and then we can have</p>
<pre><code>&gt;&gt; x: 1 &lt; 2 ? [data]
== [data]
</code></pre>
<p>I like this better than <code>if</code> because I don't have to indent and there's less to read.</p>
          <p><a href="https://forum.rebol.info/t/what-to-do-with-the-lone-character/218/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-do-with-the-lone-character/218/2</link>
        <pubDate>Sun, 23 Jul 2017 00:42:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-218-2</guid>
        <source url="https://forum.rebol.info/t/what-to-do-with-the-lone-character/218.rss">What to do with the lone ? character</source>
      </item>
      <item>
        <title>What to do with the lone ? character</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Historically Rebol used <strong>?</strong> as a synonym for <strong>HELP</strong>.</p>
<p>I type the unshifted sequence <strong>h-e-l-p</strong> as fast (maybe faster) than the combined sequence <strong>shift-/</strong> to get the <strong>?</strong>.  Not only that, a console dialect could just as easily take H for help as it could take Q for QUIT, while keeping these abbreviations out of the language itself.</p>
<p>So <em>considering the rare number of single-character sequences and symbols available</em>, it seemed a waste to steal <strong>?</strong> away from some purpose you would actually find common use for in user code.</p>
<p>My first idea was that since we use things suffixed with a ? to mean a logical test for something, why not make a lone question mark some very common existential test?  My first idea was to make it a quoting operator testing variables for void, so that <strong>? var</strong> could mean <strong>set? 'var</strong>.</p>
<pre><code>if ? var [
   print "var is set"
] else [
   print "var is not set"
]
</code></pre>
<p>One thing that worried me is that <strong>if? var [...]</strong> is different, meaning "give me back a LOGIC! of whether you ran the branch or not, don't give me the branch-result-or-a-void".  But, that's hardly the only space-significance issue out there, and one of the least surprising.  Also, I doubt people will be using IF? all <em>that</em> often.  I really haven't needed to use it yet.  :-/</p>
<blockquote>
<p><strong>UPDATE circa 2018:</strong> The IF?, CASE?, SWITCH? etc. variants <a href="https://forum.rebol.info/t/dropping-find-while-if-unless-select-etc/498">no longer exist</a>, due to better ideas.</p>
</blockquote>
<p>I still think this operator choice is a pretty good idea.  I've tried other things, like seeing what could be done with it as a postfix operator, like it was punctuating with a question mark.  But never felt like using that.  However, I would certainly use <strong>? var</strong> a lot... every day.</p>
<p>But how do other languages use it?  C-inspired languages make it a <a href="https://en.wikipedia.org/wiki/Ternary_operation" rel="nofollow noopener">ternary operator</a>, which when combined with a <strong>:</strong> becomes more-or-less an EITHER.  So:</p>
<pre><code> x = condition ? expr1 : expr2;
</code></pre>
<p>Is basically equivalent to:</p>
<pre><code>x: either condition [expr1] [expr2]
x: if condition [expr1] else [expr2]
</code></pre>
<p>While we can do some magic with variadics these days, Rebol doesn't encourage constructs that scan ahead for other delimiters.  <em>(Notably, that is not how THEN or ELSE work, which is part of what makes them awesome.)</em></p>
<p>So I don't know if doing a ternary operator would be very good.  However, with the recent advances in left-hand-non-tight-enfix--and the death of the old meaning of IF/ONLY as "block means block", we might consider an infix binary operator to take its place.</p>
<pre><code>&gt;&gt; x: 1 &lt; 2 ? [data]
== [data]

&gt;&gt; x: 1 &gt; 2 ? [data]
; no result
</code></pre>
<p>It would then share heritage with the ternary operator in the sense of being conditional, but bring something to the table that IF does not with the "return the right hand side as-is" property.</p>
<pre><code>spaced ["(CONSOLE" (unless proto-skin/updated? {not}) "updated)"]
    =&gt;
spaced ["(CONSOLE" (not proto-skin/updated? ? {not}) "updated)"]
</code></pre>
<p>Well, maybe.  It does run up against that question of <a href="https://forum.rebol.info/t/naming-logic-variables-with-a-at-the-end/200/12">whether 0-arity things should end in ?</a>.  If they do, this will create a bit of visual unhappiness with postfix operators called <strong>?</strong>.  But what if it wasn't like that?</p>
<pre><code>spaced ["(CONSOLE" (not proto-skin/updated ? {not}) "updated)"]    
</code></pre>
<p>Something to think about.</p>
<p>Digging around in other languages, Haskell leaves it a legal operator for you to define how you wish (so does Rebol, you could still override it if you want).  Rust calls it a <em>"unary suffix operator which can be placed on an expression to unwrap the value on the left hand side of ? while propagating any error through an early return"</em>, or at least <a href="https://m4rw3r.github.io/rust-questionmark-operator" rel="nofollow noopener">proposed to be one</a>.  That doesn't have a parallel in Rebol's world exactly.</p>
<p>What do people think?  I definitely don't think this should be wasted on a help synonym, at the detriment to all code everywhere...</p>
          <p><a href="https://forum.rebol.info/t/what-to-do-with-the-lone-character/218/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-do-with-the-lone-character/218/1</link>
        <pubDate>Sat, 22 Jul 2017 21:50:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-218-1</guid>
        <source url="https://forum.rebol.info/t/what-to-do-with-the-lone-character/218.rss">What to do with the lone ? character</source>
      </item>
  </channel>
</rss>

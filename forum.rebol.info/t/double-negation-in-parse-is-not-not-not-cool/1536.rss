<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Double Negation in PARSE is NOT NOT NOT Cool</title>
    <link>https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536</link>
    <description>So there&#39;s a bit of an issue with the NOT combinator in UPARSE.  It fails when the rule you give it as a parameter succeeds:

    &gt;&gt; uparse [1] [not integer!]  ; fails... because it *was* an integer
    ; null

The NOT combinator received information about how much of the input the INTEGER! matched.  But it threw that information away.

So what if you tried to negate it again...with NOT NOT?

    &gt;&gt; uparse [1] [not not integer!]
    ; ???

Here the first NOT is negating the second rule that failed.  So it&#39;s a success in the traditional sense you&#39;d usually expect with a NOT.  But it doesn&#39;t know in that success how much to skip.  So the 1 is still pending.

Hence to get this to work you&#39;d have to say:

    &gt;&gt; uparse [1] [not not integer!, integer!]
    == [1]

**In other words, every NOT is effectively a NOT AHEAD.**

But Red actually tries to cancel out the NOTs:

    red&gt;&gt; parse [1] [set x not not integer!]
    == true

    red&gt;&gt; x
    == 1

This doesn&#39;t make a lot of sense.  It doesn&#39;t work with other failing rules... 1 is not a &quot;not integer!&quot; and it&#39;s also not a &quot;tag!&quot;, so why would this not capture it?

    red&gt;&gt; parse [1] [set x not tag!]
    == false

Here are the options for dealing with this in the combinator model:

1. Change the name of NOT to NOT-AHEAD.  This is how Haskell does it (they call it [**notFollowedBy**](https://hackage.haskell.org/package/parsers-0.12.10/docs/Text-Parser-Combinators.html#v:notFollowedBy)... that combinator list is good to look at, by the way).

2. Leave it as-is and assume that it&#39;s the kind of thing you can just learn.

3. Rig up a hack to make the specific case of NOT immediately followed by NOT a no-op.

4. Systematically build into the protocol the idea that a rule can separately signal that it failed as well as &quot;how much input it would have consumed if it had succeeded&quot;

I think (3) as in Red is a bad idea.  I&#39;m not even sure what (4) would mean...?

    red&gt;&gt; parse [1 2 3 4] [copy numbers not some not integer!]
    == false

I think my inclination would be (2).

---

&gt; **UPDATE:** Looking a little further, I think the NOT NOT behavior in Red is likely a bug and not an attempt to implement a nonsensical feature...[being caused by the same thing that made #1246 happen in R3-Alpha](https://github.com/metaeducation/rebol-issues/issues/1246), e.g. controlling negation via a single flag.</description>
    
    <lastBuildDate>Wed, 03 Mar 2021 21:54:23 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Double Negation in PARSE is NOT NOT NOT Cool</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So there's a bit of an issue with the NOT combinator in UPARSE.  It fails when the rule you give it as a parameter succeeds:</p>
<pre><code>&gt;&gt; uparse [1] [not integer!]  ; fails... because it *was* an integer
; null
</code></pre>
<p>The NOT combinator received information about how much of the input the INTEGER! matched.  But it threw that information away.</p>
<p>So what if you tried to negate it again...with NOT NOT?</p>
<pre><code>&gt;&gt; uparse [1] [not not integer!]
; ???
</code></pre>
<p>Here the first NOT is negating the second rule that failed.  So it's a success in the traditional sense you'd usually expect with a NOT.  But it doesn't know in that success how much to skip.  So the 1 is still pending.</p>
<p>Hence to get this to work you'd have to say:</p>
<pre><code>&gt;&gt; uparse [1] [not not integer!, integer!]
== [1]
</code></pre>
<p><strong>In other words, every NOT is effectively a NOT AHEAD.</strong></p>
<p>But Red actually tries to cancel out the NOTs:</p>
<pre><code>red&gt;&gt; parse [1] [set x not not integer!]
== true

red&gt;&gt; x
== 1
</code></pre>
<p>This doesn't make a lot of sense.  It doesn't work with other failing rules... 1 is not a "not integer!" and it's also not a "tag!", so why would this not capture it?</p>
<pre><code>red&gt;&gt; parse [1] [set x not tag!]
== false
</code></pre>
<p>Here are the options for dealing with this in the combinator model:</p>
<ol>
<li>
<p>Change the name of NOT to NOT-AHEAD.  This is how Haskell does it (they call it <a href="https://hackage.haskell.org/package/parsers-0.12.10/docs/Text-Parser-Combinators.html#v:notFollowedBy"><strong>notFollowedBy</strong></a>... that combinator list is good to look at, by the way).</p>
</li>
<li>
<p>Leave it as-is and assume that it's the kind of thing you can just learn.</p>
</li>
<li>
<p>Rig up a hack to make the specific case of NOT immediately followed by NOT a no-op.</p>
</li>
<li>
<p>Systematically build into the protocol the idea that a rule can separately signal that it failed as well as "how much input it would have consumed if it had succeeded"</p>
</li>
</ol>
<p>I think (3) as in Red is a bad idea.  I'm not even sure what (4) would mean...?</p>
<pre><code>red&gt;&gt; parse [1 2 3 4] [copy numbers not some not integer!]
== false
</code></pre>
<p>I think my inclination would be (2).</p>
<hr>
<blockquote>
<p><strong>UPDATE:</strong> Looking a little further, I think the NOT NOT behavior in Red is likely a bug and not an attempt to implement a nonsensical feature...<a href="https://github.com/metaeducation/rebol-issues/issues/1246">being caused by the same thing that made #1246 happen in R3-Alpha</a>, e.g. controlling negation via a single flag.</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/1</link>
        <pubDate>Wed, 03 Mar 2021 21:31:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1536-1</guid>
        <source url="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536.rss">Double Negation in PARSE is NOT NOT NOT Cool</source>
      </item>
  </channel>
</rss>

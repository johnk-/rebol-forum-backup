<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What do BLOCK!s in PATH!s do?</title>
    <link>https://forum.rebol.info/t/what-do-block-s-in-path-s-do/1033</link>
    <description>What GROUP! should do in a PATH! *seems* fairly clear.  It should evaluate, and then whatever it evaluates to becomes as if you&#39;d written it literally there.  So you&#39;d expect **foo/(1 + 1)** and **foo/2** to do the same thing, *(modulo any strange overrides of + that keep it from returning 2)*

But BLOCK! is now a first class citizen in PATH!s.  Which raises the question of if it has a uniform handling that applies to anything, or if it&#39;s something each path dispatcher handles on a case-by-case basis?

In NewPath, I want BLOCK! basically to do an UNSPACED operation.  Hand-waving a moment, let&#39;s call the operator that does this &quot;newpath-to-local&quot;.

    
    &gt;&gt; projects: [#ren-c ./make/ ...] 
    &gt;&gt; name: &quot;rebmake&quot;
    &gt;&gt; newpath-to-local /home/(p)/(p: &#39;ren-c select projects p)/[name .r]
    == %/home/hostilefork/ren-c/make/rebmake.r

This is a hand-wavy vision toward what I think the world might look like with inert tuples (where `.r` is the tuple form of `[_ r]`) and continuing the trend started by refinement of things starting with slash being evaluator inert.

But the key is that while GROUP! churned along and threw out the intermediates, the BLOCK! reduced and put the pieces together.  I think this is an interesting direction for NewPath, but I don&#39;t know if it makes much sense as a generalized behavior.

Would people use it?

    &gt;&gt; data: [&lt;foo&gt; &lt;bar&gt; 10 &lt;baz&gt; &lt;mumble&gt; 20]
    &gt;&gt; x: &lt;foo&gt;

    &gt;&gt; data/[x &lt;bar&gt;]    
    == 10

There might be other uses.  Like zero-based indexing.

    &gt;&gt; data: [a b c d]
    &gt;&gt; index: 1
    &gt;&gt; data/(index) 
    == a
    &gt;&gt; data/[index]
    == b

It could force SELECT semantics instead of PICK semantics:

    &gt;&gt; data: [2 a 1 b]
    &gt;&gt; data/(1)
    == 2
    &gt;&gt; data/[1]
    == b

The argument we could make for reducing it could be that you could always do the non-reduced form as:

    path/([some stuff])

But now you can also do the reduced form as:

    path/(:[some stuff])

So making **path/[some stuff]** a synonym for that in *all* path dispatch cases across the board seems like it might be a little weak.

But maybe it&#39;s not?  I really don&#39;t know.  I&#39;m more interested in dialect uses because at least then you know what you&#39;re writing and why.  So I guess the thing to do is keep an eye out and see what the pattern is.</description>
    
    <lastBuildDate>Thu, 24 Jan 2019 07:22:21 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/what-do-block-s-in-path-s-do/1033.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What do BLOCK!s in PATH!s do?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>What GROUP! should do in a PATH! <em>seems</em> fairly clear.  It should evaluate, and then whatever it evaluates to becomes as if you'd written it literally there.  So you'd expect <strong>foo/(1 + 1)</strong> and <strong>foo/2</strong> to do the same thing, <em>(modulo any strange overrides of + that keep it from returning 2)</em></p>
<p>But BLOCK! is now a first class citizen in PATH!s.  Which raises the question of if it has a uniform handling that applies to anything, or if it's something each path dispatcher handles on a case-by-case basis?</p>
<p>In NewPath, I want BLOCK! basically to do an UNSPACED operation.  Hand-waving a moment, let's call the operator that does this "newpath-to-local".</p>
<pre><code>&gt;&gt; projects: [#ren-c ./make/ ...] 
&gt;&gt; name: "rebmake"
&gt;&gt; newpath-to-local /home/(p)/(p: 'ren-c select projects p)/[name .r]
== %/home/hostilefork/ren-c/make/rebmake.r
</code></pre>
<p>This is a hand-wavy vision toward what I think the world might look like with inert tuples (where <code>.r</code> is the tuple form of <code>[_ r]</code>) and continuing the trend started by refinement of things starting with slash being evaluator inert.</p>
<p>But the key is that while GROUP! churned along and threw out the intermediates, the BLOCK! reduced and put the pieces together.  I think this is an interesting direction for NewPath, but I don't know if it makes much sense as a generalized behavior.</p>
<p>Would people use it?</p>
<pre><code>&gt;&gt; data: [&lt;foo&gt; &lt;bar&gt; 10 &lt;baz&gt; &lt;mumble&gt; 20]
&gt;&gt; x: &lt;foo&gt;

&gt;&gt; data/[x &lt;bar&gt;]    
== 10
</code></pre>
<p>There might be other uses.  Like zero-based indexing.</p>
<pre><code>&gt;&gt; data: [a b c d]
&gt;&gt; index: 1
&gt;&gt; data/(index) 
== a
&gt;&gt; data/[index]
== b
</code></pre>
<p>It could force SELECT semantics instead of PICK semantics:</p>
<pre><code>&gt;&gt; data: [2 a 1 b]
&gt;&gt; data/(1)
== 2
&gt;&gt; data/[1]
== b
</code></pre>
<p>The argument we could make for reducing it could be that you could always do the non-reduced form as:</p>
<pre><code>path/([some stuff])
</code></pre>
<p>But now you can also do the reduced form as:</p>
<pre><code>path/(:[some stuff])
</code></pre>
<p>So making <strong>path/[some stuff]</strong> a synonym for that in <em>all</em> path dispatch cases across the board seems like it might be a little weak.</p>
<p>But maybe it's not?  I really don't know.  I'm more interested in dialect uses because at least then you know what you're writing and why.  So I guess the thing to do is keep an eye out and see what the pattern is.</p>
          <p><a href="https://forum.rebol.info/t/what-do-block-s-in-path-s-do/1033/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-do-block-s-in-path-s-do/1033/1</link>
        <pubDate>Thu, 24 Jan 2019 07:22:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1033-1</guid>
        <source url="https://forum.rebol.info/t/what-do-block-s-in-path-s-do/1033.rss">What do BLOCK!s in PATH!s do?</source>
      </item>
  </channel>
</rss>

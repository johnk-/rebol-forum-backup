<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Lexical Conflicts Back To Bite Us: Dots In Tags</title>
    <link>https://forum.rebol.info/t/lexical-conflicts-back-to-bite-us-dots-in-tags/1702</link>
    <description>So I&#39;ve been torn by the question of dots in tags, ever since the loss of **`&lt;...&gt;`** to mean variadics.

But that was how the scanner rules clanked together.  And since **&lt;** is a WORD!, if we assign that to an OBJECT! how do we get fields out of it?

    &gt;&gt; &lt;: make object! [x: 10]

    &gt;&gt; &lt;.x
    == 10

## But Something Has To Give

I&#39;ve been convinced.  Dots in tags have to win.

It&#39;s too useful to be able to say **`&lt;../foo.r&gt;`** as a file path.  :frowning: 

The state of the system is different now: PATH!s and TUPLE!s are immutable, so they can be checked for disallowed patterns.  We can set a bit on the special-cased words that contain **&lt;** or **&gt;** and then quickly check at path creation time that they contain none of these &quot;arrow words&quot;.

This means any &lt; or &gt; that you see in a path or tuple are guaranteed to be part of a TAG!.

You can still make some confusing-looking things:

    ..&lt;..&gt;..

But with the rule of &quot;no &lt; or &gt; words inside a path or tuple&quot;, you can confidently read that as a 5-element TUPLE with a TAG! in the middle of it.

    &gt;&gt; as block! ..&lt;..&gt;..
    [_ _ &lt;..&gt; _ _]

## How Will You Pick Fields Out of Objects In Arrow Words?

For purely evaluative purposes, you could just use a GROUP!:

    (&#39;&lt;).field

We *could* try and make some kind of escaping syntax so the literal value could actually be represented in the path.  This would help generic code that took an ANY-WORD! and wanted to make a PATH! out of it:

    #[word! &quot;&lt;&quot;].field

But if we prohibited it, I&#39;m not sure how bad that would be.  It could be a [&quot;yagni&quot;](https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it) situation.  :-/

For now, I&#39;m just going to hack on the scanner and path mechanics a bit and get us the tags.  This will please those who would like the idea of **`&lt;/&gt;`** and **`&lt;//&gt;`** and **`&lt;.&gt;`** and **`&lt;..&gt;`** being a TAG!

I don&#39;t know whether this concession is going to wind up turning into backing off **&lt;:** and **&gt;:** or not.  :frowning: 

    (&#39;&lt;): does [print &quot;Is this good enough, now?&quot;]

It would open up **`&lt;:&gt;`** and **`&lt;::&gt;`** and **`&lt;:/some/thing&gt;`** and a lot more tags of that nature, for what may seem like a pretty negligible loss.

## Has The History of This Topic Been Churn With No Benefit?

:no_entry:  **NO**.


Because when you look systemically at all the parts, generic TUPLE! and generic PATH! are showing great promise.  I think this world in which things like **/foo** are PATH! and **a.(b).10** is a TUPLE! are really the right way to go.

For that matter, I don&#39;t actually think it&#39;s so crazy to put on the lenses where **`&lt;../foo.r&gt;`** is a PATH! containing two tuples.

Consider another very similar looking example of **`+../foo.r+`**.  That&#39;s:

     as path! reduce [
         as tuple! [+ _ _]
         as tuple! [foo r+]
     ]

I actually think that line of thinking has a lot of interesting dialecting possibilities.  The thing that makes the example with &lt; and &gt; in it trip up is that it treads on the usefulness of tags...and you wind up where **r&gt;** isn&#39;t even a valid tuple component.  More is being sacrificed and less is being gained.

All in all, it&#39;s progress.</description>
    
    <lastBuildDate>Fri, 03 Sep 2021 13:28:21 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/lexical-conflicts-back-to-bite-us-dots-in-tags/1702.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Lexical Conflicts Back To Bite Us: Dots In Tags</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So I've been torn by the question of dots in tags, ever since the loss of <strong><code>&lt;...&gt;</code></strong> to mean variadics.</p>
<p>But that was how the scanner rules clanked together.  And since <strong>&lt;</strong> is a WORD!, if we assign that to an OBJECT! how do we get fields out of it?</p>
<pre><code>&gt;&gt; &lt;: make object! [x: 10]

&gt;&gt; &lt;.x
== 10
</code></pre>
<h2>But Something Has To Give</h2>
<p>I've been convinced.  Dots in tags have to win.</p>
<p>It's too useful to be able to say <strong><code>&lt;../foo.r&gt;</code></strong> as a file path.  <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=9" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p>The state of the system is different now: PATH!s and TUPLE!s are immutable, so they can be checked for disallowed patterns.  We can set a bit on the special-cased words that contain <strong>&lt;</strong> or <strong>&gt;</strong> and then quickly check at path creation time that they contain none of these "arrow words".</p>
<p>This means any &lt; or &gt; that you see in a path or tuple are guaranteed to be part of a TAG!.</p>
<p>You can still make some confusing-looking things:</p>
<pre><code>..&lt;..&gt;..
</code></pre>
<p>But with the rule of "no &lt; or &gt; words inside a path or tuple", you can confidently read that as a 5-element TUPLE with a TAG! in the middle of it.</p>
<pre><code>&gt;&gt; as block! ..&lt;..&gt;..
[_ _ &lt;..&gt; _ _]
</code></pre>
<h2>How Will You Pick Fields Out of Objects In Arrow Words?</h2>
<p>For purely evaluative purposes, you could just use a GROUP!:</p>
<pre><code>('&lt;).field
</code></pre>
<p>We <em>could</em> try and make some kind of escaping syntax so the literal value could actually be represented in the path.  This would help generic code that took an ANY-WORD! and wanted to make a PATH! out of it:</p>
<pre><code>#[word! "&lt;"].field
</code></pre>
<p>But if we prohibited it, I'm not sure how bad that would be.  It could be a <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">"yagni"</a> situation.  :-/</p>
<p>For now, I'm just going to hack on the scanner and path mechanics a bit and get us the tags.  This will please those who would like the idea of <strong><code>&lt;/&gt;</code></strong> and <strong><code>&lt;//&gt;</code></strong> and <strong><code>&lt;.&gt;</code></strong> and <strong><code>&lt;..&gt;</code></strong> being a TAG!</p>
<p>I don't know whether this concession is going to wind up turning into backing off <strong>&lt;:</strong> and <strong>&gt;:</strong> or not.  <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=9" title=":frowning:" class="emoji" alt=":frowning:"></p>
<pre><code>('&lt;): does [print "Is this good enough, now?"]
</code></pre>
<p>It would open up <strong><code>&lt;:&gt;</code></strong> and <strong><code>&lt;::&gt;</code></strong> and <strong><code>&lt;:/some/thing&gt;</code></strong> and a lot more tags of that nature, for what may seem like a pretty negligible loss.</p>
<h2>Has The History of This Topic Been Churn With No Benefit?</h2>
<p><img src="https://forum.rebol.info/images/emoji/twitter/no_entry.png?v=9" title=":no_entry:" class="emoji" alt=":no_entry:">  <strong>NO</strong>.</p>
<p>Because when you look systemically at all the parts, generic TUPLE! and generic PATH! are showing great promise.  I think this world in which things like <strong>/foo</strong> are PATH! and <strong>a.(b).10</strong> is a TUPLE! are really the right way to go.</p>
<p>For that matter, I don't actually think it's so crazy to put on the lenses where <strong><code>&lt;../foo.r&gt;</code></strong> is a PATH! containing two tuples.</p>
<p>Consider another very similar looking example of <strong><code>+../foo.r+</code></strong>.  That's:</p>
<pre><code> as path! reduce [
     as tuple! [+ _ _]
     as tuple! [foo r+]
 ]
</code></pre>
<p>I actually think that line of thinking has a lot of interesting dialecting possibilities.  The thing that makes the example with &lt; and &gt; in it trip up is that it treads on the usefulness of tags...and you wind up where <strong>r&gt;</strong> isn't even a valid tuple component.  More is being sacrificed and less is being gained.</p>
<p>All in all, it's progress.</p>
          <p><a href="https://forum.rebol.info/t/lexical-conflicts-back-to-bite-us-dots-in-tags/1702/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/lexical-conflicts-back-to-bite-us-dots-in-tags/1702/1</link>
        <pubDate>Fri, 03 Sep 2021 11:45:48 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1702-1</guid>
        <source url="https://forum.rebol.info/t/lexical-conflicts-back-to-bite-us-dots-in-tags/1702.rss">Lexical Conflicts Back To Bite Us: Dots In Tags</source>
      </item>
  </channel>
</rss>

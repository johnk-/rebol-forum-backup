<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Squaring the circle of LENGTH? and LENGTH-OF</title>
    <link>https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385</link>
    <description>The stated goal of Ren-C was experimentation, to try things that may-or-may-not be good ideas... push them around and get experience with them, and possibly revert ideas that turn out to be bad (or create new ideas).

There a long and drawn-out description on the Trello card for getting rid of the name LENGTH?.  This is one of the operations for which people were most unhappy with calling it LENGTH-OF.  So even though LENGTH is very &quot;nouny&quot; (and the name of several refinement parameters storing lengths, e.g. /PART LENGTH), it was defaulted to a synonym of LENGTH-OF.

But...aesthetics matter.  For instance: I am turned off by the look of **foo == bar** and its deceptive supposed complement **foo !== bar** (vs. **foo != bar** which is actually the complement of **foo = bar**...good luck with that, C programmers).  That gives rise to [musings on = and IS](https://forum.rebol.info/t/strict-equality-lax-equality-equivalence-sameness-is-and/349/9).

So it should not be surprising that I have suffered a fair amount of cognitive dissonance on things like LENGTH?/LENGTH-OF/LENGTH.  We may be used to HEAD and TAIL but not LENGTH, kind of how we&#39;re used to FOREACH but not MAPEACH (which doesn&#39;t make FORECH good, nor HEAD or TAIL).  Still, correcting it pains me, to look at what might be called a kind of **-OF** pollution, which is throwing extra words in places they do not belong.

I was writing some example code and had this:

    foo: func [n /accum a] [
        case [
           not accum [a: 0 | recurse: true]
           n = 0 [return a]
        ]
        frame: context-of &#39;n
        n: n - 1
        a: a + 2
        redo frame
    ]

And while I found myself liking the elegance of it on the whole, I kind of couldn&#39;t get past how in Red, this would say **frame: context? &#39;n** and it would *look better*.  The -OF feels like a &quot;wart&quot;.

But the Trello card on LENGTH-OF lays out the facts.  e.g. **HEAD** means give the head of a series, and **HEAD?** means ask for a LOGIC! of if the series is at its head.  So if you say **context? system** that seems like a yes or no question (&quot;is system a context?&quot;) and hence **context? 42** should be false.

This got me to wondering if there was some thinking-outside-the-box option which might be a symbolic modifier of the word.  **`context* foo`**, **`context&amp; foo`**, anything that wasn&#39;t taken already that might look better than -OF (those don&#39;t, really).  Backed into a corner I thought of this:

* Let **`-&gt;`** be a system-wide naming convention for GET
* Let **`&lt;-`** be a system-wide naming convention for SET

So if you want a shorthand for GET-LENGTH, it&#39;s **length-&gt;**.  If you want a shorthand for SET-LENGTH, it&#39;s **&lt;-length**.

GET operations tend to be arity-1, and SET operations are arity-2.  I&#39;m imagining that with the arrow-notation, the SETs are enfixed and put the thing to set on the left... but evaluated, not quoted.

    &gt;&gt; foo: &quot;gets overwritten&quot;
    &gt;&gt; word: &#39;foo
    &gt;&gt; word &lt;- 10
    &gt;&gt; print foo
    == 10

    &gt;&gt; foo: 20
    &gt;&gt; word: &#39;foo
    &gt;&gt; -&gt; word
    == 20
    
I propose the &lt;- operation be non-tight, so:

    &gt;&gt; words: [foo baz bar]
    &gt;&gt; first words &lt;- 30
    &gt;&gt; print foo
    == 30 ;-- words/1 was set to 30, not `words: 30`

What this paints is a picture of a world where you can write **property-&gt;** as a way of saying GET-PROPERTY.  While it may seem that **&lt;-property** lines up with GET-PROPERTY better, the leftward &quot;flow&quot; of information of **&lt;-** seems to make it a better SET than a GET.  So that means **property-&gt;** reads something like **property/get**.

How does it look in practice?  I feel it&#39;s an improvement:

    foo: func [n /accum a] [
        case [
           not accum [a: 0 | recurse: true]
           n = 0 [return a]
        ]
        frame: context-&gt; &#39;n
        n: n - 1
        a: a + 2
        redo frame
    ]

This would then free up **context? foo** as a synonym for what we today call **any-context? foo**.

It may appear to compete with TAG!, but there are several thoughts on this matter.  One thought is my going theory that `&lt;-` would not be a valid start of TAG!, nor `-&gt;` a valid ending, so you wouldn&#39;t have to worry about confusion.  Another thought from @rgchris is that being prescriptive about symmetry is silly, as **4chan** is not a natural but **chan4** is, and so `&lt;!-- foo bar --&gt;` can be a tag even if `--&gt;` is a standalone WORD! when there&#39;s no start tag in effect.

In any case, I guess the point is that I am feeling unsettled with both the Ren-C &quot;-OF warts&quot; and Red&#39;s continuation of the non-LOGIC! convention for ?.  I don&#39;t like either, so I wonder if this idea can lead us out of both traps.  And we can reclaim HEAD and TAIL as nouns, e.g. **head: head-&gt; s** and **tail: tail-&gt; s**

---

**Note:** Previous applications of `-&gt;` have been experimented of with things like meaning a lambda generator for functions, e.g.  **f: x -&gt; [print x]** being like **f: func [x] [print x]**.  However, there&#39;s other ways of writing that, such as **f: x &gt;&gt; [print x]** ... or even **f: x =&gt; [print x]** (there&#39;s some hope of perhaps reclaiming &lt;= and =&gt; as arrows, if people don&#39;t see them as comparison operators)</description>
    
    <lastBuildDate>Sat, 27 Jan 2018 00:45:18 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Squaring the circle of LENGTH? and LENGTH-OF</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>By and large, I think the enfixed OF has been a big win.</p>
<p>There are some questions it brings up of how you get a list of reflectors for a type.  This isn't a particularly new problem, and it parallels questions like "if I pass TO an INTEGER! how do I know which types it can accept as input"...generic actions hide information.  This was one of the arguments for why TO-INTEGER was useful, because of exposure of the interface.  One might argue that LENGTH-OF might be a similar hack.</p>
<p>The question of how reflectors are extended is pretty much exactly like the question of what R3-Alpha called "actions" are extended.  One problem I just noticed is that since NEXT is implemented currently as a specialization of SKIP, there's a question of how that might get wedged in as <strong>next of series</strong>.  Further how might parameterizations work?  How would I say <strong>[skip 3] of series</strong>, for instance?  <em>Should</em> I want to say that?</p>
<p>But the elegance of <strong>length of series</strong> can't be denied, and I don't think the total count of "design puzzles to solve in Rebol" went up all that much.  Certainly balanced out on how much we hated <strong>length x</strong> or <strong>length? x</strong> or <strong>length-of x</strong>.  Just wanted to mention the specialization issue, because I was pondering if NEXT might someday become NEXT OF SERIES to free up the variable "next" for common use.</p>
          <p><a href="https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385/7</link>
        <pubDate>Sat, 27 Jan 2018 00:45:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-385-7</guid>
        <source url="https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385.rss">Squaring the circle of LENGTH? and LENGTH-OF</source>
      </item>
      <item>
        <title>Squaring the circle of LENGTH? and LENGTH-OF</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="3" data-topic="385">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/brett/40/177_2.png" class="avatar"> Brett:</div>
<blockquote>
<p>My example of:</p>
<p><code>head: head of s</code></p>
<p>...is also meant to point to the dual meanings of the word "head", each meaning valid for different contextual notions.</p>
<p><em>Mixing the same symbols from different contextual notions in the same expression is not something that has been cracked in Rebol yet, imo.  I'm still hanging out for the "relative expression" promise to be fulfilled.</em></p>
</blockquote>
</aside>
<p>You are right to say it is not "solved".  But pointing out that what we're asking for here is a "relative expression" effect certainly bolsters the argument that attacking the problem is well within the scope of the language mission.</p>
<p>I only had to use <code>head of</code> (or more frequently <code>length of</code>) for a short time before becoming sold.  One has to consider the consequences of <em>not</em> figuring out how to do this...because the verbification of LENGTH caused a lot of devils in the details:</p>
<pre><code>charset: function [
    "Makes a bitset of chars for the parse function."
    chars [string! block! binary! char! integer!]
    /length "Preallocate this many bits"
    len [integer!] "Must be &gt; 0"
][
    ;-- CHARSET function historically has a refinement called /LENGTH, that
    ;-- is used to preallocate bits.  Yet the LENGTH? function has been
    ;-- changed to use just the word LENGTH.  We could change this to
    ;-- /CAPACITY SIZE or something similar, but keep it working for now.
    ;--
    length_CHARSET: length      ; refinement passed in
    unset 'length               ; helps avoid overlooking the ambiguity

    either length_CHARSET [append make bitset! len chars] [make bitset! chars]
]
</code></pre>
<p>...and those devils are still there for reused verbs like /ALL and aren't going away.  But when LENGTH crossed the verbification line it seemed more drastic and hard to predict.</p>
<p>To try this vision, I twisted the code around <a href="https://github.com/metaeducation/ren-c/pull/660" rel="nofollow noopener">and hacked it up for our common examples</a>.  It involved holding my nose a bit and digging in the bodies of code outside the evaluator.  Definitely a hack...but at least a hack that piggy-backs on existing unsolved problems, without really introducing any new ones.</p>
<p>While jumping in with this half-baked might be more akin to the kinds of half-thought-through behaviors I usually would ascribe to ... other developers ... <img src="//forum.rebol.info/images/emoji/twitter/stuck_out_tongue.png?v=7" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:">  I say we give it a chance.  People can still use specializations if they like (I point out they'd already been effectively doing this with things like WORDS-OF, so it's not that mind-blowing to have TYPE-OF be a reflector specialization).</p>
          <p><a href="https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385/6</link>
        <pubDate>Sun, 26 Nov 2017 18:19:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-385-6</guid>
        <source url="https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385.rss">Squaring the circle of LENGTH? and LENGTH-OF</source>
      </item>
      <item>
        <title>Squaring the circle of LENGTH? and LENGTH-OF</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>It didn't occur to me at first, but this concept already existed in R3-Alpha's REFLECT.  It had the same characteristic of taking a symbol and then doing a type-based dispatch to get it.</p>
<p><em>(Even though LENGTH and HEAD were "actions" and not "reflectors", this spirit of dispatch was already how they worked.  Each type had its own dispatch which received the symbol for a WORD! to react to in order to retrieve the property.  REFLECT just introduced another level in the dispatch which produces a kind of "reflection namespace", so you wouldn't be taking away a global name for it.  <strong>words obj</strong> must have seemed over the top, so <strong>reflect obj 'words</strong> meant WORDS itself wasn't an action, but then people wanted less typing so you got <strong>words-of</strong>.)</em></p>
<p>Not many people knew of REFLECT's existence, because they only used the specializations like SPEC-OF, BODY-OF, WORDS-OF, VALUES-OF... which were in the base definitions:</p>
<aside class="onebox githubblob">
  <header class="source">
      <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/mezz/base-defs.r#L19" target="_blank" rel="nofollow noopener">github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/mezz/base-defs.r#L19" target="_blank" rel="nofollow noopener">rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/mezz/base-defs.r#L19</a></h4>
<pre class="onebox"><code class="lang-r"><ol class="start lines" start="9" style="counter-reset: li-counter 8 ;">
<li>		Licensed under the Apache License, Version 2.0</li>
<li>		See: http://www.apache.org/licenses/LICENSE-2.0</li>
<li>	}</li>
<li>	Note: {</li>
<li>		This code is evaluated just after actions, natives, sysobj, and other lower</li>
<li>		levels definitions. This file intializes a minimal working environment</li>
<li>		that is used for the rest of the boot.</li>
<li>	}</li>
<li>]</li>
<li>
</li>
<li class="selected">;-- Create the reflector functions (e.g. spec-of, body-of, ...)</li>
<li>
</li>
<li>; Must be defined in A108 (no forward refs)</li>
<li>spec-of:</li>
<li>body-of:</li>
<li>words-of:</li>
<li>values-of:</li>
<li>types-of:</li>
<li>title-of:</li>
<li>	none</li>
<li>
</li>
</ol></code></pre>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>Very few properties were extracted this way, and the mechanisms were somewhat sketchy (par for the course with the sketchiness of most of the port and action code).  However, it was an existing mechanic that would need to be addressed one way or another.</p>
<p>Thus OF is just an enfix left-quoting convenience version of REFLECT.</p>
          <p><a href="https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385/5</link>
        <pubDate>Sun, 26 Nov 2017 15:37:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-385-5</guid>
        <source url="https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385.rss">Squaring the circle of LENGTH? and LENGTH-OF</source>
      </item>
      <item>
        <title>Squaring the circle of LENGTH? and LENGTH-OF</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="3" data-topic="385">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/brett/40/177_2.png" class="avatar"> Brett:</div>
<blockquote>
<p><code>head: head of s</code></p>
</blockquote>
</aside>
<p>Great minds think alike!  I was actually thinking about using <code>-&gt;</code> to do a pick out of a context, like <code>head: head -&gt; s</code> would be interpreted as <code>head: getters/head s</code> or somesuch.</p>
<p>But that was steamrolling ahead with my use of the arrow.  I was just frustrated looking at things like <strong>context$</strong> and <strong>length~</strong> and similar, and wanting to break out of that.  The arrow seemed like the least offensive of the symbolic brainstorms I was doing, with some history of PUT, and so maybe GET too.</p>
<p><em><strong>Yet this spin on OF is certainly better looking--and not as far flung!</strong></em>  I like the way you put it, that it's <code>-</code> that's the wart.</p>
<p>Mechanically we now have soft quoting on left enfix, so you could do:</p>
<pre><code>x: (pick [length context] i) of 'n
</code></pre>
<p>It is "weird", but this is actually how "actions" work (like APPEND), they're really symbol dispatches on the word.  And since we both had the same style of idea in the same 12-hour period when looking at the same question, it may not be completely bonkers.</p>
<p>I'll point out that with specialization and OneFunction, if you were in a situation where you needed a single arity function you can always make one:</p>
<pre><code>takes-single-arity: func [f [function!]] [
    print (f "test")
]
takes-single-arity (specialize 'of [property: 'length])
</code></pre>
<p>So if you ever needed LENGTH-OF you can make it.</p>
<p>I say we keep thinking on this, because as I say, I'm just not happy with LENGTH? or LENGTH or LENGTH-OF...and already I feel more compelled to put up with some level of weirdness about this kind of strategy vs. going with any of those.</p>
<p>One question to ask: most enfixed operators have prefix forms.  (<strong>X + Y</strong> is <strong>ADD X Y</strong>, <strong>X ELSE Y</strong> is <strong>EITHER-TEST-VALUE X Y</strong>).  Does OF have a prefix name?  <strong>PROPERTY-OF 'LENGTH STR</strong>?</p>
          <p><a href="https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385/4</link>
        <pubDate>Tue, 21 Nov 2017 23:37:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-385-4</guid>
        <source url="https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385.rss">Squaring the circle of LENGTH? and LENGTH-OF</source>
      </item>
      <item>
        <title>Squaring the circle of LENGTH? and LENGTH-OF</title>
        <dc:creator><![CDATA[Brett]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="1" data-topic="385">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>The -OF feels like a "wart".</p>
</blockquote>
</aside>
<p>Just being out of the box - perhaps the "-" is the "wart"?</p>
<pre><code>frame: context of 'n
</code></pre>
<p>and</p>
<pre><code>head: head of s
</code></pre>
<p>I admit that the "of" looks superfluous in the second example compared with prior experience, but not if one wants "head" as a variable.</p>
<aside class="quote no-group" data-post="1" data-topic="385">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Backed into a corner I thought of this:</p>
<p>Let -&gt; be a system-wide naming convention for GET<br>
Let &lt;- be a system-wide naming convention for SET</p>
</blockquote>
</aside>
<p>Arrows for me are very dramatic aesthetically implying action.  This clearly has a set like appearance:</p>
<pre><code>word &lt;- 10
</code></pre>
<p>but I find this on first appearance to be confusing:</p>
<pre><code>-&gt; word
</code></pre>
<p>though over time one could come to accept it as a dereferencing operator.</p>
<p>Perhaps the problem with it will be when it is used as part of a larger expression:</p>
<pre><code>multiply 3 -&gt; word
</code></pre>
<p>but again maybe it is not an issue once familiarity is gained.</p>
<p>My example of:</p>
<pre><code>head: head of s
</code></pre>
<p>is also meant to point to the dual meanings of the word "head", each meaning valid for different contextual notions.  Mixing the same symbols from different contextual notions in the same expression is not something that has been craked in Rebol yet, imo.  I'm still hanging out for the "relative expression" promis to be fulfilled <img src="//forum.rebol.info/images/emoji/twitter/slight_smile.png?v=7" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385/3</link>
        <pubDate>Tue, 21 Nov 2017 23:27:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-385-3</guid>
        <source url="https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385.rss">Squaring the circle of LENGTH? and LENGTH-OF</source>
      </item>
      <item>
        <title>Squaring the circle of LENGTH? and LENGTH-OF</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em>(Note: We can see that as with today's GET and SET, the -&gt; and &lt;- operators offer something that GET-WORD! and SET-WORD! do not...to evaluate the word to be set.  I might even argue that they obsolete today's GET and SET, to the point that we might imagine those being blankifying functions that soft-quote their first arg.)</em></p>
<pre><code>&gt;&gt; unset 'foo
&gt;&gt; get foo
== _
&gt;&gt; get (first [foo bar])
== _

&gt;&gt; set foo 10
&gt;&gt; foo
== 10
&gt;&gt; set foo ()
** Error because SET requires a value, unlike &lt;- or foo:
</code></pre>
<p><em>(But for now, put that radical suggestion aside, and assume redundancy of function between SET and &lt;-  and GET and -&gt; is fine.)</em></p>
          <p><a href="https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385/2</link>
        <pubDate>Tue, 21 Nov 2017 14:28:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-385-2</guid>
        <source url="https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385.rss">Squaring the circle of LENGTH? and LENGTH-OF</source>
      </item>
      <item>
        <title>Squaring the circle of LENGTH? and LENGTH-OF</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The stated goal of Ren-C was experimentation, to try things that may-or-may-not be good ideas... push them around and get experience with them, and possibly revert ideas that turn out to be bad (or create new ideas).</p>
<p>There a long and drawn-out description on the Trello card for getting rid of the name LENGTH?.  This is one of the operations for which people were most unhappy with calling it LENGTH-OF.  So even though LENGTH is very "nouny" (and the name of several refinement parameters storing lengths, e.g. /PART LENGTH), it was defaulted to a synonym of LENGTH-OF.</p>
<p>But...aesthetics matter.  For instance: I am turned off by the look of <strong>foo == bar</strong> and its deceptive supposed complement <strong>foo !== bar</strong> (vs. <strong>foo != bar</strong> which is actually the complement of <strong>foo = bar</strong>...good luck with that, C programmers).  That gives rise to <a href="https://forum.rebol.info/t/strict-equality-lax-equality-equivalence-sameness-is-and/349/9">musings on = and IS</a>.</p>
<p>So it should not be surprising that I have suffered a fair amount of cognitive dissonance on things like LENGTH?/LENGTH-OF/LENGTH.  We may be used to HEAD and TAIL but not LENGTH, kind of how we're used to FOREACH but not MAPEACH (which doesn't make FORECH good, nor HEAD or TAIL).  Still, correcting it pains me, to look at what might be called a kind of <strong>-OF</strong> pollution, which is throwing extra words in places they do not belong.</p>
<p>I was writing some example code and had this:</p>
<pre><code>foo: func [n /accum a] [
    case [
       not accum [a: 0 | recurse: true]
       n = 0 [return a]
    ]
    frame: context-of 'n
    n: n - 1
    a: a + 2
    redo frame
]
</code></pre>
<p>And while I found myself liking the elegance of it on the whole, I kind of couldn't get past how in Red, this would say <strong>frame: context? 'n</strong> and it would <em>look better</em>.  The -OF feels like a "wart".</p>
<p>But the Trello card on LENGTH-OF lays out the facts.  e.g. <strong>HEAD</strong> means give the head of a series, and <strong>HEAD?</strong> means ask for a LOGIC! of if the series is at its head.  So if you say <strong>context? system</strong> that seems like a yes or no question ("is system a context?") and hence <strong>context? 42</strong> should be false.</p>
<p>This got me to wondering if there was some thinking-outside-the-box option which might be a symbolic modifier of the word.  <strong><code>context* foo</code></strong>, <strong><code>context&amp; foo</code></strong>, anything that wasn't taken already that might look better than -OF (those don't, really).  Backed into a corner I thought of this:</p>
<ul>
<li>Let <strong><code>-&gt;</code></strong> be a system-wide naming convention for GET</li>
<li>Let <strong><code>&lt;-</code></strong> be a system-wide naming convention for SET</li>
</ul>
<p>So if you want a shorthand for GET-LENGTH, it's <strong>length-&gt;</strong>.  If you want a shorthand for SET-LENGTH, it's <strong>&lt;-length</strong>.</p>
<p>GET operations tend to be arity-1, and SET operations are arity-2.  I'm imagining that with the arrow-notation, the SETs are enfixed and put the thing to set on the left... but evaluated, not quoted.</p>
<pre><code>&gt;&gt; foo: "gets overwritten"
&gt;&gt; word: 'foo
&gt;&gt; word &lt;- 10
&gt;&gt; print foo
== 10

&gt;&gt; foo: 20
&gt;&gt; word: 'foo
&gt;&gt; -&gt; word
== 20
</code></pre>
<p>I propose the &lt;- operation be non-tight, so:</p>
<pre><code>&gt;&gt; words: [foo baz bar]
&gt;&gt; first words &lt;- 30
&gt;&gt; print foo
== 30 ;-- words/1 was set to 30, not `words: 30`
</code></pre>
<p>What this paints is a picture of a world where you can write <strong>property-&gt;</strong> as a way of saying GET-PROPERTY.  While it may seem that <strong>&lt;-property</strong> lines up with GET-PROPERTY better, the leftward "flow" of information of <strong>&lt;-</strong> seems to make it a better SET than a GET.  So that means <strong>property-&gt;</strong> reads something like <strong>property/get</strong>.</p>
<p>How does it look in practice?  I feel it's an improvement:</p>
<pre><code>foo: func [n /accum a] [
    case [
       not accum [a: 0 | recurse: true]
       n = 0 [return a]
    ]
    frame: context-&gt; 'n
    n: n - 1
    a: a + 2
    redo frame
]
</code></pre>
<p>This would then free up <strong>context? foo</strong> as a synonym for what we today call <strong>any-context? foo</strong>.</p>
<p>It may appear to compete with TAG!, but there are several thoughts on this matter.  One thought is my going theory that <code>&lt;-</code> would not be a valid start of TAG!, nor <code>-&gt;</code> a valid ending, so you wouldn't have to worry about confusion.  Another thought from <a class="mention" href="/u/rgchris">@rgchris</a> is that being prescriptive about symmetry is silly, as <strong>4chan</strong> is not a natural but <strong>chan4</strong> is, and so <code>&lt;!-- foo bar --&gt;</code> can be a tag even if <code>--&gt;</code> is a standalone WORD! when there's no start tag in effect.</p>
<p>In any case, I guess the point is that I am feeling unsettled with both the Ren-C "-OF warts" and Red's continuation of the non-LOGIC! convention for ?.  I don't like either, so I wonder if this idea can lead us out of both traps.  And we can reclaim HEAD and TAIL as nouns, e.g. <strong>head: head-&gt; s</strong> and <strong>tail: tail-&gt; s</strong></p>
<hr>
<p><strong>Note:</strong> Previous applications of <code>-&gt;</code> have been experimented of with things like meaning a lambda generator for functions, e.g.  <strong>f: x -&gt; [print x]</strong> being like <strong>f: func [x] [print x]</strong>.  However, there's other ways of writing that, such as <strong>f: x &gt;&gt; [print x]</strong> ... or even <strong>f: x =&gt; [print x]</strong> (there's some hope of perhaps reclaiming &lt;= and =&gt; as arrows, if people don't see them as comparison operators)</p>
          <p><a href="https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385/1</link>
        <pubDate>Tue, 21 Nov 2017 14:21:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-385-1</guid>
        <source url="https://forum.rebol.info/t/squaring-the-circle-of-length-and-length-of/385.rss">Squaring the circle of LENGTH? and LENGTH-OF</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Embracing Dialected TUPLE! and PATH!</title>
    <link>https://forum.rebol.info/t/embracing-dialected-tuple-and-path/1355</link>
    <description>I&#39;ve talked about the idea of **[using TUPLE! for &quot;predicates&quot;](https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045)**.  The specific concept that I had would be that the elements of the tuple would represent the function calls in the order you&#39;d write them:

    &gt;&gt; any .even? [1 3 7 10 13]  ; parallel to `even? 1`, `even? 3`...
    == 10

    &gt;&gt; all .not.odd? [2 4 6 8]  ; parallel to `not odd? 2`, `not odd? 4`...
    == 8

But I&#39;ve also been arguing for dots having meaning in ordinary PATH! dispatch, e.g. when not having a leading blank.  In that case, I&#39;d said things like *&quot;functions wouldn&#39;t be on the left side of a dot&quot;*.  But that&#39;s a whole different purpose.

Put these two together in the same line, and you might wind up looking at code like:

     &gt;&gt; obj: make object! [data: [2 4 6 8]]

     &gt;&gt; all .not.odd? obj.data.
     == 8

* The BLANK!-headed TUPLE! **`.not.odd?`** matched the skippable parameter type constraint for &quot;PREDICATE!&quot;, and is interpreted as **chain [:odd? | :not]** ...or **(-&gt; not odd?)** if you are using [POINTFREE](https://forum.rebol.info/t/looking-into-a-usermode-pointfree/1236)

* `obj.data.` was interpreted as a non-blank-headed tuple, so it&#39;s the argument...and the terminal dot indicates the caller wanted to ensures that obj.data isn&#39;t a function .

## Is this *bad*?

If TUPLE! were always inert (as in the original proposal) you&#39;d never see things like that, you&#39;d only see:

    &gt;&gt; all .not.odd? obj/data
    == 8

But I&#39;m now fairly sold on TUPLE! for member selection (looks good) and the terminal dot to say &quot;don&#39;t execute&quot; is really promising.

I&#39;ll point out that there are ways to avoid the particular juxtaposition of tuples if it bothered you:

    &gt;&gt; all .not.odd? pick obj &#39;data
    == 8

    &gt;&gt; all/predicate obj.data. (-&gt; not odd?)
    == 8

    &gt;&gt; apply &#39;all [obj.data. /predicate func [x] [not odd? x]]  ; syntax pending
    == 8

So a lot of ways to attack it.  And these are advanced features, so you can imagine people writing quite a lot of code without ever doing this kind of thing.

But the bigger philosophical question is about entering the era where TUPLE! and PATH! become candidates for multiple dialected meanings.  Is *that* good or bad?

## Dialecting ANY-SEQUENCE! Is Good (in the spirit of the &quot;game&quot;)

We don&#39;t really have problems when a BLOCK! of code contains PARSE instructions vs. being executed by DO.  So why should different purposes for TUPLE! be considered strange?

Having the parts be robust enough to want to use creatively is a good thing.  I think it&#39;s just new, and figuring out what to do with that newness will likely take some time.</description>
    
    <lastBuildDate>Sun, 04 Oct 2020 06:26:55 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/embracing-dialected-tuple-and-path/1355.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Embracing Dialected TUPLE! and PATH!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've talked about the idea of <strong><a href="https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045">using TUPLE! for "predicates"</a></strong>.  The specific concept that I had would be that the elements of the tuple would represent the function calls in the order you'd write them:</p>
<pre><code>&gt;&gt; any .even? [1 3 7 10 13]  ; parallel to `even? 1`, `even? 3`...
== 10

&gt;&gt; all .not.odd? [2 4 6 8]  ; parallel to `not odd? 2`, `not odd? 4`...
== 8
</code></pre>
<p>But I've also been arguing for dots having meaning in ordinary PATH! dispatch, e.g. when not having a leading blank.  In that case, I'd said things like <em>"functions wouldn't be on the left side of a dot"</em>.  But that's a whole different purpose.</p>
<p>Put these two together in the same line, and you might wind up looking at code like:</p>
<pre><code> &gt;&gt; obj: make object! [data: [2 4 6 8]]

 &gt;&gt; all .not.odd? obj.data.
 == 8
</code></pre>
<ul>
<li>
<p>The BLANK!-headed TUPLE! <strong><code>.not.odd?</code></strong> matched the skippable parameter type constraint for "PREDICATE!", and is interpreted as <strong>chain [:odd? | :not]</strong> ...or <strong>(-&gt; not odd?)</strong> if you are using <a href="https://forum.rebol.info/t/looking-into-a-usermode-pointfree/1236">POINTFREE</a></p>
</li>
<li>
<p><code>obj.data.</code> was interpreted as a non-blank-headed tuple, so it's the argument...and the terminal dot indicates the caller wanted to ensures that obj.data isn't a function .</p>
</li>
</ul>
<h2>Is this <em>bad</em>?</h2>
<p>If TUPLE! were always inert (as in the original proposal) you'd never see things like that, you'd only see:</p>
<pre><code>&gt;&gt; all .not.odd? obj/data
== 8
</code></pre>
<p>But I'm now fairly sold on TUPLE! for member selection (looks good) and the terminal dot to say "don't execute" is really promising.</p>
<p>I'll point out that there are ways to avoid the particular juxtaposition of tuples if it bothered you:</p>
<pre><code>&gt;&gt; all .not.odd? pick obj 'data
== 8

&gt;&gt; all/predicate obj.data. (-&gt; not odd?)
== 8

&gt;&gt; apply 'all [obj.data. /predicate func [x] [not odd? x]]  ; syntax pending
== 8
</code></pre>
<p>So a lot of ways to attack it.  And these are advanced features, so you can imagine people writing quite a lot of code without ever doing this kind of thing.</p>
<p>But the bigger philosophical question is about entering the era where TUPLE! and PATH! become candidates for multiple dialected meanings.  Is <em>that</em> good or bad?</p>
<h2>Dialecting ANY-SEQUENCE! Is Good (in the spirit of the "game")</h2>
<p>We don't really have problems when a BLOCK! of code contains PARSE instructions vs. being executed by DO.  So why should different purposes for TUPLE! be considered strange?</p>
<p>Having the parts be robust enough to want to use creatively is a good thing.  I think it's just new, and figuring out what to do with that newness will likely take some time.</p>
          <p><a href="https://forum.rebol.info/t/embracing-dialected-tuple-and-path/1355/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/embracing-dialected-tuple-and-path/1355/1</link>
        <pubDate>Sun, 04 Oct 2020 06:26:55 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1355-1</guid>
        <source url="https://forum.rebol.info/t/embracing-dialected-tuple-and-path/1355.rss">Embracing Dialected TUPLE! and PATH!</source>
      </item>
  </channel>
</rss>

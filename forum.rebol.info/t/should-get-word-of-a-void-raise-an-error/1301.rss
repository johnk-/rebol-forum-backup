<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should GET-WORD! of a VOID! raise an error?</title>
    <link>https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301</link>
    <description>The following is the behavior of Rebol2 when a GET-WORD! is used on an &quot;UNSET!&quot; value:

    rebol2&gt;&gt; unset &#39;x
    rebol2&gt;&gt; type? :x
    ** Script Error: x has no value

So you would have to fall back on GET/ANY to really get a VOID!

    rebol2&gt;&gt; type? get/any &#39;x
    == unset!

But R3-Alpha decided to be more lenient in this respect, and Red followed the lead:

    r3-alpha&gt;&gt; unset &#39;x
    r3-alpha&gt;&gt; type? :x
    == unset!

    red&gt;&gt; unset &#39;x
    red&gt;&gt; type? :x
    == unset!

I&#39;ve always been skeptical of this, because quite often the reason you are using a GET-WORD! is because you think the thing in your hand might be a function and you don&#39;t want to call it.  But when you let it mean &quot;get a thing that&#39;s not set&quot; as well, you&#39;re opening the doors to letting typos through:

    return reduce [&quot;My Action&quot; :my-actionn]  ; whoops, I meant MY-ACTION!

Is it worth the tradeoff?  If anyone would say yes, it would probably be me... because I argue for the importance of being able to write truly generic code... so that usermode can be as rigorous as the internals.  But I&#39;m not really sure.  Maybe most generic code should choke on VOID! unless you really wanted to process them... and maybe that added step of having to use GET/ANY is what it should take.

@rgchris [suggests some agreement](https://chat.stackoverflow.com/transcript/message/49923584#49923584):

&gt; I feel  **:var**  should be the route to disarming functions/errors as the imperative usageâ€”makes passing them on more intuitive.

**I will point out that if we go back to the Rebol2 style, there&#39;s nothing stopping versions of the future from opening it back up to the R3-Alpha and Red style.**  But if people write code expecting GET-WORD!s to return void it will be harder to backpedal later when any significant codebases exist.

This leads me to think we might want to try going back to erroring on VOID! with GET-WORD! and see where the pain points are.  There may be tools for addressing that pain that are shaped other ways.

Any objections?</description>
    
    <lastBuildDate>Sat, 17 Apr 2021 10:36:27 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should GET-WORD! of a VOID! raise an error?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="2" data-topic="1301">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p><strong>type of :thing</strong> is common enough and more awkward when expressed as <strong>type of get/any 'thing</strong> .</p>
</blockquote>
</aside>
<p>I'm feeling a bit of the frustration on this.  And some things have changed.  So it's probably time to look at these things.</p>
<p>I haven't got everything figured out for "sea of words" (and have been doing other things, while I think about it).</p>
<p>But it's bringing about a shift that's a bit like JavaScript's strict mode...where typos are not going to be introducing new definitions.  This will reduce the risk of GET-WORD! being able to return "voids/bad-words" by quite a lot.</p>
<p>That said...I feel like "don't run functions" and "this might be undefined" are different source-level intentions.  I want to know when I read code which was intended.</p>
<p>So I'm on the fence about the meaning of terminal dot in TUPLE!.  Could <strong>obj.some-func.</strong> mean "if obj.some-func looks up to an ACTION!, don't run it"?  The period meaning something terminal?</p>
<p>I'd been going with the idea of "be assured this isn't a function".  However, the idea that functions can act like objects and have their "meta" fields accessed with dots is becoming attractive.  <strong>obj.some-func.property</strong></p>
<p>Something to think about.  In any case, there will hopefully be good news on sea of words and modules coming along at some point... and I think it has a bearing on this question.  But having different notations for the disable-function-call and this-may-be-undefined intent still feels pertinent.</p>
          <p><a href="https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301/6</link>
        <pubDate>Sat, 17 Apr 2021 10:36:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1301-6</guid>
        <source url="https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301.rss">Should GET-WORD! of a VOID! raise an error?</source>
      </item>
      <item>
        <title>Should GET-WORD! of a VOID! raise an error?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="4" data-topic="1301">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Ideas welcome...report any perceived problems or benefits.</p>
</blockquote>
</aside>
<p><strong>I think I may be building to The Answer</strong>.  The watershed concept of tuple and path discernment could give what we need here.</p>
<p>Let's say we put it back, and then...</p>
<ul>
<li>
<p><strong>PATH!</strong> looks up ANY-VALUE!, but errors on VOID!.  If the value that it looks up to is an ACTION!, it runs it.</p>
<ul>
<li>
<p><em>...but new twist...</em> if you end the PATH! in a slash, it will ensure the looked up to value is an action. If it's not, it will error.</p>
</li>
<li>
<p>If an action is executed, then all results are considered legal...so it can return ANY-VALUE!, including ACTION! and VOID!</p>
</li>
<li>
<p>We can observe thus that there is a policy that "nothing to the left of a slash can be void".</p>
</li>
</ul>
</li>
<li>
<p><strong>GET-PATH!</strong> is a variation on PATH! that does not run the action, but just fetches the value...and does not error on VOID!</p>
<ul>
<li>As with plain path, ending with a slash will enforce that the looked up result is an ACTION!.  But since this is also the result, it further guarantees the overall evaluation is an action.</li>
</ul>
</li>
<li>
<p><strong>TUPLE!</strong> acts like PATH! with the distinction that nothing to the left of a dot can be an ACTION!.</p>
<ul>
<li>
<p>If you end in a dot, you are thus saying that the result is <em>neither an action or a void</em>.  You don't run the action, so you just got the value looked up to.</p>
</li>
<li>
<p>If you don't end in a dot, the result can be ANY-VALUE!, because you may run an action...and many actions return void.</p>
</li>
</ul>
</li>
<li>
<p><strong>GET-TUPLE!</strong> modifies tuple access rules to parallel GET-PATH!, but without the allowance of VOID! return results.</p>
<ul>
<li>A GET-TUPLE! that ends in a dot is thus pointless if you're writing it from scratch, but if it was fabricated by transformation it does the right thing.</li>
</ul>
</li>
</ul>
<p>So for day-to-day safety, tuples are the best choice: <strong>a.b.c</strong>.  If you're paranoid about running code when you don't want to run code, end those tuples with dot (e.g. <strong>a.b.c.</strong>)</p>
<p>But this doesn't give you any particular super powers on the results of plain tuple.  It would be neat to have a shorthand for checking a function invocation to say something about the results.</p>
<p>We could imagine it being an application of the leading position:</p>
<pre><code> /some/path/  ; ensure an action is run, then ensure result is ACTION!
 .some.path  ; action may or may not run, result is not ACTION! or VOID! 
</code></pre>
<p>That's fairly rational.  But we need tuples with leading dots to be inert too badly (for predicates), and might as well stay compatible with history having "refinements" be inert too.  Two good reasons to avoid such an interpretation.</p>
<p>There's adding more to the the trailing position, but it has a problem differentiating check result vs. check lookup.  Only these two combinations have meaning:</p>
<pre><code> some/path//  ; ensure an action is run, then ensure result is ACTION!
 some/path/.  ; ensure an action is run, result is not ACTION! or VOID
</code></pre>
<p>You get a contradiction out of <strong>some.path./</strong> ("guarantee lookup isn't a function but that the result is").  And <strong>some.path..</strong> is useless ("guarantee lookup isn't a function and that the result isn't a function").  There's no point in introducing something broken and ugly, for only two cases that no one would use.</p>
<p>However, if you're target is an assignment vs. passing the value on somewhere...then as a consolation prize, we can use the terminal state on assignments in SET-PATH! and SET-TUPLE! by giving meaning to it:</p>
<pre><code>action/: expression-that-must-return-action
not-action-not-void.: expression-that-must-return-non-action-non-void
</code></pre>
<p>Though that's only two options, they're pretty good ones to have.  Almost all the the time you need to know whether you're assigning an action or not.  And if you're assigning an action you know it's not void, so both these assignment forms prohibit voids.</p>
<p>It's weird to see it all bottoming out at baseline where <strong>x: :y</strong> is absolutely 100% permissive...any state on either side.  But there's a kind of purity to that, and it's certainly good for code golf (which remains an important target market in my mind!)</p>
<p>I think as people adjust to using TUPLE! by default, the GET-TUPLE! protection against void will seem natural.  And tools like <strong>ensure integer! x</strong> and <strong>non action! y</strong> are all shaping up pretty well to fill in the rest.  Terminal dot and terminal slash are just convenient and effective shorthands for common worries, for people who have systemic needs for good error locality (e.g. me debugging bootstrap!)</p>
          <p><a href="https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301/5</link>
        <pubDate>Tue, 22 Sep 2020 09:51:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1301-5</guid>
        <source url="https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301.rss">Should GET-WORD! of a VOID! raise an error?</source>
      </item>
      <item>
        <title>Should GET-WORD! of a VOID! raise an error?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="1" data-topic="1301">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>This leads me to think we might want to try going back to erroring on VOID! with GET-WORD! and see where the pain points are. There may be tools for addressing that pain that are shaped other ways.</p>
</blockquote>
</aside>
<p>All right, I've gone with it.  The commits are now in <a href="https://github.com/metaeducation/ren-c/commit/31ee6d41ffc25da248a46d50660ce963deb33e17" rel="nofollow noopener">master branch</a> (still pre-stackless) and <a href="https://github.com/metaeducation/ren-c/commit/39fa809928ddc20aa89a7b96da42d2c7a4819a14" rel="nofollow noopener">R3C branch</a>.</p>
<p>Because path processing is a bit costly, I went ahead with a specialization as <strong><code>GET* 'X</code></strong> which acts the same as <strong>GET/ANY 'X</strong>.  It's not quite as cheap as the <strong>:X</strong> single-token GET-WORD! for accessing a voided word, since it has to fetch a function and run it.  But at least it doesn't do path processing, and since it's a native and not a specialization it doesn't have to pay for the (small) specialization overhead.  It might be worth it for performance-critical code to have such a thing...I don't know.</p>
<p>This brings back the question of if we want an easier test for whether a variable is voided, e.g. <strong>VOIDED? VAR</strong> or <strong>UNDEFINED? VAR</strong>.  I had suggested that I thought VOIDED? was clearer by not introducing a new wacky term which might get confused with UNSET? (e.g. actual lack of value, NULL).  But then I screwed up a usage of it which gave me second thoughts.</p>
<p>I've often mentioned my torment over whether to stick with "UNSET?" as meaning "set to void", but I really feel that a NULL variable is one that is not set... has <em>no</em> value.  Contains nothing you can put in a block.  We could also test this with <strong>nulled? var</strong>.  But as with voided-the-word I feel like you could easy get confused with VOID? and VOIDED? as to what it is talking about, while a word that removes you from mentioning the type might be better for comprehension.</p>
<p>Ideas welcome...report any perceived problems or benefits.  So far I like it and it doesn't seem to really affect all that much code; many of the problem areas are more on the SET side, which we've decided permit VOID! unless you pre-filter it out with constructs before the SET.</p>
<hr>
<p>Note: Something additionally I did on master (though not R3C) was some reconciliation of terminology in the internal C sources themselves.  So for instance, if an address of a bound word is found in a context and void is legal, I don't call that "Get_Word_XXX"... instead it is "Lookup_Word_XXX".  This way any time you see Get_Word_XXX you know that VOID! will be pre-filtered for you and raise an error.  I like to keep things in sync like this, to help people reading the C be informed by parity with language behaviors.</p>
          <p><a href="https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301/4</link>
        <pubDate>Thu, 16 Jul 2020 19:32:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1301-4</guid>
        <source url="https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301.rss">Should GET-WORD! of a VOID! raise an error?</source>
      </item>
      <item>
        <title>Should GET-WORD! of a VOID! raise an error?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="1301">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I do wonder if there'd be a way to override this, for exampleâ€”OF could be allowed to reflect on VOID values</p>
</blockquote>
</aside>
<p>The typos are a problem, because if <strong>(type of firrst [a b c])</strong> is going to be sneaky and void-tolerant, that will silently evaluate to <strong>[a b c]</strong>.</p>
<p>Nevertheless, Ren-C is capable of the experiment:</p>
<pre><code>of: enfixed func [
    'property [word!]  ; soft quote for `(second [length type]) of value`
    :look [&lt;...&gt; &lt;opt&gt; any-value!]  ; hard quote variadic can peek one ahead
    value [&lt;...&gt; &lt;opt&gt; any-value!]  ; normal variadic TAKE if not voided word
][
    reflect either void? get/any try match [word! path!] first look [
        take look
        void
    ][
        take value
    ] property
]

&gt;&gt; type of asdfasdf
== #[datatype! void!]

&gt;&gt; type of second [&lt;a&gt; #b {c}]
== #[datatype! issue!]
</code></pre>
<p>The rules for what variadics can and cannot do mirror the rules the evaluator has for itself.  So having a quoted variadic feed to "peek" at the next item in the feed and see if it is a WORD! or PATH! evaluating to VOID!, then bypassing that WORD! from evaluation and returning the void datatype can be done.</p>
<p>I doubt it's a good idea to make it do this kind of thing out of the box.  But neat that you <em>can</em> do it.</p>
          <p><a href="https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301/3</link>
        <pubDate>Wed, 15 Jul 2020 18:34:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1301-3</guid>
        <source url="https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301.rss">Should GET-WORD! of a VOID! raise an error?</source>
      </item>
      <item>
        <title>Should GET-WORD! of a VOID! raise an error?</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I do wonder if there'd be a way to override this, for exampleâ€”OF could be allowed to reflect on VOID values as more likely than not, you're going to catch a typo if you get a result you don't expect. <strong>type of :thing</strong> is common enough and more awkward when expressed as <strong>type of get/any 'thing</strong> . Not sure if that becomes an extra burden on the function spec.</p>
          <p><a href="https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301/2</link>
        <pubDate>Wed, 15 Jul 2020 13:30:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1301-2</guid>
        <source url="https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301.rss">Should GET-WORD! of a VOID! raise an error?</source>
      </item>
      <item>
        <title>Should GET-WORD! of a VOID! raise an error?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The following is the behavior of Rebol2 when a GET-WORD! is used on an "UNSET!" value:</p>
<pre><code>rebol2&gt;&gt; unset 'x
rebol2&gt;&gt; type? :x
** Script Error: x has no value
</code></pre>
<p>So you would have to fall back on GET/ANY to really get a VOID!</p>
<pre><code>rebol2&gt;&gt; type? get/any 'x
== unset!
</code></pre>
<p>But R3-Alpha decided to be more lenient in this respect, and Red followed the lead:</p>
<pre><code>r3-alpha&gt;&gt; unset 'x
r3-alpha&gt;&gt; type? :x
== unset!

red&gt;&gt; unset 'x
red&gt;&gt; type? :x
== unset!
</code></pre>
<p>I've always been skeptical of this, because quite often the reason you are using a GET-WORD! is because you think the thing in your hand might be a function and you don't want to call it.  But when you let it mean "get a thing that's not set" as well, you're opening the doors to letting typos through:</p>
<pre><code>return reduce ["My Action" :my-actionn]  ; whoops, I meant MY-ACTION!
</code></pre>
<p>Is it worth the tradeoff?  If anyone would say yes, it would probably be me... because I argue for the importance of being able to write truly generic code... so that usermode can be as rigorous as the internals.  But I'm not really sure.  Maybe most generic code should choke on VOID! unless you really wanted to process them... and maybe that added step of having to use GET/ANY is what it should take.</p>
<p><a class="mention" href="/u/rgchris">@rgchris</a> <a href="https://chat.stackoverflow.com/transcript/message/49923584#49923584" rel="nofollow noopener">suggests some agreement</a>:</p>
<blockquote>
<p>I feel  <strong>:var</strong>  should be the route to disarming functions/errors as the imperative usageâ€”makes passing them on more intuitive.</p>
</blockquote>
<p><strong>I will point out that if we go back to the Rebol2 style, there's nothing stopping versions of the future from opening it back up to the R3-Alpha and Red style.</strong>  But if people write code expecting GET-WORD!s to return void it will be harder to backpedal later when any significant codebases exist.</p>
<p>This leads me to think we might want to try going back to erroring on VOID! with GET-WORD! and see where the pain points are.  There may be tools for addressing that pain that are shaped other ways.</p>
<p>Any objections?</p>
          <p><a href="https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301/1</link>
        <pubDate>Wed, 15 Jul 2020 03:35:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1301-1</guid>
        <source url="https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301.rss">Should GET-WORD! of a VOID! raise an error?</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>COPY and PORT!</title>
    <link>https://forum.rebol.info/t/copy-and-port/1699</link>
    <description>As it so happens, the network and file ports seem to want to make COPY &quot;get data out of the port&#39;s buffer&quot;.

The idea is that you ask for a READ, asynchronously.  Then you wait for a wake up event.  This event arrives with no information other than it was a &quot;receive&quot; event that happened on that port...so the data does not live in the event (it can&#39;t, EVENT! is too small to hold both the port it is notifying and the pointer to data).

So in the code you write for processing the read event, it&#39;s time to get the data out of the port.  This was done with COPY.

I think this is a bad way to think about the internal mechanics of asynchronous requests (and I have an unfinished post where I critique the whole thing).

Either way: from the perspective of a synchronous file user, this distinction doesn&#39;t exist.  So **copy %foo** and **read %foo** are the same thing...get the data out of the file as a BINARY!.

## Should PORT! Be Able To Overload COPY?

There are some things I feel like PORT! probably should not be overriding.  TYPE OF, for instance.

    &gt;&gt; type of %foo.jpg
    == #[datatype file!]

I&#39;m pretty sure this is an example of where we&#39;d like to know that&#39;s a stringish proxy for a FILE! port, vs making a port and having it come back with something else:

    &gt;&gt; type of %foo.jpg
    == &#39;JPEG

Is COPY another one of these &quot;reserved things&quot; that you don&#39;t really get to redefine in any sense other than &quot;make another instance of yourself&quot;?

    &gt;&gt; copy %hello.txt
    == %hello.txt  ; as opposed to reading the contents of %hello.txt

One could certainly imagine the argument that not only does FILE! override COPY, but it adds an argument...the filename of the file to copy to:

    &gt;&gt; copy %source.dat %destination.dat
    
In any case, COPY&#39;s days are numbered as the method for extracting things from internal buffers in ports.  But that doesn&#39;t answer the question: Can ports override COPY, and if they do, are there rules about it?</description>
    
    <lastBuildDate>Thu, 02 Sep 2021 11:11:04 +0000</lastBuildDate>
    <category>Ports</category>
    <atom:link href="https://forum.rebol.info/t/copy-and-port/1699.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>COPY and PORT!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>As it so happens, the network and file ports seem to want to make COPY "get data out of the port's buffer".</p>
<p>The idea is that you ask for a READ, asynchronously.  Then you wait for a wake up event.  This event arrives with no information other than it was a "receive" event that happened on that port...so the data does not live in the event (it can't, EVENT! is too small to hold both the port it is notifying and the pointer to data).</p>
<p>So in the code you write for processing the read event, it's time to get the data out of the port.  This was done with COPY.</p>
<p>I think this is a bad way to think about the internal mechanics of asynchronous requests (and I have an unfinished post where I critique the whole thing).</p>
<p>Either way: from the perspective of a synchronous file user, this distinction doesn't exist.  So <strong>copy %foo</strong> and <strong>read %foo</strong> are the same thing...get the data out of the file as a BINARY!.</p>
<h2>Should PORT! Be Able To Overload COPY?</h2>
<p>There are some things I feel like PORT! probably should not be overriding.  TYPE OF, for instance.</p>
<pre><code>&gt;&gt; type of %foo.jpg
== #[datatype file!]
</code></pre>
<p>I'm pretty sure this is an example of where we'd like to know that's a stringish proxy for a FILE! port, vs making a port and having it come back with something else:</p>
<pre><code>&gt;&gt; type of %foo.jpg
== 'JPEG
</code></pre>
<p>Is COPY another one of these "reserved things" that you don't really get to redefine in any sense other than "make another instance of yourself"?</p>
<pre><code>&gt;&gt; copy %hello.txt
== %hello.txt  ; as opposed to reading the contents of %hello.txt
</code></pre>
<p>One could certainly imagine the argument that not only does FILE! override COPY, but it adds an argument...the filename of the file to copy to:</p>
<pre><code>&gt;&gt; copy %source.dat %destination.dat
</code></pre>
<p>In any case, COPY's days are numbered as the method for extracting things from internal buffers in ports.  But that doesn't answer the question: Can ports override COPY, and if they do, are there rules about it?</p>
          <p><a href="https://forum.rebol.info/t/copy-and-port/1699/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/copy-and-port/1699/1</link>
        <pubDate>Thu, 02 Sep 2021 11:11:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1699-1</guid>
        <source url="https://forum.rebol.info/t/copy-and-port/1699.rss">COPY and PORT!</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Cliffs of Complexity: How Much Is Too Much?</title>
    <link>https://forum.rebol.info/t/the-cliffs-of-complexity-how-much-is-too-much/1241</link>
    <description>Ren-C has tried out a lot of new ideas.

Among the ideas that have been kept, most have added *some* level of complexity.  A notable exception would be the [0-or-1 refinement parameter change](https://forum.rebol.info/t/pure-and-refined-simplifying-refinements-to-one-or-zero-args/1120).  That was a welcome simplification--and I am rather confident that nothing of value was lost in the process.

Yet trying to write a [usermode pointfree specialization](https://forum.rebol.info/t/looking-into-a-usermode-pointfree/1236) draws out the inconvenient truth: **Ren-C&#39;s tech *could have easily nailed* a complete version of what it would take to do historical Rebol&#39;s parameter conventions--IF IT HAD NOT RAISED THE BAR.**

Rephrasing that: if we were willing to turn back the clock to where there were only four parameter types (&quot;normal&quot;, &quot;soft quoted&quot;, &quot;hard quoted&quot;, &quot;refinement&quot;), then the code I posted for POINTFREE would pretty much work as written...&lt;sub&gt;[with a little more work for enfix](https://www.elsevier.com/__data/assets/image/0012/834888/Sidney-Harris-cartoon-main-image.jpg)&lt;/sub&gt;.

All the things that throw wrenches into it are Ren-C-isms:

* [Variadics](https://trello.com/c/Y17CEywN/131-extremely-flexible-varargs-variadic-functions-with)
* [Skippable Parameters](https://forum.rebol.info/t/skip-able-arguments/1013)
* &lt;strike&gt; [Modal Parameters](https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187)&lt;/strike&gt; (replaced by the more general and high-leverage ^META parameters)
* [Endable Parameters](https://trello.com/c/gL9rHcEC/136-endable-args-replace-the-unset-quoting-hack-used-to-make-help-work-with-1-or-0-args-allows-infix-functions-to-implement-handling) (this one&#39;s not totally new, as HELP vs. HELP TOPIC relied on a similar quirk, but Ren-C generalized it)

## Is the Answer to Cut Features?

*I don&#39;t think so.*  These features are important.

I think that the evaluator just has to become more modular or hookable.  This question of having a parameter to fill, and asking it to be filled from the callsite, just has to be formed as a native in its own right.

So basically: we need a form of EVALUATE that lets you pass in a function which can peek at the input feed and make a decision to pre-process that input.  This is somewhat the same needs as the debugger.

MAKE ACTION! from a FRAME! is still quite a good feature.  But when your goal is to simulate the evaluator on a stream of input, you need more tools...unless you either burden the person doing the simulation (who will make mistakes) or lose expressivity in the evaluator (which undermines all the interesting work).

The fact that such a simulation is non-trivial isn&#39;t a fatal flaw...it&#39;s part of what brings the necessary expressivity to make things fun and notable.</description>
    
    <lastBuildDate>Wed, 22 Sep 2021 19:29:33 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/the-cliffs-of-complexity-how-much-is-too-much/1241.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Cliffs of Complexity: How Much Is Too Much?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Ren-C has tried out a lot of new ideas.</p>
<p>Among the ideas that have been kept, most have added <em>some</em> level of complexity.  A notable exception would be the <a href="https://forum.rebol.info/t/pure-and-refined-simplifying-refinements-to-one-or-zero-args/1120">0-or-1 refinement parameter change</a>.  That was a welcome simplification--and I am rather confident that nothing of value was lost in the process.</p>
<p>Yet trying to write a <a href="https://forum.rebol.info/t/looking-into-a-usermode-pointfree/1236">usermode pointfree specialization</a> draws out the inconvenient truth: <strong>Ren-C's tech <em>could have easily nailed</em> a complete version of what it would take to do historical Rebol's parameter conventions--IF IT HAD NOT RAISED THE BAR.</strong></p>
<p>Rephrasing that: if we were willing to turn back the clock to where there were only four parameter types ("normal", "soft quoted", "hard quoted", "refinement"), then the code I posted for POINTFREE would pretty much work as written...<sub><a href="https://www.elsevier.com/__data/assets/image/0012/834888/Sidney-Harris-cartoon-main-image.jpg">with a little more work for enfix</a></sub>.</p>
<p>All the things that throw wrenches into it are Ren-C-isms:</p>
<ul>
<li><a href="https://trello.com/c/Y17CEywN/131-extremely-flexible-varargs-variadic-functions-with">Variadics</a></li>
<li><a href="https://forum.rebol.info/t/skip-able-arguments/1013">Skippable Parameters</a></li>
<li>
<strike> <a href="https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187">Modal Parameters</a></strike> (replaced by the more general and high-leverage ^META parameters)</li>
<li>
<a href="https://trello.com/c/gL9rHcEC/136-endable-args-replace-the-unset-quoting-hack-used-to-make-help-work-with-1-or-0-args-allows-infix-functions-to-implement-handling">Endable Parameters</a> (this one's not totally new, as HELP vs. HELP TOPIC relied on a similar quirk, but Ren-C generalized it)</li>
</ul>
<h2>Is the Answer to Cut Features?</h2>
<p><em>I don't think so.</em>  These features are important.</p>
<p>I think that the evaluator just has to become more modular or hookable.  This question of having a parameter to fill, and asking it to be filled from the callsite, just has to be formed as a native in its own right.</p>
<p>So basically: we need a form of EVALUATE that lets you pass in a function which can peek at the input feed and make a decision to pre-process that input.  This is somewhat the same needs as the debugger.</p>
<p>MAKE ACTION! from a FRAME! is still quite a good feature.  But when your goal is to simulate the evaluator on a stream of input, you need more tools...unless you either burden the person doing the simulation (who will make mistakes) or lose expressivity in the evaluator (which undermines all the interesting work).</p>
<p>The fact that such a simulation is non-trivial isn't a fatal flaw...it's part of what brings the necessary expressivity to make things fun and notable.</p>
          <p><a href="https://forum.rebol.info/t/the-cliffs-of-complexity-how-much-is-too-much/1241/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-cliffs-of-complexity-how-much-is-too-much/1241/1</link>
        <pubDate>Sun, 03 Nov 2019 13:59:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1241-1</guid>
        <source url="https://forum.rebol.info/t/the-cliffs-of-complexity-how-much-is-too-much/1241.rss">The Cliffs of Complexity: How Much Is Too Much?</source>
      </item>
  </channel>
</rss>

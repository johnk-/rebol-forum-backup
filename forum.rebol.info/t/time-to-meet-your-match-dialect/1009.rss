<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Time to Meet Your MATCH... (...dialect)</title>
    <link>https://forum.rebol.info/t/time-to-meet-your-match-dialect/1009</link>
    <description>**MATCH** is a handy tool for testing a value against some basic rules, and passing it through if they match...or evaluating to null if they don&#39;t.  The rules can be combined in some interesting ways that make them rather powerful!

It uses the *&quot;match dialect&quot;*.  This looks pretty simple on the surface, like what you put in a function spec block for the legal types:

    &gt;&gt; match [integer! tag!] 1020
    == 1020

    &gt;&gt; match [integer! tag!] &quot;this text value won&#39;t match&quot;
    ;-- null

    &gt;&gt; match [integer! tag!] &lt;matches!&gt;
    == &lt;matches!&gt;

But with the new features of generalized quoting, now you can test for quotedness.

    &gt;&gt; match [&#39;word!] first [foo]
    ;-- null

    &gt;&gt; match [&#39;word!] first [&#39;foo]
    == &#39;foo

It actually dereferences what you give it and sums up the quote levels.  So you can do things like:

     &gt;&gt; quoted-word!: quote word! ;-- Note: during transition, QUOTE is called UNEVAL

     &gt;&gt; match &#39;quoted-word! first [&#39;&#39;foo]
     == &#39;&#39;foo

So since there is a quote level in the QUOTED-WORD! value, that gets added in with the quote on the match, so it looks for a doubly quoted value.

The premise is that each MATCH rule component is one item, and even types like INTEGER! are used...to test a length:

     &gt;&gt; match 2 [a b]
     == [a b]

     &gt;&gt; match 2 [a b c]
     ;-- null

You can use single arity ACTION!s as well, if you use a GET-WORD! or GET-PATH! to indicate them:

     &gt;&gt; match :odd? 304
     ;-- null

     &gt;&gt; match :lib/even? 1020
     == 1020

## BLOCK! will OR rules together, PATH! will AND them

So this is a cool little trick:

    &gt;&gt; match block!/2 [a b]
    == [a b]

    &gt;&gt; match text!/2 [a b]
    ;-- null

    &gt;&gt; match text!/2 &quot;ab&quot;
    == &quot;ab&quot;

    &gt;&gt; match [block! text!]/2 &quot;ab&quot;
    == &quot;ab&quot;

    &gt;&gt; match &#39;&#39;&#39;[block! text!]/2 lit &#39;&#39;&#39;[a b]
    == &#39;&#39;&#39;[a b]

    &gt;&gt; match [integer!/[:even?] block!/[:empty?]] []
    == []

    &gt;&gt; match [integer!/[:even?] block!/[:empty?]] 1020
    == 1020
    
Pretty cool huh?  And as I mentioned, you can factor these rules out like in PARSE... note also that instead of :empty? you can just use 0.

     &gt;&gt; even-int!: lit integer!/[:even?]
     &gt;&gt; empty-block!: lit block!/0

     &gt;&gt; match [even-int! empty-block!] []
     == []

     &gt;&gt; match [even-int! empty-block!] [a b]
     ;-- null 

## MATCH has an automatic erroring form, called ENSURE

If you want a quick and dirty way to typecheck something and pass it through, but error otherwise, use ENSURE.

    &gt;&gt; ensure [even-int! empty-block!] [a b]
    ** Script Error: ...

    &gt;&gt; ensure [even-int! empty-block!] 1020
    == 1020

## MATCH is now built in as a PARSE keyword...

The quoting features of MATCH were important for PARSE to help pick up the slack after LIT-WORD!.

    &gt;&gt; did parse [&#39;a b &#39;c d] [some [match [word! &#39;word!]] end]
    == #[true]

There was a little bit of a incongruity previously, which is that MATCH did not want to quote its first argument.  So you couldn&#39;t say **match &#39;word! lit [&#39;foo]** and have it match, because the evaluator would strip off the quote.  When all things were considered, it seemed to make more sense to have MATCH soft-quote its first argument, so it doesn&#39;t throw away the quote marks...but uses them in the rule.

PARSE then has a compatible expression, without a block! needed:

    &gt;&gt; did parse [&#39;a &#39;b &#39;c &#39;d] [some [match &#39;word!] end]
    == #[true]

## `&lt;opt&gt;`, falsey values, and /ELSE

You might imagine a lot of code wants to say **if match [...] whatever [...]**.  This could lead to unsatisfactory results if the thing you&#39;re matching is a null, blank, or logic false -- even though you matched, the falsey nature of the thing you were testing would foil your intent.

To help catch those errors, any falsey input that matches will be voidified.  So at least you&#39;ll get a clear error if you used the result.  But since voids are values, you&#39;ll be okay if you use THEN or ELSE

    &gt;&gt; match [&lt;opt&gt; integer!] null then [print &quot;matched, and void cued then!&quot;]
    matched, and void cued then!

There&#39;s also an /ELSE refinement, so you can provide a branch of code to run if there&#39;s no match...and it won&#39;t mutate the result at all:

    &gt;&gt; match/else [&lt;opt&gt; integer!] null [print &quot;didn&#39;t match&quot; 100]
    ;-- null

    &gt;&gt; match/else [&lt;opt&gt; integer!] #foo [print &quot;didn&#39;t match&quot; 100]
    didn&#39;t match
    == 100

## Useful Dialect, Good Testbed for PATH!s

You can see a detail above of how I want to use things like **:even?** as a test, and then use PATH! for AND-ing tests together generically.  But then, **:even?/integer!** is a GET-PATH!, while **integer!/:even?** would be an ordinary path.  The meaning gets confuzzled... how would you specify a function with refinements, or otherwise get something out of a path?

    obj: make object! [even-int: lit integer!/[:even?]]
    match :obj/even-int 4

To get this distinction, we have to treat **:[:obj]/even-int** differently from **:obj/even-int**.  And this really does suggest to me that the notion of allowing GET-WORD!s, SET-WORD!s, and LIT-WORD!s in PATH! is a mistake...it doesn&#39;t generalize and will fall down at the head and tail.  Even when it works, it&#39;s ugly.

I think this is going in the direction of making PATH! a stronger dialecting part.  And hopefully, with more good examples we can keep pushing on some of the other things (like &quot;does Rebol need a date format with slashes in it, and if so can it be accomplished naturally as a PATH!&quot;)...</description>
    
    <lastBuildDate>Thu, 23 Sep 2021 01:33:42 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/time-to-meet-your-match-dialect/1009.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Time to Meet Your MATCH... (...dialect)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><strong>I'm getting more merciless about eliminating anything that is "dicey", and basically every fringe idea of match is in that category.</strong></p>
<p>As I do that, let me quickly review some of the justification and how things continue to evolve:</p>
<aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1009">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><strong>Bear In Mind PARSE is now MATCH-ish</strong></p>
<p>Before going too far in terms of the powers of MATCH... I should point out that now that PARSE returns its input on success and is back to require reaching the end by default, it can be used for matching purposes...e.g. "tuple"-style matches</p>
</blockquote>
</aside>
<p>PARSE design no longer returns input on match...<em>but it's extremely flexible and accommodates that</em>, with the <code>&lt;input&gt;</code> tag combinator:</p>
<pre><code>&gt;&gt; uparse "aaa" [some "a" &lt;input&gt;]
== "aaa"
</code></pre>
<p>If you want that to work with any arbitrary rules on the left, the inline sequencing combinator makes it clean to do so:</p>
<pre><code>&gt;&gt; uparse "aaa" [some "a" | some "b" || &lt;input&gt;]
== "aaa"

; possibly easier way of writing [[some "a" | some "b"] &lt;input&gt;]
; (at least easier in the sense you can tack it on just at the end
; without having to go back to the start).
</code></pre>
<p>Some of the more "resonable" match concepts were things like:</p>
<pre><code>&gt;&gt; match block!.3 [a b c]
== [a b c]  ; matched a 3 element block

&gt;&gt; match block!.3 [a b c d]
; null
</code></pre>
<p>Expressing the same thing in a UPARSE rule is certainly not as brief, and you'd have to do the block match before the parse even started:</p>
<pre><code>uparse (try match block! data) [3 &lt;any&gt; || &lt;input&gt;]
</code></pre>
<blockquote>
<p><em>Or you could try putting the data into a BLOCK! and using INTO...</em></p>
<pre><code>uparse :[data] [into block! 3 &lt;any&gt; || &lt;input&gt;]
</code></pre>
</blockquote>
<p><strong>But main point being, that although I can point to some examples where the MATCH dialect could be a good way of filtering values, it is the kind of thing that in the C code just represents a liability.</strong></p>
<p>It's nice, but it's not making or breaking anyone's day...besides the feature of type checking that I use constantly (and is the basis for ENSURE as well).  There's been really interesting progress from how that was implemented originally on the basis of something called EITHER-MATCH, until null isotopes came and made it possible to solve the whole thing with just one MATCH function.  <img src="https://forum.rebol.info/images/emoji/twitter/+1.png?v=9" title=":+1:" class="emoji" alt=":+1:"></p>
<p>Anyway MATCH and its as-far-as-I-know-unused parse incarnation are now gone.  I'll point out that in UPARSE, you get MATCH with ANY... as in <strong>any @[integer! tuple! word!]</strong></p>
<hr>
<h2>Sample Weird Stuff That Is Not Going To Be Worried About Now</h2>
<p>The real reason for keeping these around had been testing the robustness of weird path forms, but they've outlived their usefulness...</p>
<pre><code>(1020 = match [integer!/[:even?]] 1020)
(null = match [integer!/[:odd?]] 304)
([a b] = match [block!/2 integer!/[:even?]] [a b])
(null = match [block!/3 integer!/[:even?]] null)
(304 = match [block!/3 integer!/[:even?]] 304)
(null = match [block!/3 integer!/[:even?]] 303)
</code></pre>
<p>There was an idea that the quoting level of the test would match the quoting level of the type, so <strong>match ''integer! first [''1]</strong> would match.  That got killed off a while ago, here were some notes on that:</p>
<pre><code>; !!! There was once special accounting for where the quoting level of the
; test would match the quoting level of the rule:
;
;    (the 'foo = match the 'word! the 'foo)
;    (null = match the 'word! the foo)
;
;    quoted-word!: quote word!
;    (''foo = match ['quoted-word!] the ''foo)
;    (null = match ['quoted-word!] the '''foo)
;    ('''foo = match the '['quoted-word!] the '''foo)
;
;    even-int: 'integer!/[:even?]
;    (the '304 = match the '[block!/3 even-int] the '304)
;
; This idea was killed off in steps; one step made it so that MATCH itself did
; not take its argument literally so it would not see quotes.  That made it
; less useful.  But then, also there were problems with quoteds not matching
; ANY-TYPE! because their quote levels were different than the quote level on
; the any type typeset.  It was a half-baked experiment that needs rethinking.</code></pre>
          <p><a href="https://forum.rebol.info/t/time-to-meet-your-match-dialect/1009/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/time-to-meet-your-match-dialect/1009/5</link>
        <pubDate>Wed, 22 Sep 2021 23:09:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1009-5</guid>
        <source url="https://forum.rebol.info/t/time-to-meet-your-match-dialect/1009.rss">Time to Meet Your MATCH... (...dialect)</source>
      </item>
      <item>
        <title>Time to Meet Your MATCH... (...dialect)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So MATCH has become an extremely useful tool, used all the time.</p>
<p>But some of the wilder things it did in trying to become a matching dialect turned out to be junk.  In <a href="https://forum.rebol.info/t/survey-of-redefining-datatype-word-s/1479">surveying how the type block acts</a> I mentioned that the weirder features in MATCH were not things we were likely going to want to carry forward to build on.</p>
<p>Not only does the C code implementing it suck, the syntax is ugly:</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1009">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>&gt;&gt; match '''[block! text!]/2 lit '''[a b]
== '''[a b]

&gt;&gt; match [integer!/[:even?] block!/[:empty?]] []
== []

&gt;&gt; match [integer!/[:even?] block!/[:empty?]] 1020
== 1020
</code></pre>
</blockquote>
</aside>
<p>I'd already dropped the idea of MATCH quoting its first argument.  That means it doesn't see the number of quotes you put on it's argument unless you put it inside a block:</p>
<pre><code>&gt;&gt; match ['integer!] just '10
== #[true]
</code></pre>
<p>We can still talk about whether that's a great idea or not.</p>
<h2>PATH!s For And Was Ugly</h2>
<p>The concept that each clause in a BLOCK! is an OR makes sense with the type dialect.  But using PATH!s for AND is pretty hideous.</p>
<p>GROUP!s might be more palatable:</p>
<pre><code>&gt;&gt; match [(integer! :even?) (block! :empty?)] 1020
== 1020
</code></pre>
<h2>Should Functions Need The GET-WORD! ?</h2>
<p>Is the GET-WORD! even necessary?  Could we assume that any functions that test values have names that suggest they do so...and understand that we aren't actually calling any functions?</p>
<pre><code>&gt;&gt; match [(integer! even?) (block! empty?)] 1020
== 1020
</code></pre>
<p>The reason it was done with a GET-WORD! initially was for consistency with when you didn't give the rule as a BLOCK!</p>
<pre><code>&gt;&gt; match :even? 10
== #[true]

&gt;&gt; match [:even?] 10
== #[true]
</code></pre>
<p>But is that interesting?  If consistency of that kind is so important, might it be better to say MATCH always takes a BLOCK! or... a GROUP!?</p>
<p>Another option would be to use predicate format for functions and preface them with a dot, which would help call out that they were functions but be a bit less jarring:</p>
<pre><code>&gt;&gt; match [(integer! .even?) (block! .empty?)] 1020
== 1020
</code></pre>
<h2>GROUP! Can Be Used As The Main Match</h2>
<p>With the argument no longer having quoting mean the argument is quoted, you could use a GROUP! as the main match:</p>
<pre><code>&gt;&gt; match '(integer! even?) &lt;not an integer&gt;
; null

&gt;&gt; match '(integer! even?) 304
== 304

&gt;&gt; match '([block! text!] 2) "ab" 
== "ab"  ; acted like `parse try match [block! text!] [2 skip] "ab"`
</code></pre>
<h2>Bear In Mind PARSE is now MATCH-ish</h2>
<p>Before going too far in terms of the powers of MATCH... I should point out that <a href="https://forum.rebol.info/t/the-parse-of-progress/1349">now that PARSE returns its input on success and is back to require reaching the end by default</a>, it can be used for matching purposes...e.g. "tuple"-style matches</p>
<pre><code> &gt;&gt; parse [1020 "hello"] [integer! text!]
 == [1020 "hello"]
</code></pre>
<p>PARSE is looking at sequence by default, while MATCH is looking at alternates.  MATCH does not "destructure" its input...all its tests are running on the same single value.</p>
<h2>Should (Cleaned Up) MATCH Be The Function Arg Dialect?</h2>
<p>It was the intention that the parameter to MATCH would be the same format as the blocks used for type checking arguments.</p>
<p>But when you think about reading the HELP, it gets a bit verbose.  It's as if anyone who comes up with a sufficiently complex parameter spec should probably name it and make a function for it.</p>
<p><strong>I'm assuming no one used any of the weird MATCH features.</strong>  But would you be more likely if it used GROUP!s and didn't have the need for the GET-WORD!s on functions?</p>
          <p><a href="https://forum.rebol.info/t/time-to-meet-your-match-dialect/1009/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/time-to-meet-your-match-dialect/1009/4</link>
        <pubDate>Fri, 29 Jan 2021 13:27:32 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1009-4</guid>
        <source url="https://forum.rebol.info/t/time-to-meet-your-match-dialect/1009.rss">Time to Meet Your MATCH... (...dialect)</source>
      </item>
      <item>
        <title>Time to Meet Your MATCH... (...dialect)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="2" data-topic="1009" data-full="true">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>Very cool. Should be muy bueno for simple lexing and tokenizing values of a dialect.</p>
</blockquote>
</aside>
<p>The real thing to look at here, is the way that GET-WORD! and GET-PATH! are used, and why I'm prescribing that we disallow direct usage of GET-WORD!, SET-WORD!, and LIT-WORD! directly in PATH!, GET-PATH!, or SET-PATH!.</p>
<p>Now that there is a controlled point of path creation, and immutability after that, these rules are possible.  I am looking at this idea of making <strong><code>a/(b): c</code></strong> equally efficient to <strong><code>a/:b: c</code></strong>, and if I can do so, then I think the dialect design of things using paths will get good guidance and be more solid to prohibit the latter.  Because it's incoherent in the long run... if you allow <strong><code>a/:b: c</code></strong>, what's wrong with <strong><code>::a/:b::c</code></strong> etc.</p>
<p>I kind of feel like this is one of the first attempts to get ambitious with PATH! in a dialect.  It's been hard to do, because for reasons beyond my ability to understand, DocKimbel has defended <strong>(a + b)/c</strong> being interpreted as <strong>(a + b) /c</strong>, as a GROUP! and then a REFINEMENT! (further in the ANY-WORD! dept. vs. a PATH!).  It's kind of a house of cards, IMO, and so anything done to tighten the whole thing up is good.</p>
<p>Clearly I'm angling for a very different idea, and the goal is specifically to enable dialect design.<br>
PATH! should not be just about what the evaluator does with it, but these kinds of usages and beyond.  It may be different from BLOCK! and GROUP!, but it can come into its own, I think.</p>
          <p><a href="https://forum.rebol.info/t/time-to-meet-your-match-dialect/1009/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/time-to-meet-your-match-dialect/1009/3</link>
        <pubDate>Fri, 11 Jan 2019 17:21:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1009-3</guid>
        <source url="https://forum.rebol.info/t/time-to-meet-your-match-dialect/1009.rss">Time to Meet Your MATCH... (...dialect)</source>
      </item>
      <item>
        <title>Time to Meet Your MATCH... (...dialect)</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Very cool. Should be muy bueno for simple lexing and tokenizing values of a dialect-- as well as the handling of syntax errors.</p>
          <p><a href="https://forum.rebol.info/t/time-to-meet-your-match-dialect/1009/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/time-to-meet-your-match-dialect/1009/2</link>
        <pubDate>Fri, 11 Jan 2019 17:15:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1009-2</guid>
        <source url="https://forum.rebol.info/t/time-to-meet-your-match-dialect/1009.rss">Time to Meet Your MATCH... (...dialect)</source>
      </item>
      <item>
        <title>Time to Meet Your MATCH... (...dialect)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><strong>MATCH</strong> is a handy tool for testing a value against some basic rules, and passing it through if they match...or evaluating to null if they don't.  The rules can be combined in some interesting ways that make them rather powerful!</p>
<p>It uses the <em>"match dialect"</em>.  This looks pretty simple on the surface, like what you put in a function spec block for the legal types:</p>
<pre><code>&gt;&gt; match [integer! tag!] 1020
== 1020

&gt;&gt; match [integer! tag!] "this text value won't match"
;-- null

&gt;&gt; match [integer! tag!] &lt;matches!&gt;
== &lt;matches!&gt;
</code></pre>
<p>But with the new features of generalized quoting, now you can test for quotedness.</p>
<pre><code>&gt;&gt; match ['word!] first [foo]
;-- null

&gt;&gt; match ['word!] first ['foo]
== 'foo
</code></pre>
<p>It actually dereferences what you give it and sums up the quote levels.  So you can do things like:</p>
<pre><code> &gt;&gt; quoted-word!: quote word! ;-- Note: during transition, QUOTE is called UNEVAL

 &gt;&gt; match 'quoted-word! first [''foo]
 == ''foo
</code></pre>
<p>So since there is a quote level in the QUOTED-WORD! value, that gets added in with the quote on the match, so it looks for a doubly quoted value.</p>
<p>The premise is that each MATCH rule component is one item, and even types like INTEGER! are used...to test a length:</p>
<pre><code> &gt;&gt; match 2 [a b]
 == [a b]

 &gt;&gt; match 2 [a b c]
 ;-- null
</code></pre>
<p>You can use single arity ACTION!s as well, if you use a GET-WORD! or GET-PATH! to indicate them:</p>
<pre><code> &gt;&gt; match :odd? 304
 ;-- null

 &gt;&gt; match :lib/even? 1020
 == 1020
</code></pre>
<h2>BLOCK! will OR rules together, PATH! will AND them</h2>
<p>So this is a cool little trick:</p>
<pre><code>&gt;&gt; match block!/2 [a b]
== [a b]

&gt;&gt; match text!/2 [a b]
;-- null

&gt;&gt; match text!/2 "ab"
== "ab"

&gt;&gt; match [block! text!]/2 "ab"
== "ab"

&gt;&gt; match '''[block! text!]/2 lit '''[a b]
== '''[a b]

&gt;&gt; match [integer!/[:even?] block!/[:empty?]] []
== []

&gt;&gt; match [integer!/[:even?] block!/[:empty?]] 1020
== 1020
</code></pre>
<p>Pretty cool huh?  And as I mentioned, you can factor these rules out like in PARSE... note also that instead of :empty? you can just use 0.</p>
<pre><code> &gt;&gt; even-int!: lit integer!/[:even?]
 &gt;&gt; empty-block!: lit block!/0

 &gt;&gt; match [even-int! empty-block!] []
 == []

 &gt;&gt; match [even-int! empty-block!] [a b]
 ;-- null 
</code></pre>
<h2>MATCH has an automatic erroring form, called ENSURE</h2>
<p>If you want a quick and dirty way to typecheck something and pass it through, but error otherwise, use ENSURE.</p>
<pre><code>&gt;&gt; ensure [even-int! empty-block!] [a b]
** Script Error: ...

&gt;&gt; ensure [even-int! empty-block!] 1020
== 1020
</code></pre>
<h2>MATCH is now built in as a PARSE keyword...</h2>
<p>The quoting features of MATCH were important for PARSE to help pick up the slack after LIT-WORD!.</p>
<pre><code>&gt;&gt; did parse ['a b 'c d] [some [match [word! 'word!]] end]
== #[true]
</code></pre>
<p>There was a little bit of a incongruity previously, which is that MATCH did not want to quote its first argument.  So you couldn't say <strong>match 'word! lit ['foo]</strong> and have it match, because the evaluator would strip off the quote.  When all things were considered, it seemed to make more sense to have MATCH soft-quote its first argument, so it doesn't throw away the quote marks...but uses them in the rule.</p>
<p>PARSE then has a compatible expression, without a block! needed:</p>
<pre><code>&gt;&gt; did parse ['a 'b 'c 'd] [some [match 'word!] end]
== #[true]
</code></pre>
<h2>
<code>&lt;opt&gt;</code>, falsey values, and /ELSE</h2>
<p>You might imagine a lot of code wants to say <strong>if match [...] whatever [...]</strong>.  This could lead to unsatisfactory results if the thing you're matching is a null, blank, or logic false -- even though you matched, the falsey nature of the thing you were testing would foil your intent.</p>
<p>To help catch those errors, any falsey input that matches will be voidified.  So at least you'll get a clear error if you used the result.  But since voids are values, you'll be okay if you use THEN or ELSE</p>
<pre><code>&gt;&gt; match [&lt;opt&gt; integer!] null then [print "matched, and void cued then!"]
matched, and void cued then!
</code></pre>
<p>There's also an /ELSE refinement, so you can provide a branch of code to run if there's no match...and it won't mutate the result at all:</p>
<pre><code>&gt;&gt; match/else [&lt;opt&gt; integer!] null [print "didn't match" 100]
;-- null

&gt;&gt; match/else [&lt;opt&gt; integer!] #foo [print "didn't match" 100]
didn't match
== 100
</code></pre>
<h2>Useful Dialect, Good Testbed for PATH!s</h2>
<p>You can see a detail above of how I want to use things like <strong>:even?</strong> as a test, and then use PATH! for AND-ing tests together generically.  But then, <strong>:even?/integer!</strong> is a GET-PATH!, while <strong>integer!/:even?</strong> would be an ordinary path.  The meaning gets confuzzled... how would you specify a function with refinements, or otherwise get something out of a path?</p>
<pre><code>obj: make object! [even-int: lit integer!/[:even?]]
match :obj/even-int 4
</code></pre>
<p>To get this distinction, we have to treat <strong>:[:obj]/even-int</strong> differently from <strong>:obj/even-int</strong>.  And this really does suggest to me that the notion of allowing GET-WORD!s, SET-WORD!s, and LIT-WORD!s in PATH! is a mistake...it doesn't generalize and will fall down at the head and tail.  Even when it works, it's ugly.</p>
<p>I think this is going in the direction of making PATH! a stronger dialecting part.  And hopefully, with more good examples we can keep pushing on some of the other things (like "does Rebol need a date format with slashes in it, and if so can it be accomplished naturally as a PATH!")...</p>
          <p><a href="https://forum.rebol.info/t/time-to-meet-your-match-dialect/1009/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/time-to-meet-your-match-dialect/1009/1</link>
        <pubDate>Fri, 11 Jan 2019 08:59:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1009-1</guid>
        <source url="https://forum.rebol.info/t/time-to-meet-your-match-dialect/1009.rss">Time to Meet Your MATCH... (...dialect)</source>
      </item>
  </channel>
</rss>

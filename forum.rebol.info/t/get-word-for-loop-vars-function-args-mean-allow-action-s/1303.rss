<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>GET-WORD! for loop vars / function args mean &quot;Allow ACTION!s&quot;?</title>
    <link>https://forum.rebol.info/t/get-word-for-loop-vars-function-args-mean-allow-action-s/1303</link>
    <description>I feel comfortable with the step ahead (well, technically step *back* to Rebol2 semantics) on [GET-WORD! of a VOID!](https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301) raising errors.  So GET-WORD! really is dedicated to the defusing of ACTION!s so that they do not run.

With that hardened association, it makes me wonder if a related concept might make sense...which is to cue people to notice when a parameter or loop variable is allowed to be an ACTION! by its declaration:

This would let people be less paranoid about writing their routines, keeping them from obfuscating it with protections in the common case.  Let&#39;s take an example:

    &gt;&gt; foo: func [] [print &quot;Formatting hard drive....&quot;]

    ; In today&#39;s world...

    &gt;&gt; print-val: func [x] [print [&quot;The value is&quot; x]]
    &gt;&gt; print-val :foo
    The value is Formatting hard drive...

Imagine if plain WORD! arguments prohibited ACTION! (even if in the typeset, as per ANY-TYPE!), but GET-WORD! arguments allowed it:

    ; The proposed world...

    &gt;&gt; print-val: func [x] [print [&quot;The value is&quot; x]]
    &gt;&gt; print-val :foo 
    ** Error: Function assigned to X, to allow this name the token :X

    &gt;&gt; print-val: func [:x] [print [&quot;The value is&quot; x]]
    &gt;&gt; print-val :foo 
    The value is Formatting hard drive...

Yet the real point is what you get when you can scan the second example and notice the asymmetry.  You&#39;ve been given a short visual clue that might hint you into the behavior of mirroring the spec.  If you see **print-val: func [:x] [print [&quot;The value is&quot; x]]** and then notice the disparity of the parameter being named **:x** and invoked as **x**, you might question why that&#39;s not **:x** to match.

It seems to me that every little bit of such cue-ing can help.  I&#39;m imagining this applying in loops as well:

    &gt;&gt; block: compose [1 (:foo) 2]
    &gt;&gt; for-each var block [print [&quot;The value is&quot; var]]
    The value is 1
    ** Error: Function assigned to VAR, to allow this name the token :VAR

    &gt;&gt; block: compose [1 (:foo) 2]
    &gt;&gt; for-each :var block [print [&quot;The value is&quot; var]]
    The value is 1
    The value is Formatting hard drive...

    The value is 2

Again, seeing the colon on the variable helps hint what&#39;s going on.  And basic code doing loops that doesn&#39;t expect to be finding ACTION!s in a block will be somewhat protected.

**This would need new notation for &quot;hard literal parameters&quot;**

Today&#39;s GET-WORD! is an &quot;unescapable&quot; literal argument.  So even if the callsite is a GROUP!, the argument receives the group vs. the evaluation product.

I&#39;ve in the past suggested **func [&#39;(arg)] [...]** as a more semiotic way of denoting &quot;escapable literal parameters&quot;...and then **func [&#39;arg] [...]** could be unescapable.  It looks nice and kind of shows you the idea that &quot;it&#39;s quoted, but a GROUP! can get you past that&quot;.  Also you can mix it with the colon cases, for **func [&#39;:arg] [...]** or **func [&#39;(:arg)] [...]** to say that even though you&#39;re quoting, you still consider ACTION! a candidate (if found literally in the block or evaluated to by a soft literal situation).

On the downside, you really want people to use hard literal parameters as a last resort.  So this makes it easy to forget the more relaxed form as the better default choice.

**Only GROUP! could do escaping for loop parameters**

Historically **for-each :named-var [...] [...]** was a shorthand **for-each (named-var) [...] [...]**.  This would be reclaiming those GET-WORD! and GET-PATH! cases for the &quot;I can process actions in the loop body&quot; signal.

Honestly, needing to escape via an already named variable doesn&#39;t come up all *that* often.  One case I mentioned was the idea of reusing a variable that already exists (to save on creating an OBJECT! for the iteration), but that could be done with **@word** or **&#39;word** perhaps.

**What do people think?**

I know this isn&#39;t the end-all and be-all of somehow making the language safe.  Once you start picking things out of objects, anything you thought could have been just data could actually be active.

But I think it would help ease the pain of perfectionists who want to write &quot;correct&quot; code, to take it easy and think &quot;well I don&#39;t have to handle these dangerous cases, because the proper errors will happen for me just by not using GET-WORD!&quot;.

**[This has been on my mind a long time (see Dec &#39;18 post)](https://forum.rebol.info/t/special-syntax-for-for-each-etc-to-receive-action-s/955)**.  Because I&#39;m one of those people who tries to write generic code and frets about what would happen on the day that VOID!s or ACTION!s come along...so I&#39;m caught between the balance of feeling negligent by not peppering with checks, or junking up otherwise elegant code for the sake of something that *could* happen.

I feel like it may be time for it, now that we&#39;re committing to the GET-WORD! really meaning only &quot;defuse action&quot; and not &quot;get void&quot; (disallowed) or &quot;get null&quot; (always allowed, even with WORD!).  That shores up the bit about VOID!s not being able to run amok.  This change would be a nice way of complementing that by stopping ACTION!s from throwing a wrench into things--while keeping the common case code clean.</description>
    
    <lastBuildDate>Tue, 27 Oct 2020 18:40:18 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/get-word-for-loop-vars-function-args-mean-allow-action-s/1303.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>GET-WORD! for loop vars / function args mean &quot;Allow ACTION!s&quot;?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://forum.rebol.info/t/get-word-for-loop-vars-function-args-mean-allow-action-s/1303/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-word-for-loop-vars-function-args-mean-allow-action-s/1303/3</link>
        <pubDate>Fri, 13 Aug 2021 02:39:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1303-3</guid>
        <source url="https://forum.rebol.info/t/get-word-for-loop-vars-function-args-mean-allow-action-s/1303.rss">GET-WORD! for loop vars / function args mean &quot;Allow ACTION!s&quot;?</source>
      </item>
      <item>
        <title>GET-WORD! for loop vars / function args mean &quot;Allow ACTION!s&quot;?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>4 posts were merged into an existing topic: <a href="/t/special-syntax-for-for-each-etc-to-receive-action-s/955">Special Syntax for FOR-EACH/etc. to receive ACTION!s?</a></p>
          <p><a href="https://forum.rebol.info/t/get-word-for-loop-vars-function-args-mean-allow-action-s/1303/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-word-for-loop-vars-function-args-mean-allow-action-s/1303/2</link>
        <pubDate>Fri, 13 Aug 2021 02:39:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1303-2</guid>
        <source url="https://forum.rebol.info/t/get-word-for-loop-vars-function-args-mean-allow-action-s/1303.rss">GET-WORD! for loop vars / function args mean &quot;Allow ACTION!s&quot;?</source>
      </item>
      <item>
        <title>GET-WORD! for loop vars / function args mean &quot;Allow ACTION!s&quot;?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I feel comfortable with the step ahead (well, technically step <em>back</em> to Rebol2 semantics) on <a href="https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301">GET-WORD! of a VOID!</a> raising errors.  So GET-WORD! really is dedicated to the defusing of ACTION!s so that they do not run.</p>
<p>With that hardened association, it makes me wonder if a related concept might make sense...which is to cue people to notice when a parameter or loop variable is allowed to be an ACTION! by its declaration:</p>
<p>This would let people be less paranoid about writing their routines, keeping them from obfuscating it with protections in the common case.  Let's take an example:</p>
<pre><code>&gt;&gt; foo: func [] [print "Formatting hard drive...."]

; In today's world...

&gt;&gt; print-val: func [x] [print ["The value is" x]]
&gt;&gt; print-val :foo
The value is Formatting hard drive...
</code></pre>
<p>Imagine if plain WORD! arguments prohibited ACTION! (even if in the typeset, as per ANY-TYPE!), but GET-WORD! arguments allowed it:</p>
<pre><code>; The proposed world...

&gt;&gt; print-val: func [x] [print ["The value is" x]]
&gt;&gt; print-val :foo 
** Error: Function assigned to X, to allow this name the token :X

&gt;&gt; print-val: func [:x] [print ["The value is" x]]
&gt;&gt; print-val :foo 
The value is Formatting hard drive...
</code></pre>
<p>Yet the real point is what you get when you can scan the second example and notice the asymmetry.  You've been given a short visual clue that might hint you into the behavior of mirroring the spec.  If you see <strong>print-val: func [:x] [print ["The value is" x]]</strong> and then notice the disparity of the parameter being named <strong>:x</strong> and invoked as <strong>x</strong>, you might question why that's not <strong>:x</strong> to match.</p>
<p>It seems to me that every little bit of such cue-ing can help.  I'm imagining this applying in loops as well:</p>
<pre><code>&gt;&gt; block: compose [1 (:foo) 2]
&gt;&gt; for-each var block [print ["The value is" var]]
The value is 1
** Error: Function assigned to VAR, to allow this name the token :VAR

&gt;&gt; block: compose [1 (:foo) 2]
&gt;&gt; for-each :var block [print ["The value is" var]]
The value is 1
The value is Formatting hard drive...

The value is 2
</code></pre>
<p>Again, seeing the colon on the variable helps hint what's going on.  And basic code doing loops that doesn't expect to be finding ACTION!s in a block will be somewhat protected.</p>
<p><strong>This would need new notation for "hard literal parameters"</strong></p>
<p>Today's GET-WORD! is an "unescapable" literal argument.  So even if the callsite is a GROUP!, the argument receives the group vs. the evaluation product.</p>
<p>I've in the past suggested <strong>func ['(arg)] [...]</strong> as a more semiotic way of denoting "escapable literal parameters"...and then <strong>func ['arg] [...]</strong> could be unescapable.  It looks nice and kind of shows you the idea that "it's quoted, but a GROUP! can get you past that".  Also you can mix it with the colon cases, for <strong>func [':arg] [...]</strong> or <strong>func ['(:arg)] [...]</strong> to say that even though you're quoting, you still consider ACTION! a candidate (if found literally in the block or evaluated to by a soft literal situation).</p>
<p>On the downside, you really want people to use hard literal parameters as a last resort.  So this makes it easy to forget the more relaxed form as the better default choice.</p>
<p><strong>Only GROUP! could do escaping for loop parameters</strong></p>
<p>Historically <strong>for-each :named-var [...] [...]</strong> was a shorthand <strong>for-each (named-var) [...] [...]</strong>.  This would be reclaiming those GET-WORD! and GET-PATH! cases for the "I can process actions in the loop body" signal.</p>
<p>Honestly, needing to escape via an already named variable doesn't come up all <em>that</em> often.  One case I mentioned was the idea of reusing a variable that already exists (to save on creating an OBJECT! for the iteration), but that could be done with <strong><span class="mention">@word</span></strong> or <strong>'word</strong> perhaps.</p>
<p><strong>What do people think?</strong></p>
<p>I know this isn't the end-all and be-all of somehow making the language safe.  Once you start picking things out of objects, anything you thought could have been just data could actually be active.</p>
<p>But I think it would help ease the pain of perfectionists who want to write "correct" code, to take it easy and think "well I don't have to handle these dangerous cases, because the proper errors will happen for me just by not using GET-WORD!".</p>
<p><strong><a href="https://forum.rebol.info/t/special-syntax-for-for-each-etc-to-receive-action-s/955">This has been on my mind a long time (see Dec '18 post)</a></strong>.  Because I'm one of those people who tries to write generic code and frets about what would happen on the day that VOID!s or ACTION!s come along...so I'm caught between the balance of feeling negligent by not peppering with checks, or junking up otherwise elegant code for the sake of something that <em>could</em> happen.</p>
<p>I feel like it may be time for it, now that we're committing to the GET-WORD! really meaning only "defuse action" and not "get void" (disallowed) or "get null" (always allowed, even with WORD!).  That shores up the bit about VOID!s not being able to run amok.  This change would be a nice way of complementing that by stopping ACTION!s from throwing a wrench into things--while keeping the common case code clean.</p>
          <p><a href="https://forum.rebol.info/t/get-word-for-loop-vars-function-args-mean-allow-action-s/1303/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-word-for-loop-vars-function-args-mean-allow-action-s/1303/1</link>
        <pubDate>Thu, 16 Jul 2020 05:41:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1303-1</guid>
        <source url="https://forum.rebol.info/t/get-word-for-loop-vars-function-args-mean-allow-action-s/1303.rss">GET-WORD! for loop vars / function args mean &quot;Allow ACTION!s&quot;?</source>
      </item>
  </channel>
</rss>

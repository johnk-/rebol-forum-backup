<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Not Scrapping Encapping...now tested on Win/Mac/Linux!</title>
    <link>https://forum.rebol.info/t/not-scrapping-encapping-now-tested-on-win-mac-linux/1576</link>
    <description>We haven&#39;t talked a lot about encapping in Ren-C.  But it was at one point written.

I decided to dust it off and bring it up to date.  Then I put together a test using the new Ren-C cross-platform GitHub Action.  Here you can see encapping working on Linux, Windows, and Mac!

[https://github.com/metaeducation/ren-c-encap/actions/runs/695309137](https://github.com/metaeducation/ren-c-encap/actions/runs/695309137)

The tests are pretty simple.

* **[One of them just gives a spec of a filename and a binary blob to put in the executable](https://github.com/metaeducation/ren-c-encap/blob/71c2c4275f56e62fdef94a243415293e4607d1e3/.github/workflows/test-encap.yml#L102)**.  Then it makes sure that can be extracted back verbatim.

* **[Another adds actual script code, with a %main.reb](https://github.com/metaeducation/ren-c-encap/blob/71c2c4275f56e62fdef94a243415293e4607d1e3/.github/workflows/test-encap.yml#L118)**. This triggers a convention that the de-encapped code will run such a named script.  The test captures the output of running the generated executable and makes sure it printed &quot;Hello Encap&quot;.

## Why Not Scrap The Encap?

I&#39;ve been trying to get rid of things that aren&#39;t a focus...especially when it comes to C extensions and complex build dependencies that aren&#39;t worth their cost.

Encap--however--is *entirely usermode code*.  This means it makes a really good case study for BINARY! parsing.  It&#39;s exercising the system on a complex real problem. 

I&#39;m hoping that the design of UPARSE can be informed from this, because it really showed some weaknesses of binary parsing.

## It&#39;s On A Stronger Foundation Than Rebol2 Encap

What Rebol2 did was just append data blindly to the end of an executable.  That&#39;s not a &quot;legitimate&quot; approach; compared to actually understanding the file format (PE on Windows, ELF on Linux, Mach-O on Mac) and injecting a resource in the approved fashion.

When you just append data, a lot of tools and OS checkers will think your file is just corrupt...because it doesn&#39;t match the size in the header.  A program like `strip` (which usually gets rid of debug symbols and the like) would just discard it.  If you use a tool like a resource editor or an EXE compressor to fiddle with the binary, it could give you an error or throw it away.

(Unfortunately OS X doesn&#39;t really have a good way to move around sections of Mach-O executables, so appending is the only choice there.)

*(More complex tests should demonstrate the encapping surviving various manipulations...such as resource editing and executable compression.  They should also be able to delete and replace the payloads in already-encapped executables.)*

## A Good Start, But Would Need More Work

When you encap a folder into the executable, it gets zipped up.  Right now what happens is that the block of unzipped data is put into **system/options/encap** and you have to poke around in that block manually.

It would be nice if your script could see that folder as its &quot;current directory&quot;... kind of like the storage scheme.  cc: @rgchris  If the contents of the ZIP are large you might want it to only expand individual files on-demand.  This might suggest being built more generally on a &quot;ZIP file scheme&quot;, which can still work if that ZIP file is embedded in a byte range of an EXE file.

The basic invocation of the script is only a placeholder.  It doesn&#39;t get command line arguments, for instance.  And since I&#39;m hacking on the module system on another branch, I&#39;m going to get that sorted out before worrying too much about it.</description>
    
    <lastBuildDate>Sun, 28 Mar 2021 15:51:54 +0000</lastBuildDate>
    <category>General Tools</category>
    <atom:link href="https://forum.rebol.info/t/not-scrapping-encapping-now-tested-on-win-mac-linux/1576.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Not Scrapping Encapping...now tested on Win/Mac/Linux!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>We haven't talked a lot about encapping in Ren-C.  But it was at one point written.</p>
<p>I decided to dust it off and bring it up to date.  Then I put together a test using the new Ren-C cross-platform GitHub Action.  Here you can see encapping working on Linux, Windows, and Mac!</p>
<p><a href="https://github.com/metaeducation/ren-c-encap/actions/runs/695309137">https://github.com/metaeducation/ren-c-encap/actions/runs/695309137</a></p>
<p>The tests are pretty simple.</p>
<ul>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c-encap/blob/71c2c4275f56e62fdef94a243415293e4607d1e3/.github/workflows/test-encap.yml#L102">One of them just gives a spec of a filename and a binary blob to put in the executable</a></strong>.  Then it makes sure that can be extracted back verbatim.</p>
</li>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c-encap/blob/71c2c4275f56e62fdef94a243415293e4607d1e3/.github/workflows/test-encap.yml#L118">Another adds actual script code, with a %main.reb</a></strong>. This triggers a convention that the de-encapped code will run such a named script.  The test captures the output of running the generated executable and makes sure it printed "Hello Encap".</p>
</li>
</ul>
<h2>Why Not Scrap The Encap?</h2>
<p>I've been trying to get rid of things that aren't a focus...especially when it comes to C extensions and complex build dependencies that aren't worth their cost.</p>
<p>Encap--however--is <em>entirely usermode code</em>.  This means it makes a really good case study for BINARY! parsing.  It's exercising the system on a complex real problem.</p>
<p>I'm hoping that the design of UPARSE can be informed from this, because it really showed some weaknesses of binary parsing.</p>
<h2>It's On A Stronger Foundation Than Rebol2 Encap</h2>
<p>What Rebol2 did was just append data blindly to the end of an executable.  That's not a "legitimate" approach; compared to actually understanding the file format (PE on Windows, ELF on Linux, Mach-O on Mac) and injecting a resource in the approved fashion.</p>
<p>When you just append data, a lot of tools and OS checkers will think your file is just corrupt...because it doesn't match the size in the header.  A program like <code>strip</code> (which usually gets rid of debug symbols and the like) would just discard it.  If you use a tool like a resource editor or an EXE compressor to fiddle with the binary, it could give you an error or throw it away.</p>
<p>(Unfortunately OS X doesn't really have a good way to move around sections of Mach-O executables, so appending is the only choice there.)</p>
<p><em>(More complex tests should demonstrate the encapping surviving various manipulations...such as resource editing and executable compression.  They should also be able to delete and replace the payloads in already-encapped executables.)</em></p>
<h2>A Good Start, But Would Need More Work</h2>
<p>When you encap a folder into the executable, it gets zipped up.  Right now what happens is that the block of unzipped data is put into <strong>system/options/encap</strong> and you have to poke around in that block manually.</p>
<p>It would be nice if your script could see that folder as its "current directory"... kind of like the storage scheme.  cc: <a class="mention" href="/u/rgchris">@rgchris</a>  If the contents of the ZIP are large you might want it to only expand individual files on-demand.  This might suggest being built more generally on a "ZIP file scheme", which can still work if that ZIP file is embedded in a byte range of an EXE file.</p>
<p>The basic invocation of the script is only a placeholder.  It doesn't get command line arguments, for instance.  And since I'm hacking on the module system on another branch, I'm going to get that sorted out before worrying too much about it.</p>
          <p><a href="https://forum.rebol.info/t/not-scrapping-encapping-now-tested-on-win-mac-linux/1576/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/not-scrapping-encapping-now-tested-on-win-mac-linux/1576/1</link>
        <pubDate>Sun, 28 Mar 2021 15:36:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1576-1</guid>
        <source url="https://forum.rebol.info/t/not-scrapping-encapping-now-tested-on-win-mac-linux/1576.rss">Not Scrapping Encapping...now tested on Win/Mac/Linux!</source>
      </item>
  </channel>
</rss>

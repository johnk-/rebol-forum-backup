<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should we kill off defaults-in-function-specs via GROUP!</title>
    <link>https://forum.rebol.info/t/should-we-kill-off-defaults-in-function-specs-via-group/500</link>
    <description>&gt; **UPDATE:** Hmmm, it seems that this feature is needed for `&lt;static&gt;` variables, because they need to be initialized once, hence can&#39;t be done every function run.  So long as it exists for statics, we might keep it.  But I will say that the question of where to put them...and the fact no one is using these... raises questions about the feature that should probably be answered.

---

There was a speculative feature for putting defaults in function specs, by using a GROUP!:

    foo: function [
        x [integer!]
        /amount
        y [integer!] (10)
    ][
        x + y
    ]

One key concept was that if it were in the spec, then some amount of automatic documentation could be provided from it.  But also it meant you could save yourself mentioning the name parameter twice, in the spec to name it and the body to default it.

But what turned out to happen is that it gets pretty much lost in the noise, when you have string-based parameter documentation.  It&#39;s easy to overlook, and raises questions of whether you want any relevant evaluations in the GROUP! to run once or every time.

    x: 100
    foo: function [
        x [integer!]
        /amount
        y [integer!]
            {The integer to add, hey where do we put that default now?}
            {Does it go before or after these documentation lines?}
                (10 * x) ;-- is that relative to the parameter or to the global?
    ][...]

Not only that, if you want to COMPOSE function specs you run into the problem of dealing with any GROUP!s in it.  So not having GROUP!s have meaning keeps you from ending up with problems with escaping there.

&gt; **UPDATE**: [Labeled compose](https://forum.rebol.info/t/tag-compose-is-it-tag-specific-composition/979) has pretty much solved this problem if it comes up.  So I don&#39;t think it&#39;s a concern anymore.

In the meantime, we&#39;ve had the pretty [infix **default** operator](https://trello.com/c/cTCwc5vX) come along.  It gives a nice enough and unambiguous experience.  You can even do your defaulting inline if you like:

    foo: function [
        x [integer!]
        /amount
        y [integer!]
    ][
        x + y: default [10]
    ]

There was no particularly efficient trick for storing the values or putting them in the frame...all it was doing was putting code in the body of the function, just like having a bunch of DEFAULT lines up front.  The unimplemented automatic documentation feature raises a lot of questions...if it was calculated, do you want the calculated value or just what was in the GROUP! raw?  :-/

Add it all up, and the GROUP!-to-default-a-parameter looks like a turkey.  So should people just learn and love DEFAULT and [its good friend MAYBE](https://trello.com/c/XnDsvsM0), and we get rid of this?

---

**Pursuant to my update, here&#39;s a real world example to ponder from @codebybrett&#39;s READ-DEEP:**

    read-deep: function [
        {Return files and folders using recursive read strategy.}
        root [file! url! block!]
        /full
            {Include root path, retains full paths vs. returning relative paths.}
        /strategy
            {Allows Queue building to be overridden.}
        take [function!]
            {TAKE next item from queue, building the queue as necessary.}
    ][
        take: default [:read-deep-seq]
        ...
    ]

Let&#39;s imagine we want to move that default into the spec.  Where?

    read-deep: function [
        {Return files and folders using recursive read strategy.}
        root [file! url! block!]
        /full
            {Include root path, retains full paths vs. returning relative paths.}
        /strategy
            {Allows Queue building to be overridden.}
        take [function!] (:read-deep-seq)
            {TAKE next item from queue, building the queue as necessary.}
    ][
        ...
    ]

I sort of feel like it vanished into the noise.  The code is *shorter*, but I don&#39;t feel it&#39;s *clearer*.  Putting it on its own line is its own line seems a little weird:

    read-deep: function [
        {Return files and folders using recursive read strategy.}
        root [file! url! block!]
        /full
            {Include root path, retains full paths vs. returning relative paths.}
        /strategy
            {Allows Queue building to be overridden.}
        take [function!]
            (:read-deep-seq)
            {TAKE next item from queue, building the queue as necessary.}
    ][
        ...
    ]

If one is writing a quick-and-dirty function with less documentation, it might be clearer...people might find it expedient.  This is why it works okay for `&lt;local&gt;`s and `&lt;static&gt;`s

    read-deep: function [root /full /strategy take (:read-deep-seq)] [
        ...
    ]</description>
    
    <lastBuildDate>Tue, 03 Aug 2021 23:16:33 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/should-we-kill-off-defaults-in-function-specs-via-group/500.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should we kill off defaults-in-function-specs via GROUP!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="500">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>There was no particularly efficient trick for storing the values or putting them in the frame...all it was doing was putting code in the body of the function, just like having a bunch of DEFAULT lines up front.</p>
</blockquote>
</aside>
<p>So it's been 3 whole years since this was discussed, but something actually has changed about the nature of the implementation of functions to where this can actually be an efficiency benefit.</p>
<p>Basically, there is no difference now between locals and specialized-out arguments.  This is because in the function specification block, I'm using the space where TYPESET! definitions for an unspecialized parameter would be to store specialized values.</p>
<p>In other words, the specializations and type definitions are folded into the same array...since the specialization value is type checked at specialization time the slot is available for the value itself.  It's a cool trick.</p>
<p><strong>And it means that we can actually set locals in the frame itself to initial values besides ~unset~.</strong></p>
<p>This only works if the value is fixed.  So for example:</p>
<pre><code>&gt;&gt; a: 1020

&gt;&gt; foo: func [x &lt;local&gt; y (a)] [print [x y]]

&gt;&gt; foo "before"
before 1020

&gt;&gt; a: 304

&gt;&gt; foo "after"
after 1020
</code></pre>
<p>It would have to capture the value as-is.  Anyway, it's not like this is a super huge priority I'm just pointing out that there is a new efficiency which comes from the unification of locals and specialization that wasn't there before, so this can actually offer a boost that DEFAULT in the body would not have.</p>
<p>But the value would have to be fixed in the frame, like a specialization.</p>
<p>And statics don't have any other option but to be initialized once, so it's consistent with that.</p>
          <p><a href="https://forum.rebol.info/t/should-we-kill-off-defaults-in-function-specs-via-group/500/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-we-kill-off-defaults-in-function-specs-via-group/500/6</link>
        <pubDate>Tue, 03 Aug 2021 23:16:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-500-6</guid>
        <source url="https://forum.rebol.info/t/should-we-kill-off-defaults-in-function-specs-via-group/500.rss">Should we kill off defaults-in-function-specs via GROUP!</source>
      </item>
      <item>
        <title>Should we kill off defaults-in-function-specs via GROUP!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="500" data-full="true">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>I actually am using it (though not in public code).</p>
<p>I find the documentation feature is better this way, than with defaults in the function.</p>
</blockquote>
</aside>
<p>So a thought I'm getting is that a SET-WORD! is a necessary part of the equation for defaulting.  Let's put aside the other arguments I've already made regarding things getting lost with the help strings.  Even this just doesn't look right:</p>
<pre><code>foo: function [
    /some-refinement
    :hard-quoted-thing (first [bar mumble])
][...]
</code></pre>
<p>And with statics, absence of a SET-WORD! looks bad too:</p>
<pre><code>foo: function [
    ...
  &lt;static&gt;
    data ([a b c])
]
</code></pre>
<p>Doesn't it come off much better when a SET-WORD! is used??</p>
<pre><code>foo: function [
    ...
  &lt;static&gt;
    data: ([a b c])
]
</code></pre>
<p>This is giving me a revised opinion of the role of SET-WORD! in function specs--as being reserved for relating to assignment.</p>
<p>That doesn't bode particularly well for <strong><code>return: [integer! text!]</code></strong>...and may suggest it should be <strong><code>&lt;return&gt; [integer! text!]</code></strong>.  One thing I will say is that it is a very common mistake for me to make to just say <strong>return [integer! text!]</strong> and have to figure out what I did wrong, while having the TAG! there is a pattern that is a less easy pattern to break.</p>
<p>So: I think the muddiness of defaulting refinement arguments within the specs (especially since they can't take on this SET-WORD! behavior) is at issue.  Also, the sequence of defaulting refinement arguments--since they come from the function instance--would likely want to be <em>after</em> the statics in runtime order, since they are specific to the instantiation.  Yet if they were part of the spec, they would appear <em>before</em> the statics.  That ordering is hard to relate to.</p>
<p>All told, I think defaulting for non-locals and non-statics needs to get the axe, here.  :-/</p>
<blockquote>
<p><strong>UPDATE:</strong> In light of new circumstances, and them not being taken out six months after me saying it, I no longer think this is so obvious.  But maybe it's still not going to make it as a Beta/One feature.</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/should-we-kill-off-defaults-in-function-specs-via-group/500/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-we-kill-off-defaults-in-function-specs-via-group/500/5</link>
        <pubDate>Sat, 14 Jul 2018 20:48:40 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-500-5</guid>
        <source url="https://forum.rebol.info/t/should-we-kill-off-defaults-in-function-specs-via-group/500.rss">Should we kill off defaults-in-function-specs via GROUP!</source>
      </item>
      <item>
        <title>Should we kill off defaults-in-function-specs via GROUP!</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>I, too have a preference for types first, but I am not sure whether there has to be a policy about it.</p>
<p>How about folding the default value into the type block?</p>
<pre><code>foo: func [
    /set
    x [integer!] (1) "The x"
    y [integer! (1)] "The y"
][...]</code></pre>
          <p><a href="https://forum.rebol.info/t/should-we-kill-off-defaults-in-function-specs-via-group/500/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-we-kill-off-defaults-in-function-specs-via-group/500/4</link>
        <pubDate>Tue, 30 Jan 2018 14:39:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-500-4</guid>
        <source url="https://forum.rebol.info/t/should-we-kill-off-defaults-in-function-specs-via-group/500.rss">Should we kill off defaults-in-function-specs via GROUP!</source>
      </item>
      <item>
        <title>Should we kill off defaults-in-function-specs via GROUP!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="500">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>I find the documentation feature is better this way, than with defaults in the function.</p>
</blockquote>
</aside>
<p>Do you have an opinion on where it should go?  Before documentation comments?  After?</p>
<p>Rebol2/R3-Alpha were agnostic about whether you put strings before or after the types:</p>
<pre><code>foo: func [
    x {This was legal} [integer!]
    y [integer!] {So was this}
][...]
</code></pre>
<p>So far Ren-C has carried over that policy...though I'm not sure I like it being that flexible.  I have a very strong preference for the types first.</p>
<blockquote>
<p><strong>UPDATE:</strong> I've changed my mind on this and now prefer descriptions first.  But the fact that I could see it either way suggests that either way perhaps should stay legal.</p>
</blockquote>
<p>The defaults I don't have a clear feeling about, because it looks noisy to me no matter what.</p>
          <p><a href="https://forum.rebol.info/t/should-we-kill-off-defaults-in-function-specs-via-group/500/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-we-kill-off-defaults-in-function-specs-via-group/500/3</link>
        <pubDate>Tue, 30 Jan 2018 00:08:09 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-500-3</guid>
        <source url="https://forum.rebol.info/t/should-we-kill-off-defaults-in-function-specs-via-group/500.rss">Should we kill off defaults-in-function-specs via GROUP!</source>
      </item>
      <item>
        <title>Should we kill off defaults-in-function-specs via GROUP!</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>I actually am using it (though not in public code).<br>
I find the documentation feature is better this way, than with defaults in the function.</p>
          <p><a href="https://forum.rebol.info/t/should-we-kill-off-defaults-in-function-specs-via-group/500/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-we-kill-off-defaults-in-function-specs-via-group/500/2</link>
        <pubDate>Mon, 29 Jan 2018 17:40:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-500-2</guid>
        <source url="https://forum.rebol.info/t/should-we-kill-off-defaults-in-function-specs-via-group/500.rss">Should we kill off defaults-in-function-specs via GROUP!</source>
      </item>
      <item>
        <title>Should we kill off defaults-in-function-specs via GROUP!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p><strong>UPDATE:</strong> Hmmm, it seems that this feature is needed for <code>&lt;static&gt;</code> variables, because they need to be initialized once, hence can't be done every function run.  So long as it exists for statics, we might keep it.  But I will say that the question of where to put them...and the fact no one is using these... raises questions about the feature that should probably be answered.</p>
</blockquote>
<hr>
<p>There was a speculative feature for putting defaults in function specs, by using a GROUP!:</p>
<pre><code>foo: function [
    x [integer!]
    /amount
    y [integer!] (10)
][
    x + y
]
</code></pre>
<p>One key concept was that if it were in the spec, then some amount of automatic documentation could be provided from it.  But also it meant you could save yourself mentioning the name parameter twice, in the spec to name it and the body to default it.</p>
<p>But what turned out to happen is that it gets pretty much lost in the noise, when you have string-based parameter documentation.  It's easy to overlook, and raises questions of whether you want any relevant evaluations in the GROUP! to run once or every time.</p>
<pre><code>x: 100
foo: function [
    x [integer!]
    /amount
    y [integer!]
        {The integer to add, hey where do we put that default now?}
        {Does it go before or after these documentation lines?}
            (10 * x) ;-- is that relative to the parameter or to the global?
][...]
</code></pre>
<p>Not only that, if you want to COMPOSE function specs you run into the problem of dealing with any GROUP!s in it.  So not having GROUP!s have meaning keeps you from ending up with problems with escaping there.</p>
<blockquote>
<p><strong>UPDATE</strong>: <a href="https://forum.rebol.info/t/tag-compose-is-it-tag-specific-composition/979">Labeled compose</a> has pretty much solved this problem if it comes up.  So I don't think it's a concern anymore.</p>
</blockquote>
<p>In the meantime, we've had the pretty <a href="https://trello.com/c/cTCwc5vX">infix <strong>default</strong> operator</a> come along.  It gives a nice enough and unambiguous experience.  You can even do your defaulting inline if you like:</p>
<pre><code>foo: function [
    x [integer!]
    /amount
    y [integer!]
][
    x + y: default [10]
]
</code></pre>
<p>There was no particularly efficient trick for storing the values or putting them in the frame...all it was doing was putting code in the body of the function, just like having a bunch of DEFAULT lines up front.  The unimplemented automatic documentation feature raises a lot of questions...if it was calculated, do you want the calculated value or just what was in the GROUP! raw?  :-/</p>
<p>Add it all up, and the GROUP!-to-default-a-parameter looks like a turkey.  So should people just learn and love DEFAULT and <a href="https://trello.com/c/XnDsvsM0">its good friend MAYBE</a>, and we get rid of this?</p>
<hr>
<p><strong>Pursuant to my update, here's a real world example to ponder from <span class="mention">@codebybrett</span>'s READ-DEEP:</strong></p>
<pre><code>read-deep: function [
    {Return files and folders using recursive read strategy.}
    root [file! url! block!]
    /full
        {Include root path, retains full paths vs. returning relative paths.}
    /strategy
        {Allows Queue building to be overridden.}
    take [function!]
        {TAKE next item from queue, building the queue as necessary.}
][
    take: default [:read-deep-seq]
    ...
]
</code></pre>
<p>Let's imagine we want to move that default into the spec.  Where?</p>
<pre><code>read-deep: function [
    {Return files and folders using recursive read strategy.}
    root [file! url! block!]
    /full
        {Include root path, retains full paths vs. returning relative paths.}
    /strategy
        {Allows Queue building to be overridden.}
    take [function!] (:read-deep-seq)
        {TAKE next item from queue, building the queue as necessary.}
][
    ...
]
</code></pre>
<p>I sort of feel like it vanished into the noise.  The code is <em>shorter</em>, but I don't feel it's <em>clearer</em>.  Putting it on its own line is its own line seems a little weird:</p>
<pre><code>read-deep: function [
    {Return files and folders using recursive read strategy.}
    root [file! url! block!]
    /full
        {Include root path, retains full paths vs. returning relative paths.}
    /strategy
        {Allows Queue building to be overridden.}
    take [function!]
        (:read-deep-seq)
        {TAKE next item from queue, building the queue as necessary.}
][
    ...
]
</code></pre>
<p>If one is writing a quick-and-dirty function with less documentation, it might be clearer...people might find it expedient.  This is why it works okay for <code>&lt;local&gt;</code>s and <code>&lt;static&gt;</code>s</p>
<pre><code>read-deep: function [root /full /strategy take (:read-deep-seq)] [
    ...
]</code></pre>
          <p><a href="https://forum.rebol.info/t/should-we-kill-off-defaults-in-function-specs-via-group/500/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-we-kill-off-defaults-in-function-specs-via-group/500/1</link>
        <pubDate>Sun, 28 Jan 2018 10:22:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-500-1</guid>
        <source url="https://forum.rebol.info/t/should-we-kill-off-defaults-in-function-specs-via-group/500.rss">Should we kill off defaults-in-function-specs via GROUP!</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Making the Case for Caselessness</title>
    <link>https://forum.rebol.info/t/making-the-case-for-caselessness/868</link>
    <description>Rebol has two major areas of case-insensitivity by default.  One is in binding, so variable naming and function names are handled case-insensitively.  The other is in general treatment of data...so routines like FIND, etc.

Historically data case-insensitivity has applied to **=** / **equal?** as well.  Ren-C plans to undo that *particular* choice, with the [IS and ISN&#39;T proposal](https://forum.rebol.info/t/strict-equality-lax-equality-equivalence-sameness-is-and/349).  The &quot;wordish&quot; IS would fall under the case-insensitive operation of the &quot;wordish&quot; operations like FIND, while the &quot;mathish&quot; = would align with the stricter expectations that programmers would expect out of an equal sign.

I&#39;m moving ahead with this for Beta/One...and have to say it&#39;s looking rather good so far.  I think that I underestimated how easily we scan English phrases like **method is &#39;script** as infix and meaningful...it reads more comfortably than I expected.  I even thought of a way to emphasize the case insensitivity when comparing to a literal: use mixed case for the thing on the right.  So **method is &#39;Script**. 

But doing the changes, I also realize how many instances were using **=** because it&#39;s prettier and easier to type than **==**...when strict equality was actually what was intended (or would be preferred).  It&#39;s chronic...and for instance, nearly 100% of the tests in the test suite which used an **=** meant to use **==**...with the only exceptions being those few tests that were specifically designed to test lax equality.

But if I&#39;m noticing how frequently one meant == when one had said =, what is the essential difference between:

     [a b] = compose [a () b]
     did find [[a b] [c d]] [a b]
 
If these were tests, both would prefer case sensitivity, wouldn&#39;t they?

## This raises the spectre of the old &quot;why case-insensitive at all?&quot; debate

That debate has been opened, looked at, and closed several times already.  It&#39;s no longer on the table.

Still, when a decision bucks the trend of basically every mainstream language in such a big way, there should probably be a coherent defense somewhere to point people to.  So I collected my thoughts together here in a blog:

http://blog.hostilefork.com/making-the-case-for-caselessness/

As far as I know, that is the best single-document argument made to date on the topic.  If you want to submit addendums or corrections, comment on the [source on GitHub](https://github.com/hostilefork/hostilefork.com/commit/01dab8a229300b7f304db03b5c5a981f552b6580)

## So IS and ISN&#39;T tweak a couple of operators, THAT&#39;S IT

*(...although I&#39;ve mentioned it&#39;s not likely that `&lt;fOo&gt; is &quot;FoO&quot;` will be true.  The type mismatch is a difference that goes beyond case.)*

This is not a referendum on case insensitivity in the language.  All this is doing is changing english-word operators to line up with the language&#39;s lax default, and lets symbols like = provide a stronger rule, as the exceptions since they are mathy.

I&#39;m looking forward to seeing **==** die off in equality, and be used for other purposes in code.  I&#39;ve imagined it as a MarkDown-like construct, for doing conditional debug output.  The number of = signs used could indicate the verbosity level at which the message might be printed, and it could be variadic to gather the arguments between marks, to feed into a PRINT statement.

     == {Main Loop} ==
     // ^-- e.g. prints if verbosity = 1

     repeat n 100 [
         === {Process Item} n ===
         // ^-- e.g. prints if verbosity = 2
         ...
     ]

I think it&#39;s going to be a great change.</description>
    
    <lastBuildDate>Fri, 19 Oct 2018 21:53:01 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/making-the-case-for-caselessness/868.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Making the Case for Caselessness</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Rebol has two major areas of case-insensitivity by default.  One is in binding, so variable naming and function names are handled case-insensitively.  The other is in general treatment of data...so routines like FIND, etc.</p>
<p>Historically data case-insensitivity has applied to <strong>=</strong> / <strong>equal?</strong> as well.  Ren-C plans to undo that <em>particular</em> choice, with the <a href="https://forum.rebol.info/t/strict-equality-lax-equality-equivalence-sameness-is-and/349">IS and ISN'T proposal</a>.  The "wordish" IS would fall under the case-insensitive operation of the "wordish" operations like FIND, while the "mathish" = would align with the stricter expectations that programmers would expect out of an equal sign.</p>
<p>I'm moving ahead with this for Beta/One...and have to say it's looking rather good so far.  I think that I underestimated how easily we scan English phrases like <strong>method is 'script</strong> as infix and meaningful...it reads more comfortably than I expected.  I even thought of a way to emphasize the case insensitivity when comparing to a literal: use mixed case for the thing on the right.  So <strong>method is 'Script</strong>.</p>
<p>But doing the changes, I also realize how many instances were using <strong>=</strong> because it's prettier and easier to type than <strong>==</strong>...when strict equality was actually what was intended (or would be preferred).  It's chronic...and for instance, nearly 100% of the tests in the test suite which used an <strong>=</strong> meant to use <strong>==</strong>...with the only exceptions being those few tests that were specifically designed to test lax equality.</p>
<p>But if I'm noticing how frequently one meant == when one had said =, what is the essential difference between:</p>
<pre><code> [a b] = compose [a () b]
 did find [[a b] [c d]] [a b]
</code></pre>
<p>If these were tests, both would prefer case sensitivity, wouldn't they?</p>
<h2>This raises the spectre of the old "why case-insensitive at all?" debate</h2>
<p>That debate has been opened, looked at, and closed several times already.  It's no longer on the table.</p>
<p>Still, when a decision bucks the trend of basically every mainstream language in such a big way, there should probably be a coherent defense somewhere to point people to.  So I collected my thoughts together here in a blog:</p>
<p><a href="http://blog.hostilefork.com/making-the-case-for-caselessness/" class="onebox" target="_blank" rel="nofollow noopener">http://blog.hostilefork.com/making-the-case-for-caselessness/</a></p>
<p>As far as I know, that is the best single-document argument made to date on the topic.  If you want to submit addendums or corrections, comment on the <a href="https://github.com/hostilefork/hostilefork.com/commit/01dab8a229300b7f304db03b5c5a981f552b6580" rel="nofollow noopener">source on GitHub</a></p>
<h2>So IS and ISN'T tweak a couple of operators, THAT'S IT</h2>
<p><em>(...although I've mentioned it's not likely that <code>&lt;fOo&gt; is "FoO"</code> will be true.  The type mismatch is a difference that goes beyond case.)</em></p>
<p>This is not a referendum on case insensitivity in the language.  All this is doing is changing english-word operators to line up with the language's lax default, and lets symbols like = provide a stronger rule, as the exceptions since they are mathy.</p>
<p>I'm looking forward to seeing <strong>==</strong> die off in equality, and be used for other purposes in code.  I've imagined it as a MarkDown-like construct, for doing conditional debug output.  The number of = signs used could indicate the verbosity level at which the message might be printed, and it could be variadic to gather the arguments between marks, to feed into a PRINT statement.</p>
<pre><code> == {Main Loop} ==
 // ^-- e.g. prints if verbosity = 1

 repeat n 100 [
     === {Process Item} n ===
     // ^-- e.g. prints if verbosity = 2
     ...
 ]
</code></pre>
<p>I think it's going to be a great change.</p>
          <p><a href="https://forum.rebol.info/t/making-the-case-for-caselessness/868/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/making-the-case-for-caselessness/868/1</link>
        <pubDate>Fri, 19 Oct 2018 11:55:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-868-1</guid>
        <source url="https://forum.rebol.info/t/making-the-case-for-caselessness/868.rss">Making the Case for Caselessness</source>
      </item>
  </channel>
</rss>

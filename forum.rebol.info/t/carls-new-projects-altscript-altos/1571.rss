<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Carl&#39;s New Projects (?) AltScript, AltOS</title>
    <link>https://forum.rebol.info/t/carls-new-projects-altscript-altos/1571</link>
    <description>This is apparently something Carl is working on...

**[ASON AltScript Format](https://altscript.com/?p=116)**

Going through the bullet points:

&gt; **Braces {} are used to denote objects**. They are lexical and may be used directly without evaluation (the `make` constructor is not necessary).
&gt; **Braces {} are not used for multi-line strings**. A single+double quote format is used for multi-line strings.

At times I&#39;ve certainly had my doubts about whether the language tradeoff of braces for strings is a good one.  I go back and forth on this.

Today the biggest justification for it is that it mixes well with putting portions of code in quotes, for strings and characters and filenames:

     REBVAL *v = rebValue(&quot;... {a string} #{c} %{spaced filename.txt}...&quot;)`.  

The escaping you get if you don&#39;t have that is annoying.  Single quotes aren&#39;t an option due to ambiguity with quoting.  It&#39;s a distinguishing feature, and I&#39;d hate to drop it.

&gt; **All loaded values are constant by default**. This includes strings, blocks, and objects. They are all protected from modification. However, they can be copied and modified. In addition, they can be loaded as modifiable by using a load option.

We tried this and I don&#39;t think it&#39;s as palatable or interesting as the current Ren-C behavior:

**[Mutability Manifesto](https://forum.rebol.info/t/the-beta-one-mutability-manifesto/1062)**

It&#39;s been working well enough that I don&#39;t think anyone&#39;s found much fault with it.

Also, if Carl is working from the R3-Alpha codebase enforcement of mutability, there are countless bugs.

&gt; **Zero-based indexing is used for blocks** (arrays). This is consistent with many other languages.

I&#39;ve gotten used to FIRST and 1 going together.

&gt; **Dots are used for field selection**. For example, “person.name” refers to the name field of the person object. Slashes are not used for selection. Use of a dot for selection is common in many other languages.

I favor dots, we have TUPLE! and the option to say that PATH! points are only for refinements.

&gt; **The at sign “@” denotes literal values** for none, true, false, data-types, and special values like NAN (not a number).

This is interesting, because [I&#39;ve suggested @ may play a role in datatypes](), with @ more broadly referring to a value category that is inert in the evaluator.

But there&#39;s still a lot to think about.

&gt; **Short strings are stored directly** in value cells, not in separate storage. This is an space-saving optimization.
&gt; **Characters are expressed as strings**. The above storage optimization makes this possible.

The TOKEN! unification (ISSUE! + CHAR!) does this.

&gt; **Binary (byte arrays)** use #”…” for hex and ##”…” for base-64.
&gt; **Base-2 binary** is not directly expressible in source format.

My current thinking is that ${...} and $&quot;...&quot; are used for binaries.

I don&#39;t know that I&#39;m particularly concerned about special representations of base64 or base2.  It seems to me that TOKEN! can serve well enough and then you convert it if you need to.  The cases where you involve base64 binaries are few and far between...usually compressed payloads, and you know where they are so you don&#39;t need metadata saying &quot;this information is binary, and this information is base64&quot; because all you&#39;re going to do with it is decompress it.

&gt; **Arithmetic operators** can be used on series data-types (strings and blocks) for various useful results. For example “+” can be used to join strings and blocks.

:man_shrugging: 

&gt; **String character escapes use C notation**. They use backslash notation, for example “\n” for newline and “\t” for tab.

Giulio has asked for this.  It&#39;s a question worth revisiting.

&gt; **The #{ and #[ sequences are reserved** for future use. Currently they are undefined.

I do like #{ as an alternative to #&quot; for TOKEN!...it helps passing characters to APIs inside quoted strings.

&gt; **For JSON compatiblity**:
&gt;  * Keys (word definitions) can be written with quotes (`“field”:`)
&gt;  * A lone colon (`:`) will automatically associate to the word/string immediately before it.
&gt;  * Commas as element separators are allowed as long as they are not directly followed by a non-digit character (to avoid confusion with comma-based decimal values.)

COMMA! has become a favorite feature of mine, so I like how it&#39;s done.

I don&#39;t know particularly what to say about the broader question of JSON compatibility.

Seems to touch upon a few points...in particular embracing dots and leaning more toward immutability/constness.</description>
    
    <lastBuildDate>Tue, 19 Oct 2021 00:27:40 +0000</lastBuildDate>
    <category>Foreign Inspiration</category>
    <atom:link href="https://forum.rebol.info/t/carls-new-projects-altscript-altos/1571.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Carl&#39;s New Projects (?) AltScript, AltOS</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I wrote up a summary of why I think braces as a lexical object! representation won't actually please anyone:</p>
<p><a href="https://forum.rebol.info/t/rethinking-braces-as-an-array-type/1727/25" class="inline-onebox">{ Rethinking Braces }... as an array type? - #25 by hostilefork</a></p>
<p>You get a very minor bit of JSON compatibility, but a mostly useless language feature.  The FENCE! proposal is more promising, but has to be considered for what it is...and the consequences it has on strings.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1571">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><strong>For JSON compatiblity</strong>:</p>
<ul>
<li>Keys (word definitions) can be written with quotes (<code>“field”:</code>)</li>
<li>A lone colon (<code>:</code>) will automatically associate to the word/string immediately before it.</li>
<li>Commas as element separators are allowed as long as they are not directly followed by a non-digit character (to avoid confusion with comma-based decimal values.)</li>
</ul>
</blockquote>
</aside>
<p>I am a skeptic of accepting something that looks like a SET-TEXT! (set-string!) as a synonym for SET-WORD! for the purposes of this "JSON compatibility".</p>
<p>Reading around suggests the quotes are there because Crockford <a href="https://stackoverflow.com/a/4201631">didn't want to put JS keywords in the JSON spec (like <code>function</code>)</a>, and prior to ES5 these could not be used as keys.</p>
<p>JavaScript itself has moved on to where keys that name keywords don't need to be in quotes as of ES5.  <strong>I imagine it's not unlikely that if JSON was created today it would not have the quotes, and would restrict keys to not having spaces or hyphens...using underscores only for word separators.</strong>  The fact that spaces and dashes are allowed is more likely a by-product of not wanting to complicate the spec by figuring out how to prevent them.</p>
<p>I think this is where we start to get into the <em>saying no</em> territory I was talking about.  As an example, how much trouble does having filenames with spaces in them cause?  <em>a lot</em>.  Questions arise like: "Do people really need to have spaces in filenames, or was this something that was pursued in spite of how boneheaded an idea it was?"</p>
<p>Embracing bracing for objects is a change that may have value.  But I think chasing this JSON compatibility is a move in the wrong direction.</p>
          <p><a href="https://forum.rebol.info/t/carls-new-projects-altscript-altos/1571/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/carls-new-projects-altscript-altos/1571/4</link>
        <pubDate>Mon, 18 Oct 2021 22:38:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1571-4</guid>
        <source url="https://forum.rebol.info/t/carls-new-projects-altscript-altos/1571.rss">Carl&#39;s New Projects (?) AltScript, AltOS</source>
      </item>
      <item>
        <title>Carl&#39;s New Projects (?) AltScript, AltOS</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>This is apparently something Carl is working on...</p>
<p><strong><a href="https://altscript.com/?p=116">ASON AltScript Format</a></strong></p>
<p>Going through the bullet points:</p>
<blockquote>
<p><strong>Braces {} are used to denote objects</strong>. They are lexical and may be used directly without evaluation (the <code>make</code> constructor is not necessary).<br>
<strong>Braces {} are not used for multi-line strings</strong>. A single+double quote format is used for multi-line strings.</p>
</blockquote>
<p>At times I've certainly had my doubts about whether the language tradeoff of braces for strings is a good one.  I go back and forth on this.</p>
<p>Today the biggest justification for it is that it mixes well with putting portions of code in quotes, for strings and characters and filenames:</p>
<pre><code> REBVAL *v = rebValue("... {a string} #{c} %{spaced filename.txt}...")`.  
</code></pre>
<p>The escaping you get if you don't have that is annoying.  Single quotes aren't an option due to ambiguity with quoting.  It's a distinguishing feature, and I'd hate to drop it.</p>
<blockquote>
<p><strong>All loaded values are constant by default</strong>. This includes strings, blocks, and objects. They are all protected from modification. However, they can be copied and modified. In addition, they can be loaded as modifiable by using a load option.</p>
</blockquote>
<p>We tried this and I don't think it's as palatable or interesting as the current Ren-C behavior:</p>
<p><strong><a href="https://forum.rebol.info/t/the-beta-one-mutability-manifesto/1062">Mutability Manifesto</a></strong></p>
<p>It's been working well enough that I don't think anyone's found much fault with it.</p>
<p>Also, if Carl is working from the R3-Alpha codebase enforcement of mutability, there are countless bugs.</p>
<blockquote>
<p><strong>Zero-based indexing is used for blocks</strong> (arrays). This is consistent with many other languages.</p>
</blockquote>
<p>I've gotten used to FIRST and 1 going together.</p>
<blockquote>
<p><strong>Dots are used for field selection</strong>. For example, “person.name” refers to the name field of the person object. Slashes are not used for selection. Use of a dot for selection is common in many other languages.</p>
</blockquote>
<p>I favor dots, we have TUPLE! and the option to say that PATH! points are only for refinements.</p>
<blockquote>
<p><strong>The at sign “@” denotes literal values</strong> for none, true, false, data-types, and special values like NAN (not a number).</p>
</blockquote>
<p>This is interesting, because <a>I've suggested @ may play a role in datatypes</a>, with @ more broadly referring to a value category that is inert in the evaluator.</p>
<p>But there's still a lot to think about.</p>
<blockquote>
<p><strong>Short strings are stored directly</strong> in value cells, not in separate storage. This is an space-saving optimization.<br>
<strong>Characters are expressed as strings</strong>. The above storage optimization makes this possible.</p>
</blockquote>
<p>The TOKEN! unification (ISSUE! + CHAR!) does this.</p>
<blockquote>
<p><strong>Binary (byte arrays)</strong> use #”…” for hex and ##”…” for base-64.<br>
<strong>Base-2 binary</strong> is not directly expressible in source format.</p>
</blockquote>
<p>My current thinking is that ${...} and $"..." are used for binaries.</p>
<p>I don't know that I'm particularly concerned about special representations of base64 or base2.  It seems to me that TOKEN! can serve well enough and then you convert it if you need to.  The cases where you involve base64 binaries are few and far between...usually compressed payloads, and you know where they are so you don't need metadata saying "this information is binary, and this information is base64" because all you're going to do with it is decompress it.</p>
<blockquote>
<p><strong>Arithmetic operators</strong> can be used on series data-types (strings and blocks) for various useful results. For example “+” can be used to join strings and blocks.</p>
</blockquote>
<p><img src="https://forum.rebol.info/images/emoji/twitter/man_shrugging.png?v=9" title=":man_shrugging:" class="emoji only-emoji" alt=":man_shrugging:"></p>
<blockquote>
<p><strong>String character escapes use C notation</strong>. They use backslash notation, for example “\n” for newline and “\t” for tab.</p>
</blockquote>
<p>Giulio has asked for this.  It's a question worth revisiting.</p>
<blockquote>
<p><strong>The #{ and #[ sequences are reserved</strong> for future use. Currently they are undefined.</p>
</blockquote>
<p>I do like #{ as an alternative to #" for TOKEN!...it helps passing characters to APIs inside quoted strings.</p>
<blockquote>
<p><strong>For JSON compatiblity</strong>:</p>
<ul>
<li>Keys (word definitions) can be written with quotes (<code>“field”:</code>)</li>
<li>A lone colon (<code>:</code>) will automatically associate to the word/string immediately before it.</li>
<li>Commas as element separators are allowed as long as they are not directly followed by a non-digit character (to avoid confusion with comma-based decimal values.)</li>
</ul>
</blockquote>
<p>COMMA! has become a favorite feature of mine, so I like how it's done.</p>
<p>I don't know particularly what to say about the broader question of JSON compatibility.</p>
<p>Seems to touch upon a few points...in particular embracing dots and leaning more toward immutability/constness.</p>
          <p><a href="https://forum.rebol.info/t/carls-new-projects-altscript-altos/1571/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/carls-new-projects-altscript-altos/1571/1</link>
        <pubDate>Mon, 22 Mar 2021 17:02:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1571-1</guid>
        <source url="https://forum.rebol.info/t/carls-new-projects-altscript-altos/1571.rss">Carl&#39;s New Projects (?) AltScript, AltOS</source>
      </item>
  </channel>
</rss>

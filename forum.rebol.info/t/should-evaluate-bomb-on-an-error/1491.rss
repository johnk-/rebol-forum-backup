<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should EVALUATE bomb on an error?</title>
    <link>https://forum.rebol.info/t/should-evaluate-bomb-on-an-error/1491</link>
    <description>Currently if you try something bad in EVALUATE, it throws an error:

```plain
&gt;&gt; evaluate [unspaced null]
** Script Error: unspaced requires line argument to not be null
```

As EVALUATE is a relatively low-level function, it would seem more likely one would want to handle the error on the same basis as other possible return values:

```plain
; assuming EVALUATE returns [product position]
&gt;&gt; evaluate [unspaced null foo bar]
== [**unspaced-null [foo bar]]
```

In this case, the bomb isn&#39;t particularly informative and seems reasonable to say *&#39;user beware—assume errors will happen&#39;*. It&#39;s kind of difficult to work around too.

This sort of puts it in the same class as TRAP with different semantics:

```plain
trap [ok ok something bad] =&gt; [**something-bad null]
trap [ok ok] =&gt; [null ok]
evaluate [something bad ok ok] =&gt; [**something-bad [ok ok]]
evaluate [ok ok] =&gt; [ok [ok]]
```

I guess the wrinkle here is how do you determine where `something bad` ends and `ok ok` resumes? That may or may not be obvious.</description>
    
    <lastBuildDate>Sat, 06 Feb 2021 07:57:54 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/should-evaluate-bomb-on-an-error/1491.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should EVALUATE bomb on an error?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="1" data-topic="1491">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I guess the wrinkle here is how do you determine where <code>something bad</code> ends and <code>ok ok</code> resumes?</p>
</blockquote>
</aside>
<p>Rebol can't measure the span of a single step of evaluation without having the side-effect of running it.  That's just the nature of the beast.</p>
<p>I'd once tried making a "neutral" mode of the evaluator which would only gather arguments but not have any side effects.  This would be able to count through the function arguments, and the arguments to functions that were those arguments, and so on:</p>
<pre><code> &gt;&gt; eval-neutral [print "Hi" print "Bye"]
 == [print "Bye"]   ; no actual printing done, but arity of PRINT exploited

 &gt;&gt; eval-neutral [print "Bye"]
 == []
</code></pre>
<p>But this falls down the moment you run code which changes the definitions:</p>
<pre><code> &gt;&gt; redefine-print: func [] [print: does [print "PRINT is arity-0 now"]]

 &gt;&gt; eval-neutral [redefine-print print "Bye"]
 == [print "Bye"]  ; didn't actually *run* REDEFINE-PRINT

 &gt;&gt; eval-neutral [print "Bye"]
 == []  ; should have only stepped past PRINT, leaving "Bye"
</code></pre>
<p>Some aspect of this foundational problem applies any time you try to resume things.  Hence, the only granularity of resumption can be the end of BLOCK!/GROUP!.</p>
<p>(It's this "we can't know the limits of boundaries of expressions" that tripped up the idea of making the MATH dialect for precedence reordering able to mix expressions without putting all executable expressions between the operators in GROUP!s.)</p>
<aside class="quote no-group" data-username="rgchris" data-post="1" data-topic="1491">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>As EVALUATE is a relatively low-level function, it would seem more likely one would want to handle the error on the same basis as other possible return values</p>
</blockquote>
</aside>
<p>I've written some ideas on making a more formal contract between callers and things that error.  Perhaps you would be able to weigh in there:</p>
<aside class="quote quote-modified" data-post="1" data-topic="1371">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar">
    <a href="https://forum.rebol.info/t/the-need-to-rethink-error/1371">The Need To Rethink ERROR!</a> <a class="badge-wrapper  bullet" href="/c/development/datatypes/45"><span class="badge-category-parent-bg" style="background-color: #25AAE2;"></span><span class="badge-category-bg" style="background-color: #25AAE2;"></span><span style="" data-drop-close="true" class="badge-category clear-badge" title="The datatypes category is for the discussion of the specific properties of datatypes themselves.  Sample topics might include:">Datatypes</span></a>
  </div>
  <blockquote>
    Looking around at how people deal with failure conditions, there's a pretty strong trend against exceptions--a trend which has grown stronger in the last batch of popular languages. 
Exceptions operate on a dubious principle: that a trigger condition originating transitively in a deep stack of code can be meaningfully handled when passed up through intermediary stacks.  There's an uncomfortable violation of abstraction: you are no longer dealing with a return result that was clearly formalized i…
  </blockquote>
</aside>

          <p><a href="https://forum.rebol.info/t/should-evaluate-bomb-on-an-error/1491/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-evaluate-bomb-on-an-error/1491/2</link>
        <pubDate>Sat, 06 Feb 2021 07:57:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1491-2</guid>
        <source url="https://forum.rebol.info/t/should-evaluate-bomb-on-an-error/1491.rss">Should EVALUATE bomb on an error?</source>
      </item>
      <item>
        <title>Should EVALUATE bomb on an error?</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>Currently if you try something bad in EVALUATE, it throws an error:</p>
<pre><code class="lang-nohighlight">&gt;&gt; evaluate [unspaced null]
** Script Error: unspaced requires line argument to not be null
</code></pre>
<p>As EVALUATE is a relatively low-level function, it would seem more likely one would want to handle the error on the same basis as other possible return values:</p>
<pre><code class="lang-nohighlight">; assuming EVALUATE returns [product position]
&gt;&gt; evaluate [unspaced null foo bar]
== [**unspaced-null [foo bar]]
</code></pre>
<p>In this case, the bomb isn't particularly informative and seems reasonable to say <em>'user beware—assume errors will happen'</em>. It's kind of difficult to work around too.</p>
<p>This sort of puts it in the same class as TRAP with different semantics:</p>
<pre><code class="lang-nohighlight">trap [ok ok something bad] =&gt; [**something-bad null]
trap [ok ok] =&gt; [null ok]
evaluate [something bad ok ok] =&gt; [**something-bad [ok ok]]
evaluate [ok ok] =&gt; [ok [ok]]
</code></pre>
<p>I guess the wrinkle here is how do you determine where <code>something bad</code> ends and <code>ok ok</code> resumes? That may or may not be obvious.</p>
          <p><a href="https://forum.rebol.info/t/should-evaluate-bomb-on-an-error/1491/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-evaluate-bomb-on-an-error/1491/1</link>
        <pubDate>Sat, 06 Feb 2021 06:24:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1491-1</guid>
        <source url="https://forum.rebol.info/t/should-evaluate-bomb-on-an-error/1491.rss">Should EVALUATE bomb on an error?</source>
      </item>
  </channel>
</rss>

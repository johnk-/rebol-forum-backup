<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>ANY vs. MANY in PARSE...</title>
    <link>https://forum.rebol.info/t/any-vs-many-in-parse/1540</link>
    <description>In at least one Haskell text combinator set, it uses [**some**](https://hackage.haskell.org/package/parsers-0.12.10/docs/Text-Parser-Combinators.html#v:some) to mean one or more match, and [**many**](https://hackage.haskell.org/package/parsers-0.12.10/docs/Text-Parser-Combinators.html#v:many) for zero or more matches.

I can see why ANY makes more *sense*...to mean &quot;any number of matches&quot; (including 0).  But a disadvantage is that it looks a lot like the common ANY construct in regular code... *which kind of has the opposite meaning* (non-PARSE ANY means &quot;at least one of the following things, go with the first one that&#39;s truthy, else return null&quot;).

Because we&#39;re sort of dealing in a gray area of learned behavior here, I wonder if the benefit of going with MANY to make parse rules look different is enough to prefer it.</description>
    
    <lastBuildDate>Tue, 18 May 2021 07:18:45 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/any-vs-many-in-parse/1540.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>ANY vs. MANY in PARSE...</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was merged into an existing topic: <a href="/t/tag-s-as-parse-keywords-vs-literal-matches/1558/4">TAG!s as PARSE keywords vs. Literal Matches</a></p>
          <p><a href="https://forum.rebol.info/t/any-vs-many-in-parse/1540/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-vs-many-in-parse/1540/13</link>
        <pubDate>Sat, 14 Aug 2021 19:06:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1540-13</guid>
        <source url="https://forum.rebol.info/t/any-vs-many-in-parse/1540.rss">ANY vs. MANY in PARSE...</source>
      </item>
      <item>
        <title>ANY vs. MANY in PARSE...</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I think the die is cast, and WHILE + SOME with the help of <a href="https://forum.rebol.info/t/further-as-its-own-separate-uparse-combinator/1593">generically enforcing parse progress with FURTHER</a> feels clear and complete.  You get all 4 possibilities and it's very clear.</p>
<ul>
<li>
<p>Potentially 0 matches, progress not enforced: <strong>while [...]</strong></p>
</li>
<li>
<p>1 or more matches, progress not enforced: <strong>some [...]</strong> <em>(previously not an option)</em></p>
</li>
<li>
<p>Potentially 0 matches, must consume parse input to count as a match: <strong>while further [...]</strong> <em>(previously ANY)</em></p>
</li>
<li>
<p>1 or more matches, must consume parse input to count as a match: <strong>some further [...]</strong> <em>(previously SOME)</em></p>
</li>
</ul>
<p>FURTHER should not be necessary most of the time.</p>
<p>It tightens up when we <a href="https://forum.rebol.info/t/reverting-until-and-adding-while-not-and-until-not/594/4">make ordinary WHILE arity-1</a>...and looks in good shape.</p>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="11" data-topic="1540">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Consider that if ANY were retaken in PARSE it could potentially offer an alternative of a parallel use like:</p>
<pre><code>any ([integer! decimal! block! text!])
</code></pre>
<p>vs.</p>
<pre><code>[integer! | decimal! | block! | text!]
</code></pre>
</blockquote>
</aside>
<p><a class="mention" href="/u/blackattr">@BlackATTR</a> points out that this might make it easier when generating alternate rules, since you wouldn't have to worry about sticking in the <code>|</code> during generation.</p>
<p><strong>Either way, I'm going to kill off ANY in Ren-C's existing native PARSE, to begin the reclaiming process.</strong>  I'll add FURTHER to native parse, too.</p>
<p>Customizing the combinator list is how Redbol compatibility parse will work on top of UPARSE.  So if anyone wanted ANY back they could get it that way.</p>
<p>I'm thinking about how maybe PARSE would allow macros, so you could say things like:</p>
<pre><code>any: macro [] [return [while further]]
</code></pre>
<p>(But you'd want to put it in the combinator list, vs. overriding the global ANY)</p>
          <p><a href="https://forum.rebol.info/t/any-vs-many-in-parse/1540/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-vs-many-in-parse/1540/12</link>
        <pubDate>Tue, 04 May 2021 16:33:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1540-12</guid>
        <source url="https://forum.rebol.info/t/any-vs-many-in-parse/1540.rss">ANY vs. MANY in PARSE...</source>
      </item>
      <item>
        <title>ANY vs. MANY in PARSE...</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="5" data-topic="1540">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I'm not suggesting I necessarily agree with the need to change</p>
</blockquote>
</aside>
<p>If you can, please read the most recent summary remarks on <a href="https://forum.rebol.info/t/any-vs-while-and-not-end/1572/2">ANY vs. WHILEâ€¦ and NOT END</a>.  I'm increasingly feeling certain that WHILE and SOME with no progress requirement are the right primitives.  It's running up against my lack of love for the BREAK/ACCEPT/REJECT naming as those kinds of things would need to be invoked more often, but maybe that just needs to get cleaned up too.</p>
<p>Also consider that if ANY were retaken in PARSE it could potentially offer an alternative of a parallel use like:</p>
<pre><code>any ([integer! decimal! block! text!])
</code></pre>
<p>vs.</p>
<pre><code>[integer! | decimal! | block! | text!]
</code></pre>
<p>The GROUP! to get the BLOCK! as a synthesized product is necessary.  If ANY took the BLOCK! as a rule it would not have the power to override the default interpretation as a sequence.  <a href="https://forum.rebol.info/t/the-trickiness-of-the-new-any-combinator-concept/1662">I've written elsewhere about this.</a></p>
<p><strong>I think that this "non-looping-feeling" which the language cultivates about ANY gets at the core of why the word never really sat right with me.  It means "pick one thing out of a set of alternatives" everywhere else... ANY-VALUE!, any [even? x, x &gt; 20]... not "loop".</strong></p>
<p>Plus the "progress requirement" slipstreamed into the rule makes the curve from simple cases to harder ones more difficult...where you wind up having to learn WHILE anyway.</p>
<p><em>(Related thought: Maybe it is interesting to make a SOME loop in the non-PARSE world, which errors if it doesn't run the body at least once?  Though having a few words that are common in parse rules but not in plain code can help cue differentiation of which is which, so that's another thing to consider.)</em></p>
          <p><a href="https://forum.rebol.info/t/any-vs-many-in-parse/1540/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-vs-many-in-parse/1540/11</link>
        <pubDate>Mon, 05 Apr 2021 20:25:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1540-11</guid>
        <source url="https://forum.rebol.info/t/any-vs-many-in-parse/1540.rss">ANY vs. MANY in PARSE...</source>
      </item>
      <item>
        <title>ANY vs. MANY in PARSE...</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I like WHILE as described here and the improved consistency of ANY and ALL.</p>
          <p><a href="https://forum.rebol.info/t/any-vs-many-in-parse/1540/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-vs-many-in-parse/1540/10</link>
        <pubDate>Sat, 27 Mar 2021 14:19:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1540-10</guid>
        <source url="https://forum.rebol.info/t/any-vs-many-in-parse/1540.rss">ANY vs. MANY in PARSE...</source>
      </item>
      <item>
        <title>ANY vs. MANY in PARSE...</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="BlackATTR" data-post="3" data-topic="1540">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>I think ANY is the right word for UPARSE; the standard symbol in pattern matching is *.</p>
</blockquote>
</aside>
<p>In a separate post I'm explaining the historical difference between ANY and WHILE in PARSE...and the question of if they should be the same.</p>
<p>If they are the same, then we might adopt WHILE as the name.  It's an alternative way of thinking of it to use WHILE to mean "keep running this rule as long as it matches":</p>
<pre><code>parse "aaa" [while "a"]
</code></pre>
<p>It seems to be more consistent.  Because WHILE means "keep doing this so long as it is true" in both plain DO code and PARSE, whereas ANY's meaning in DO is "match one of these things and then stop".</p>
<p>e.g. ANY [RULE1, RULE2, RULE3] in PARSE would be more consistent as a synonym for RULE1 | RULE2 | RULE3.</p>
<p>(ALL [RULE1, RULE2, RULE3] comes from the implicit sequencing being ALL, e.g. [RULE1, RULE2, RULE3])</p>
<p>Maybe this verbalizes a little more what my problem is with the reuse of the word...it isn't so much that ANY is in both places, but that there is a fairly clear parallel for what the meaning of ANY would be if it applied in both...and that's not what it is.</p>
          <p><a href="https://forum.rebol.info/t/any-vs-many-in-parse/1540/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-vs-many-in-parse/1540/9</link>
        <pubDate>Sat, 27 Mar 2021 07:03:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1540-9</guid>
        <source url="https://forum.rebol.info/t/any-vs-many-in-parse/1540.rss">ANY vs. MANY in PARSE...</source>
      </item>
      <item>
        <title>ANY vs. MANY in PARSE...</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>Instead of ANY one could say that a certain item is allowed to be present, no matter how many times it even does, so ALLOW comes up.</p>
          <p><a href="https://forum.rebol.info/t/any-vs-many-in-parse/1540/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-vs-many-in-parse/1540/7</link>
        <pubDate>Sat, 06 Mar 2021 11:03:36 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1540-7</guid>
        <source url="https://forum.rebol.info/t/any-vs-many-in-parse/1540.rss">ANY vs. MANY in PARSE...</source>
      </item>
      <item>
        <title>ANY vs. MANY in PARSE...</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In the past, I've thought we might make the PARSE rule convention for ANY just be OPT SOME.</p>
<p>Unfortunately, combinators break that idea as this would be semantically different in capturing...under the rules I'm thinking of.</p>
<p>For example, just thinking about the idea that INTEGER! might transcode from strings:</p>
<pre><code>parse "10 20 30" [numbers: any integer!]
&gt;&gt; numbers
== [10 20 30]

parse "xxx" [numbers: any integer!]
&gt;&gt; numbers
== []

parse "xxx" [numbers: opt some integer!]
&gt;&gt; numbers
; null
</code></pre>
<p>The idea is that OPT will set its result to NULL if the rule does not succeed...and give you the combinator product if it does.  But ANY would give you an empty block in the case it doesn't succeed at all.</p>
<p>The COPY (or ACROSS) that just gets the span of input wouldn't help smooth that over in this particular case.  Because <strong>copy opt some integer!</strong> gives you a span of the input series, which is text.  The combinator product for INTEGER! here on text input is an INTEGER!.</p>
<p>Unfortunately it can't be stylized the other way as <strong>some opt integer!</strong>, by terminating on NULL... if we are to have some work with "rules that have no products", like <strong>some "a"</strong>.  (I've been assuming that no-product rules exist, where the only thing you can do with them is COPY across their consumed input).</p>
          <p><a href="https://forum.rebol.info/t/any-vs-many-in-parse/1540/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-vs-many-in-parse/1540/6</link>
        <pubDate>Fri, 05 Mar 2021 06:41:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1540-6</guid>
        <source url="https://forum.rebol.info/t/any-vs-many-in-parse/1540.rss">ANY vs. MANY in PARSE...</source>
      </item>
      <item>
        <title>ANY vs. MANY in PARSE...</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I'm not suggesting I necessarily agree with the need to change, but if I were, I'd maybe go for ANY-OF and ALL-OF.</p>
          <p><a href="https://forum.rebol.info/t/any-vs-many-in-parse/1540/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-vs-many-in-parse/1540/5</link>
        <pubDate>Fri, 05 Mar 2021 04:38:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1540-5</guid>
        <source url="https://forum.rebol.info/t/any-vs-many-in-parse/1540.rss">ANY vs. MANY in PARSE...</source>
      </item>
      <item>
        <title>ANY vs. MANY in PARSE...</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="BlackATTR" data-post="3" data-topic="1540">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>I'd rather rename the ANY function in regular code to SOME (FIRST-IF, FIRST-DID, FIRST-TRUE etc.). <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
</blockquote>
</aside>
<p>It's worth thinking about a replacement for non-PARSE ANY.  But I think it would need to be short.  ONE is a possibility, though it makes it sound like it could be that it evaluated all the conditions and checked that one-and-only-one is true.</p>
<pre><code>one [thing1, thing2, thing3] then [...]
</code></pre>
<p>If we were willing to say that Rebol's disposition is prefix, ANY could be <strong>OR</strong> with ALL as <strong>AND</strong>.</p>
<pre><code>and [thing1, thing2] then [...]

or [thing1, thing2] then [...]
</code></pre>
<p>But I don't think that's a good idea.</p>
<blockquote>
<p>Note: I like the direction of AND and OR as weird infix operations right now...so I think we should stick with that.  I've even been considering that <strong>x and y</strong> should be allowed so long as Y is not a function with arguments; it can short circuit across the word if it quotes it.</p>
<p>The real question is just how nasty parameter-gathering conventions are willing to get to make your source level experience more comfortable.  That irregularity makes the functions harder to reuse...e.g. if you MAKE FRAME! for :AND, you have to realize that you're giving it code that it will short-circuit, and you have to know all the rules for that.</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/any-vs-many-in-parse/1540/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-vs-many-in-parse/1540/4</link>
        <pubDate>Thu, 04 Mar 2021 22:08:44 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1540-4</guid>
        <source url="https://forum.rebol.info/t/any-vs-many-in-parse/1540.rss">ANY vs. MANY in PARSE...</source>
      </item>
      <item>
        <title>ANY vs. MANY in PARSE...</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I'd rather rename the ANY function in regular code to SOME (FIRST-IF, FIRST-DID, FIRST-TRUE etc.). <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">  I think ANY is the right word for UPARSE; the standard symbol in pattern matching is *.</p>
<p>While it's good to have literate keywords for pattern matching, I think most devs (including newbies) coming to Ren-C will be minimally familiar with the symbols which have been around forever: * (match 0 or more), ? (match 1 item), # (match one digit), and ! (not).</p>
<p>The quoting proposal seems okay to me. Could be an adjustment for some, but not a huge leap for me.</p>
          <p><a href="https://forum.rebol.info/t/any-vs-many-in-parse/1540/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-vs-many-in-parse/1540/3</link>
        <pubDate>Thu, 04 Mar 2021 13:29:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1540-3</guid>
        <source url="https://forum.rebol.info/t/any-vs-many-in-parse/1540.rss">ANY vs. MANY in PARSE...</source>
      </item>
      <item>
        <title>ANY vs. MANY in PARSE...</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>That is for me MANY says more than one. Even more than two if you are strict, as the saying goes, counting: one, two, many.<br>
SOME says yes there should be one or more of these present. ANY is just fine for me expressing any positive number and zero within PARSE. But indeed with ANY [condition1 condition2] there is at least one of the conditions true.<br>
Well a small difference indeed, but to use something like OPTIONAL within PARSE to overcome this, I say I can live with the difference in meaning.</p>
          <p><a href="https://forum.rebol.info/t/any-vs-many-in-parse/1540/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-vs-many-in-parse/1540/2</link>
        <pubDate>Thu, 04 Mar 2021 07:36:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1540-2</guid>
        <source url="https://forum.rebol.info/t/any-vs-many-in-parse/1540.rss">ANY vs. MANY in PARSE...</source>
      </item>
      <item>
        <title>ANY vs. MANY in PARSE...</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In at least one Haskell text combinator set, it uses <a href="https://hackage.haskell.org/package/parsers-0.12.10/docs/Text-Parser-Combinators.html#v:some"><strong>some</strong></a> to mean one or more match, and <a href="https://hackage.haskell.org/package/parsers-0.12.10/docs/Text-Parser-Combinators.html#v:many"><strong>many</strong></a> for zero or more matches.</p>
<p>I can see why ANY makes more <em>sense</em>...to mean "any number of matches" (including 0).  But a disadvantage is that it looks a lot like the common ANY construct in regular code... <em>which kind of has the opposite meaning</em> (non-PARSE ANY means "at least one of the following things, go with the first one that's truthy, else return null").</p>
<p>Because we're sort of dealing in a gray area of learned behavior here, I wonder if the benefit of going with MANY to make parse rules look different is enough to prefer it.</p>
          <p><a href="https://forum.rebol.info/t/any-vs-many-in-parse/1540/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-vs-many-in-parse/1540/1</link>
        <pubDate>Thu, 04 Mar 2021 06:23:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1540-1</guid>
        <source url="https://forum.rebol.info/t/any-vs-many-in-parse/1540.rss">ANY vs. MANY in PARSE...</source>
      </item>
  </channel>
</rss>

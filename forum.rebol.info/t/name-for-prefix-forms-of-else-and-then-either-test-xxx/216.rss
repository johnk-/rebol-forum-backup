<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Name for prefix forms of ELSE and THEN... EITHER-TEST-XXX?</title>
    <link>https://forum.rebol.info/t/name-for-prefix-forms-of-else-and-then-either-test-xxx/216</link>
    <description>With the recent [solution to &quot;ELSE&#39;s dark corner&quot;](https://github.com/metaeducation/ren-c/commit/4ee0f2360e88d7fd494c31c460965005d3a290cf), it becomes more tempting than ever to use ELSE a lot.  But currently, it&#39;s an enfixed *userspace function*.  That makes it slow-ish.  But if it were an enfixed *native*, odds are that **switch [...] else [...]** could actually be *faster* than **switch/default [...] [...]**, because the lookahead driving enfix is a sunk cost, while path dispatch adds overhead.

But as recently pointed out, [there&#39;s no such thing as an enfix function](https://forum.rebol.info/t/enfix-vs-lookback/214/4), hence there is no such thing as an enfix native function.  You have to take an ordinary native and assign it to a word via enfixing.  This is done during boot code for things like `+` with ADD or `*` with MULTIPLY.

So the natives behind ELSE and THEN...which are prefix by default...need a name.  We could be completely non-creative, e.g. ELSE-NATIVE and THEN-NATIVE:

     &gt;&gt; else-native () [print &quot;This runs&quot; | 10]
     This runs
     == 10

     &gt;&gt; else-native _ [print &quot;This won&#39;t run&quot; | 10]
     == _

     &gt;&gt; else-native (if true [print &quot;This runs&quot; | 20]) [print &quot;This won&#39;t run&quot; | 10]
     This runs
     == 20

     &gt;&gt; then-native () [print &quot;This won&#39;t run&quot; | 10]
     ;-- no result

     &gt;&gt; then-native _ [print &quot;This runs&quot; | 10]
     This runs
     == 10

     &gt;&gt; then-native (if true [print &quot;This runs&quot; | 20]) [print &quot;This runs too&quot; | 10]
     This runs
     This runs too
     == 10

My best idea so far is to consider these as specializations of a ternary operator called &quot;EITHER-TEST&quot;, which would generically work like this:

    &gt;&gt; either-test :even? 4 [print &quot;it wasn&#39;t even!&quot;]
    4

    &gt;&gt; either-test :even? 3 [print &quot;it wasn&#39;t even!&quot;]
    it wasn&#39;t even!

Under this logic, ELSE is enfixed EITHER-TEST specialized with ANY-VALUE? as the test, and THEN is enfixed EITHER-TEST specialized with VOID? as the test.  To give it a boost it&#39;s easy enough to hand-code individual natives for EITHER-TEST-VALUE and EITHER-TEST-VOID, as we&#39;d like ELSE and THEN to be fast as possible.

So what do people think?  Is there a better name for what EITHER-TEST does?</description>
    
    <lastBuildDate>Thu, 06 May 2021 11:47:26 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/name-for-prefix-forms-of-else-and-then-either-test-xxx/216.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Name for prefix forms of ELSE and THEN... EITHER-TEST-XXX?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="216">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>As for prefix THEN and ELSE, hrrrm. I'm still at a loss.</p>
</blockquote>
</aside>
<p>I'll point out that prefix THEN and ELSE no longer test for just NULL.  They test for the <em>light</em> isotope of NULL.</p>
<p>The test for the light isotope could be called NULL-1?...but it's called ELSE?, because that helps us avoid introducing the name "NULL-1" which is not seen anywhere:</p>
<pre><code>&gt;&gt; null
; null  &lt;- not "null-1"

&gt;&gt; else? null
== #[true]

&gt;&gt; if true [null]
; null-2

&gt;&gt; else? if true [null]
== #[false]
</code></pre>
<p><strong>Combining with IF feels like a satisfying enough answer for prefix then and prefix else</strong>.</p>
<pre><code>(expression) then [code] =&gt; if then? (expression) [code]
(expression) else [code] =&gt; if else? (expression) [code]
</code></pre>
<p>That's a little hard to collapse into single function names, because an arity-2 <strong>IF-ELSE?</strong> sounds like it would return a logic.  And plain IF-ELSE seems it would be arity-3...like an alternative name for EITHER.</p>
<p>If someone comes up with a satisfying name for <code>IF THEN?</code> and <code>IF ELSE?</code> as atomic arity-2 functions, then great, but it's hardly a priority.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://forum.rebol.info/t/name-for-prefix-forms-of-else-and-then-either-test-xxx/216/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/name-for-prefix-forms-of-else-and-then-either-test-xxx/216/6</link>
        <pubDate>Thu, 06 May 2021 11:47:26 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-216-6</guid>
        <source url="https://forum.rebol.info/t/name-for-prefix-forms-of-else-and-then-either-test-xxx/216.rss">Name for prefix forms of ELSE and THEN... EITHER-TEST-XXX?</source>
      </item>
      <item>
        <title>Name for prefix forms of ELSE and THEN... EITHER-TEST-XXX?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="216">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>We could also have a refinement to MATCH that took a block, so it was MATCH/ELSE.</p>
<pre><code>EITHER-MATCH [integer! whatever!] value [code if no match]
MATCH/ELSE [integer! whatever!] value [code if no match]
</code></pre>
</blockquote>
</aside>
<p>Two years later... I am happy to report that <em><strong>NULL Isotopes</strong></em> now provide a general and elegant solution.</p>
<p>If the match condition happens to consider NULL a possibility for what a successful match would be, then when a NULL is matched it is turned into a "heavy-null" that is actionable by THEN and ELSE.  The <code>@param</code> convention is used by the relatively few operations that care about heavy null and light null distinctions.</p>
<p>There is thus no need for things like EITHER-MATCH or MATCH/ELSE.</p>
<pre><code>match [&lt;opt&gt; integer!] value else [code if no match]
</code></pre>
<p>That still works for the null case of value.  We also now have NON as a complement.  An example usage:</p>
<pre><code>return non tag! (some expression) else ["what to return if a tag"]
</code></pre>
<p>So if it's a tag, that will return the value, otherwise it will return something else.</p>
<p>You can even get the value, with a function branch:</p>
<pre><code>return non tag! (some expression) else func [tag] [
    to text! tag
]
</code></pre>
<p>And even more cleanly with a lambda:</p>
<pre><code>return non tag! (some expression) else tag -&gt; [to text! tag]
</code></pre>
<p><a href="https://youtu.be/jcDq5SmuJsg?t=450">...features now resolving at 2x velocity...</a></p>
          <p><a href="https://forum.rebol.info/t/name-for-prefix-forms-of-else-and-then-either-test-xxx/216/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/name-for-prefix-forms-of-else-and-then-either-test-xxx/216/5</link>
        <pubDate>Thu, 06 May 2021 11:18:12 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-216-5</guid>
        <source url="https://forum.rebol.info/t/name-for-prefix-forms-of-else-and-then-either-test-xxx/216.rss">Name for prefix forms of ELSE and THEN... EITHER-TEST-XXX?</source>
      </item>
      <item>
        <title>Name for prefix forms of ELSE and THEN... EITHER-TEST-XXX?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The dialect which MATCH uses is comfortably settling on being known as "the MATCH dialect".  (It will likely end up being the same format as function parameter specification blocks!)  So at minimum, EITHER-TEST needs to be renamed to EITHER-MATCH.</p>
<p>But all things being equal, it's much nicer if you can use MATCH with ELSE.  Compare:</p>
<pre><code> EITHER-MATCH [integer! whatever!] value [code if no match]
 MATCH [integer! whatever!] value ELSE [code if no match]
</code></pre>
<p>But if you're going to match NULLs and not have to get too tricky to do it, you're going to need a form like the first.</p>
<pre><code> if match [&lt;opt&gt; integer!] null [
     print "If we 'matched' a null and passed it through, this won't run!"
 ]
</code></pre>
<p>This actually falls under the default behavior for MATCH is to voidify <em>any</em> falsey thing  (<a href="https://forum.rebol.info/t/why-void-is-not-like-unset-and-why-its-more-ornery/947">I've written about this</a>).  I think it's too easy to make a mistake with it.</p>
<p>So we need a way around all that, and EITHER-MATCH is one way.</p>
<p>We could also have a refinement to MATCH that took a block, so it was MATCH/ELSE.</p>
<pre><code> EITHER-MATCH [integer! whatever!] value [code if no match]
 MATCH/ELSE [integer! whatever!] value [code if no match]
</code></pre>
<p>Back in the day--rightly or wrongly--people despised IF/ELSE.  I don't know if that points to trying to do this with a refinement being a terrible thing.</p>
<p>A strange possibility I brought up was to work around these situations with quoting.  Make your spe block have a quote level, then quote the value you're testing.  Then check for null, then unquote:</p>
<pre><code> UNQUOTE (MATCH '[&lt;opt&gt; integer!] QUOTE value ELSE [code if no match])
</code></pre>
<p>I think that's very interesting, but this situation comes up often enough that something like EITHER-MATCH or MATCH/ELSE are needed.</p>
<hr>
<p>As for prefix THEN and ELSE, hrrrm.  I'm still at a loss.  Prefix-THEN looks at the first item for nullness.  If it's null it returns that, and if it's not null it runs the block of code after it.</p>
<pre><code>&gt;&gt; pre-t 10 [1 + 2]
== 3

&gt;&gt; pre-t null [1 + 2]
;-- null

&gt;&gt; pre-t false [1 + 2]
== 3
</code></pre>
<p>Prefix-ELSE flips this around.  It looks at the first item for non-nullness, and if it isn't null it returns that item.  Otherwise it runs the block of code after it.</p>
<pre><code>&gt;&gt; pre-e 10 [1 + 2]
;-- null

 &gt;&gt; pre-e null [1 + 2]
 == 3

 &gt;&gt;pre-e false [1 + 2]
 #[false]
</code></pre>
<p>Unlike EITHER-MATCH, I don't know if I've really wanted this in practice.</p>
<p>MATCH-NULL/ELSE and MATCH-ANY-VALUE/ELSE feel more readable to me than EITHER-MATCH-NULL and EITHER-MATCH-ANY-VALUE.  And they are useful in their own right, without the else.</p>
<p>So despite the historical hatred for IF/ELSE, I kind of feel like /ELSE on MATCH may make sense here.  If anyone strongly disagrees, they can just say <strong>either-match: :match/else</strong> and be done with it!</p>
          <p><a href="https://forum.rebol.info/t/name-for-prefix-forms-of-else-and-then-either-test-xxx/216/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/name-for-prefix-forms-of-else-and-then-either-test-xxx/216/4</link>
        <pubDate>Thu, 10 Jan 2019 04:51:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-216-4</guid>
        <source url="https://forum.rebol.info/t/name-for-prefix-forms-of-else-and-then-either-test-xxx/216.rss">Name for prefix forms of ELSE and THEN... EITHER-TEST-XXX?</source>
      </item>
      <item>
        <title>Name for prefix forms of ELSE and THEN... EITHER-TEST-XXX?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em>(It says I'm reviving this thread from 11 months ago.  I remember exactly where I was when I wrote it.  I guess it's been about a year since then...interesting.)</em></p>
<p>Times have changed, and EITHER-TEST-VALUE is the current formal name for prefix ELSE, and EITHER-TEST-NULL is ALSO <em>(not THEN, which has become infix IF)</em>.</p>
<p>This name conveys their relationship to the function they specialize...either-test.</p>
<pre><code>10 = either-test integer! 10 [
    print "this won't print"
    &lt;result&gt;
]

&lt;result&gt; = either-test integer! #issue [
    print "this will print"
    &lt;result&gt;
]
</code></pre>
<p>So the EITHER-TEST-VALUE and EITHER-TEST-NULL are hand-optimized specializations of that, which function identically to specializing EITHER-TEST with the VALUE? function and the NULL? function respectively.</p>
<p>While that may appear nice and tidy, the name is a mouthful for anyone wishing to use it.  And we've seen that there are situations where the complete-the-left-hand-side for the enfix form is not ideal:</p>
<pre><code> append data switch [...] else [...]
</code></pre>
<p>... gets interpreted as...</p>
<pre><code>(append data switch [...]) else [...]
</code></pre>
<p>And since APPEND always returns a result, the ELSE branch never run.  This causes people to need to use the <strong>&lt;-</strong> operator or ():</p>
<pre><code>append data &lt;- switch [...] else [...]
append data (switch [...] else [...])
append data (switch [... (...)]) ;-- with constructs supporting "fallout"
</code></pre>
<p>But if you used the prefix form of ELSE, e.g. EITHER-TEST-VALUE, you could just say:</p>
<pre><code>append data either-test-value switch [...] [...]
</code></pre>
<p><strong>Which looks horrible.</strong>  So can anyone think of a name which they could imagine actually using in such a circumstance?</p>
<p>It may not be a problem worth solving, the arrow (and SWITCH+CASE fallout) are kind of the solutions that were worked up.  But I thought I'd put it out there.</p>
          <p><a href="https://forum.rebol.info/t/name-for-prefix-forms-of-else-and-then-either-test-xxx/216/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/name-for-prefix-forms-of-else-and-then-either-test-xxx/216/3</link>
        <pubDate>Wed, 20 Jun 2018 01:09:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-216-3</guid>
        <source url="https://forum.rebol.info/t/name-for-prefix-forms-of-else-and-then-either-test-xxx/216.rss">Name for prefix forms of ELSE and THEN... EITHER-TEST-XXX?</source>
      </item>
      <item>
        <title>Name for prefix forms of ELSE and THEN... EITHER-TEST-XXX?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I notice that another function this looks like is an <a href="https://trello.com/c/LR9PzUS3/" rel="nofollow noopener">arity-3 MAYBE</a>, which adds a branch...</p>
<pre><code>&gt;&gt; maybe integer! 10
== 10

&gt;&gt; maybe integer! "not an integer"
== _

&gt;&gt; maybe [integer! string!] "it's one of those"
== "it's one of those"
</code></pre>
<p>In fact, the parameter ordering looks about right that you could call it MAYBE/ELSE.</p>
<pre><code>&gt;&gt; maybe/else :even? 4 [print "it wasn't even!"]
== 4

&gt;&gt; maybe/else :even? 3 [print "it wasn't even!"]
it wasn't even!
== _
</code></pre>
<p>This seems more natural.  Then the hand-coded native specializations could be MAYBE-VALUE-ELSE and MAYBE-VOID-ELSE, which isn't too bad.</p>
<p>It cuts across one of the questions of MAYBE, which was whether or not it should allow you to pass in voids.  e.g. is <strong>maybe :void? ()</strong> legal.</p>
<p>Originally I said it was not.  I was very concerned about people writing <strong>value: false | ... | if x: maybe logic! value [print "It's a logic!"]</strong>, and mistakenly thinking it <em>wasn't</em> a logic, by misinterpreting the fact that it passed the test.  (similar for <strong>maybe blank! value [print "It's a blank"]</strong>).  So my "clever trick" was to have these cases return void.  This would mean they wouldn't cause failure in an ANY or ALL, but wouldn't let you accidentally use them in a condition.</p>
<p>That kind of trickery won't do for the purposes of THEN or ELSE.  voids have to be legal input for the tested value, and if the value passes the test it can't be mucked with.</p>
<p>So it seems what we're looking at is that <code>MAYBE*</code> is the unchecked version that returns void on failure, where <code>MAYBE</code> chains into TO-VALUE, and THEN or ELSE are specializations of <code>MAYBE*</code> with :ANY-VALUE? and :VOID? with /ELSE as TRUE.  Unfortunately, the ability to specialize a refinement and not its refinement arguments (fully) is not there yet.  <img src="//forum.rebol.info/images/emoji/twitter/frowning.png?v=7" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p><em>(Note: It's on the list, it's just technically tricky and hasn't been done.  Just doing SPECIALIZE with a refinement as TRUE won't work because there's no way to state the ordering.  The way you'd express it would have to be <strong>adp: :append/dup/part</strong> or <strong>apd: :append/part/dup</strong>... because the parameter orderings would be different for the two of these cases.)</em></p>
<p>But just because you can't do it today doesn't mean you won't ever be able to do it.  So this seems like it might be better to model this as "MAYBE plus BRANCH" as opposed to "EITHER plus weird notion of applying condition but returning value..."  The latter is more confusing.</p>
          <p><a href="https://forum.rebol.info/t/name-for-prefix-forms-of-else-and-then-either-test-xxx/216/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/name-for-prefix-forms-of-else-and-then-either-test-xxx/216/2</link>
        <pubDate>Sat, 22 Jul 2017 02:53:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-216-2</guid>
        <source url="https://forum.rebol.info/t/name-for-prefix-forms-of-else-and-then-either-test-xxx/216.rss">Name for prefix forms of ELSE and THEN... EITHER-TEST-XXX?</source>
      </item>
      <item>
        <title>Name for prefix forms of ELSE and THEN... EITHER-TEST-XXX?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>With the recent <a href="https://github.com/metaeducation/ren-c/commit/4ee0f2360e88d7fd494c31c460965005d3a290cf" rel="nofollow noopener">solution to "ELSE's dark corner"</a>, it becomes more tempting than ever to use ELSE a lot.  But currently, it's an enfixed <em>userspace function</em>.  That makes it slow-ish.  But if it were an enfixed <em>native</em>, odds are that <strong>switch [...] else [...]</strong> could actually be <em>faster</em> than <strong>switch/default [...] [...]</strong>, because the lookahead driving enfix is a sunk cost, while path dispatch adds overhead.</p>
<p>But as recently pointed out, <a href="https://forum.rebol.info/t/enfix-vs-lookback/214/4">there's no such thing as an enfix function</a>, hence there is no such thing as an enfix native function.  You have to take an ordinary native and assign it to a word via enfixing.  This is done during boot code for things like <code>+</code> with ADD or <code>*</code> with MULTIPLY.</p>
<p>So the natives behind ELSE and THEN...which are prefix by default...need a name.  We could be completely non-creative, e.g. ELSE-NATIVE and THEN-NATIVE:</p>
<pre><code> &gt;&gt; else-native () [print "This runs" | 10]
 This runs
 == 10

 &gt;&gt; else-native _ [print "This won't run" | 10]
 == _

 &gt;&gt; else-native (if true [print "This runs" | 20]) [print "This won't run" | 10]
 This runs
 == 20

 &gt;&gt; then-native () [print "This won't run" | 10]
 ;-- no result

 &gt;&gt; then-native _ [print "This runs" | 10]
 This runs
 == 10

 &gt;&gt; then-native (if true [print "This runs" | 20]) [print "This runs too" | 10]
 This runs
 This runs too
 == 10
</code></pre>
<p>My best idea so far is to consider these as specializations of a ternary operator called "EITHER-TEST", which would generically work like this:</p>
<pre><code>&gt;&gt; either-test :even? 4 [print "it wasn't even!"]
4

&gt;&gt; either-test :even? 3 [print "it wasn't even!"]
it wasn't even!
</code></pre>
<p>Under this logic, ELSE is enfixed EITHER-TEST specialized with ANY-VALUE? as the test, and THEN is enfixed EITHER-TEST specialized with VOID? as the test.  To give it a boost it's easy enough to hand-code individual natives for EITHER-TEST-VALUE and EITHER-TEST-VOID, as we'd like ELSE and THEN to be fast as possible.</p>
<p>So what do people think?  Is there a better name for what EITHER-TEST does?</p>
          <p><a href="https://forum.rebol.info/t/name-for-prefix-forms-of-else-and-then-either-test-xxx/216/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/name-for-prefix-forms-of-else-and-then-either-test-xxx/216/1</link>
        <pubDate>Fri, 21 Jul 2017 15:48:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-216-1</guid>
        <source url="https://forum.rebol.info/t/name-for-prefix-forms-of-else-and-then-either-test-xxx/216.rss">Name for prefix forms of ELSE and THEN... EITHER-TEST-XXX?</source>
      </item>
  </channel>
</rss>

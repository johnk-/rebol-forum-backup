<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>DO vs. READ and URL translation</title>
    <link>https://forum.rebol.info/t/do-vs-read-and-url-translation/1402</link>
    <description>In trying to make the Web Console as easy to use as possible, we have some magic that translates URLs on GitLab and GitHub into CORS (&quot;Cross-Origin Resource Sharing&quot;) API requests.

For instance, take an example @gchiu is working with currently &lt;sub&gt;*(despite being a forum absentee :angry:)*&lt;/sub&gt;:

[`https://gitlab.com/Zhaoshirong/docx-templating/-/blob/master/gmdocx.reb`](https://gitlab.com/Zhaoshirong/docx-templating/-/blob/master/gmdocx.reb)

That GitLab URL indicates a document.  But what you get if you READ that URL is not the file contents of `gmdocx.reb`...because it is a web page with a lot of decorations.  You get line numbers and all that other HTML all around it.

**We don&#39;t want READ to do any magic to give anything different back that the browser wouldn&#39;t see for that URL.**  If you READ it from the console, you should get all the HTML... line numbers and all.

**But the DO function can have different rules.**  Since DO of a bunch of HTML would be meaningless, it seems that if you ask to DO that URL (which is convenient to exchange with people), it should be able to figure out how to extract the code and run it.

Now...we do that.  When you run DO, it first translates that link into a GitLab raw link:

[`https://gitlab.com/Zhaoshirong/docx-templating/-/raw/master/gmdocx.reb`](https://gitlab.com/Zhaoshirong/docx-templating/-/raw/master/gmdocx.reb)

Then *that* link is passed to READ.

But we&#39;re not done with magic.  When you&#39;re running in the browser, that link can&#39;t be fetched directly due to CORS rules.  You have to go through the GitLab API.

So there&#39;s a fiddling inside READ to do that, and pick apart the JSON to give you the data--even though you are in the browser.

## Are There Other Candidates for DO to do &quot;magic&quot;?

Any URL could be taken as an instruction.  Is there any real reason to stop at code, or would data be acceptable too--if a URL format conveyed an obvious intention?  There&#39;s BROWSE if you want to open the URL, and READ if you want the HTML...so should there be other behaviors?

Random whimsical example: A DO of a Google Search could &quot;know&quot; to return a list of the results of that search as a BLOCK!.

There&#39;s JavaScript and CSS code URLs (as well as ones that decorate it, like CodePen, where the decorations could be removed).

Right now, there&#39;s a separate JS-DO, that you can use to run `.js` code

There&#39;s also CSS-DO, that will &quot;execute&quot; `.css` by loading it up.

I didn&#39;t make these overload DO (in part because that&#39;s harder...there&#39;d have to be some generic hooking mechanism to allow all these different &quot;do codecs&quot; register themselves).

But think about the invariants.  If you&#39;re using DO inside an implemention where what you mean is &quot;do block&quot;, is it appropriate for that DO to potentially have such wild behaviors as loading CSS code if you happen to pass it something that it interprets that way?

Maybe this should be a distinction like **RUN** (arbitrary tool) vs. **DO** (stay inside the language).  Or maybe other words.  Just something to think about.</description>
    
    <lastBuildDate>Sat, 14 Nov 2020 15:50:15 +0000</lastBuildDate>
    <category>Emscripten</category>
    <atom:link href="https://forum.rebol.info/t/do-vs-read-and-url-translation/1402.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>DO vs. READ and URL translation</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>(Thinking out loud...)<br>
It would be cool to use the browser/javascript as a shell to perform text/character operations and have the results return to our script. Like piping data to a *nix shell.</p>
<p>There is some formatting that might be more natural to execute in javascript as part of a READ/DO instead of recreating in Ren-C:</p>
<ul>
<li>Getting a DOM list</li>
<li>HTML comment stripping, tag stripping</li>
<li>Converting HTML character entities</li>
<li>Text normalization, e.g., "résumé" --&gt; "resume"</li>
<li>Removing excess whitespace (similar to: sed -e "s/\s+/ /g" inputfile)</li>
</ul>
          <p><a href="https://forum.rebol.info/t/do-vs-read-and-url-translation/1402/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/do-vs-read-and-url-translation/1402/2</link>
        <pubDate>Sat, 14 Nov 2020 15:50:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1402-2</guid>
        <source url="https://forum.rebol.info/t/do-vs-read-and-url-translation/1402.rss">DO vs. READ and URL translation</source>
      </item>
      <item>
        <title>DO vs. READ and URL translation</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In trying to make the Web Console as easy to use as possible, we have some magic that translates URLs on GitLab and GitHub into CORS ("Cross-Origin Resource Sharing") API requests.</p>
<p>For instance, take an example <a class="mention" href="/u/gchiu">@gchiu</a> is working with currently <sub><em>(despite being a forum absentee <img src="https://forum.rebol.info/images/emoji/twitter/angry.png?v=9" title=":angry:" class="emoji" alt=":angry:">)</em></sub>:</p>
<p><a href="https://gitlab.com/Zhaoshirong/docx-templating/-/blob/master/gmdocx.reb"><code>https://gitlab.com/Zhaoshirong/docx-templating/-/blob/master/gmdocx.reb</code></a></p>
<p>That GitLab URL indicates a document.  But what you get if you READ that URL is not the file contents of <code>gmdocx.reb</code>...because it is a web page with a lot of decorations.  You get line numbers and all that other HTML all around it.</p>
<p><strong>We don't want READ to do any magic to give anything different back that the browser wouldn't see for that URL.</strong>  If you READ it from the console, you should get all the HTML... line numbers and all.</p>
<p><strong>But the DO function can have different rules.</strong>  Since DO of a bunch of HTML would be meaningless, it seems that if you ask to DO that URL (which is convenient to exchange with people), it should be able to figure out how to extract the code and run it.</p>
<p>Now...we do that.  When you run DO, it first translates that link into a GitLab raw link:</p>
<p><a href="https://gitlab.com/Zhaoshirong/docx-templating/-/raw/master/gmdocx.reb"><code>https://gitlab.com/Zhaoshirong/docx-templating/-/raw/master/gmdocx.reb</code></a></p>
<p>Then <em>that</em> link is passed to READ.</p>
<p>But we're not done with magic.  When you're running in the browser, that link can't be fetched directly due to CORS rules.  You have to go through the GitLab API.</p>
<p>So there's a fiddling inside READ to do that, and pick apart the JSON to give you the data--even though you are in the browser.</p>
<h2>Are There Other Candidates for DO to do "magic"?</h2>
<p>Any URL could be taken as an instruction.  Is there any real reason to stop at code, or would data be acceptable too--if a URL format conveyed an obvious intention?  There's BROWSE if you want to open the URL, and READ if you want the HTML...so should there be other behaviors?</p>
<p>Random whimsical example: A DO of a Google Search could "know" to return a list of the results of that search as a BLOCK!.</p>
<p>There's JavaScript and CSS code URLs (as well as ones that decorate it, like CodePen, where the decorations could be removed).</p>
<p>Right now, there's a separate JS-DO, that you can use to run <code>.js</code> code</p>
<p>There's also CSS-DO, that will "execute" <code>.css</code> by loading it up.</p>
<p>I didn't make these overload DO (in part because that's harder...there'd have to be some generic hooking mechanism to allow all these different "do codecs" register themselves).</p>
<p>But think about the invariants.  If you're using DO inside an implemention where what you mean is "do block", is it appropriate for that DO to potentially have such wild behaviors as loading CSS code if you happen to pass it something that it interprets that way?</p>
<p>Maybe this should be a distinction like <strong>RUN</strong> (arbitrary tool) vs. <strong>DO</strong> (stay inside the language).  Or maybe other words.  Just something to think about.</p>
          <p><a href="https://forum.rebol.info/t/do-vs-read-and-url-translation/1402/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/do-vs-read-and-url-translation/1402/1</link>
        <pubDate>Sat, 14 Nov 2020 13:54:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1402-1</guid>
        <source url="https://forum.rebol.info/t/do-vs-read-and-url-translation/1402.rss">DO vs. READ and URL translation</source>
      </item>
  </channel>
</rss>

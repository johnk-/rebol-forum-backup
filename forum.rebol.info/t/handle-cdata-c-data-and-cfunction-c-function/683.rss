<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>HANDLE!, CDATA! (C-DATA! ?) and CFUNCTION! (C-FUNCTION! ?)</title>
    <link>https://forum.rebol.info/t/handle-cdata-c-data-and-cfunction-c-function/683</link>
    <description>Historically there is an opaque value type for holding an arbitrary C `void*`.  It was called HANDLE!.

A name change that @rgchris suggests is that the datatype starting with an `@`, as in `@rgchris`, take this name of HANDLE!.  [The issue was discussed many years ago.](https://github.com/rebol/rebol-issues/issues/1962).  Other name suggestions were:

* email! (just reuse it for `@foo`, which Red is currently doing)
* at! 
* name! 
* person! 
* user! 
* username! 
* nick! 
* nickname! 

When the discussion was being had, I liked `AT!` because I was thinking about how abstract the uses could be.  I was already thinking about how many usages for `%foo` there were than just naming files.  So calling it `nickname!` or `person!` was out for me.

### Today I think HANDLE! is probably best

BrianH felt that the thing we call HANDLE! today was named well, from a computer science point of view.  But for Rebol&#39;s purposes, I feel like it might be just the right kind of name for a unified datatype that represents email addresses, twitter handles, and whatever kind of state you might want to be marked with an @.

Plus, the HANDLE! type was falsely unifying C data pointers and C function pointers, which may be of different sizes.  I feel like CDATA! and CFUNCTION! would be more legitimate types (possibly with a hyphen, though without seems okay to me.)

### What about unification with EMAIL! ?

I think unifying with EMAIL! is likely a good idea.  (Red is already doing this.)  I&#39;ve also described a concept for [how it might work](https://forum.rebol.info/t/behavior-of-to-string-as-string-mold/630/6) that `as handle! &lt;foo&gt;` =&gt; `@foo` while still `as tag! a@b` =&gt; `&lt;a@b&gt;`.

Having two names is less of an issue, e.g. with evaluative switch, `email!: handle!` will &quot;just work&quot; for type tests through synonyms...though some canon display would have to be chosen for molding the type (I&#39;d suggest HANDLE!)

@johnk worried about unifying the email and handle types, because it would be relaxing the rules for catching invalid email addresses at LOAD time.  You could have something that was an EMAIL! that did not meet the RFC for an EMAIL!.  I think that doesn&#39;t have quite the benefit it sounds like...you can dynamically create an EMAIL! with any text in it.  Disallowing string manipulations that ever pass through a non-RFC-compliant state would be performance-inhibitive and too restrictive...they&#39;re always going to have to be validated later anyway.  Having the canon name of the type HANDLE! helps clear up the false sense of security some might get, believing EMAIL! can only hold an RFC-valid address.

Note there is overlap.  `#foo@example.com` [would be a valid email address](https://stackoverflow.com/a/2049510/211160) *(It&#39;s an EMAIL! and not an ISSUE! in Rebol2, R3-Alpha, Red, and currently Ren-C.)*  It&#39;s a bit of a maze also, because URLs can contain @ too...further overriding the rules for email (!)</description>
    
    <lastBuildDate>Mon, 11 Jun 2018 16:43:43 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/handle-cdata-c-data-and-cfunction-c-function/683.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>HANDLE!, CDATA! (C-DATA! ?) and CFUNCTION! (C-FUNCTION! ?)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Historically there is an opaque value type for holding an arbitrary C <code>void*</code>.  It was called HANDLE!.</p>
<p>A name change that <a class="mention" href="/u/rgchris">@rgchris</a> suggests is that the datatype starting with an <code>@</code>, as in <code>@rgchris</code>, take this name of HANDLE!.  <a href="https://github.com/rebol/rebol-issues/issues/1962" rel="nofollow noopener">The issue was discussed many years ago.</a>.  Other name suggestions were:</p>
<ul>
<li>email! (just reuse it for <code>@foo</code>, which Red is currently doing)</li>
<li>at!</li>
<li>name!</li>
<li>person!</li>
<li>user!</li>
<li>username!</li>
<li>nick!</li>
<li>nickname!</li>
</ul>
<p>When the discussion was being had, I liked <code>AT!</code> because I was thinking about how abstract the uses could be.  I was already thinking about how many usages for <code>%foo</code> there were than just naming files.  So calling it <code>nickname!</code> or <code>person!</code> was out for me.</p>
<h3>Today I think HANDLE! is probably best</h3>
<p>BrianH felt that the thing we call HANDLE! today was named well, from a computer science point of view.  But for Rebol's purposes, I feel like it might be just the right kind of name for a unified datatype that represents email addresses, twitter handles, and whatever kind of state you might want to be marked with an @.</p>
<p>Plus, the HANDLE! type was falsely unifying C data pointers and C function pointers, which may be of different sizes.  I feel like CDATA! and CFUNCTION! would be more legitimate types (possibly with a hyphen, though without seems okay to me.)</p>
<h3>What about unification with EMAIL! ?</h3>
<p>I think unifying with EMAIL! is likely a good idea.  (Red is already doing this.)  I've also described a concept for <a href="https://forum.rebol.info/t/behavior-of-to-string-as-string-mold/630/6">how it might work</a> that <code>as handle! &lt;foo&gt;</code> =&gt; <code>@foo</code> while still <code>as tag! a@b</code> =&gt; <code>&lt;a@b&gt;</code>.</p>
<p>Having two names is less of an issue, e.g. with evaluative switch, <code>email!: handle!</code> will "just work" for type tests through synonyms...though some canon display would have to be chosen for molding the type (I'd suggest HANDLE!)</p>
<p><a class="mention" href="/u/johnk">@johnk</a> worried about unifying the email and handle types, because it would be relaxing the rules for catching invalid email addresses at LOAD time.  You could have something that was an EMAIL! that did not meet the RFC for an EMAIL!.  I think that doesn't have quite the benefit it sounds like...you can dynamically create an EMAIL! with any text in it.  Disallowing string manipulations that ever pass through a non-RFC-compliant state would be performance-inhibitive and too restrictive...they're always going to have to be validated later anyway.  Having the canon name of the type HANDLE! helps clear up the false sense of security some might get, believing EMAIL! can only hold an RFC-valid address.</p>
<p>Note there is overlap.  <code>#foo@example.com</code> <a href="https://stackoverflow.com/a/2049510/211160" rel="nofollow noopener">would be a valid email address</a> <em>(It's an EMAIL! and not an ISSUE! in Rebol2, R3-Alpha, Red, and currently Ren-C.)</em>  It's a bit of a maze also, because URLs can contain @ too...further overriding the rules for email (!)</p>
          <p><a href="https://forum.rebol.info/t/handle-cdata-c-data-and-cfunction-c-function/683/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/handle-cdata-c-data-and-cfunction-c-function/683/1</link>
        <pubDate>Mon, 11 Jun 2018 16:43:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-683-1</guid>
        <source url="https://forum.rebol.info/t/handle-cdata-c-data-and-cfunction-c-function/683.rss">HANDLE!, CDATA! (C-DATA! ?) and CFUNCTION! (C-FUNCTION! ?)</source>
      </item>
  </channel>
</rss>

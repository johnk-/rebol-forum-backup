<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>ARITY-OF: Then and Now</title>
    <link>https://forum.rebol.info/t/arity-of-then-and-now/1000</link>
    <description>I&#39;m going to have to start getting kind of brutal cutting dicey things out of the system for Beta/One.  So when I ran across the ARITY-OF routine and [all its disclaimers and concerns](https://github.com/metaeducation/ren-c/blob/34aa979003554fccc87482098ee817b0e401f59a/src/mezz/base-funcs.r#L678), I thought *&quot;oh no, well this simple-seeming thing is more trouble than it&#39;s worth, to explain and document...&quot;*

Classical Rebol doesn&#39;t have it.  People who want to know the arity of a function have to get WORDS OF the function, then count up to the first refinement, and then say &quot;done&quot;.

But you&#39;re not done, because if you&#39;re processing source you might have seen something like APPEND/DUP/PART.  How do you ask for the arity of that, without calling it?  Massive unsolved problem.

## But, wait a minute...

It was unsolved *back then*.  But there&#39;s a lot to be said for doing things right.  :man_mechanic:

    &gt;&gt; parameters of :append
    == [series value /part limit /only /dup count /line]

    &gt;&gt; parameters of :append/dup
    == [series value count /part limit /only /line]

    &gt;&gt; parameters of :append/part
    == [series value limit /only /dup count /line]

    &gt;&gt; parameters of :append/part/dup
    == [series value limit count /only /line]

    &gt;&gt; parameters of :append/dup/part
    == [series value count limit /only /line]

## ...and so all we have to write is....

    arity-of: function [
        &quot;Get the number of fixed arguments to an ACTION! (if not variadic)&quot;
        return: [integer!]
        action [action!]
    ][
        if variadic? :action [
            fail &quot;ARITY-OF cannot give an answer for variadic actions&quot;
        ]
        arity: 0
        for-each p parameters of :action [
            if refinement? :p [break]
            arity: arity + 1
        ]
        return arity
    ]

Exercise for the reader: try doing this in Rebol2/R3-Alpha/Red :-)

    &gt;&gt; map-each x [
              append append/dup append/part append/dup/part append/part/dup
         ][
              arity-of get x
        ]
    == [2 3 3 4 4]</description>
    
    <lastBuildDate>Mon, 07 Jan 2019 22:26:18 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://forum.rebol.info/t/arity-of-then-and-now/1000.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>ARITY-OF: Then and Now</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h2>But I'm still going to cut ARITY-OF from Core</h2>
<p>Here's why:</p>
<pre><code> &gt;&gt; foo: func ['x 'y] [...]
 &gt;&gt; arity-of :foo
 == 2

 &gt;&gt; bar: func [x y] [...]
 &gt;&gt; arity-of :bar
 == 2
</code></pre>
<p>What good is this number going to do anyone?  You can't use it to know how many things would be taken spliced after something, you need to know if the arguments are quoted.  Tightness and non-tightness affects things too.</p>
<p>You have to look at the specific PARAMETERS OF and understand what part of that is important to what you are doing.  We're not necessarily doing anyone any favors by trying to digest and oversimplify what's in there.</p>
<p><strong>It's still nice to point out how today, you can start from a PATH! and get to an ACTION!, and from there get to a PARAMETERS OF that is meaningful.</strong>  <em>It's a huge improvement.</em>  But now that you have that information, you need to integrate it with what you're trying to accomplish with your reflection.</p>
<h2>Some other little routines are getting cut too...</h2>
<p>These guys have the same problem.  Tight or non-tight parameter conventions can make two seemingly INFIX? functions be very different.  So what did you actionably learn from that oversimplification?</p>
<pre><code>nfix?: function [
    n [integer!]
    name [text!]
    source [any-word! any-path!]
][
    case [
        not enfixed? source [false]
        equal? n arity: arity-of source [true]
        n &lt; arity [
            ; If the queried arity is lower than the arity of the function,
            ; assume it's ok...e.g. PREFIX? callers know INFIX? exists (but
            ; we don't assume INFIX? callers know PREFIX?/ENDFIX? exist)
            false
        ]
    ] else [
        fail [
            name "used on enfixed function with arity" arity
                |
            "Use ENFIXED? for generalized (tricky) testing"
        ]
    ]
]

postfix?: redescribe [
    {TRUE if an arity 1 function is SET/ENFIX to act as postfix.}
](
    specialize :nfix? [n: 1 | name: "POSTFIX?"]
)

infix?: redescribe [
    {TRUE if an arity 2 function is SET/ENFIX to act as infix.}
](
    specialize :nfix? [n: 2 | name: "INFIX?"]
)
</code></pre>
<p>I don't feel bad cutting these, so long as it's easy enough to write what you mean for your purpose.</p>
          <p><a href="https://forum.rebol.info/t/arity-of-then-and-now/1000/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/arity-of-then-and-now/1000/2</link>
        <pubDate>Mon, 07 Jan 2019 22:26:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1000-2</guid>
        <source url="https://forum.rebol.info/t/arity-of-then-and-now/1000.rss">ARITY-OF: Then and Now</source>
      </item>
      <item>
        <title>ARITY-OF: Then and Now</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I'm going to have to start getting kind of brutal cutting dicey things out of the system for Beta/One.  So when I ran across the ARITY-OF routine and <a href="https://github.com/metaeducation/ren-c/blob/34aa979003554fccc87482098ee817b0e401f59a/src/mezz/base-funcs.r#L678" rel="nofollow noopener">all its disclaimers and concerns</a>, I thought <em>"oh no, well this simple-seeming thing is more trouble than it's worth, to explain and document..."</em></p>
<p>Classical Rebol doesn't have it.  People who want to know the arity of a function have to get WORDS OF the function, then count up to the first refinement, and then say "done".</p>
<p>But you're not done, because if you're processing source you might have seen something like APPEND/DUP/PART.  How do you ask for the arity of that, without calling it?  Massive unsolved problem.</p>
<h2>But, wait a minute...</h2>
<p>It was unsolved <em>back then</em>.  But there's a lot to be said for doing things right.  <img src="//forum.rebol.info/images/emoji/twitter/man_mechanic.png?v=7" title=":man_mechanic:" class="emoji" alt=":man_mechanic:"></p>
<pre><code>&gt;&gt; parameters of :append
== [series value /part limit /only /dup count /line]

&gt;&gt; parameters of :append/dup
== [series value count /part limit /only /line]

&gt;&gt; parameters of :append/part
== [series value limit /only /dup count /line]

&gt;&gt; parameters of :append/part/dup
== [series value limit count /only /line]

&gt;&gt; parameters of :append/dup/part
== [series value count limit /only /line]
</code></pre>
<h2>...and so all we have to write is....</h2>
<pre><code>arity-of: function [
    "Get the number of fixed arguments to an ACTION! (if not variadic)"
    return: [integer!]
    action [action!]
][
    if variadic? :action [
        fail "ARITY-OF cannot give an answer for variadic actions"
    ]
    arity: 0
    for-each p parameters of :action [
        if refinement? :p [break]
        arity: arity + 1
    ]
    return arity
]
</code></pre>
<p>Exercise for the reader: try doing this in Rebol2/R3-Alpha/Red <img src="//forum.rebol.info/images/emoji/twitter/slight_smile.png?v=7" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<pre><code>&gt;&gt; map-each x [
          append append/dup append/part append/dup/part append/part/dup
     ][
          arity-of get x
    ]
== [2 3 3 4 4]</code></pre>
          <p><a href="https://forum.rebol.info/t/arity-of-then-and-now/1000/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/arity-of-then-and-now/1000/1</link>
        <pubDate>Mon, 07 Jan 2019 21:35:55 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1000-1</guid>
        <source url="https://forum.rebol.info/t/arity-of-then-and-now/1000.rss">ARITY-OF: Then and Now</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Even More Powerful COMPOSE</title>
    <link>https://forum.rebol.info/t/the-even-more-powerful-compose/1101</link>
    <description>COMPOSE got a pretty cool super power [with labeling](https://forum.rebol.info/t/tag-compose-is-it-tag-specific-composition/979/7), so that a &quot;skippable&quot; TAG! or FILE! could be used to point out just the slots you wanted the compose to apply to:

    &gt;&gt; compose [(1 + 2) (1 + 2)]
    == [3 3]

    &gt;&gt; compose &lt;*&gt; [(1 + 2) (&lt;*&gt; 1 + 2)]
    == [(1 + 2) 3]

    &gt;&gt; compose % [(1 + 2) (% 1 + 2)]  ; even empty file is legal, which is succinct
    == [(1 + 2) 3]

Then there&#39;s the new ability to use quoted groups, SET-GROUP!s, and GET-GROUP!s:

    &gt;&gt; stuff: [word some/path [will be a triple quoted get-block!]]

    &gt;&gt; compose [&#39;(first stuff) (second stuff): &#39;&#39;&#39;:(third stuff)]
    == [&#39;word some/path: &#39;&#39;&#39;:[will be a triple quoted get-block!]]

Whoa.  But wait, there&#39;s more!  :-)

We now have the ability to run functions on the slots before you splice them.  These functions are specified [via the &quot;predicate&quot; convention](https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045) (for the moment it&#39;s a &quot;refinement-style&quot; PATH!, but will be a TUPLE! when generalized tuples are implemented)

    &gt;&gt; addone: function [x] [x + 1]

    &gt;&gt; compose /addone [(10 + 20) (30 + 40)]
    == [31 71]

Putting things in doubled-up groups asks to not apply the post-processing function on that particular slot. 
 It still composes it, but just doesn&#39;t run the function:

    &gt;&gt; compose /addone [(10 + 20) ((30 + 40))]
    == [31 70]

Something very interesting is that if you use a function that puts its argument into a block (e.g. the ENBLOCK function), then that would be the same as doing historical Rebol&#39;s COMPOSE/ONLY...because the block would be spliced and leave its single element behind, even if that block was itself a block.  Then, the (( )) would be a way of opting out and saying you wanted to splice blocks normally.

    &gt;&gt; compose /enblock [([a b c]) (([d e f]))]
    == [[a b c] d e f]

So that first [a b c] was transformed to [[a b c]], and then spliced in to lose the outer block.  The doubled group was a request not to run enblock, so that block just got spliced.

Now here&#39;s the fun bit: **enblock is the default predicate**.  This means that if you don&#39;t override it, you can mentally model the (( )) as an instruction to splice if it&#39;s a block!

    &gt;&gt; compose [([a b c]) (([d e f]))]
    == [[a b c] d e f]

This is a point of incompatibility with historical Rebol, because COMPOSE is effectively what was COMPOSE/ONLY unless you splice with (( )).  But you can still write code that will work in either Ren-C or historical Rebol by putting things in doubled groups when you want them to splice...the (( )) will just be ignored in the older Rebol and it will consider all slots spliceable.

If you want the old behavior, just ask to use the identity function.  Then it makes no difference whether the function is applied or not:

    &gt;&gt; compose /identity [([a b c]) (([d e f]))]
    == [a b c d e f]

This only scratches the surface of what&#39;s possible!  I&#39;m very interested to see how people use the features.  (Don&#39;t get too attached to the PATH! notation, though...that&#39;s temporary, like I said.)</description>
    
    <lastBuildDate>Mon, 16 Aug 2021 19:11:01 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/the-even-more-powerful-compose/1101.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Even More Powerful COMPOSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Let's re-examine the current state of COMPOSE through the lens of this feature, which turns out to be central:</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1101">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Something very interesting is that if you use a function that puts its argument into a block (e.g. the ENBLOCK function), then that would be the same as doing historical Rebol's COMPOSE/ONLY...because the block would be spliced and leave its single element behind, even if that block was itself a block. Then, the (( )) would be a way of opting out and saying you wanted to splice blocks normally.</p>
<pre><code class="lang-auto">&gt;&gt; compose /enblock [([a b c]) (([d e f]))]
== [[a b c] d e f]
</code></pre>
<p>So that first [a b c] was transformed to [[a b c]], and then spliced in to lose the outer block. The doubled group was a request not to run enblock, so that block just got spliced.</p>
<p>Now here's the fun bit: <strong>enblock is the default predicate</strong>. This means that if you don't override it, you can mentally model the (( )) as an instruction to splice if it's a block!</p>
</blockquote>
</aside>
<p>This is still the basic premise of how things work.  A plain slot runs the predicate function, a spliced block does not.</p>
<p>What has changed is: <strong>COMPOSE uses the same rules as APPEND, and the default predicate is now QUOTE...not ENBLOCK</strong>.</p>
<p>Also, APPEND has twisted a teeny bit for what happens to quoted NULL.  It used to vaporize (since it couldn't unquote and append a null, it had to do that or error).  Now it makes a new choice:</p>
<pre><code>&gt;&gt; append [a b c] quote null
== [a b c ~null~]

&gt;&gt; append [a b c] the '  ; another way of saying the same thing
== [a b c ~null~]
</code></pre>
<p>This is a deeper thing than it may seem on the surface.  It helps provide the invariant that adding a quoted thing will always add exactly one item, no matter what.  But it also makes the allowance that dialects can decide what they want to do in these situations.  And some might just work, e.g. because ~null~ evaluates to a NULL isotope, and if they don't have special handling that treats those isotopes differently it may be okay:</p>
<pre><code>&gt;&gt; spaced ["Hello" ~null~ "World"]
== "Hello World"
</code></pre>
<p>So since the default predicate for COMPOSE is QUOTE, we get this kind of outcome:</p>
<pre><code>&gt;&gt; compose ["Hello" (if false ["Cruel"]) "World"]
== ["Hello" ~null~ "World"]

&gt;&gt; spaced compose ["Hello" (if false ["Cruel"]) "World"]
== "Hello World"
</code></pre>
<p>As mentioned, the (( )) will not run the predicate, so you get the APPEND rules.  BLANK!s vaporize, QUOTED!s are as-is, the new rule of @ things being as-is, inerts as-is, and evaluatives error.  The only exceptions are that invisibles vanish in both cases, and NULL is vaporized in the (( )) case.</p>
<pre><code>&gt;&gt; compose [([a b]) * (([a b]))]
== [[a b] * a b]

&gt;&gt; compose [(null) * ((null))]
== [~null~ *]

&gt;&gt; compose [(comment "single") * ((comment "spliced"))]
== [*]  ; ^-- actually useful, you can comment out code in mid-COMPOSE!

&gt;&gt; compose [(_) * ((_))]
== [_ *]

&gt;&gt; compose [(the 'a) * ((the 'a))]
== ['a * a]

&gt;&gt; compose [(@ae) * ((@ae))]
== [@ae * ae]

&gt;&gt; compose [("inert") * (("inert"))]
== ["inert" * "inert"]

&gt;&gt; compose [((the word))]
** Error: &lt;all the evaluative types error if you try to splice them&gt;
</code></pre>
<h2>Ever-More Invariant And Useful</h2>
<p>These rules arise from looking at both sides of the picture: the implementation side and the usage side.</p>
<p>It's very "Zen and the Art of Motorocycle Maintenance".  If you're only looking at it from the usage side you will want things without realizing how broken you're leaving edge cases inside the implementation.  And if you're only looking at the implementation you'll make something unusable.  But when you use and maintain it, the sides come together.</p>
          <p><a href="https://forum.rebol.info/t/the-even-more-powerful-compose/1101/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-even-more-powerful-compose/1101/6</link>
        <pubDate>Mon, 16 Aug 2021 19:11:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1101-6</guid>
        <source url="https://forum.rebol.info/t/the-even-more-powerful-compose/1101.rss">The Even More Powerful COMPOSE</source>
      </item>
      <item>
        <title>The Even More Powerful COMPOSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1101">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>this gave me a brief a pang of concern over whether historical COMPOSE had it right by making splicing the "light" default choice of happening when you simply used <code>( )</code>. If it were limited to being just BLOCK!s, would it now be the "right" answer?</p>
</blockquote>
</aside>
<p>It's really hard not to keep second-guessing this, especially in light of falling on the side of saying that NULL triggers an error when you try to use it with APPEND.</p>
<p><strong><a href="https://forum.rebol.info/t/should-append-null-fail-append-blank-add-nothing-unless-only/635">Should append null fail, append BLANK! add nothing unless /ONLY</a></strong></p>
<p>People might be lulled into a sense of security that using NULL as the choice for an empty thing gives them a non-ornery value that won't vaporize out from under them when they APPEND or KEEP etc.</p>
<p>But then that security vanishes with COMPOSE, as NULL disappears without needing to TRY it to get a BLANK!</p>
<pre><code>&gt;&gt; x: null   ; not set yet, but friendly and not ~unset~

&gt;&gt; compose [abc: (x)]
== [abc:]  ; oh no, this surprises me!  I'd have preferred an error!
</code></pre>
<p>However, you have to accept this if you want this to work:</p>
<pre><code>&gt;&gt; compose [&lt;a&gt; &lt;b&gt; (if false [&lt;c&gt;]) &lt;d&gt;]
== [&lt;a&gt; &lt;b&gt; &lt;d&gt;]
</code></pre>
<p>Qualms though I may have, the bottom line is what I say above: <strong>I know it's better from using it in practice.</strong>  That has to be the guiding principle here.</p>
<p>If you used NULL instead of ~unset~ for your "empty" things, you did so knowing that would be a lesser-degree-of-error.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1101">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>As a higher-level tool, it should cater to the higher-level needs...and that's not splicing unless you ask. I really believe this is the better behavior for people who are writing and reading the code.</p>
</blockquote>
</aside>
<p>The other qualm I have about this is the visual difficulty of telling if something is a double-group if you are composing more than one item.</p>
<pre><code>&gt;&gt; compose [a b ((some code
         that goes on and on and) oh it ended there (maybe you start
         another group and
     eventually end)) d e]
</code></pre>
<p>That's <em>not</em> a splicing case because it's not a double group, but it kind of looks like one.</p>
<p>But it's hardly the only case where if you jump to conclusions on reading a few characters that you'll have problems because the code keeps going and may invalidate the assumptions you made by looking at those few characters.</p>
<p>I'm going to say we should continue to assess this in real-world cases.  Mine so far bear out that I usually want compose to just put values in as-is, and I find value in annotating the places that's not true.</p>
          <p><a href="https://forum.rebol.info/t/the-even-more-powerful-compose/1101/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-even-more-powerful-compose/1101/5</link>
        <pubDate>Sun, 06 Jun 2021 02:54:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1101-5</guid>
        <source url="https://forum.rebol.info/t/the-even-more-powerful-compose/1101.rss">The Even More Powerful COMPOSE</source>
      </item>
      <item>
        <title>The Even More Powerful COMPOSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="1" data-topic="1101">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>This is a point of incompatibility with historical Rebol, because COMPOSE is effectively what was COMPOSE/ONLY unless you splice with (( )). But you can still write code that will work in either Ren-C or historical Rebol by putting things in doubled groups when you want them to splice...the (( )) will just be ignored in the older Rebol and it will consider all slots spliceable.</p>
</blockquote>
</aside>
<p>The thinking about how <a href="https://forum.rebol.info/t/every-thought-on-array-splicing-has-been-had/1332">"BLOCK! is the universal container"</a> drives the answer to the question of "which types should splice when you use <code>(( ))</code>".  The answer is plain blocks only.  Great!</p>
<p>Then this gave me a brief a pang of concern over whether historical COMPOSE had it right by making splicing the "light" default choice of happening when you simply used <code>( )</code>.  If it were limited to being just BLOCK!s, would it now be the "right" answer?</p>
<p>But...the second-guessing didn't last long.  <strong>No, it's better to make the splicing cases visually explicit!</strong></p>
<p>I know it's better from using it in practice.  But even under the set of semiotics we're dealing with here ("blocks splice by default, groups/paths/everything else don't") it's a dialect with multiple types in play.  The splicing locations are indicated by GROUP!s, while the splicing values are BLOCK!s.  So why wouldn't the GROUP! convey a BLOCK! should be spliced under its rules...e.g. atomically?</p>
<p>Such arguments are kind of silly.  The point is really just that this is apples and oranges.  The design of COMPOSE is a <em>new thing</em> that has entirely different aspects of fitness for purpose.  Even Rebol2/R3-Alpha/Red don't follow APPEND and COMPOSE symmetry religiously for splicing:</p>
<pre><code>red&gt;&gt; path: 'a/b/c
== a/b/c

red&gt;&gt; append [a block] path
== [a block a b c]

red&gt;&gt; compose [a block (path)]
== [a block a/b/c]
</code></pre>
<p>You're so often dealing with splicing several values at a time that the odds of you knowing precisely what data type all of them are become lesser.  As a higher-level tool, it should cater to the higher-level needs...and that's not splicing unless you ask.  I really believe this is the better behavior for people who are writing and reading the code.</p>
          <p><a href="https://forum.rebol.info/t/the-even-more-powerful-compose/1101/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-even-more-powerful-compose/1101/4</link>
        <pubDate>Sun, 20 Sep 2020 21:48:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1101-4</guid>
        <source url="https://forum.rebol.info/t/the-even-more-powerful-compose/1101.rss">The Even More Powerful COMPOSE</source>
      </item>
      <item>
        <title>The Even More Powerful COMPOSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Another instance of acting upon the 2018 motto... <a href="https://forum.rebol.info/t/2018-retrospective-elevating-the-art/992">"Elevating the Art"</a>!</p>
<p><em>(We'll see if 2019 needs another motto, besides "Please God, help us ship Beta/One this year." :p)</em></p>
          <p><a href="https://forum.rebol.info/t/the-even-more-powerful-compose/1101/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-even-more-powerful-compose/1101/3</link>
        <pubDate>Wed, 06 Mar 2019 14:25:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1101-3</guid>
        <source url="https://forum.rebol.info/t/the-even-more-powerful-compose/1101.rss">The Even More Powerful COMPOSE</source>
      </item>
      <item>
        <title>The Even More Powerful COMPOSE</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Scrumptious enhancements here! <img src="//forum.rebol.info/images/emoji/twitter/tongue.png?v=7" title=":tongue:" class="emoji" alt=":tongue:"><br>
I've used COMPOSE quite a bit in my code previously and was grateful for it, but it was just a normal rebol way of getting things done. The labeling and predicate changes make it much more likely that I'll be building a lot more of my code with this powerful function.</p>
          <p><a href="https://forum.rebol.info/t/the-even-more-powerful-compose/1101/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-even-more-powerful-compose/1101/2</link>
        <pubDate>Wed, 06 Mar 2019 14:19:26 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1101-2</guid>
        <source url="https://forum.rebol.info/t/the-even-more-powerful-compose/1101.rss">The Even More Powerful COMPOSE</source>
      </item>
      <item>
        <title>The Even More Powerful COMPOSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>COMPOSE got a pretty cool super power <a href="https://forum.rebol.info/t/tag-compose-is-it-tag-specific-composition/979/7">with labeling</a>, so that a "skippable" TAG! or FILE! could be used to point out just the slots you wanted the compose to apply to:</p>
<pre><code>&gt;&gt; compose [(1 + 2) (1 + 2)]
== [3 3]

&gt;&gt; compose &lt;*&gt; [(1 + 2) (&lt;*&gt; 1 + 2)]
== [(1 + 2) 3]

&gt;&gt; compose % [(1 + 2) (% 1 + 2)]  ; even empty file is legal, which is succinct
== [(1 + 2) 3]
</code></pre>
<p>Then there's the new ability to use quoted groups, SET-GROUP!s, and GET-GROUP!s:</p>
<pre><code>&gt;&gt; stuff: [word some/path [will be a triple quoted get-block!]]

&gt;&gt; compose ['(first stuff) (second stuff): ''':(third stuff)]
== ['word some/path: ''':[will be a triple quoted get-block!]]
</code></pre>
<p>Whoa.  But wait, there's more!  <img src="//forum.rebol.info/images/emoji/twitter/slight_smile.png?v=7" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>We now have the ability to run functions on the slots before you splice them.  These functions are specified <a href="https://forum.rebol.info/t/brave-switch-new-world-skippable-predicates/1045">via the "predicate" convention</a> (for the moment it's a "refinement-style" PATH!, but will be a TUPLE! when generalized tuples are implemented)</p>
<pre><code>&gt;&gt; addone: function [x] [x + 1]

&gt;&gt; compose /addone [(10 + 20) (30 + 40)]
== [31 71]
</code></pre>
<p>Putting things in doubled-up groups asks to not apply the post-processing function on that particular slot.<br>
It still composes it, but just doesn't run the function:</p>
<pre><code>&gt;&gt; compose /addone [(10 + 20) ((30 + 40))]
== [31 70]
</code></pre>
<p>Something very interesting is that if you use a function that puts its argument into a block (e.g. the ENBLOCK function), then that would be the same as doing historical Rebol's COMPOSE/ONLY...because the block would be spliced and leave its single element behind, even if that block was itself a block.  Then, the (( )) would be a way of opting out and saying you wanted to splice blocks normally.</p>
<pre><code>&gt;&gt; compose /enblock [([a b c]) (([d e f]))]
== [[a b c] d e f]
</code></pre>
<p>So that first [a b c] was transformed to [[a b c]], and then spliced in to lose the outer block.  The doubled group was a request not to run enblock, so that block just got spliced.</p>
<p>Now here's the fun bit: <strong>enblock is the default predicate</strong>.  This means that if you don't override it, you can mentally model the (( )) as an instruction to splice if it's a block!</p>
<pre><code>&gt;&gt; compose [([a b c]) (([d e f]))]
== [[a b c] d e f]
</code></pre>
<p>This is a point of incompatibility with historical Rebol, because COMPOSE is effectively what was COMPOSE/ONLY unless you splice with (( )).  But you can still write code that will work in either Ren-C or historical Rebol by putting things in doubled groups when you want them to splice...the (( )) will just be ignored in the older Rebol and it will consider all slots spliceable.</p>
<p>If you want the old behavior, just ask to use the identity function.  Then it makes no difference whether the function is applied or not:</p>
<pre><code>&gt;&gt; compose /identity [([a b c]) (([d e f]))]
== [a b c d e f]
</code></pre>
<p>This only scratches the surface of what's possible!  I'm very interested to see how people use the features.  (Don't get too attached to the PATH! notation, though...that's temporary, like I said.)</p>
          <p><a href="https://forum.rebol.info/t/the-even-more-powerful-compose/1101/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-even-more-powerful-compose/1101/1</link>
        <pubDate>Wed, 06 Mar 2019 02:00:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1101-1</guid>
        <source url="https://forum.rebol.info/t/the-even-more-powerful-compose/1101.rss">The Even More Powerful COMPOSE</source>
      </item>
  </channel>
</rss>

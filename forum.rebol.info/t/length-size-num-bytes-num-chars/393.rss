<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Length, size, num_bytes, num_chars...?</title>
    <link>https://forum.rebol.info/t/length-size-num-bytes-num-chars/393</link>
    <description>In trying to implement UTF-8 everywhere, there is a strong need to discern in the C code the difference between *number of bytes* and *number of codepoints*.  Preferably with different C datatypes, but also preferably with different naming.

It&#39;s not clear that the distinction between LENGTH and SIZE will make it to Rebol userspace, because the fact that strings have an underlying byte size different from their number of codepoints shouldn&#39;t be visible.  So the standard LENGTH should be kept.  However, choices on both issues will affect API users.

Here are a few observations:

* Rebol has traditionally used LENGTH to mean number of conceptual units in the series.  This is reinforced by operations like `SER_LEN(s)`, which does not return a number of bytes (unless the series units are byte-sized, e.g. a BINARY! series)

* C has a standard datatype for measuring sizes in bytes, called `size_t`.  It is defined as [the datatype returned by sizeof()](https://en.wikipedia.org/wiki/Sizeof).

* C has traditionally used the function `strlen()` to count *bytes* up until a null terminator byte in a series of `char*` (pointers to possibly-signed-or-unsigned-char).  strlen() returns `size_t`.

When applied to UTF-8 data, the appearance of &quot;len&quot; in the strlen() function call--or in names of variables holding the result--is contentious with the semantics of &quot;length&quot; for the strings being operated on.  Currently the variables in question are a mix of **len_bytes**, **num_bytes**, and just plain old &quot;misleading&quot; **len**.

---

**I think that probably the best way to attack this is to stick with the Rebol standard of LENGTH being used when talking about &quot;number of abstract units&quot; and SIZE being used when talking specifically about &quot;number of bytes&quot;.**

---

This isn&#39;t the direction C++ went.  For containers like std::vector (which we might think of as analogous to series), they went and defined a *different** type from size_t, unique to each container called `container::size_type`:

https://stackoverflow.com/questions/918567/size-t-vs-containersize-type

So where Rebol has been conflating &quot;length&quot;, C++ is conflating &quot;size&quot;.

To square another circle here, I&#39;ll suggest doing `#define strsize strlen`, then using strsize() on UTF-8 data, and always using `size_t` when describing byte lengths.</description>
    
    <lastBuildDate>Mon, 27 Nov 2017 16:47:31 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/length-size-num-bytes-num-chars/393.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Length, size, num_bytes, num_chars...?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In trying to implement UTF-8 everywhere, there is a strong need to discern in the C code the difference between <em>number of bytes</em> and <em>number of codepoints</em>.  Preferably with different C datatypes, but also preferably with different naming.</p>
<p>It's not clear that the distinction between LENGTH and SIZE will make it to Rebol userspace, because the fact that strings have an underlying byte size different from their number of codepoints shouldn't be visible.  So the standard LENGTH should be kept.  However, choices on both issues will affect API users.</p>
<p>Here are a few observations:</p>
<ul>
<li>
<p>Rebol has traditionally used LENGTH to mean number of conceptual units in the series.  This is reinforced by operations like <code>SER_LEN(s)</code>, which does not return a number of bytes (unless the series units are byte-sized, e.g. a BINARY! series)</p>
</li>
<li>
<p>C has a standard datatype for measuring sizes in bytes, called <code>size_t</code>.  It is defined as <a href="https://en.wikipedia.org/wiki/Sizeof">the datatype returned by sizeof()</a>.</p>
</li>
<li>
<p>C has traditionally used the function <code>strlen()</code> to count <em>bytes</em> up until a null terminator byte in a series of <code>char*</code> (pointers to possibly-signed-or-unsigned-char).  strlen() returns <code>size_t</code>.</p>
</li>
</ul>
<p>When applied to UTF-8 data, the appearance of "len" in the strlen() function call--or in names of variables holding the result--is contentious with the semantics of "length" for the strings being operated on.  Currently the variables in question are a mix of <strong>len_bytes</strong>, <strong>num_bytes</strong>, and just plain old "misleading" <strong>len</strong>.</p>
<hr>
<p><strong>I think that probably the best way to attack this is to stick with the Rebol standard of LENGTH being used when talking about "number of abstract units" and SIZE being used when talking specifically about "number of bytes".</strong></p>
<hr>
<p>This isn't the direction C++ went.  For containers like std::vector (which we might think of as analogous to series), they went and defined a <em>different</em>* type from size_t, unique to each container called <code>container::size_type</code>:</p>
<aside class="onebox stackexchange">
  <header class="source">
      <a href="https://stackoverflow.com/questions/918567/size-t-vs-containersize-type" target="_blank" rel="noopener">stackoverflow.com</a>
  </header>
  <article class="onebox-body">
      <a href="https://stackoverflow.com/users/101959/charles-khunt" target="_blank" rel="noopener">
    <img alt="Charles Khunt" src="https://www.gravatar.com/avatar/efce15f682f8bdee3c5e72bad7cada76?s=128&amp;d=identicon&amp;r=PG" class="thumbnail onebox-avatar" width="128" height="128">
  </a>
<h4>
  <a href="https://stackoverflow.com/questions/918567/size-t-vs-containersize-type" target="_blank" rel="noopener">'size_t' vs 'container::size_type'</a>
</h4>

<div class="tags">
  <strong>c++, size-type, container-data-type</strong>
</div>

<div class="date">
  asked by
  
  <a href="https://stackoverflow.com/users/101959/charles-khunt" target="_blank" rel="noopener">
    Charles Khunt
  </a>
  on <a href="https://stackoverflow.com/questions/918567/size-t-vs-containersize-type" target="_blank" rel="noopener">11:56PM - 27 May 09 UTC</a>
</div>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>So where Rebol has been conflating "length", C++ is conflating "size".</p>
<p>To square another circle here, I'll suggest doing <code>#define strsize strlen</code>, then using strsize() on UTF-8 data, and always using <code>size_t</code> when describing byte lengths.</p>
          <p><a href="https://forum.rebol.info/t/length-size-num-bytes-num-chars/393/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/length-size-num-bytes-num-chars/393/1</link>
        <pubDate>Mon, 27 Nov 2017 16:47:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-393-1</guid>
        <source url="https://forum.rebol.info/t/length-size-num-bytes-num-chars/393.rss">Length, size, num_bytes, num_chars...?</source>
      </item>
  </channel>
</rss>

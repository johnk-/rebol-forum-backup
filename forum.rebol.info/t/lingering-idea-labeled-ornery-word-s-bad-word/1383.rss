<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</title>
    <link>https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383</link>
    <description>Something @rgchris had done that I liked was to use TAG! in module headers as a sort of TBD when the script header contained a configuration for that script.

It cued you what you needed to edit, and the script could deliver you errors telling you if you didn&#39;t configure it one way or another:

     Rebol [
         Title: &quot;My Cool Script&quot;
         Description: {
             Edit the variable below to set the directory.
         }
         Directory: &lt;your-path-here&gt;
    ]

The code looks to see if the directory is a FILE! or  a TAG!.  If it&#39;s a tag, it errors.  But the erroring has to be done manually.

This made me wonder about what it would be like if there was a mean type that was WORD!-like, with an interned immutable spelling.  But it would error if you tried to access a variable holding it.

Notationally, I thought surrounding the word with **`~`** would be good:

    Directory: ~file!~

I chose this because:

* The argument for the purpose like in headers for &quot;TBD&quot; seems a solid one for a light and usable notation...vs. some monstrosity like `#[bad-word! &quot;file!&quot;]`.

* We&#39;re running out of symbols, so there is not much to pick from.

* ~ is undesirable for general use due to its hard-to-hit location on most keyboards.

* ~ is wavy and off-putting and weird--but that&#39;s an asset for this purpose.

It seems clear that this would be a win over what tilde is used for in *today*&#39;s codebases.

We could call the type TILDE! although that doesn&#39;t really have the connotations for its toxic nature.  TOXIC! ?  I&#39;ve made my many arguments over time about why it&#39;s not UNSET! and I&#39;m more entrenched in that thinking than ever.

---

&gt;**UPDATE**: This feature was originally called &quot;labeled voids&quot; in 2020--under a completely different set of terminology than being used a year later.  Ultimately it was called BAD-WORD!, so I&#39;ve retroactively edited this thread to use that...to try and make any points raised easier to follow.

---

**Since these can be used as a kind of deferred error--a bad result that&#39;s only there to be bad if you actually use it--the text in these words could help guide you to what happened.**

Example: With branching structures, it&#39;s confusing that nulls are turned into non-null if you don&#39;t use the @[...] branch forms.  But wouldn&#39;t it be clearer if there was some name on that thing?

     &gt;&gt; if true [null]
     == ~branched~

Or if you reduce some code that tries to put a null in a block but can&#39;t:

     &gt;&gt; reduce [&lt;a&gt; if false [&lt;b&gt;]]
     == [&lt;a&gt; ~null~]

And variables that didn&#39;t have any definition could have a nice name too:

     &gt;&gt; get/any &#39;asdfadsf
     == ~unset~

Functions that had no value to return might go with ~no-return~ or ~nothing~.

---

&gt;**UPDATE**: Functions like PRINT which have no return result ultimately went with ~none~ for this purpose, as it is short and not used for anything else anymore.

---

## This Feels Like A Strong Play For Ren-C&#39;s Hand :call_me_hand: 

It makes the &quot;brick&quot; a lot more useful for building with, and you can already see above that it would guide people to better awareness with things like ~branched~.</description>
    
    <lastBuildDate>Sun, 15 Aug 2021 12:44:17 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>BAD-WORD!s turned out to be more successful than I imagined.  With evaluating to isotope form and the introduction of ^META values, they've redefined the landscape of how to take control of edge cases in the representation.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1383">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Since these can be used as a kind of deferred error--a bad result that's only there to be bad if you actually use it--the text in these words could help guide you to what happened.</p>
</blockquote>
</aside>
<p>I wanted to come back to this thread and add a remark about how systemically useful this is.  <em>(Which led me down a path of trying to edit the historical thread to actually make some sense in modern terms....)</em></p>
<p>But anyway--today I hit a good example.  I was going over some stuff in the TLS code, and found this:</p>
<pre><code>; Each encrypted message in TLS 1.1 and above carry a plaintext
; initialization vector, so the ctx does not use one for the whole
; session.  Unset it to make sure.
;
unset in ctx 'client-iv
unset in ctx 'server-iv
</code></pre>
<p>So in TLS 1.0 mode, there is a single "iv" (initialization vector) reused for the client and server over the whole session.  But you don't want to use those fields in TLS 1.1 and above, because you're supposed to be using the data from each message.</p>
<p>The historical trick to catch unwanted reads of these fields was to unset them.  It was awkward to do so...since UNSET!s couldn't be assigned via SET-WORD!.  But also, it didn't communicate any information besides "unset"</p>
<p>Today, you can painlessly get the effect...with a more meaningful error on access:</p>
<pre><code>ctx.client-iv: ctx.server-iv: ~per-message~
</code></pre>
<p>So if you get an error on trying to access these variables, it will tell you the BAD-WORD! isotope is ~per-message~.  You can look that up in the source or get the gist of what it means.  <em>(I'm still thinking about how we might put the file and line number into the value itself, so you could find this assignment and get at the origin of the value!)</em></p>
<p>Using BAD-WORD!s and their isotopes effectively is a lot of bang for the buck.  Neat stuff!</p>
          <p><a href="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/11</link>
        <pubDate>Sun, 15 Aug 2021 12:44:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1383-11</guid>
        <source url="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383.rss">Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</source>
      </item>
      <item>
        <title>Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="8" data-topic="1383">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>If BAD-WORD! can't be literally evaluated, and you're writing code in a literal context, then you'd have to write:</p>
<pre><code>foo: '~whatever~
foo: the ~whatever~
</code></pre>
<p>That's less satisfying than <code>foo: ~whatever~</code></p>
</blockquote>
</aside>
<p>I think in practice, it's probably a bad idea to let the evaluator gloss over BAD-WORD!s.  Apostrophe is pretty slight and you have to use it plenty of other places, so I guess <strong><code>foo: '~xxx~</code></strong> is a small price to pay.</p>
<p>Though with <code>~</code> being given back to WORD!, it offers another option:</p>
<pre><code>&gt;&gt; foo: ~ whatever
== ~whatever~

&gt;&gt; foo: ~ (second ["nulled" "unset"])
== ~unset~
</code></pre>
<p>Or maybe it would have another BAD-WORD!-related function.  "get with understanding the thing may be a bad word"?</p>
<pre><code>&gt;&gt; x: '~unset~
== ~unset~
&gt;&gt; y: 10
== 10

&gt;&gt; x
** Error, x is ~unset~

&gt;&gt; ~ x
== ~unset~
&gt;&gt; ~ y
== 10
</code></pre>
<p>Either way, I think giving lone <code>~</code> back to WORD! is a good idea, and you can override it to whatever usage you like as an operator.  We should think on what it might do, and what might make a good default.</p>
          <p><a href="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/10</link>
        <pubDate>Wed, 09 Dec 2020 21:00:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1383-10</guid>
        <source url="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383.rss">Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</source>
      </item>
      <item>
        <title>Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>It would be nice if that worked.</p>
<p><code>path: '~/foo/bar</code></p>
<p>And I think, I never used tilde in an identifier anywhere.</p>
          <p><a href="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/9</link>
        <pubDate>Thu, 05 Nov 2020 11:57:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1383-9</guid>
        <source url="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383.rss">Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</source>
      </item>
      <item>
        <title>Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><strong>I've gotten an implementation working and it's looking great.</strong>  As <a class="mention" href="/u/blackattr">@BlackATTR</a> has pointed out there's a lot of parts in the box and a lot of nuance, so anything that helps people get their bearings and reinforces the mechanics is important.  This is exceeding the expectations I had for it in that regard.</p>
<p><em>(I'm actually kicking myself for not just trying this out sooner.  It wasn't at all hard to write, and I really have thought about this a long time!)</em></p>
<p>But I hit a couple of things that might benefit from some design thought:</p>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1383">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Just to pick a notation, let's say we took <code>~</code> for this:</p>
<pre><code class="lang-auto">     Directory: ~file!~
</code></pre>
</blockquote>
</aside>
<p>Right now the evaluator considers BAD-WORD! to be an error if it is seen literally.  So this would be an error:</p>
<pre><code> &gt;&gt; do [10 + 20 ~void~ 3 + 4]
 ** Error: Can't evaluate BAD-WORD!s
</code></pre>
<blockquote>
<p>I'll point out that this is a Ren-Cism that historical Rebol/Red don't care about:</p>
<pre><code>rebol2&gt;&gt; do [10 + 20 #[unset!] 3 + 4]
== 7

r3-alpha&gt;&gt; do [10 + 20 #[unset!] 3 + 4]
== 7

red&gt;&gt; do [10 + 20 #[unset!] 3 + 4]
== 7
</code></pre>
<p>Yet it feels important for the sake of not letting stray unsets that get COMPOSEd into code be silently tolerated.</p>
</blockquote>
<p>If BAD-WORD! can't be literally evaluated, and you're writing code in a literal context, then you'd have to write:</p>
<pre><code>foo: '~whatever~
foo: the ~whatever~
</code></pre>
<p>That's less satisfying than <code>foo: ~whatever~</code>.  Although one of the allures of the tildes is looking "bad", this is not the kind of bad I'd have in mind.</p>
<p>One way of looking at this could be to say it's a feature of SET-WORD! / SET-PATH! assignment to look at the thing on the right, and if it's a literal BAD-WORD!, accept it.  Just make that narrow exception.  Which seems all right...but then you get to:</p>
<aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="1383">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It means that for functions you didn't want to print a console result you'd just say <strong><code>[return ~]</code></strong></p>
</blockquote>
</aside>
<p>There you have an evaluative argument, and no SET-WORD!.  So you either have to say <strong>[return '~]</strong> or <strong>[return the ~]</strong> (or <strong>[return x: ~]</strong>)</p>
<p>I anticipate returning and assigning BAD-WORD!s to be common enough that this would be a loss to the prettiness of the idea.</p>
<p>So continuing the idea of finessing this: Maybe functions that are willing to take an evaluated BAD-WORD! argument also do the literal-bad-word-acceptance trick?</p>
<p>But I'll point out that tricks like this are always more nasty than they sound...what happens when you have something that tries to left-quote the BAD-WORD! that comes after an assignment?  <strong>foo: ~xxx~ left-quoter</strong>.  One of Ren-C's strengths is not sweeping such what-ifs under the table, so it's good to know that a trick like this wouldn't be without its ramifications.</p>
<h2>Should This Be Attacked More Generally?</h2>
<p>The main thing I'm trying to watch out for here is letting BAD-WORD!s that get composed into places that they have no effect and vanish.  That is, cases like <strong>do compose [1 (print "Hi") 2]</strong>.  However, I've suggested before that <a href="https://forum.rebol.info/t/safety-concept-error-on-discarded-plain-block/1305">discarded literals may hint at problems and thus need to be errors</a>.  <em>In terms of things that have wasted my time, blocks I meant to be code being silently discarded probably have caused way more insidious problems than accidentally-discarded BAD-WORD!s have...</em></p>
<p>Plus, if you want to make a BAD-WORD! in the API, it would be nice if you could say:</p>
<pre><code> REBVAL *undef = rebValue("~undefined~");
</code></pre>
<p>Off course you can't do that for WORD!s, you have to quote them.  But it seems like a loss to make you put a quote there.</p>
<p><strong>The best thing is probably to lay hope in a general solution for catching stray voids along with stray blocks or anything else, and say that BAD-WORD! is an inert type.</strong>  This means hoping that dereferencing variables holding voids, passing them to arguments of functions that don't take them, and trying to use them in truthy/falsey spots is where you get your error leverage.  That means their usage at the source level can stay clean.</p>
<p>But it means I have to put on my thinking cap and review that discard-literals-raises-error proposal to see if there's anything there.</p>
          <p><a href="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/8</link>
        <pubDate>Thu, 05 Nov 2020 10:40:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1383-8</guid>
        <source url="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383.rss">Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</source>
      </item>
      <item>
        <title>Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="5" data-topic="1383">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>given the scant usage of ~ today and its undesirable visual nature... hard-to-hit-on-keyboard location... it seems clear that this would be a win over what tilde is used for in <em>today</em>'s codebases.</p>
</blockquote>
</aside>
<p>One place where this could be used in a non-trivial way is in "NewPath" that wants to use the UNIX home directory.</p>
<pre><code>path: '~/foo/bar
</code></pre>
<p>If we allow BAD-WORD! to be one of the things in paths, there could be a special exception that says that <em>particular</em> pattern is permitted by the TO FILE! conversions.  You'd get into a situation with:</p>
<pre><code> path: compose '(help "whatever")/foo/bar
</code></pre>
<p>Where you could "accidentally wind up with a nameless void in a slot where it was allowed to have stringlike meaning".</p>
<p>But if most voids aren't nameless, then that would be kind of a rare concern.</p>
<p>Anyway, you could also just say <strong>"~"/foo/bar</strong> like you would for any other component that didn't LOAD as a WORD!, but it's nice to imagine such a very common case having some kind of exemption.</p>
          <p><a href="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/7</link>
        <pubDate>Thu, 05 Nov 2020 06:03:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1383-7</guid>
        <source url="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383.rss">Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</source>
      </item>
      <item>
        <title>Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="5" data-topic="1383">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>. It means that for functions you didn't want to print a console result you'd just say <strong><code>[return ~]</code></strong> and that would be how you did it, with the baseline of functions printing for ~no-return~ (or whatever, I guess I'm feeling sort of attached to ~void~ for this purpose).</p>
</blockquote>
</aside>
<p>I should mention <a href="https://forum.rebol.info/t/opportunistic-invisibility/1362/3">opportunistic invisibility</a>.  What's wrong with showing all BAD-WORD!s, and making things like HELP invisible?</p>
<p>Well... it might not be a good fit.  This might work:</p>
<pre><code>&gt;&gt; help 10
10 is an INTEGER!
</code></pre>
<p>It's invisible so it could have no <strong>== whatever</strong> line.</p>
<p>But complications are:</p>
<ul>
<li>
<p>If you typed something like <strong>10 + 20 help foo</strong> you'd get the help for FOO, followed by <strong>== 30</strong></p>
</li>
<li>
<p>Invisibility detection needs to be covered by DO.  e.g. if your code to evaluate is <strong>[help foo]</strong> then you'd have to first turn that into a GROUP! <strong>(help foo)</strong> to signal disappearing is okay.  Then you would need to have a return result from DO of that to distinguish from plain VOID!.  (This will be needed anyway, just not necessarily for this.)</p>
</li>
</ul>
<p>I just kind of feel like HELP isn't meant to vanish.  It's not a comment.  Something about it seems a better fit as an operation that returns a value the console understands you'd rather not see.  (I think that value should be special... e.g. not the same BAD-WORD! that is used to denote unset variables or null-transitioned branches.)</p>
          <p><a href="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/6</link>
        <pubDate>Thu, 05 Nov 2020 00:59:32 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1383-6</guid>
        <source url="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383.rss">Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</source>
      </item>
      <item>
        <title>Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="IngoHohmann" data-post="4" data-topic="1383">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>I like it. Much.</p>
</blockquote>
</aside>
<p>I've had this thought for a couple of years now (again, mostly triggered by Chris's tag trick).  But I hadn't made a specific post about it where I proposed actual names (e.g. <code>~branched~</code>).  But in doing so, it kind of reinforces just how many of these might be useful.</p>
<p>The rule for the console could be more narrow for what it does not show.  One possibility would be the unique "empty BAD-WORD!" is interpreted as "don't show in console".  It means that for functions you didn't want to print a console result you'd just say <strong><code>[return ~]</code></strong> and that would be how you did it, with the baseline of functions showing if ~none~ was produced.</p>
<h2>They Error If Evaluated, So You Have To Quote Them</h2>
<p>Since BAD-WORD!s are "ornery" you must quote them to not get an error when they are encountered in an evaluative contexts:</p>
<pre><code>&gt;&gt; '~foo~
== ~foo~

&gt;&gt; ~foo~
** Error: BAD-WORD! cannot be evaluated
</code></pre>
<hr>
<blockquote>
<p><strong>UPDATE:</strong> A new strategy known as "BAD-WORD! isotopes" emerged after this initial concept.  <strong>Explaining isotopes is beyond the scope of this historical thread</strong>, but suffice to say that something like ~foo~ no longer errors in evaluation... it produces a "~foo~ isotope".</p>
</blockquote>
<hr>
<p>Here's some more ideas of how things might work:</p>
<pre><code>&gt;&gt; do []
== ~empty~  ; probably better if this shows, vs being invisible with ~

&gt;&gt; suppressed: func [x] [if x [print "not printed"] return '~]
&gt;&gt; suppressed false  ; console knows not to print plain ~

&gt;&gt; fallout: func [x] [if x [print "not printed"]]
&gt;&gt; fallout false
== ~branched~

&gt;&gt; data: []
&gt;&gt; proclike: func [return: &lt;none&gt; x] [append data x]
&gt;&gt; proclike 10
== ~none~  ; consider non-`~` voids shown by console a feature vs. bug
</code></pre>
<p>Potential for this becoming a frequently-reached-for light-error mechanism might be high.  Conversion to error could use the symbol as the ID (given that these are constrained to WORD! spelling rules and interning so multiple instances aren't taking up multiple copies of the string).  Conversion of errors to voids could be another interesting direction.  This gives you something like the "armed" and "disarmed" states of Rebol2, but a lot more interesting.</p>
<p><em>(Note: This suggests avoiding internal tildes, so that <strong>~bad-mojo~</strong> can be converted to <strong>bad-mojo</strong> without incurring the problem of being a void itself.  I think this suggests disallowing internal ~, and only having it at the beginning and end.)</em></p>
<p>While Rebmu will mourn the loss of ~ for word names, it will give another tool for dialecting.  So it won't be like it can't be used.</p>
          <p><a href="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/5</link>
        <pubDate>Wed, 04 Nov 2020 22:50:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1383-5</guid>
        <source url="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383.rss">Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</source>
      </item>
      <item>
        <title>Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>YESSS <img src="https://forum.rebol.info/images/emoji/twitter/+1.png?v=9" title=":+1:" class="emoji" alt=":+1:"><br>
I like it. Much.</p>
          <p><a href="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/4</link>
        <pubDate>Wed, 04 Nov 2020 20:03:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1383-4</guid>
        <source url="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383.rss">Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</source>
      </item>
      <item>
        <title>Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="BlackATTR" data-post="2" data-topic="1383">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>I don't see many downsides listed-- are we missing anything?</p>
</blockquote>
</aside>
<p>Consensus on a notation is probably all that's needed.</p>
<p>There's even be enough cell bits that these could trace back to the file and line where they were created, if that were wired up.  So if you're downstream of one of these you could get information on where it came from.</p>
<p>(I was just thinking about what would happen if frame-local variables were initialized to <code>~local~</code>, but then wondering about what would happen once it got far from home and you wondered about its origins...local to what?)</p>
<p>Similar ideas might be possible for BLANK! and NULL.  I should tinker with it.</p>
          <p><a href="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/3</link>
        <pubDate>Wed, 04 Nov 2020 12:26:53 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1383-3</guid>
        <source url="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383.rss">Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</source>
      </item>
      <item>
        <title>Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I like this a <strong>lot</strong>, it increases transparency in a good way and should make the language easier to learn/understand. I don't see many downsides listed-- are we missing anything?</p>
          <p><a href="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/2</link>
        <pubDate>Wed, 04 Nov 2020 12:24:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1383-2</guid>
        <source url="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383.rss">Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</source>
      </item>
      <item>
        <title>Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Something <a class="mention" href="/u/rgchris">@rgchris</a> had done that I liked was to use TAG! in module headers as a sort of TBD when the script header contained a configuration for that script.</p>
<p>It cued you what you needed to edit, and the script could deliver you errors telling you if you didn't configure it one way or another:</p>
<pre><code> Rebol [
     Title: "My Cool Script"
     Description: {
         Edit the variable below to set the directory.
     }
     Directory: &lt;your-path-here&gt;
]
</code></pre>
<p>The code looks to see if the directory is a FILE! or  a TAG!.  If it's a tag, it errors.  But the erroring has to be done manually.</p>
<p>This made me wonder about what it would be like if there was a mean type that was WORD!-like, with an interned immutable spelling.  But it would error if you tried to access a variable holding it.</p>
<p>Notationally, I thought surrounding the word with <strong><code>~</code></strong> would be good:</p>
<pre><code>Directory: ~file!~
</code></pre>
<p>I chose this because:</p>
<ul>
<li>
<p>The argument for the purpose like in headers for "TBD" seems a solid one for a light and usable notation...vs. some monstrosity like <code>#[bad-word! "file!"]</code>.</p>
</li>
<li>
<p>We're running out of symbols, so there is not much to pick from.</p>
</li>
<li>
<p>~ is undesirable for general use due to its hard-to-hit location on most keyboards.</p>
</li>
<li>
<p>~ is wavy and off-putting and weird--but that's an asset for this purpose.</p>
</li>
</ul>
<p>It seems clear that this would be a win over what tilde is used for in <em>today</em>'s codebases.</p>
<p>We could call the type TILDE! although that doesn't really have the connotations for its toxic nature.  TOXIC! ?  I've made my many arguments over time about why it's not UNSET! and I'm more entrenched in that thinking than ever.</p>
<hr>
<blockquote>
<p><strong>UPDATE</strong>: This feature was originally called "labeled voids" in 2020--under a completely different set of terminology than being used a year later.  Ultimately it was called BAD-WORD!, so I've retroactively edited this thread to use that...to try and make any points raised easier to follow.</p>
</blockquote>
<hr>
<p><strong>Since these can be used as a kind of deferred error--a bad result that's only there to be bad if you actually use it--the text in these words could help guide you to what happened.</strong></p>
<p>Example: With branching structures, it's confusing that nulls are turned into non-null if you don't use the @[...] branch forms.  But wouldn't it be clearer if there was some name on that thing?</p>
<pre><code> &gt;&gt; if true [null]
 == ~branched~
</code></pre>
<p>Or if you reduce some code that tries to put a null in a block but can't:</p>
<pre><code> &gt;&gt; reduce [&lt;a&gt; if false [&lt;b&gt;]]
 == [&lt;a&gt; ~null~]
</code></pre>
<p>And variables that didn't have any definition could have a nice name too:</p>
<pre><code> &gt;&gt; get/any 'asdfadsf
 == ~unset~
</code></pre>
<p>Functions that had no value to return might go with ~no-return~ or ~nothing~.</p>
<hr>
<blockquote>
<p><strong>UPDATE</strong>: Functions like PRINT which have no return result ultimately went with ~none~ for this purpose, as it is short and not used for anything else anymore.</p>
</blockquote>
<hr>
<h2>This Feels Like A Strong Play For Ren-C's Hand <img src="https://forum.rebol.info/images/emoji/twitter/call_me_hand.png?v=9" title=":call_me_hand:" class="emoji" alt=":call_me_hand:">
</h2>
<p>It makes the "brick" a lot more useful for building with, and you can already see above that it would guide people to better awareness with things like ~branched~.</p>
          <p><a href="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383/1</link>
        <pubDate>Wed, 04 Nov 2020 11:15:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1383-1</guid>
        <source url="https://forum.rebol.info/t/lingering-idea-labeled-ornery-word-s-bad-word/1383.rss">Lingering Idea: Labeled &quot;Ornery&quot; WORD!s (&quot;BAD-WORD!&quot;)</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Forward to Multiple Return Values! (and return value forwarding?)</title>
    <link>https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271</link>
    <description>Users of languages that have a multiple return value feature seem to rave about it.  And it&#39;s something that users from languages that *don&#39;t* have it will ask about, complain about, and constantly try to find ways to work around.

Even before an actual implementation of SET-BLOCK! existed, I had inklings that Rebol could do them in a way that is mindbending and original.  But there were nagging technical and semantic concerns for every version of the idea I could envision.

Now I have to say that after having the opportunity to do experimentation with the [enfix left-quoting hack](https://forum.rebol.info/t/multiple-return-values-via-enfix/1257) for multiple return results... and seeing what Ren-C is capable of...

## ...multi-return is a *must-have* :heart_eyes_cat: 
---

I&#39;m convinced we&#39;d be wasting SET-BLOCK! terribly in the evaluator if **[x y]: [1 2]** was only for &quot;setting x to 1 and y to 2&quot;.  While I&#39;ve been concerned in the past about consistency in naming with **set [x y] [1 2]**... we either forget worrying about that or just use something else to do that.   e.g. **assign [x y] [1 2]**, problem solved.

In terms of other problems that seem addressed comfortably: I knew that we needed to be able to return NULL to values in multi-return scenarios, but that would be a problem with even the reduced case if we tried to return a BLOCK! to match the SET-BLOCK! in size:

    &gt;&gt; [x y]: function-returning-10-and-20
    == [10 20]
    &gt;&gt; x
    == 10
    &gt;&gt; y
    == 20

    &gt;&gt; [x y]: function-returning-null-and-30
    == [#[void] 30]  ; can&#39;t put null, so... VOID! in first slot?
    &gt;&gt; x
    == null  ; not the same thing as what the block said...seems bad, yes?
    &gt;&gt; y
    == 30

But when I disconnected the idea from the old behavior of **set [x y] [10 20]**, the Gordian Knot was cut, and the evaluative result of a SET-BLOCK! had no need to be a BLOCK! with all the values...but merely one value.  **This made great sense, because since BLOCK! is always truthy, you&#39;d not really be able to make useful conditional behavior be based on a BLOCK! return anyway!**

    &gt;&gt; [x y]: function-returning-10-and-20
    == 10
    &gt;&gt; x
    == 10
    &gt;&gt; y
    == 20

    &gt;&gt; [x y]: function-returning-null-and-30
    == null  ; so you could meaningfully say `if [x y]: whatever [...]`
    &gt;&gt; x
    == null
    &gt;&gt; y
    == 30

The question of whether it *has* to be the first value is an open one.  If you could annotate the elements of the SET-BLOCK! that might be a way of saying otherwise.  And perhaps the single return doesn&#39;t have to be coupled to the multi-value return case at all (?)

## An Important Feature: Return Awareness

The old school &quot;multiple return&quot; method was to pass in WORD!s to set as variables.  Such as DO/NEXT:

     r3-alpha&gt;&gt; value: do/next [1 + 2 10 + 20] &#39;pos
     == 3

     r3-alpha&gt;&gt; pos
     == [10 + 20]

You see that DO could check for the presence of the /NEXT refinement and behave differently.  *It knows whether it has one return value or two.*  Based on that knowledge, many routines might have more optimized implementations when not all the possible return results they could give are wanted.

Previously I phrased this with the example:

     &gt;&gt; [x y]: sum-and-difference 20 10

Let&#39;s say that gives back 30 and 10.  But if the user omitted return results, it might be possible to be more efficient:

     &gt;&gt; x: sum-and-difference 20 10
     &gt;&gt; [x]: sum-and-difference 20 10
     &gt;&gt; [x _]: sum-and-difference 20 10
     ; ^-- let&#39;s say all are equivalent ways of asking for the sum
     ; but not the difference.

     &gt;&gt; [_ y]: sum-and-difference 20 10
     ; ^-- asks for the difference but not the sum

How would it be able to tell?  It seems like it would be bad to give it the actual BLOCK! it&#39;s assigning into, because it could look at the prior values...and it feels like the words in the return block should not be used to pass information as a out-of-band input.

Thus perhaps a multi-return function gets a proxy block, which has VOID!s in it where variables are, and blanks where the blanks are.  It&#39;s the multi-return&#39;s job to assign those slots, and then the evaluator takes care of mapping the values back.

## A Huge Question: Forwarding 

The premise this is operating on is that *multiple return-valued functions are a fundamentally different beast*, and any single value goes through assignment normally to the first slot:

    &gt;&gt; [x y]: [1 2]
    == [1 2]

    &gt;&gt; x
    == [1 2]

    &gt;&gt; y
    ; null (or maybe void?)

This magical property of functions has a bit of a problem, though...

    my-wrapper: func [arg1 arg2] [
         return wrapped-function arg1 arg2
    ]

If WRAPPED-FUNCTION has the property that it would assign multiply to a SET-BLOCK! target, then you&#39;d lose that multiple-return-ness.  Much like the need that motivated the existence of APPEND/ONLY, you can&#39;t have it both ways...a value like a BLOCK! can represents a single multi-valued item, or multiple values, but not both at the same time.

It seems clear there&#39;d need to be some kind of operator for unpacking and repacking a multi-valued function&#39;s results into a BLOCK!.

     &gt;&gt; one: multi-returns-10-and-20
     == 10  ; drops 20, not requested

     &gt;&gt; both: unpack multi-returns-10-and-20
     == [10 20]

     &gt;&gt; [x y]: repack [10 20]
     == 10

     &gt;&gt; x
     == 10

     &gt;&gt; y
     == 20

That doesn&#39;t help with the wrapping problem, though.  You&#39;d need some kind of *forwarding return*.  Perhaps something like a **return/pack**?

It might seem nice to make forwarding the default, but this would lead to counter-intuitive situations, like these two being different:

     return some-function

     x: some-function
     return x

 It feels like you&#39;d want *some* kind of signal before having these act differently.

## So many questions open, but still I think this has to happen

I&#39;m sure enough that I wouldn&#39;t suggest using SET-BLOCK! in the evaluator for anything else.

If we say we have to punt on it design-wise for a while and make it an error, then that&#39;s fine.  It&#39;s just time to scrap the idea of **[x y]: [1 2]** setting x to 1 and y to 2.  That&#39;s such a waste!  So keep one&#39;s thinking hats on with this...</description>
    
    <lastBuildDate>Sat, 26 Sep 2020 20:27:34 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Forward to Multiple Return Values! (and return value forwarding?)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="1" data-topic="1271">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>If we say we have to punt on it design-wise for a while and make it an error, then that's fine. It's just time to scrap the idea of <strong>[x y]: [1 2]</strong> setting x to 1 and y to 2. That's such a waste! So keep one's thinking hats on with this...</p>
</blockquote>
</aside>
<p>Since the mechanic for multi-returns only runs if it calls a function, the idea of multi-assign could be brought back...but only for <em>literal</em> blocks.  Because if the block comes from a function it needs to follow the multi-return protocol.  And if you use a variable it may or may not be a function, so it should probably follow the protocol too (e.g. a variable can only return something to the first slot)</p>
<pre><code>&gt;&gt; [x y z]: [1 2 3]
== [1 2 3]

&gt;&gt; x
== 1

&gt;&gt; y
== 2

&gt;&gt; z
== 3
</code></pre>
<p>But by the rules we know for multi-return invocation, you'd have to get a different result from:</p>
<pre><code>&gt;&gt; [x y z]: reduce [1 2 3]
== [1 2 3]

&gt;&gt; x
== [1 2 3]
</code></pre>
<p>That takes a bit of fun out of things, as you'd only be able to set things items to what was literally in a source block.  So such a feature would probably need to reduce the block, which might be a call for GET-BLOCK! literals to make that clearer:</p>
<pre><code>&gt;&gt; [x y z]: :[1 + 2 2 + 3 3 + 4]
== 3

&gt;&gt; x
== 3

&gt;&gt; y
== 5

&gt;&gt; z
== 7
</code></pre>
<p><em>I made it return the first item value because returning a BLOCK! wouldn't be possible if there were nulls.</em>*  But it could also voidify the bad slots, though that's an operation that makes me uneasy for the evaluator to be doing.</p>
<p>We may have other options; making the thing to the right of the SET-BLOCK! a TUPLE! with a leading dot could be an instruction to set the elements item-wise</p>
<pre><code>&gt;&gt; [x y z]: .reduce [1 + 2 2 + 3 3 + 4]
== [3 5 7]

&gt;&gt; x
== 1  ; y = 2, z = 3
</code></pre>
<p>In any case, my point is just that we have to be consistent with how things work when people can't tell the difference at source level.</p>
<p>What other meanings might there be?  QUOTED! items on the right could be a shorthand for assign the same to everything:</p>
<pre><code>&gt;&gt; [a b c d e f g]: '[&lt;cleaner-looking&gt; &lt;than&gt; 7 &lt;set-word!s&gt;]
== [&lt;cleaner-looking&gt; &lt;than&gt; 7 &lt;set-word!s&gt;]

&gt;&gt; a
== [&lt;cleaner-looking&gt; &lt;than&gt; 7 &lt;set-word!s&gt;]

&gt;&gt; b
== [&lt;cleaner-looking&gt; &lt;than&gt; 7 &lt;set-word!s&gt;]  ; etc.
</code></pre>
<p>My point above is just that it seems a waste to use plain BLOCK! for something you could get already, but maybe the QUOTED!s are a category of things that could be sacrificed for this slightly better-looking form of multi-assignment... or maybe this form of multi assignment could have some special property that <strong>a: b: c: d: e: f: g:</strong> could not?</p>
          <p><a href="https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271/5</link>
        <pubDate>Sat, 26 Sep 2020 12:49:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1271-5</guid>
        <source url="https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271.rss">Forward to Multiple Return Values! (and return value forwarding?)</source>
      </item>
      <item>
        <title>Forward to Multiple Return Values! (and return value forwarding?)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="3" data-topic="1271">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>I can see this being really useful for dialects (being coerced out of text, which is relevant for me), and almost anything which helps dialects is a good thing</p>
</blockquote>
</aside>
<p>It's quite amazing to see <a href="https://github.com/metaeducation/ren-c/blob/5d70aa4a85dbe3a831653e14b72117e90997fa09/tests/string/transcode.test.reb" rel="nofollow noopener">the benefits to TRANSCODE right off the bat</a>!</p>
<p>Last night I <a href="https://github.com/metaeducation/ren-c/commit/072e932260af3e9bd31fd0092ac80aeedb38139c" rel="nofollow noopener">repeated that success with LOAD</a>, where if you want a header you can just say:</p>
<pre><code>[data header]: load %some-file.reb
</code></pre>
<p>And if you don't want a header, you just say <strong>data: load %some-file.reb</strong> as normal.  This replaces the way the output <em>changed</em> in historical Rebol, where LOAD sometimes returned a BLOCK! with a header as the second item, and sometimes it did not.</p>
<pre><code>rebol2&gt;&gt; load {[Rebol [Title: "hi"] a b c]}
== [a b c]

rebol2&gt;&gt; load/header {[Rebol [Title: "hi"] a b c]}
== [make object! [
        Title: "hi"
        Date: none
        Name: none
        Version: none
        ; ...etc, etc...
        Language: none
        Type: none
        Content: none
    ] a b c
]
</code></pre>
<p>What's also an improvement by setting variables directly over the BLOCK! approach is that you don't have to put BLANK! in a slot, you can really return NULL:</p>
<pre><code>&gt;&gt; [data header]: load "&lt;no&gt; #header 'here"
== [&lt;no&gt; #header 'here]

&gt;&gt; data
== [&lt;no&gt; #header 'here]

&gt;&gt; header
; null
</code></pre>
<p>Pursuant to my recent post on <a href="https://forum.rebol.info/t/blank-in-null-out-more-universal-on-mutating-operations/1272">making BLANK! used more narrowly</a>, I think NULL is the better result for "thing that wasn't there"...because you have to consciously TRY it to have it ignored by operations that poke around at it.</p>
<p>On that note: <em>I think we've dodged a bullet by making the "true nothing" null not cause errors on WORD! access, and switched to using an UNSET!-like value for "ornery" response</em>.  I was rather led astray by seeing <strong>compose [1 (#[unset]) 2]</strong> be <strong>[1 2]</strong> that I believed my new NULL concept was "The REAL unset" that I didn't realize it was much better modeled as "The REAL none!"</p>
<p>One must wonder what would have happened if that realization had happened sooner (!).  But things were learned along the way, and it's all shaping into place now.  Just have to keep up the pace...</p>
          <p><a href="https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271/4</link>
        <pubDate>Fri, 10 Apr 2020 20:20:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1271-4</guid>
        <source url="https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271.rss">Forward to Multiple Return Values! (and return value forwarding?)</source>
      </item>
      <item>
        <title>Forward to Multiple Return Values! (and return value forwarding?)</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Very cool. Thank you— I can see this being really useful for dialects (being coerced out of text, which is relevant for me), and almost anything which helps dialects is a good thing, in my opinion.</p>
          <p><a href="https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271/3</link>
        <pubDate>Thu, 09 Apr 2020 00:03:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1271-3</guid>
        <source url="https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271.rss">Forward to Multiple Return Values! (and return value forwarding?)</source>
      </item>
      <item>
        <title>Forward to Multiple Return Values! (and return value forwarding?)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h2>Wait...a Possible "Eureka" Moment...</h2>
<p>Summarized in a comment I just wrote to set up the premise idea:</p>
<pre><code>//==//// SET-BLOCK! //////////////////////////////////////////////////////==//
//
// The evaluator treats SET-BLOCK! specially as a means for implementing
// multiple return values.  The trick is that it does so by pre-loading
// arguments in the frame with variables to update, in a way that could have
// historically been achieved with passing a WORD! or PATH! to a refinement.
// So if there was a function that updates a variable you pass in by name:
//
//     result: updating-function/update arg1 arg2 'var
//
// The /UPDATE parameter is marked as being effectively a "return value", so
// that equivalent behavior can be achieved with:
//
//     [result var]: updating-function arg1 arg2
</code></pre>
<p>So all you have to do is mark a refinement as an output parameter.  That's all!  Then check to see if it's null or not, and assign it if it's a WORD! or PATH!...the same way you ever would have.  You can use it in the old style (like a DO/NEXT being passed a position to update) or you can use the SET-BLOCK! syntax and let the evaluator do the magic.  The order matters of parameters marked like this--as with normal arguments.</p>
<p><strong>Through the power of libRebol <a href="https://github.com/metaeducation/ren-c/commit/3a6fe97a419cdbd61304ee63f7129164af95e5b4" rel="nofollow noopener">I have committed a prototype of the behavior</a> within just a few hours of having the idea!  Please test it out and add to the tests, <a href="https://github.com/metaeducation/ren-c/blob/master/tests/functions/multi.test.reb" rel="nofollow noopener">there are just a few here as an example</a>...but more from your own heads would be ideal.  Note that error messages and such will be very coarse during the prototype phase, but I do want to know about crashes or bad behaviors.</strong></p>
<p>There's still a lot of details, I'm sure...but this feels like a very pleasing direction to go in!</p>
<h2>Genesis of the Idea</h2>
<p>I was looking at TRANSCODE, which is a fairly complex in terms of its parameterization.  This is the basic routine that exposes the scanner and turns UTF-8 into Rebol values.  <em>(Cool sidenote: in Ren-C with UTF-8 Everywhere you can now use it on strings, while R3-Alpha could only use it on binaries...)</em></p>
<p>A typical TRANSCODE operation turns a string into a block, so conceptually:</p>
<pre><code> &gt;&gt; transcode "1 [2] &lt;3&gt;"
 == [1 [2] &lt;3&gt;]

 &gt;&gt; transcode "[1 [2] &lt;3&gt;]"
 == [[1 [2] &lt;3&gt;]]   ; always a block of values, even if only one block value
</code></pre>
<p>Sometimes people want to transcode just one value at a time, so there is TRANSCODE/NEXT.  As with DO/NEXT, this introduces another useful output... which is where you want to write the advanced position to do further processing.  Let's look at it in that old style (none of this is real code in Ren-C, so just read it, don't run it):</p>
<pre><code> &gt;&gt; transcode/next "1 [2] &lt;3&gt;" 'new-pos
 == 1

 &gt;&gt; new-pos
 == "[2] &lt;3&gt;"
</code></pre>
<p>There's yet another potential output variation coming from the /RELAX switch.  This means that if you have gibberish, it will skip that token and return an ERROR! value:</p>
<pre><code> &gt;&gt; transcode/next/relax "4bad [2] &lt;3&gt;" 'new-pos
 == make error! [...whatever...]

 &gt;&gt; new-pos
 == "[2] &lt;3&gt;"
</code></pre>
<p>That's not ideal, as with some kind of ANY-CONTEXT! literal solution you might actually find an ERROR! value in a scan.</p>
<p><strong>... and now, the realization ...</strong></p>
<h2>What if multi-returns are arguments in a frame?</h2>
<p>e.g. what if the way you do a multi-return is to mark a parameter a "return" parameter, e.g. an output?  The parameter is set either to null, or something to assign--like a refinement--in order to indicate it is requested.  Then at the end of the function when it tears down the frame, those values are set.</p>
<p>So this way if you have a WORD! or PATH! you want to assign, you can pass it in as an argument.  But if you use the multi-return convention, it will implicitly load those slots with variables out of the block on the left.</p>
<p>That means these two situations would appear equivalent to the insides of TRANSCODE:</p>
<pre><code>&gt;&gt; value: transcode/next/relax "1 [2] &lt;3&gt;" 'next-pos 'error

&gt;&gt; [value next-pos error]: transcode "1 [2] &lt;3&gt;"
</code></pre>
<p>And then, these two would appear equivalent:</p>
<pre><code>&gt;&gt; value: transcode/relax "1 [2] &lt;3&gt;" 'error

&gt;&gt; [value _ error]: transcode "1 [2] &lt;3&gt;"
</code></pre>
<p>This means that there needs to be a way of marking arguments as returns in the function spec, and their order matters (just as order of ordinary arguments matters).</p>
<p><strong>This is a great duality.</strong>  It gives you the option to work with named arguments if you want, but provides a shorthand...where SET-BLOCK! collaborates with the evaluator to push into those slots.  A similar revolution is forthcoming in APPLY where you should be able to use named arguments even when something is one of the ordered parameters.</p>
<p>For that matter, there's probably nothing saying we couldn't put names on the left too.  Off-the-cuff syntax:</p>
<pre><code>&gt;&gt; [value /relax 'error]: transcode "1 [2] &lt;3&gt;"
</code></pre>
<p>This could help separate inputs from outputs, while being more commentary and not tying it to an order.</p>
<p>Such is another change powered by <a href="https://forum.rebol.info/t/pure-and-refined-simplifying-refinements-to-one-or-zero-args/1120">Pure and Refined</a>...simplifying the nature of arguments in frames down to one-name-per argument and one-value-per lets us play with this equivalence.  We can imagine function frames expanding via AUGMENT to add new return values...</p>
<p>Cool, huh?</p>
          <p><a href="https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271/2</link>
        <pubDate>Wed, 08 Apr 2020 15:39:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1271-2</guid>
        <source url="https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271.rss">Forward to Multiple Return Values! (and return value forwarding?)</source>
      </item>
      <item>
        <title>Forward to Multiple Return Values! (and return value forwarding?)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Users of languages that have a multiple return value feature seem to rave about it.  And it's something that users from languages that <em>don't</em> have it will ask about, complain about, and constantly try to find ways to work around.</p>
<p>Even before an actual implementation of SET-BLOCK! existed, I had inklings that Rebol could do them in a way that is mindbending and original.  But there were nagging technical and semantic concerns for every version of the idea I could envision.</p>
<p>Now I have to say that after having the opportunity to do experimentation with the <a href="https://forum.rebol.info/t/multiple-return-values-via-enfix/1257">enfix left-quoting hack</a> for multiple return results... and seeing what Ren-C is capable of...</p>
<h2>...multi-return is a <em>must-have</em> <img src="https://forum.rebol.info/images/emoji/twitter/heart_eyes_cat.png?v=9" title=":heart_eyes_cat:" class="emoji" alt=":heart_eyes_cat:">
</h2>
<hr>
<p>I'm convinced we'd be wasting SET-BLOCK! terribly in the evaluator if <strong>[x y]: [1 2]</strong> was only for "setting x to 1 and y to 2".  While I've been concerned in the past about consistency in naming with <strong>set [x y] [1 2]</strong>... we either forget worrying about that or just use something else to do that.   e.g. <strong>assign [x y] [1 2]</strong>, problem solved.</p>
<p>In terms of other problems that seem addressed comfortably: I knew that we needed to be able to return NULL to values in multi-return scenarios, but that would be a problem with even the reduced case if we tried to return a BLOCK! to match the SET-BLOCK! in size:</p>
<pre><code>&gt;&gt; [x y]: function-returning-10-and-20
== [10 20]
&gt;&gt; x
== 10
&gt;&gt; y
== 20

&gt;&gt; [x y]: function-returning-null-and-30
== [#[void] 30]  ; can't put null, so... VOID! in first slot?
&gt;&gt; x
== null  ; not the same thing as what the block said...seems bad, yes?
&gt;&gt; y
== 30
</code></pre>
<p>But when I disconnected the idea from the old behavior of <strong>set [x y] [10 20]</strong>, the Gordian Knot was cut, and the evaluative result of a SET-BLOCK! had no need to be a BLOCK! with all the values...but merely one value.  <strong>This made great sense, because since BLOCK! is always truthy, you'd not really be able to make useful conditional behavior be based on a BLOCK! return anyway!</strong></p>
<pre><code>&gt;&gt; [x y]: function-returning-10-and-20
== 10
&gt;&gt; x
== 10
&gt;&gt; y
== 20

&gt;&gt; [x y]: function-returning-null-and-30
== null  ; so you could meaningfully say `if [x y]: whatever [...]`
&gt;&gt; x
== null
&gt;&gt; y
== 30
</code></pre>
<p>The question of whether it <em>has</em> to be the first value is an open one.  If you could annotate the elements of the SET-BLOCK! that might be a way of saying otherwise.  And perhaps the single return doesn't have to be coupled to the multi-value return case at all (?)</p>
<h2>An Important Feature: Return Awareness</h2>
<p>The old school "multiple return" method was to pass in WORD!s to set as variables.  Such as DO/NEXT:</p>
<pre><code> r3-alpha&gt;&gt; value: do/next [1 + 2 10 + 20] 'pos
 == 3

 r3-alpha&gt;&gt; pos
 == [10 + 20]
</code></pre>
<p>You see that DO could check for the presence of the /NEXT refinement and behave differently.  <em>It knows whether it has one return value or two.</em>  Based on that knowledge, many routines might have more optimized implementations when not all the possible return results they could give are wanted.</p>
<p>Previously I phrased this with the example:</p>
<pre><code> &gt;&gt; [x y]: sum-and-difference 20 10
</code></pre>
<p>Let's say that gives back 30 and 10.  But if the user omitted return results, it might be possible to be more efficient:</p>
<pre><code> &gt;&gt; x: sum-and-difference 20 10
 &gt;&gt; [x]: sum-and-difference 20 10
 &gt;&gt; [x _]: sum-and-difference 20 10
 ; ^-- let's say all are equivalent ways of asking for the sum
 ; but not the difference.

 &gt;&gt; [_ y]: sum-and-difference 20 10
 ; ^-- asks for the difference but not the sum
</code></pre>
<p>How would it be able to tell?  It seems like it would be bad to give it the actual BLOCK! it's assigning into, because it could look at the prior values...and it feels like the words in the return block should not be used to pass information as a out-of-band input.</p>
<p>Thus perhaps a multi-return function gets a proxy block, which has VOID!s in it where variables are, and blanks where the blanks are.  It's the multi-return's job to assign those slots, and then the evaluator takes care of mapping the values back.</p>
<h2>A Huge Question: Forwarding</h2>
<p>The premise this is operating on is that <em>multiple return-valued functions are a fundamentally different beast</em>, and any single value goes through assignment normally to the first slot:</p>
<pre><code>&gt;&gt; [x y]: [1 2]
== [1 2]

&gt;&gt; x
== [1 2]

&gt;&gt; y
; null (or maybe void?)
</code></pre>
<p>This magical property of functions has a bit of a problem, though...</p>
<pre><code>my-wrapper: func [arg1 arg2] [
     return wrapped-function arg1 arg2
]
</code></pre>
<p>If WRAPPED-FUNCTION has the property that it would assign multiply to a SET-BLOCK! target, then you'd lose that multiple-return-ness.  Much like the need that motivated the existence of APPEND/ONLY, you can't have it both ways...a value like a BLOCK! can represents a single multi-valued item, or multiple values, but not both at the same time.</p>
<p>It seems clear there'd need to be some kind of operator for unpacking and repacking a multi-valued function's results into a BLOCK!.</p>
<pre><code> &gt;&gt; one: multi-returns-10-and-20
 == 10  ; drops 20, not requested

 &gt;&gt; both: unpack multi-returns-10-and-20
 == [10 20]

 &gt;&gt; [x y]: repack [10 20]
 == 10

 &gt;&gt; x
 == 10

 &gt;&gt; y
 == 20
</code></pre>
<p>That doesn't help with the wrapping problem, though.  You'd need some kind of <em>forwarding return</em>.  Perhaps something like a <strong>return/pack</strong>?</p>
<p>It might seem nice to make forwarding the default, but this would lead to counter-intuitive situations, like these two being different:</p>
<pre><code> return some-function

 x: some-function
 return x
</code></pre>
<p>It feels like you'd want <em>some</em> kind of signal before having these act differently.</p>
<h2>So many questions open, but still I think this has to happen</h2>
<p>I'm sure enough that I wouldn't suggest using SET-BLOCK! in the evaluator for anything else.</p>
<p>If we say we have to punt on it design-wise for a while and make it an error, then that's fine.  It's just time to scrap the idea of <strong>[x y]: [1 2]</strong> setting x to 1 and y to 2.  That's such a waste!  So keep one's thinking hats on with this...</p>
          <p><a href="https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271/1</link>
        <pubDate>Tue, 07 Apr 2020 16:52:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1271-1</guid>
        <source url="https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271.rss">Forward to Multiple Return Values! (and return value forwarding?)</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How Attached are we to Functions Return Last Result?</title>
    <link>https://forum.rebol.info/t/how-attached-are-we-to-functions-return-last-result/1219</link>
    <description>In JavaScript, the failure to specify a RETURN statement is basically the way of saying you don&#39;t return anything.  Functions don&#39;t accidentally leak values, you just get undefined:

    &gt; function nada() { 1 + 2; }

    &gt; nada()
    &lt;- undefined

    &gt; function three() { return 1 + 2; }

    &gt; three()
    3

I know this isn&#39;t how Rebol has historically operated.  But the historical operation of Rebol can lead to the accidental leakage of a lot of values which the caller wasn&#39;t necessarily meant to see.  There&#39;s currently a burden to annotate in the spec when a function doesn&#39;t return something (the `&lt;void&gt;`).

So in the *&quot;Let&#39;s not give JavaScript any upper hand&quot;* line of thinking, should this be re-evaluated?  I must admit I kind of feel their way is clearer.  :-/</description>
    
    <lastBuildDate>Mon, 30 Sep 2019 15:56:29 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/how-attached-are-we-to-functions-return-last-result/1219.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How Attached are we to Functions Return Last Result?</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>Very.</p>
<p>To me it is part of what defines Rebol. Every function which doesn't return anything disturbs the flow for me, and breaks the ability to chain functions together.<br>
It is part of the programmers responsibility to return something sensible.<br>
(Well, this is my opinion at least.)</p>
          <p><a href="https://forum.rebol.info/t/how-attached-are-we-to-functions-return-last-result/1219/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-attached-are-we-to-functions-return-last-result/1219/4</link>
        <pubDate>Mon, 30 Sep 2019 15:56:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1219-4</guid>
        <source url="https://forum.rebol.info/t/how-attached-are-we-to-functions-return-last-result/1219.rss">How Attached are we to Functions Return Last Result?</source>
      </item>
      <item>
        <title>How Attached are we to Functions Return Last Result?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="1219">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/iarnold/40/226_2.png" class="avatar"> iArnold:</div>
<blockquote>
<p>Having the function return without declaring variables or having to specify a RETURN statement is very useful in quicky programming.</p>
</blockquote>
</aside>
<p>This could also be another construct.  MACRO perhaps, or INLINE...where the idea is to create something that substitutes an expression.</p>
<pre><code>&gt;&gt; foo-macro: macro [x y] [append x y]
&gt;&gt; foo-macro [a b c] 'd
== [a b c d]

&gt;&gt; foo-function: function [x y] [append x y]
&gt;&gt; foo-function
; no result (e.g. void!)
</code></pre>
<p>Or something.  I dunno, I think it's worth asking if it's a great idea to leak by default.  I personally like the RETURN making it clear whether something is actually meant to be a return result...it can be hard to tell when looking at:</p>
<pre><code>foo: function [...] [
    ...
    ...
    something-or-another
]
</code></pre>
<p>Is that intentionally returning the result of something-or-another?  Or is that a function intended to have a side effect, whose result is not part of the contract?</p>
          <p><a href="https://forum.rebol.info/t/how-attached-are-we-to-functions-return-last-result/1219/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-attached-are-we-to-functions-return-last-result/1219/3</link>
        <pubDate>Mon, 30 Sep 2019 13:25:26 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1219-3</guid>
        <source url="https://forum.rebol.info/t/how-attached-are-we-to-functions-return-last-result/1219.rss">How Attached are we to Functions Return Last Result?</source>
      </item>
      <item>
        <title>How Attached are we to Functions Return Last Result?</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>If return comes, make it optional. The current behaviour is fine by me. Adding return is undoing part of REBOL way, REBOL takes care of taking and returning the last result. If you like it or not. It is not the end-user but the programmer that has to deal with it and the programmer should be able to handle or use PHP or Java instead.<br>
Having the function return without declaring variables or having to specify a RETURN statement is very useful in quicky programming.</p>
          <p><a href="https://forum.rebol.info/t/how-attached-are-we-to-functions-return-last-result/1219/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-attached-are-we-to-functions-return-last-result/1219/2</link>
        <pubDate>Mon, 30 Sep 2019 13:16:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1219-2</guid>
        <source url="https://forum.rebol.info/t/how-attached-are-we-to-functions-return-last-result/1219.rss">How Attached are we to Functions Return Last Result?</source>
      </item>
      <item>
        <title>How Attached are we to Functions Return Last Result?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In JavaScript, the failure to specify a RETURN statement is basically the way of saying you don't return anything.  Functions don't accidentally leak values, you just get undefined:</p>
<pre><code>&gt; function nada() { 1 + 2; }

&gt; nada()
&lt;- undefined

&gt; function three() { return 1 + 2; }

&gt; three()
3
</code></pre>
<p>I know this isn't how Rebol has historically operated.  But the historical operation of Rebol can lead to the accidental leakage of a lot of values which the caller wasn't necessarily meant to see.  There's currently a burden to annotate in the spec when a function doesn't return something (the <code>&lt;void&gt;</code>).</p>
<p>So in the <em>"Let's not give JavaScript any upper hand"</em> line of thinking, should this be re-evaluated?  I must admit I kind of feel their way is clearer.  :-/</p>
          <p><a href="https://forum.rebol.info/t/how-attached-are-we-to-functions-return-last-result/1219/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-attached-are-we-to-functions-return-last-result/1219/1</link>
        <pubDate>Mon, 30 Sep 2019 10:24:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1219-1</guid>
        <source url="https://forum.rebol.info/t/how-attached-are-we-to-functions-return-last-result/1219.rss">How Attached are we to Functions Return Last Result?</source>
      </item>
  </channel>
</rss>

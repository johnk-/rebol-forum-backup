<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>MY, MY, MY</title>
    <link>https://forum.rebol.info/t/my-my-my/1486</link>
    <description>ME was introduced as a tool for replacing the likes of ++.

So instead of **++ variable** you could write **variable: me + 1**.  This had the nice advantage of generalizing to other operators and parameters...as well as making it clearer that an assigment to variable was taking place.

Unfortunately, with the one-unit-of-lookahead workings, you could not write **variable: next me**.  Even if it *could* work, moving away from being right next to the SET-WORD! makes it even less obvious what that means.

So MY was an attempt to do a similar thing for functions that were not enfix.  You could rewrite **block: next block** as **block: my next**

That&#39;s pretty cool.  Though as binding gets hammered through, I got to wondering if it had a higher calling in binding...for letting you propagate bindings on SET-WORD!s on the left to blocks and functions.  That gave me the idea for **my func** being a general replacement for METHOD, and things like **x: my block** would act like **x: in (binding of x) block**

But these are two completely different things.  So they can&#39;t have the same name...

## Alternatives For &quot;Old MY&quot;

Let&#39;s look back at it:

    block: ??? next  -&gt; block: next block

We could ignore the linguistic problem and say ME just works with anything.  **block: me next**  It&#39;s kind of incohrent, though consistent. 

There&#39;s **block: be next**.  Strange, and kind of works there (&quot;hey block. be (your) next value&quot;)  I don&#39;t know quite how it generalizes across other words you might use it with.  **block: be append 10**

I&#39;m fairly used to MY for this, and the closeness to ME makes it feel right.  Looking at it more closely, it seems unwise to change it.

## Alternatives For &quot;New MY&quot;

If old MY was hard to understand, the new MY is even weirder...saying that it&#39;s going to swipe the *binding* off the SET-WORD! on the left, and move it over to the right. 

There&#39;s HAS...

     obj: make/bind-set-words-only object! [  ; imagine something like this exists
         x: 10
         block: has [x + 1] 
         action: has func [y] [x + y]
     ]

It&#39;s strange.  But when you&#39;re talking about trying to communicate bindings at a mechanical level, the options are limited.

Also unclear is how this would work on PATH!.  ME and old MY were only interested in the value, and there&#39;s a way to get that out of a path.  But if you have something like **x/y/z** and Y is an object, how do you extract that object?  :-/

I&#39;ve hypothesized a bit about [quoting vs. JUST](https://forum.rebol.info/t/breaking-make-object-into-component-operations/1442/3?u=hostilefork) being a way of ducking the virtual bind.

     x: 20
     obj: make object! [  ; imagine something like this exists
         x: 10
         block1: &#39;[x + 1]  ; escaped, would get the x=20 binding
         block2: just [x + 1]  ; no quote hence no escape, gets x=10 binding
         action: func [y] &#39;[x + y]  ; you could exempt bodies from binding here
     ]

Soft-quoted branching and other constructs that subvert the evaluator mix this up a bit.  But if you&#39;re having to worry about **&#39;(a + b)** vs. **just (a + b)** being different meanings for binding, then you&#39;d just have to kick in that awareness and not use **if true &#39;[a]** if you wanted the binding, and use **if true [[a]]** instead.

The HAS could still fit in, where **has func** replaces the derived binding mechanics of METHOD.

## Um...

I think all I&#39;ve really done here is talk myself into leaving MY as-is, realized that the variant (which I&#39;ll call HAS for now) which gets bindings from the left would need new mechanics for PATH!... and I&#39;ve gotten myself thinking more about the &quot;quoting subverts virtual binding idea.&quot;</description>
    
    <lastBuildDate>Mon, 01 Feb 2021 20:24:35 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/my-my-my/1486.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>MY, MY, MY</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>BY: New MY<br>
x: by block</p>
          <p><a href="https://forum.rebol.info/t/my-my-my/1486/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/my-my-my/1486/2</link>
        <pubDate>Mon, 01 Feb 2021 20:24:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1486-2</guid>
        <source url="https://forum.rebol.info/t/my-my-my/1486.rss">MY, MY, MY</source>
      </item>
      <item>
        <title>MY, MY, MY</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>ME was introduced as a tool for replacing the likes of ++.</p>
<p>So instead of <strong>++ variable</strong> you could write <strong>variable: me + 1</strong>.  This had the nice advantage of generalizing to other operators and parameters...as well as making it clearer that an assigment to variable was taking place.</p>
<p>Unfortunately, with the one-unit-of-lookahead workings, you could not write <strong>variable: next me</strong>.  Even if it <em>could</em> work, moving away from being right next to the SET-WORD! makes it even less obvious what that means.</p>
<p>So MY was an attempt to do a similar thing for functions that were not enfix.  You could rewrite <strong>block: next block</strong> as <strong>block: my next</strong></p>
<p>That's pretty cool.  Though as binding gets hammered through, I got to wondering if it had a higher calling in binding...for letting you propagate bindings on SET-WORD!s on the left to blocks and functions.  That gave me the idea for <strong>my func</strong> being a general replacement for METHOD, and things like <strong>x: my block</strong> would act like <strong>x: in (binding of x) block</strong></p>
<p>But these are two completely different things.  So they can't have the same name...</p>
<h2>Alternatives For "Old MY"</h2>
<p>Let's look back at it:</p>
<pre><code>block: ??? next  -&gt; block: next block
</code></pre>
<p>We could ignore the linguistic problem and say ME just works with anything.  <strong>block: me next</strong>  It's kind of incohrent, though consistent.</p>
<p>There's <strong>block: be next</strong>.  Strange, and kind of works there ("hey block. be (your) next value")  I don't know quite how it generalizes across other words you might use it with.  <strong>block: be append 10</strong></p>
<p>I'm fairly used to MY for this, and the closeness to ME makes it feel right.  Looking at it more closely, it seems unwise to change it.</p>
<h2>Alternatives For "New MY"</h2>
<p>If old MY was hard to understand, the new MY is even weirder...saying that it's going to swipe the <em>binding</em> off the SET-WORD! on the left, and move it over to the right.</p>
<p>There's HAS...</p>
<pre><code> obj: make/bind-set-words-only object! [  ; imagine something like this exists
     x: 10
     block: has [x + 1] 
     action: has func [y] [x + y]
 ]
</code></pre>
<p>It's strange.  But when you're talking about trying to communicate bindings at a mechanical level, the options are limited.</p>
<p>Also unclear is how this would work on PATH!.  ME and old MY were only interested in the value, and there's a way to get that out of a path.  But if you have something like <strong>x/y/z</strong> and Y is an object, how do you extract that object?  :-/</p>
<p>I've hypothesized a bit about <a href="https://forum.rebol.info/t/breaking-make-object-into-component-operations/1442/3">quoting vs. JUST</a> being a way of ducking the virtual bind.</p>
<pre><code> x: 20
 obj: make object! [  ; imagine something like this exists
     x: 10
     block1: '[x + 1]  ; escaped, would get the x=20 binding
     block2: just [x + 1]  ; no quote hence no escape, gets x=10 binding
     action: func [y] '[x + y]  ; you could exempt bodies from binding here
 ]
</code></pre>
<p>Soft-quoted branching and other constructs that subvert the evaluator mix this up a bit.  But if you're having to worry about <strong>'(a + b)</strong> vs. <strong>just (a + b)</strong> being different meanings for binding, then you'd just have to kick in that awareness and not use <strong>if true '[a]</strong> if you wanted the binding, and use <strong>if true [[a]]</strong> instead.</p>
<p>The HAS could still fit in, where <strong>has func</strong> replaces the derived binding mechanics of METHOD.</p>
<h2>Um...</h2>
<p>I think all I've really done here is talk myself into leaving MY as-is, realized that the variant (which I'll call HAS for now) which gets bindings from the left would need new mechanics for PATH!... and I've gotten myself thinking more about the "quoting subverts virtual binding idea."</p>
          <p><a href="https://forum.rebol.info/t/my-my-my/1486/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/my-my-my/1486/1</link>
        <pubDate>Mon, 01 Feb 2021 17:25:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1486-1</guid>
        <source url="https://forum.rebol.info/t/my-my-my/1486.rss">MY, MY, MY</source>
      </item>
  </channel>
</rss>

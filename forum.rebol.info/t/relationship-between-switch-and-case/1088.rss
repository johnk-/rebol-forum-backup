<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Relationship between SWITCH and CASE</title>
    <link>https://forum.rebol.info/t/relationship-between-switch-and-case/1088</link>
    <description>Over time, the code for SWITCH and CASE has become more similar...notably when [evaluative SWITCH](http://forum.rebol.info/t/facing-the-facts-switch-must-evaluate-clauses/603) was introduced.

One thing that&#39;s not similar about them is that case works in pairs, while SWITCH seeks out BLOCK! specifically to execute.  This permits writing things like:

    switch type of value [
        word! [print &quot;Word&quot;]
        binary! text! [print &quot;Either binary or text&quot;]
        ...
    ]

    switch port/verb [
        &#39;closed [print &quot;closed&quot;]
        &#39;wrote &#39;read [print &quot;data transferred...&quot;]
        ...
    ]

It&#39;s nice and kind of C inspired, where `case` labels in a `switch` can fall through to each other.  But it becomes a bit inconsistent...you can&#39;t use ACTION! or QUOTED! branches as you can in other conditionals.  And CASE and SWITCH can&#39;t share (much) code.

As a thought experiment, though...if we went with strict pairing with predicates, we might have another way of saying this:

     switch value .matches [
         word! [print &quot;Word&quot;]     
         [binary! integer!] [print &quot;Binary or integer&quot;]
         ...
    ]

That would imply that SWITCH and CASE could be powered by the same native.  It&#39;s just that SWITCH would be taking a predicate with two arguments and specializing it down to a function with just one argument to run as the CASE&#39;s predicate.

## Problem 1 (generally of MATCH with SWITCH): DEFAULT

Unfortunately this tampers with the DEFAULT trick.  Right now, MATCHES quotes its right hand side literally...it wants to see the number of lit marks on a type so that `&#39;word!` matches quoted words, so **match &#39;word! first [&#39;x]** is true.  But if it quotes the cases inside the switch, it would quote DEFAULT also.

This might suggest that MATCH is getting too carried away with its quoting shenanigans, and you should have to say **match [&#39;word!] first [&#39;x]** or **match quote word! first x** (or **match &#39;&#39;word! first x** if you are sure your readers would know what you&#39;re doing).  And maybe **quote-word!** or **q-word!** should be a type for good measure.  *(I&#39;ve explained why LIT is a bad name.)*

## Problem 2: no operator for &quot;in block or standalone&quot;

We don&#39;t really have an operator like **is-member-of** where **5 is-member-of [5 6]** is true, and **5 is-member-of 5** is also true.  Such a thing would be needed for that second case:

     switch port/verb .is-member-of [
        &#39;closed [print &quot;closed&quot;]
        [wrote read] [print &quot;data transferred...&quot;]
        ...
    ]

It&#39;s a need that comes up fairly often, and when it does people usually make a block out of single items and then search the block.

## So not going to replace SWITCH, but a useful pattern

Seeing that specialization and predicates on CASE can make a switch-like thing is important to note.</description>
    
    <lastBuildDate>Tue, 26 Feb 2019 10:31:28 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/relationship-between-switch-and-case/1088.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Relationship between SWITCH and CASE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Over time, the code for SWITCH and CASE has become more similar...notably when <a href="//forum.rebol.info/t/facing-the-facts-switch-must-evaluate-clauses/603">evaluative SWITCH</a> was introduced.</p>
<p>One thing that's not similar about them is that case works in pairs, while SWITCH seeks out BLOCK! specifically to execute.  This permits writing things like:</p>
<pre><code>switch type of value [
    word! [print "Word"]
    binary! text! [print "Either binary or text"]
    ...
]

switch port/verb [
    'closed [print "closed"]
    'wrote 'read [print "data transferred..."]
    ...
]
</code></pre>
<p>It's nice and kind of C inspired, where <code>case</code> labels in a <code>switch</code> can fall through to each other.  But it becomes a bit inconsistent...you can't use ACTION! or QUOTED! branches as you can in other conditionals.  And CASE and SWITCH can't share (much) code.</p>
<p>As a thought experiment, though...if we went with strict pairing with predicates, we might have another way of saying this:</p>
<pre><code> switch value .matches [
     word! [print "Word"]     
     [binary! integer!] [print "Binary or integer"]
     ...
]
</code></pre>
<p>That would imply that SWITCH and CASE could be powered by the same native.  It's just that SWITCH would be taking a predicate with two arguments and specializing it down to a function with just one argument to run as the CASE's predicate.</p>
<h2>Problem 1 (generally of MATCH with SWITCH): DEFAULT</h2>
<p>Unfortunately this tampers with the DEFAULT trick.  Right now, MATCHES quotes its right hand side literally...it wants to see the number of lit marks on a type so that <code>'word!</code> matches quoted words, so <strong>match 'word! first ['x]</strong> is true.  But if it quotes the cases inside the switch, it would quote DEFAULT also.</p>
<p>This might suggest that MATCH is getting too carried away with its quoting shenanigans, and you should have to say <strong>match ['word!] first ['x]</strong> or <strong>match quote word! first x</strong> (or <strong>match ''word! first x</strong> if you are sure your readers would know what you're doing).  And maybe <strong>quote-word!</strong> or <strong>q-word!</strong> should be a type for good measure.  <em>(I've explained why LIT is a bad name.)</em></p>
<h2>Problem 2: no operator for "in block or standalone"</h2>
<p>We don't really have an operator like <strong>is-member-of</strong> where <strong>5 is-member-of [5 6]</strong> is true, and <strong>5 is-member-of 5</strong> is also true.  Such a thing would be needed for that second case:</p>
<pre><code> switch port/verb .is-member-of [
    'closed [print "closed"]
    [wrote read] [print "data transferred..."]
    ...
]
</code></pre>
<p>It's a need that comes up fairly often, and when it does people usually make a block out of single items and then search the block.</p>
<h2>So not going to replace SWITCH, but a useful pattern</h2>
<p>Seeing that specialization and predicates on CASE can make a switch-like thing is important to note.</p>
          <p><a href="https://forum.rebol.info/t/relationship-between-switch-and-case/1088/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/relationship-between-switch-and-case/1088/1</link>
        <pubDate>Tue, 26 Feb 2019 10:31:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1088-1</guid>
        <source url="https://forum.rebol.info/t/relationship-between-switch-and-case/1088.rss">Relationship between SWITCH and CASE</source>
      </item>
  </channel>
</rss>

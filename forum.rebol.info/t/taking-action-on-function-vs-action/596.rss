<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Taking ACTION! on &quot;Function vs. Action&quot;</title>
    <link>https://forum.rebol.info/t/taking-action-on-function-vs-action/596</link>
    <description>The very noun-sounding FUNCTION is an active generator, whose word sounds like it should be the name for a variable holding a type of its value:

    block: [This is a block!]
    string: {This is a string!}
    function: :append ;-- this is a FUNCTION!, but...
                      ;-- ...now I can&#39;t use FUNCTION to declare another!

Some have said users would have a better mental model of the generation process if it were MAKE FUNCTION! (or MAKE-FUNCTION, or FUNCTIONALIZE, or FUNCTIONIFY, or `[x [integer!]] =&gt; [x + 1]`), or ....

But plain old FUNCTION being a generator is rather entrenched, and there&#39;s problems with pretty much any suggestion for changing it.  While things like `=&gt;` are good for lambdas, that&#39;s not as readable as prefix for top level declarations.  The only one I could see liking would be `make function!` but that opens huge cans of worms.

What *could* change, easily, is the datatype name.  Because Ren-C made the important change known-up-to-now as &quot;OneFunction&quot;, it freed up all the words for the old subclasses (NATIVE!, ACTION!, ROUTINE!, OP!).  So...

**What if the &quot;OneFunction&quot; FUNCTION! were just called ACTION! instead?**

I already approximate this with `action [function!]` on many parameters, just to avoid tripping over the name `function`, or using an ugly abbreviation like `f`, and `func` is taken too (so even `fun` feels sketchy).

One can argue that since FUNCTION! doesn&#39;t guarantee it acts like a &quot;mathematical function&quot; anyway, that the less-loaded term could be better.  It is more comprehensible, I think, to say *&quot;FUNCTION is an ACTION!, whose purpose is to generate another ACTION!...&quot;*  It&#39;s a shorter word.  It still has &quot;tion&quot; in it.  :-)

Backwards compatibility wouldn&#39;t be that hard, as that&#39;s just **function!: :action!**.  To the casual user, the difference would be that all the native interfaces would call generic function parameters `action [action!]` (unless it were something like `comparator [action!]`)...and `type of` would visibly tell them they had an ACTION!.

Seeing an apply-able value come back as ACTION! would be no big shock to Rebol2 or Red users.  Their main confusion was probably before things like &quot;hey, why did I say my argument could be a FUNCTION! but I can&#39;t pass APPEND to it...&quot;   Now it would just be &quot;well, everything is an action!&quot;.

It&#39;s not a huge change, and it&#39;s been on the table for a while now.  But no new information has come to light since the idea first appeared, around the time of OneFunction.  We know more or less everything we are going to know about this.

**What do people think?  Is saying Rebol runs ACTIONS in CONTEXTS good, or bad?**

The biggest area this probably affects is the interpreter source itself, where there&#39;s tons of references to `fun` or `VAL_FUNC` or `FUNC_NUM_PARAMS`.  I&#39;ve held off on some updates to those, which fitting patterns of other types these days would look more like:

    REBCTX *ctx = VAL_CONTEXT(...); // full word used for main extractor
    int n = CTX_NUM_VARS(ctx); // abbreviation used for sub-extractions

    REBFUN *fun = VAL_FUNCTION(...); // ...so this should match up
    int n = FUN_NUM_PARAMS(fun); // ...and so should this

FWIW: My main reluctance on this comes from feeling like the interpreter source wouldn&#39;t read as well:

    REBACT *act = VAL_ACTION(...);
    int n = ACT_NUM_PARAMS(act);

Though historically, such things start seeming normal pretty quickly.  For instance: I thought CTX was too &quot;ugly&quot; an abbreviation compared to REBCON, but I now think it&#39;s &quot;obviously better&quot;.

It would also help distinguish between C functions (CFUNC) and Rebol actions...which would add value.

**Or am I wrong, is there still some un-thought-of suggestion or issue to be discussed here?  Can we commit to a decision now, or not!?**</description>
    
    <lastBuildDate>Fri, 27 Apr 2018 15:51:57 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/taking-action-on-function-vs-action/596.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Taking ACTION! on &quot;Function vs. Action&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Note that Red/Rebol2/R3-Alpha say the following:</p>
<pre><code>&gt;&gt; function? :append
== false ;-- wait, what?!

&gt;&gt; type? :append
== action! ;-- er... that's not exactly... clarifying
</code></pre>
<p>Making <code>action?</code> work for all Rebol-invokable-things has the advantages I list.  Quick re-summary:</p>
<ul>
<li>Has existing precedent as a word used to describe invokable things.</li>
<li>Shorter name than FUNCTION!</li>
<li>Helps disambiguate in the interpreter source itself, that if a variable holds a "function" you're talking about C executable code, and if you're holding an "action" you're talking about Rebol executable code.</li>
<li>
<em>"Rebol: Actions in Contexts"</em> sounds differentiating...as opposed to <em>"Rebol: Functions in Objects"</em> which does not really command much attention.</li>
<li>Less loaded term than function, which has a more strict mathematical meaning, regarding consistency of same output for same inputs...no side effects...etc.</li>
</ul>
<p>And of course, the reason that motivated it all: you can call a variable <code>action</code> to hold an <code>action!</code> without destroying the ability to make new ones, the way making a variable <code>function</code> to hold a <code>function!</code> would.</p>
<p><strong>So I'm going to change "OneFunction" to be OneAction.  The list of PROs is long, there aren't many cons (considering that historically was <code>(function? :append) = false</code>, it can't be considered a "step backwards" in any way).  I've long known it's better than FUNCTION!, my only worry has been that some other idea or paradigm is even better, which has made me hold off.  But waiting longer has ceased to make sense.</strong></p>
          <p><a href="https://forum.rebol.info/t/taking-action-on-function-vs-action/596/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/taking-action-on-function-vs-action/596/2</link>
        <pubDate>Fri, 27 Apr 2018 15:51:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-596-2</guid>
        <source url="https://forum.rebol.info/t/taking-action-on-function-vs-action/596.rss">Taking ACTION! on &quot;Function vs. Action&quot;</source>
      </item>
      <item>
        <title>Taking ACTION! on &quot;Function vs. Action&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The very noun-sounding FUNCTION is an active generator, whose word sounds like it should be the name for a variable holding a type of its value:</p>
<pre><code>block: [This is a block!]
string: {This is a string!}
function: :append ;-- this is a FUNCTION!, but...
                  ;-- ...now I can't use FUNCTION to declare another!
</code></pre>
<p>Some have said users would have a better mental model of the generation process if it were MAKE FUNCTION! (or MAKE-FUNCTION, or FUNCTIONALIZE, or FUNCTIONIFY, or <code>[x [integer!]] =&gt; [x + 1]</code>), or ....</p>
<p>But plain old FUNCTION being a generator is rather entrenched, and there's problems with pretty much any suggestion for changing it.  While things like <code>=&gt;</code> are good for lambdas, that's not as readable as prefix for top level declarations.  The only one I could see liking would be <code>make function!</code> but that opens huge cans of worms.</p>
<p>What <em>could</em> change, easily, is the datatype name.  Because Ren-C made the important change known-up-to-now as "OneFunction", it freed up all the words for the old subclasses (NATIVE!, ACTION!, ROUTINE!, OP!).  So...</p>
<p><strong>What if the "OneFunction" FUNCTION! were just called ACTION! instead?</strong></p>
<p>I already approximate this with <code>action [function!]</code> on many parameters, just to avoid tripping over the name <code>function</code>, or using an ugly abbreviation like <code>f</code>, and <code>func</code> is taken too (so even <code>fun</code> feels sketchy).</p>
<p>One can argue that since FUNCTION! doesn't guarantee it acts like a "mathematical function" anyway, that the less-loaded term could be better.  It is more comprehensible, I think, to say <em>"FUNCTION is an ACTION!, whose purpose is to generate another ACTION!..."</em>  It's a shorter word.  It still has "tion" in it.  <img src="//forum.rebol.info/images/emoji/twitter/slight_smile.png?v=7" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Backwards compatibility wouldn't be that hard, as that's just <strong>function!: :action!</strong>.  To the casual user, the difference would be that all the native interfaces would call generic function parameters <code>action [action!]</code> (unless it were something like <code>comparator [action!]</code>)...and <code>type of</code> would visibly tell them they had an ACTION!.</p>
<p>Seeing an apply-able value come back as ACTION! would be no big shock to Rebol2 or Red users.  Their main confusion was probably before things like "hey, why did I say my argument could be a FUNCTION! but I can't pass APPEND to it..."   Now it would just be "well, everything is an action!".</p>
<p>It's not a huge change, and it's been on the table for a while now.  But no new information has come to light since the idea first appeared, around the time of OneFunction.  We know more or less everything we are going to know about this.</p>
<p><strong>What do people think?  Is saying Rebol runs ACTIONS in CONTEXTS good, or bad?</strong></p>
<p>The biggest area this probably affects is the interpreter source itself, where there's tons of references to <code>fun</code> or <code>VAL_FUNC</code> or <code>FUNC_NUM_PARAMS</code>.  I've held off on some updates to those, which fitting patterns of other types these days would look more like:</p>
<pre><code>REBCTX *ctx = VAL_CONTEXT(...); // full word used for main extractor
int n = CTX_NUM_VARS(ctx); // abbreviation used for sub-extractions

REBFUN *fun = VAL_FUNCTION(...); // ...so this should match up
int n = FUN_NUM_PARAMS(fun); // ...and so should this
</code></pre>
<p>FWIW: My main reluctance on this comes from feeling like the interpreter source wouldn't read as well:</p>
<pre><code>REBACT *act = VAL_ACTION(...);
int n = ACT_NUM_PARAMS(act);
</code></pre>
<p>Though historically, such things start seeming normal pretty quickly.  For instance: I thought CTX was too "ugly" an abbreviation compared to REBCON, but I now think it's "obviously better".</p>
<p>It would also help distinguish between C functions (CFUNC) and Rebol actions...which would add value.</p>
<p><strong>Or am I wrong, is there still some un-thought-of suggestion or issue to be discussed here?  Can we commit to a decision now, or not!?</strong></p>
          <p><a href="https://forum.rebol.info/t/taking-action-on-function-vs-action/596/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/taking-action-on-function-vs-action/596/1</link>
        <pubDate>Thu, 26 Apr 2018 07:03:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-596-1</guid>
        <source url="https://forum.rebol.info/t/taking-action-on-function-vs-action/596.rss">Taking ACTION! on &quot;Function vs. Action&quot;</source>
      </item>
  </channel>
</rss>

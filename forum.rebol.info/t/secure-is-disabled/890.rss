<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>&quot;SECURE is disabled&quot;...?</title>
    <link>https://forum.rebol.info/t/secure-is-disabled/890</link>
    <description>Rebol2 had a useful feature of layering on top of the OS&#39;s traditional file permissions model, with an extra set of permissions that apps were allowed to have.  A script couldn&#39;t necessarily assume it could delete files just because the account that ran it had privileges to do so.  This was configured via the SECURE function, and it also had command-line switches.

R3-Alpha attempted to push a certain amount of the SECURE dialect into usermode.  [Carl wrote about the motivation](http://www.rebol.net/r3blogs/0197.html), saying the usermode function was *&quot;about a page of source code. One of the largest functions in REBOL&quot;*

[https://github.com/rebol/rebol/blob/master/src/mezz/mezz-secure.r](https://github.com/rebol/rebol/blob/master/src/mezz/mezz-secure.r)

But the infamous &quot;SECURE is disabled&quot; message is there because it wasn&#39;t ready.  R3-Alpha was released with the SECURE function overwritten [with a no-op during boot](https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/mezz/base-funcs.r#L122).

## I think it&#39;s time to mothball it, for now

I&#39;m a huge fan of the [principle of least privilege](https://en.wikipedia.org/wiki/Principle_of_least_privilege), and have always advocated for these kinds of features in OSes...long before I&#39;d seen Rebol.  So I&#39;d not deleted it because it seemed like food for thought...serving as a reminder of the issue.  (*&quot;Before one does some kind of thing you might think privilege escalation would be necessary for, there might should be a call to Check_Security()...&quot;*)

But I&#39;m going to strike it for now, here are some reasons:

* The feature was unfinished and there&#39;s no time to work on it.  There&#39;s really not much code there at all (such as there is no facility for asking you to escalate the privileges.) 

* I don&#39;t know what level of testing it ever received for making sure people aren&#39;t doing weird things with non-canonized file paths to get around any limits you tried to set.  (e.g. &quot;You can&#39;t access %/c/foo/* but you can write to %/c/bar/*, so you write to %/c/bar/../foo/hack.exe&quot;)

* On that point, it&#39;s extremely difficult to get security right, and using a term like &quot;SECURE&quot; runs the risk of looking amateurish.  Especially when it&#39;s a bunch of commented out code that no one has run.  And Rebol has a lot to answer for as far as security goes.  *(See the [&quot;Philosophy of Security in Rebol&quot;](https://forum.rebol.info/t/the-philosophy-of-security-in-rebol/172) if you want to chime in on that.)*  Launching a feature with such a name carries along with it the suggestion of a lot of development and testing that there is no developers or testers chomping at the bit to volunteer time for.

* If you&#39;re just trying to help people avoid shooting themselves in the foot, there are some completely-usermode ways of tackling this kind of thing today in Ren-C, using function compositions and HIJACK.  You can create a screened version of READ or WRITE or GET-ENV and expose that with creative limits that the SECURE dialect wasn&#39;t going to implement (e.g. only allow reading from certain URLs with a given throttle rate, or between certain hours).  Ren-C is trying to address *these* kinds of modifications and the binding/isolation that would make it work, vs. try and box in a feature that any other language might be able to offer just as easily.

* Every OS (or browser) is tackling privileges as they apply to its own domain.  While the SECURE of R3-Alpha&#39;s era may have only needed to think about integrating with a filesystem privilege model, designing a truly holistic cross-platform security dialect is probably a pretty big task.  A concept based on the idea of bit-masks in tuples would need revisiting to mesh with modern systems (and I think TUPLE! needs serious review as a type and use of periods)

* Pretty much all the calls are in code that&#39;s slated for replacement, and they kind of just complicate the picture with extra parameters.  It&#39;s illusory that shuffling the commentary-code-that-doesn&#39;t-run with the parameters-that-aren&#39;t-used does any good in bringing about a better design.  The only thing that brings about better designs is sitting down and actually thinking them all the way through.

## But mainly, it&#39;s a tangent there&#39;s no time for...

It&#39;s hard to argue that Rebol has specific relevance to this problem area moreso than any other language does.  Really, it&#39;s trying to take on what should be the OS&#39;s job.  Because if an OS in this day and age doesn&#39;t do this kind of thing, what *is* it doing?

*(Where the OS sadly lacks, third-party apps or tools can pick up the slack.  One particularly good one UI-wise for Mac as far as the network goes I once used was [Little Snitch](https://www.obdev.at/products/littlesnitch/index.html).  That doesn&#39;t help with things internal to the interpreter like having privilege to use debug routines...but can pick up some of the slack if it&#39;s really an issue, and likely do a better job of sandboxing all angles of access--e.g. calls through DLLs that aren&#39;t beholden to making Check_Security() calls inside the r3.exe)*

This isn&#39;t a priority item for getting to a &quot;Minimum Viable Product&quot; *(a term the WebAssembly people keep using)*.  No one is not using the system because this feature isn&#39;t there, and no one would start using it merely because it was.  It&#39;s a &quot;nice-to-have&quot; feature that would need significant design and testing cycles that aren&#39;t available.

So in the interest of clearing the air and making sure all the code in the system that&#39;s there has a reasonable reason to be there, it goes.  Since no development has happened on it, the R3-Alpha GitHub snapshot is as good a place as any for someone who thinks that&#39;s the place to start looking into this...</description>
    
    <lastBuildDate>Fri, 11 Dec 2020 16:28:05 +0000</lastBuildDate>
    <category>Ports</category>
    <atom:link href="https://forum.rebol.info/t/secure-is-disabled/890.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>&quot;SECURE is disabled&quot;...?</title>
        <dc:creator><![CDATA[LkpPo]]></dc:creator>
        <description><![CDATA[
            <p>Right thing to do! You can always get the previous code and rethink the feature later, but I have the same idea that it's an OS feature, not a language thing.</p>
          <p><a href="https://forum.rebol.info/t/secure-is-disabled/890/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/secure-is-disabled/890/4</link>
        <pubDate>Fri, 11 Dec 2020 16:28:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-890-4</guid>
        <source url="https://forum.rebol.info/t/secure-is-disabled/890.rss">&quot;SECURE is disabled&quot;...?</source>
      </item>
      <item>
        <title>&quot;SECURE is disabled&quot;...?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="890">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But the infamous "SECURE is disabled" message is there because it wasn't ready. R3-Alpha was released with the SECURE function overwritten <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/mezz/base-funcs.r#L122">with a no-op during boot</a>.</p>
<p><strong>I think it's time to mothball it, for now</strong></p>
</blockquote>
</aside>
<p>So, uh two years after saying that, and that <em>"hey, this is an OS design issue more than specifically a language design issue"</em>, I've finally bit the bullet and dropped SECURE.  I'll point out also that Red hasn't chosen to focus on this either.</p>
<p>For anyone looking for the commit that dropped it, it's <a href="https://github.com/metaeducation/ren-c/commit/83af43714b8f07dc149551cdc5d6b8f855df0347">83af437</a></p>
<p>Per <a href="https://forum.rebol.info/t/leveraging-other-programming-languages-to-make-a-compiled-renc/1420/3">@LkpPo's sentiments</a>, there has to be an inventory and study for a minimum viable product.  There's almost no clearer example than this... of where "if we can't let some good-sounding ideas go, we'll be doomed to not finish more germane features that are in reach".</p>
          <p><a href="https://forum.rebol.info/t/secure-is-disabled/890/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/secure-is-disabled/890/3</link>
        <pubDate>Fri, 11 Dec 2020 07:33:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-890-3</guid>
        <source url="https://forum.rebol.info/t/secure-is-disabled/890.rss">&quot;SECURE is disabled&quot;...?</source>
      </item>
      <item>
        <title>&quot;SECURE is disabled&quot;...?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h2>There's one potential counterpoint to this...</h2>
<p>The implementation of SECURE does one interesting thing that is particularly Rebol-ish.</p>
<p>What it does is it tweaks around values inside a <code>system/state</code> object to reflect the privileges.  These values are visible to the C code because it has access to everything.</p>
<p>However, SECURE uses the PROTECT/HIDE facility to hide the state at boot time.  The idea behind this is to prevent rogue Rebol code from elevating its privileges by poking at the state.</p>
<p>In this sense, the feature seeks to test PROTECT/HIDE's ability to kind of roll-your-own binding-based security model.  This was a fairly speculative thing in R3-Alpha, but something I had thought was kind of cool...with privileges on unprotecting and hiding being in the mix.  It reminded me of <a href="https://en.wikipedia.org/wiki/Nomic" rel="nofollow noopener">the game of Nomic</a>.</p>
<p>But so long as we're talking about features that weren't really planned all the way through, hiding members of contexts is one of them.  So this brings another angle of review.  I'll look at it a bit.</p>
          <p><a href="https://forum.rebol.info/t/secure-is-disabled/890/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/secure-is-disabled/890/2</link>
        <pubDate>Sun, 04 Nov 2018 11:29:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-890-2</guid>
        <source url="https://forum.rebol.info/t/secure-is-disabled/890.rss">&quot;SECURE is disabled&quot;...?</source>
      </item>
      <item>
        <title>&quot;SECURE is disabled&quot;...?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Rebol2 had a useful feature of layering on top of the OS's traditional file permissions model, with an extra set of permissions that apps were allowed to have.  A script couldn't necessarily assume it could delete files just because the account that ran it had privileges to do so.  This was configured via the SECURE function, and it also had command-line switches.</p>
<p>R3-Alpha attempted to push a certain amount of the SECURE dialect into usermode.  <a href="http://www.rebol.net/r3blogs/0197.html" rel="nofollow noopener">Carl wrote about the motivation</a>, saying the usermode function was <em>"about a page of source code. One of the largest functions in REBOL"</em></p>
<p><a href="https://github.com/rebol/rebol/blob/master/src/mezz/mezz-secure.r" rel="nofollow noopener">https://github.com/rebol/rebol/blob/master/src/mezz/mezz-secure.r</a></p>
<p>But the infamous "SECURE is disabled" message is there because it wasn't ready.  R3-Alpha was released with the SECURE function overwritten <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/mezz/base-funcs.r#L122" rel="nofollow noopener">with a no-op during boot</a>.</p>
<h2>I think it's time to mothball it, for now</h2>
<p>I'm a huge fan of the <a href="https://en.wikipedia.org/wiki/Principle_of_least_privilege" rel="nofollow noopener">principle of least privilege</a>, and have always advocated for these kinds of features in OSes...long before I'd seen Rebol.  So I'd not deleted it because it seemed like food for thought...serving as a reminder of the issue.  (<em>"Before one does some kind of thing you might think privilege escalation would be necessary for, there might should be a call to Check_Security()..."</em>)</p>
<p>But I'm going to strike it for now, here are some reasons:</p>
<ul>
<li>
<p>The feature was unfinished and there's no time to work on it.  There's really not much code there at all (such as there is no facility for asking you to escalate the privileges.)</p>
</li>
<li>
<p>I don't know what level of testing it ever received for making sure people aren't doing weird things with non-canonized file paths to get around any limits you tried to set.  (e.g. "You can't access %/c/foo/* but you can write to %/c/bar/*, so you write to %/c/bar/../foo/hack.exe")</p>
</li>
<li>
<p>On that point, it's extremely difficult to get security right, and using a term like "SECURE" runs the risk of looking amateurish.  Especially when it's a bunch of commented out code that no one has run.  And Rebol has a lot to answer for as far as security goes.  <em>(See the <a href="https://forum.rebol.info/t/the-philosophy-of-security-in-rebol/172">"Philosophy of Security in Rebol"</a> if you want to chime in on that.)</em>  Launching a feature with such a name carries along with it the suggestion of a lot of development and testing that there is no developers or testers chomping at the bit to volunteer time for.</p>
</li>
<li>
<p>If you're just trying to help people avoid shooting themselves in the foot, there are some completely-usermode ways of tackling this kind of thing today in Ren-C, using function compositions and HIJACK.  You can create a screened version of READ or WRITE or GET-ENV and expose that with creative limits that the SECURE dialect wasn't going to implement (e.g. only allow reading from certain URLs with a given throttle rate, or between certain hours).  Ren-C is trying to address <em>these</em> kinds of modifications and the binding/isolation that would make it work, vs. try and box in a feature that any other language might be able to offer just as easily.</p>
</li>
<li>
<p>Every OS (or browser) is tackling privileges as they apply to its own domain.  While the SECURE of R3-Alpha's era may have only needed to think about integrating with a filesystem privilege model, designing a truly holistic cross-platform security dialect is probably a pretty big task.  A concept based on the idea of bit-masks in tuples would need revisiting to mesh with modern systems (and I think TUPLE! needs serious review as a type and use of periods)</p>
</li>
<li>
<p>Pretty much all the calls are in code that's slated for replacement, and they kind of just complicate the picture with extra parameters.  It's illusory that shuffling the commentary-code-that-doesn't-run with the parameters-that-aren't-used does any good in bringing about a better design.  The only thing that brings about better designs is sitting down and actually thinking them all the way through.</p>
</li>
</ul>
<h2>But mainly, it's a tangent there's no time for...</h2>
<p>It's hard to argue that Rebol has specific relevance to this problem area moreso than any other language does.  Really, it's trying to take on what should be the OS's job.  Because if an OS in this day and age doesn't do this kind of thing, what <em>is</em> it doing?</p>
<p><em>(Where the OS sadly lacks, third-party apps or tools can pick up the slack.  One particularly good one UI-wise for Mac as far as the network goes I once used was <a href="https://www.obdev.at/products/littlesnitch/index.html" rel="nofollow noopener">Little Snitch</a>.  That doesn't help with things internal to the interpreter like having privilege to use debug routines...but can pick up some of the slack if it's really an issue, and likely do a better job of sandboxing all angles of access--e.g. calls through DLLs that aren't beholden to making Check_Security() calls inside the r3.exe)</em></p>
<p>This isn't a priority item for getting to a "Minimum Viable Product" <em>(a term the WebAssembly people keep using)</em>.  No one is not using the system because this feature isn't there, and no one would start using it merely because it was.  It's a "nice-to-have" feature that would need significant design and testing cycles that aren't available.</p>
<p>So in the interest of clearing the air and making sure all the code in the system that's there has a reasonable reason to be there, it goes.  Since no development has happened on it, the R3-Alpha GitHub snapshot is as good a place as any for someone who thinks that's the place to start looking into this...</p>
          <p><a href="https://forum.rebol.info/t/secure-is-disabled/890/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/secure-is-disabled/890/1</link>
        <pubDate>Sun, 04 Nov 2018 10:04:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-890-1</guid>
        <source url="https://forum.rebol.info/t/secure-is-disabled/890.rss">&quot;SECURE is disabled&quot;...?</source>
      </item>
  </channel>
</rss>

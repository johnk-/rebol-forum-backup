<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>salotz (Samuel)</title>
    <link>https://forum.rebol.info/t/salotz-samuel/1287</link>
    <description>I am a PhD student in Biochemistry at Michigan State for the time being, but basically my role is data scientist and software engineer. I am primarily in python because it is easy to get started and the data science libraries and support and adoption in academia/research is huge.

Interested in rebol for a variety of reasons, but primarily interested in solving problems related to what I like to call &quot;exploratory&quot; programming. Structured software engineering is a well covered topic but doesn&#39;t really help with what a data scientist does on a daily basis which is trying new things and iteratively building those into a real processing pipeline which may not have a very long lifetime but can still be overburdened with complexity. The intuition for what I mean is anything that you would either write a slew of unportable bash scripts with really long and overly specific names or maybe Jupyter notebooks or Mathematica. In my experience &quot;scripting&quot; (i.e. the UNIX tradition of bash, sed, awk, perl and other treacherous demons) OS facilities like filesystems and process management is the weakest link in the data scientist&#39;s toolbox, which has led to solutions like Jupyter and DataBricks. Which are unusable in a number of other ways. The block orientation of rebol IMO is the proper foundation for making this kind of work tractable and maybe even comfortable. My long term goal would be to use rebol as a document container format (replaces e.g. a &quot;notebook&quot; or filesystem &quot;schema&quot;) that also allows for creation and orchestration of pipelines of blocks. Sort of like &quot;literate programming&quot; but the literate part is also programmable.

I am going to do a write up with real examples of where I think rebol could help; drawing from my personal emacs org-mode notebooks and project folders I use for doing my PhD work.  Let me know if you are interested and it might come sooner.

Currently other interests include sane system configuration management (Nix, Guix, Genode), object capabilities systems for collaborative programming (Genode and Monte), language-oriented programming (rebol and racket), programming/operating assistants as I like to call them (e.g. emacs, DrRacket, Dark language, McCLIM), solid-state computers (e.g. Urbit and Smalltalk) and probabilistic programming. I&#39;m also pretty interested in using Nim, if I can get over not having the python libraries, ReasonML, and Clojure for doing &quot;real work&quot;.</description>
    
    <lastBuildDate>Tue, 12 Nov 2019 14:21:07 +0000</lastBuildDate>
    <category>Introductions</category>
    <atom:link href="https://forum.rebol.info/t/salotz-samuel/1287.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>salotz (Samuel)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="16" data-topic="197">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/salotz/40/244_2.png" class="avatar"> salotz:</div>
<blockquote>
<p>there is diminishing returns on how much impact you can contribute. Especially when you are not devout and not raised from a young age to worship the lambda god.</p>
</blockquote>
</aside>
<p>Yes, I hate to say it but that is one of the reasons I feel a bit reticent to be involved... not sure how much an impact I can make on something that is so heavily studied by academics.  Whereas with Rebol, it's this big open space where I keep finding uncharted territory.  One feels one can <em>invent</em>.</p>
<p>I'm still trying to cover ground in theory, check out this sibling tail call recursion for instance <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">  I've been bringing a lot of this kind of stuff to the table, and function composition is getting progressively stronger too...</p>
<aside class="onebox githubblob">
  <header class="source">
      <a href="https://github.com/metaeducation/ren-c/blob/f20ac1f8f562e1a8ea9b038789976a39d99a9f7e/tests/functions/redo.test.reb#L110" target="_blank" rel="nofollow noopener">github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://github.com/metaeducation/ren-c/blob/f20ac1f8f562e1a8ea9b038789976a39d99a9f7e/tests/functions/redo.test.reb#L110" target="_blank" rel="nofollow noopener">metaeducation/ren-c/blob/f20ac1f8f562e1a8ea9b038789976a39d99a9f7e/tests/functions/redo.test.reb#L110</a></h4>
<pre class="onebox"><code class="lang-reb"><ol class="start lines" start="100" style="counter-reset: li-counter 99 ;">
<li>        comment {</li>
<li>            Fall through to inner</li>
<li>            It is running in the same frame's memory, but...</li>
<li>            CAPURED-FRAME is a FRAME! value that stowed outer's "phase"</li>
<li>        }</li>
<li>    ]</li>
<li>
</li>
<li>    &lt;success&gt; = outer 1</li>
<li>)</li>
<li>
</li>
<li class="selected">; "Sibling" tail-call with compatible function</li>
<li>;</li>
<li>; (CHAINs are compatible with functions at head of CHAIN</li>
<li>;  ADAPTs are compatible with functions they adapt</li>
<li>;  SPECIALIZEs are compatible with functions they specialize...etc.)</li>
<li>;</li>
<li>; If LOG is set to DUMP the following will output:</li>
<li>;</li>
<li>;     --- C ---</li>
<li>;     n: =&gt; 11</li>
<li>;     delta: =&gt; 0</li>
</ol></code></pre>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          <p><a href="https://forum.rebol.info/t/salotz-samuel/1287/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/salotz-samuel/1287/4</link>
        <pubDate>Tue, 12 Nov 2019 14:21:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1287-4</guid>
        <source url="https://forum.rebol.info/t/salotz-samuel/1287.rss">salotz (Samuel)</source>
      </item>
      <item>
        <title>salotz (Samuel)</title>
        <dc:creator><![CDATA[salotz]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>I'm serious about keeping the web in focus--specifically the thread-based WebAssembly build. That said: I'm personally willing to reorder what I work on a bit to serve those who commit to using the system day to day, even if it's not directly toward that goal.</p>
</blockquote>
<p>Please stay focused on what is important to you! I'm still in the explore around phase and would rather either contribute or continue lurking <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> . Also finishing PhD and forcibly have to stop myself from hobby coding.</p>
<blockquote>
<p>Maybe I'm too old and lazy to take up math as a cause. But even so, the day to day things we need to get done in programming don't really easily fit into that set of ideas.</p>
</blockquote>
<p>I like that there are people that are interested in the more rigorous stuff and I really enjoy Bartosz lectures and I see how fancy type systems are really important for large software projects. I think we are actually pretty strong in those areas in terms of maturity of the field and as such there is diminishing returns on how much impact you can contribute. Especially when you are not devout and not raised from a young age to worship the lambda god. Its in the fuzzy areas where those clean ideas can't help us as much is where I think the biggest arbitrage opportunities are.</p>
<p>Not sure if I posted this here but <a href="https://darklang.com/" rel="nofollow noopener">darklang</a> seems to going in a useful direction which is to replace all the fancy metaprogramming stuff (like monads) with something like editor tooling. My own take on this would be less editor tooling and more like versioned source transformation build system. I also predict that gradual typing will eventually become very mature making it a lot easier to go from duck to algebraic types (e.g. <a href="https://lexi-lambda.github.io/blog/2017/05/27/realizing-hackett-a-metaprogrammable-haskell/" rel="nofollow noopener">Hackett</a>, <a href="https://github.com/dedbox/racket-algebraic" rel="nofollow noopener">ADTs in Racket</a>, Clojure spec, and contracts in general). Programming languages should grow with the programmer and YOLO should be as popular an acronym as KISS.</p>
          <p><a href="https://forum.rebol.info/t/salotz-samuel/1287/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/salotz-samuel/1287/3</link>
        <pubDate>Mon, 11 Nov 2019 22:22:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1287-3</guid>
        <source url="https://forum.rebol.info/t/salotz-samuel/1287.rss">salotz (Samuel)</source>
      </item>
      <item>
        <title>salotz (Samuel)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Welcome Samuel!</p>
<aside class="quote no-group" data-post="14" data-topic="197">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/salotz/40/244_2.png" class="avatar"> salotz:</div>
<blockquote>
<p>I am going to do a write up with real examples of where I think rebol could help; drawing from my personal emacs org-mode notebooks and project folders I use for doing my PhD work. Let me know if you are interested and it might come sooner.</p>
</blockquote>
</aside>
<p>Definitely interested.  Having a handful of participants at this point offers us at least one perk: those who are here now are the ones who'll guide the first application domains.  There is oil for the squeaky wheels that actually show up to squeak.  <img src="https://forum.rebol.info/images/emoji/twitter/ferris_wheel.png?v=9" title=":ferris_wheel:" class="emoji" alt=":ferris_wheel:">  <img src="https://forum.rebol.info/images/emoji/twitter/mouse.png?v=9" title=":mouse:" class="emoji" alt=":mouse:"></p>
<p>I'm serious about keeping the web in focus--specifically the thread-based WebAssembly build.  That said: I'm personally willing to reorder what I work on a bit to serve those who commit to using the system day to day, even if it's not directly toward that goal.  <a href="https://github.com/metaeducation/rebol-odbc/issues/9#issuecomment-547648344" rel="nofollow noopener">See for instance: ODBC work last week</a>)  <em>(And as I discussed with <a class="mention" href="/u/jhgorse">@jhgorse</a> last night, if he wants to send me some code outlining his hardware interface ideas then I'll work on that, too.  We want to stay grounded in having low enough dependencies for doing good embedded systems--it may not be immediately obvious how that applies to WASM, but the dependency control is what permits the fluidity to jump into emerging platforms.)</em></p>
<blockquote>
<p>In my experience "scripting" (i.e. the UNIX tradition of bash, sed, awk, perl and other treacherous demons) OS facilities like filesystems and process management is the weakest link in the data scientist's toolbox</p>
</blockquote>
<p>I had predicted my likely move from C++ template metaprogramming to even more formality and rigor.  Hence I thought I was going to be following my other friends like <a href="https://bartoszmilewski.com/" rel="nofollow noopener">Dr. Bartosz</a> into Haskell and other pure FP languages.</p>
<p>Maybe I'm too old and lazy to take up math as a cause.  But even so, the day to day things we need to get done in programming don't really easily fit into that set of ideas.  I used to listen to Haskell podcasts and even the devout--when they realized it wasn't a fit, just gave up and used bash as a matter of practicality.</p>
<p>I've gotten interested in that non-FP utility space; a better Swiss-Army-Knife caught my attention.  And I also am very interested in code golf, hence <a href="https://www.youtube.com/watch?v=iDKaz1iB9wQ" rel="nofollow noopener">Rebmu</a></p>
<p>So I do want to see what we can do to replace bash (you end CASE statements with ESAC?!?) with something where you really create languages as easily as you make functions.  Another thing I said last night about Rebol is that <em>"if you're not bending Rebol to create new language constructs and 'keywords', you're probably using the wrong language"</em>.  If we can get to where we are the "other tool" that pure FP users reach for, that would be enough to float my boat.</p>
<blockquote>
<p>In my experience "scripting" (i.e. the UNIX tradition of bash, sed, awk, perl and other treacherous demons) OS facilities like filesystems and process management is the weakest link in the data scientist's toolbox</p>
</blockquote>
<p>Having someone who knows Clojure well around would be great--I am only very superficially familiar with it.</p>
<p>Again, welcome, please share your thoughts (or even better, code).</p>
          <p><a href="https://forum.rebol.info/t/salotz-samuel/1287/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/salotz-samuel/1287/2</link>
        <pubDate>Mon, 11 Nov 2019 21:00:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1287-2</guid>
        <source url="https://forum.rebol.info/t/salotz-samuel/1287.rss">salotz (Samuel)</source>
      </item>
      <item>
        <title>salotz (Samuel)</title>
        <dc:creator><![CDATA[salotz]]></dc:creator>
        <description><![CDATA[
            <p>I am a PhD student in Biochemistry at Michigan State for the time being, but basically my role is data scientist and software engineer. I am primarily in python because it is easy to get started and the data science libraries and support and adoption in academia/research is huge.</p>
<p>Interested in rebol for a variety of reasons, but primarily interested in solving problems related to what I like to call "exploratory" programming. Structured software engineering is a well covered topic but doesn't really help with what a data scientist does on a daily basis which is trying new things and iteratively building those into a real processing pipeline which may not have a very long lifetime but can still be overburdened with complexity. The intuition for what I mean is anything that you would either write a slew of unportable bash scripts with really long and overly specific names or maybe Jupyter notebooks or Mathematica. In my experience "scripting" (i.e. the UNIX tradition of bash, sed, awk, perl and other treacherous demons) OS facilities like filesystems and process management is the weakest link in the data scientist's toolbox, which has led to solutions like Jupyter and DataBricks. Which are unusable in a number of other ways. The block orientation of rebol IMO is the proper foundation for making this kind of work tractable and maybe even comfortable. My long term goal would be to use rebol as a document container format (replaces e.g. a "notebook" or filesystem "schema") that also allows for creation and orchestration of pipelines of blocks. Sort of like "literate programming" but the literate part is also programmable.</p>
<p>I am going to do a write up with real examples of where I think rebol could help; drawing from my personal emacs org-mode notebooks and project folders I use for doing my PhD work.  Let me know if you are interested and it might come sooner.</p>
<p>Currently other interests include sane system configuration management (Nix, Guix, Genode), object capabilities systems for collaborative programming (Genode and Monte), language-oriented programming (rebol and racket), programming/operating assistants as I like to call them (e.g. emacs, DrRacket, Dark language, McCLIM), solid-state computers (e.g. Urbit and Smalltalk) and probabilistic programming. I'm also pretty interested in using Nim, if I can get over not having the python libraries, ReasonML, and Clojure for doing "real work".</p>
          <p><a href="https://forum.rebol.info/t/salotz-samuel/1287/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/salotz-samuel/1287/1</link>
        <pubDate>Mon, 21 Oct 2019 17:31:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1287-1</guid>
        <source url="https://forum.rebol.info/t/salotz-samuel/1287.rss">salotz (Samuel)</source>
      </item>
  </channel>
</rss>

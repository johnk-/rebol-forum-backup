<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Reusing Function Argument Cells vs. Debugging</title>
    <link>https://forum.rebol.info/t/reusing-function-argument-cells-vs-debugging/1047</link>
    <description>In the historical bit-fiddly nature of Rebol, the reuse of argument cells to do work inside a function was frequent.

    foo: func [x y [text!]] [
        do-something-with y
        ; Yay, y is now free...use it as a counter
        y: 0
        while [y &lt;&gt; x] [...]
    ]

This practice is particularly pervasive in native functions, where the argument cells provide a convenient &quot;already protected by GC&quot; cell.  Once they&#39;ve extracted whatever they want into C variables, natives go on to use these slots for anything and everything--as scratch locations.

But it runs up against a problem with debugging...looking in the stack, you no longer see what you passed in for the argument cells.  It makes your calls look like gibberish.

Since arguments are not immutable, this is just a &quot;thing&quot;.  One very good reason not to make them immutable is adaptations...you *want* to be able to create variations of functions that update the arguments, so as to pass them on to a next phase with an adjustment.

So perhaps it&#39;s the debugger&#39;s responsibility to figure out a way to capture the inputs off to the side (or notice if they ever change and make a copy?)  Or should it be the convention that people just try not to do this unless there is an actual good reason--as with adaptation?

It&#39;s just a bit disconcerting to run something like SWITCH and then look in the stack and have gibberish in the cell where you thought you put the thing to switch on...for the sake of micro-optimization.  Just making a distinct local seems worth it.</description>
    
    <lastBuildDate>Fri, 01 Feb 2019 01:38:48 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/reusing-function-argument-cells-vs-debugging/1047.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Reusing Function Argument Cells vs. Debugging</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In the historical bit-fiddly nature of Rebol, the reuse of argument cells to do work inside a function was frequent.</p>
<pre><code>foo: func [x y [text!]] [
    do-something-with y
    ; Yay, y is now free...use it as a counter
    y: 0
    while [y &lt;&gt; x] [...]
]
</code></pre>
<p>This practice is particularly pervasive in native functions, where the argument cells provide a convenient "already protected by GC" cell.  Once they've extracted whatever they want into C variables, natives go on to use these slots for anything and everything--as scratch locations.</p>
<p>But it runs up against a problem with debugging...looking in the stack, you no longer see what you passed in for the argument cells.  It makes your calls look like gibberish.</p>
<p>Since arguments are not immutable, this is just a "thing".  One very good reason not to make them immutable is adaptations...you <em>want</em> to be able to create variations of functions that update the arguments, so as to pass them on to a next phase with an adjustment.</p>
<p>So perhaps it's the debugger's responsibility to figure out a way to capture the inputs off to the side (or notice if they ever change and make a copy?)  Or should it be the convention that people just try not to do this unless there is an actual good reason--as with adaptation?</p>
<p>It's just a bit disconcerting to run something like SWITCH and then look in the stack and have gibberish in the cell where you thought you put the thing to switch on...for the sake of micro-optimization.  Just making a distinct local seems worth it.</p>
          <p><a href="https://forum.rebol.info/t/reusing-function-argument-cells-vs-debugging/1047/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/reusing-function-argument-cells-vs-debugging/1047/1</link>
        <pubDate>Fri, 01 Feb 2019 01:38:48 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1047-1</guid>
        <source url="https://forum.rebol.info/t/reusing-function-argument-cells-vs-debugging/1047.rss">Reusing Function Argument Cells vs. Debugging</source>
      </item>
  </channel>
</rss>

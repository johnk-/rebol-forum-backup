<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Three Single-Character Intents... x:_, x: &#39;, and x: ~</title>
    <link>https://forum.rebol.info/t/three-single-character-intents-x-x-and-x/1620</link>
    <description>So it&#39;s nice in a row of initializations to be able to kind of gloss over the &quot;empty bits&quot; and see the data.

    foo: make object! [
        bar: &#39;
        baz: &#39;
        mumble: &quot;a string&quot;
        frotz: &#39;
    ]

Compare that with if you had to say:

    foo: make object! [
        bar: null
        baz: null
        mumble: &quot;a string&quot;
        frotz: null
    ]

If instead of NULL what you wanted to assign was BLANK!, you can do this with a single character also:

    foo: make object! [
        bar: _
        baz: _
        mumble: &quot;a string&quot;
        frotz: _
    ]

I&#39;ve explained in the [modern theory of BLANK! vs. NULL vs. BAD-WORD!](https://forum.rebol.info/t/the-2021-philosophy-of-null-vs-blank-vs-bad-word/1604) why which you would choose makes a difference.   And once again, this would be a bit visibly more shoddy if you had to write it out:

    foo: make object! [
        bar: blank
        baz: blank
        mumble: &quot;a string&quot;
        frotz: blank
    ]

So it&#39;s nice that if you have these different intents for how to treat &quot;empty&quot; things, you can pick a clean way to write them that doesn&#39;t cloud up the non-empty things surrounding them.

But with NULL and BLANK! having this coverage, doesn&#39;t it seem unfortunate to have to write out the BAD-WORD! intent?

    foo: make object! [
        bar: ~unset~
        baz: ~unset~
        mumble: &quot;a string&quot;
        frotz: ~unset~
    ]

Isn&#39;t a shorthand warranted here?

    foo: make object! [
        bar: ~
        baz: ~
        mumble: &quot;a string&quot;
        frotz: ~
    ]

Here&#39;s the case where you are saying it&#39;s empty and you want accessing the field to cause an error.  On a scale of 1 to 3 of &quot;meanness&quot;:

* BLANK! is the friendliest *(opts out of many operations and makes them return null)*

* NULL is a little less friendly *(doesn&#39;t cause an error on reference/testing but will cause errors on things like APPEND)*

* An isotopic BAD-WORD! that has gone through an evaluation step--as above--is the meanest *(will error just on referring to the value)*

## The Landscape Has Changed

One reason that I thought it was a bad idea to make **~** a &quot;bad word with NULL spelling&quot; was that it would mess with paths like:

     for-each item first [~/some/dir] [
         print [&quot;Item is&quot; item]
     ]

Allowing such mean BAD-WORD!s to be in PATH!s seemed awkward.  You&#39;d be getting errors on something that looked like it should be friendly.

BUT now that&#39;s a *non-isotope* form of a BAD-WORD!.  You can deal with it like any other value when you come across it literally, it&#39;s just not truthy or falsey.

**This seems to shift the balance to saying that having a light way of saying &quot;this field will error if there&#39;s a problem has value&quot;**

I don&#39;t know that this means it should take the role of ~unset~.  ~unset~ seems more explanatory of the state of unsetness for a variable, and is a bit more visible.

But once they become isotopes BAD-WORD!s are kind of bending the rules.  While normal BAD-WORD!s are not true or false, the *isotope* of ~null~ is falsey.  There are various squirrelly behaviors that you get into once you start working with isotopes.

So...what if:

    &gt;&gt; ~
    == ~unset~   ; isotope

e.g. the *normal* BAD-WORD! of **~** will turn into the *isotope* of ~unset~ when you evaluate it?

Or maybe it&#39;s left open.  Maybe ~ remains a plain WORD!, that runs a function, that gives back the unset isotope?  That leaves it more open.

**Regardless of how it happens, I think I like that behavior:**

    &gt;&gt; ~
    == ~unset~   ; isotope</description>
    
    <lastBuildDate>Fri, 04 Jun 2021 04:18:03 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/three-single-character-intents-x-x-and-x/1620.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Three Single-Character Intents... x:_, x: &#39;, and x: ~</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So it's nice in a row of initializations to be able to kind of gloss over the "empty bits" and see the data.</p>
<pre><code>foo: make object! [
    bar: '
    baz: '
    mumble: "a string"
    frotz: '
]
</code></pre>
<p>Compare that with if you had to say:</p>
<pre><code>foo: make object! [
    bar: null
    baz: null
    mumble: "a string"
    frotz: null
]
</code></pre>
<p>If instead of NULL what you wanted to assign was BLANK!, you can do this with a single character also:</p>
<pre><code>foo: make object! [
    bar: _
    baz: _
    mumble: "a string"
    frotz: _
]
</code></pre>
<p>I've explained in the <a href="https://forum.rebol.info/t/the-2021-philosophy-of-null-vs-blank-vs-bad-word/1604">modern theory of BLANK! vs. NULL vs. BAD-WORD!</a> why which you would choose makes a difference.   And once again, this would be a bit visibly more shoddy if you had to write it out:</p>
<pre><code>foo: make object! [
    bar: blank
    baz: blank
    mumble: "a string"
    frotz: blank
]
</code></pre>
<p>So it's nice that if you have these different intents for how to treat "empty" things, you can pick a clean way to write them that doesn't cloud up the non-empty things surrounding them.</p>
<p>But with NULL and BLANK! having this coverage, doesn't it seem unfortunate to have to write out the BAD-WORD! intent?</p>
<pre><code>foo: make object! [
    bar: ~unset~
    baz: ~unset~
    mumble: "a string"
    frotz: ~unset~
]
</code></pre>
<p>Isn't a shorthand warranted here?</p>
<pre><code>foo: make object! [
    bar: ~
    baz: ~
    mumble: "a string"
    frotz: ~
]
</code></pre>
<p>Here's the case where you are saying it's empty and you want accessing the field to cause an error.  On a scale of 1 to 3 of "meanness":</p>
<ul>
<li>
<p>BLANK! is the friendliest <em>(opts out of many operations and makes them return null)</em></p>
</li>
<li>
<p>NULL is a little less friendly <em>(doesn't cause an error on reference/testing but will cause errors on things like APPEND)</em></p>
</li>
<li>
<p>An isotopic BAD-WORD! that has gone through an evaluation step--as above--is the meanest <em>(will error just on referring to the value)</em></p>
</li>
</ul>
<h2>The Landscape Has Changed</h2>
<p>One reason that I thought it was a bad idea to make <strong>~</strong> a "bad word with NULL spelling" was that it would mess with paths like:</p>
<pre><code> for-each item first [~/some/dir] [
     print ["Item is" item]
 ]
</code></pre>
<p>Allowing such mean BAD-WORD!s to be in PATH!s seemed awkward.  You'd be getting errors on something that looked like it should be friendly.</p>
<p>BUT now that's a <em>non-isotope</em> form of a BAD-WORD!.  You can deal with it like any other value when you come across it literally, it's just not truthy or falsey.</p>
<p><strong>This seems to shift the balance to saying that having a light way of saying "this field will error if there's a problem has value"</strong></p>
<p>I don't know that this means it should take the role of ~unset~.  ~unset~ seems more explanatory of the state of unsetness for a variable, and is a bit more visible.</p>
<p>But once they become isotopes BAD-WORD!s are kind of bending the rules.  While normal BAD-WORD!s are not true or false, the <em>isotope</em> of ~null~ is falsey.  There are various squirrelly behaviors that you get into once you start working with isotopes.</p>
<p>So...what if:</p>
<pre><code>&gt;&gt; ~
== ~unset~   ; isotope
</code></pre>
<p>e.g. the <em>normal</em> BAD-WORD! of <strong>~</strong> will turn into the <em>isotope</em> of ~unset~ when you evaluate it?</p>
<p>Or maybe it's left open.  Maybe ~ remains a plain WORD!, that runs a function, that gives back the unset isotope?  That leaves it more open.</p>
<p><strong>Regardless of how it happens, I think I like that behavior:</strong></p>
<pre><code>&gt;&gt; ~
== ~unset~   ; isotope</code></pre>
          <p><a href="https://forum.rebol.info/t/three-single-character-intents-x-x-and-x/1620/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/three-single-character-intents-x-x-and-x/1620/1</link>
        <pubDate>Fri, 04 Jun 2021 04:18:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1620-1</guid>
        <source url="https://forum.rebol.info/t/three-single-character-intents-x-x-and-x/1620.rss">Three Single-Character Intents... x:_, x: &#39;, and x: ~</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Naming of NULL and VOID!</title>
    <link>https://forum.rebol.info/t/the-naming-of-null-and-void/1427</link>
    <description>&gt; the difference between **null** and **void** is that **null** is a non-existent or empty value or set of values while **void** is an empty space — [WikiDiff](https://wikidiff.com/null/void)

I think nailing down the definitions of NULL and VOID outside of their current application or behaviour—even simply within English—would be instructive. I still feel unsettled with the way both work in a way I can&#39;t put my finger on even if I agree from other posts there is a need for both. Looking at the definitions in the link above, it feels at first read that our NULL and VOID are backwards, that NULL is the tangible placeholder that can appear in a block and VOID is the vacuum.

Either way, I feel `do []` should vaporize:

```text
reduce [do []] =&gt; []
```</description>
    
    <lastBuildDate>Thu, 17 Dec 2020 00:20:31 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/the-naming-of-null-and-void/1427.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Naming of NULL and VOID!</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="9" data-topic="1427">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>In the web UI, I was thinking the <code>== ~none~</code> might start visible, but then fade out after a moment. I dunno if this can be done in a pleasing way...but if it could that would be neat.</p>
</blockquote>
</aside>
<p>I like the way you're thinking here. I would like to discuss this in a broader sense in a future video meeting. There are opportunities to enhance basic user interactions and impart an illusion of awareness and intelligence-- as opposed to the rough-edges "80's cash-register" equivalent of interaction. Plus it ties into the "minecraft of programming" ethos. More on that later.</p>
          <p><a href="https://forum.rebol.info/t/the-naming-of-null-and-void/1427/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-naming-of-null-and-void/1427/10</link>
        <pubDate>Wed, 16 Dec 2020 13:06:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1427-10</guid>
        <source url="https://forum.rebol.info/t/the-naming-of-null-and-void/1427.rss">The Naming of NULL and VOID!</source>
      </item>
      <item>
        <title>The Naming of NULL and VOID!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="6" data-topic="1427">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It just means having to coordinate on the replacement. What's the new name for the ornery result (is BAD-WORD! appealing at all to you?) and what is the name of the "typical" result that comes back from things like PRINT (e.g. <code>~trash~</code>, <code>~none~</code>, etc.)</p>
</blockquote>
</aside>
<p>As I've had a little time to let it settle, it does feel solid to have "void functions" be those that truly return nothing--to the point of not putting any value in the evaluation stream.  <strong><code>return: &lt;void&gt;</code></strong> thus takes this from invisibility, making <code>rebElide()</code> match <code>ELIDE</code>, as both returning void.</p>
<p>Then there's the case where a function has no <em>meaningful</em> return value, but acting void/invisible would be a source of misunderstandings and cause problems.  It seems smoothest to have its spec say <strong><code>return: &lt;none&gt;</code></strong>.  Then the result would be <strong><code>~none~</code></strong>, which the console would suppress display of.  <em>(In the web UI, I was thinking the <code>== ~none~</code> might start visible, but then fade out after a moment.  I dunno if this can be done in a pleasing way...but if it could that would be neat.)</em></p>
<p>Although that's a new use of the word "none" vs. historical Rebol, we have to accept there are only so many short words to draw from.  If length weren't an issue I'd like <code>~nothing~</code> better because it feels more like the right part of speech.  But <strong><code>return: &lt;nothing&gt;</code></strong> feels wordy, you're going to see that a lot...and keeping it short has value.</p>
<hr>
<p>BAD-WORD! conveys that something is a real value...a wordlike-thing that holds a spelling.  I like that "bad" is short and fits with the other prefixes.  It's communicative, and kind of funny, but not too funny as to be ridiculous.</p>
<p>The big question I see having to worry about is <strong>match any-word! some-function</strong> where you wouldn't really want BAD-WORD! to count.  Maybe people would be forgiving if you just left bad-word! out of the any-word! set.  I'm not sure if it's enough of a problem to lead one to favoring some name like TRASH! or JUNK!.</p>
<hr>
<p>Any objections?  This at least does seem to resolve the uneasiness with the use of a "greater absence" <a class="mention" href="/u/rgchris">@rgchris</a> was sensing out of void, and brings things into more alignment with C.</p>
          <p><a href="https://forum.rebol.info/t/the-naming-of-null-and-void/1427/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-naming-of-null-and-void/1427/9</link>
        <pubDate>Wed, 16 Dec 2020 09:41:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1427-9</guid>
        <source url="https://forum.rebol.info/t/the-naming-of-null-and-void/1427.rss">The Naming of NULL and VOID!</source>
      </item>
      <item>
        <title>The Naming of NULL and VOID!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There are distinct concepts of <a href="https://stackoverflow.com/questions/18118408/what-is-the-difference-between-quiet-nan-and-signaling-nan">"signaling NAN" and "non-signaling NAN"</a></p>
<p>It may be that BLANK! is the quiet NAN, and math operators follow "blank in, null out".  Some discussion of that point here:</p>
<aside class="quote quote-modified" data-post="1" data-topic="954">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar">
    <a href="https://forum.rebol.info/t/blank-in-null-out-convention-vs-logic-returning-actions/954">BLANK!-in, NULL-out convention vs. LOGIC!-returning actions</a> <a class="badge-wrapper  bullet" href="/c/development/internals/9"><span class="badge-category-parent-bg" style="background-color: #25AAE2;"></span><span class="badge-category-bg" style="background-color: #25AAE2;"></span><span style="" data-drop-close="true" class="badge-category clear-badge" title="Internals of the Rebol language">Internals</span></a>
  </div>
  <blockquote>
    We're now in a situation where NULL is rejected by most routines as input.  Notable exceptions being the thing-to-APPEND, or the thing-to-KEEP...anything where a BLANK! acts legally as a "thing" you might want to be talking about--and NULL is the only way to opt out. 
In this world, "BLANK!-in, NULL out" has been showing off excellently as the replacement for what was long discussed under the title none propagation.  <a href="https://github.com/rebol/rebol-issues/issues/1611#issuecomment-385719133" rel="nofollow noopener">I summarize the theory of the benefits here</a>, and why routines taking "NONE!-in,…
  </blockquote>
</aside>

<p>I feel like if there were enough example code and articulation of what needed to be true about it, these decisions could be made in line with the desired behavior.</p>
          <p><a href="https://forum.rebol.info/t/the-naming-of-null-and-void/1427/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-naming-of-null-and-void/1427/8</link>
        <pubDate>Thu, 10 Dec 2020 19:32:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1427-8</guid>
        <source url="https://forum.rebol.info/t/the-naming-of-null-and-void/1427.rss">The Naming of NULL and VOID!</source>
      </item>
      <item>
        <title>The Naming of NULL and VOID!</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>Out of curiosity—would ~nan~ and ~infinity~ fall into your BAD-WORD! category?</p>
          <p><a href="https://forum.rebol.info/t/the-naming-of-null-and-void/1427/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-naming-of-null-and-void/1427/7</link>
        <pubDate>Thu, 10 Dec 2020 19:21:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1427-7</guid>
        <source url="https://forum.rebol.info/t/the-naming-of-null-and-void/1427.rss">The Naming of NULL and VOID!</source>
      </item>
      <item>
        <title>The Naming of NULL and VOID!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="5" data-topic="1427">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I'm use to NONE as being control flow currency so the idea of NULL now having that role isn't that hard to grasp, just the other qualities that don't line up.</p>
</blockquote>
</aside>
<p>I do not foresee the NULL design point changing.</p>
<p>But if shifting the meaning of VOID as described above helps with your interpretation as <em>"less than nothing"</em> (as opposed to "a thing that has been marked invalid") then I'm game for that change.  There seems to be a strong enough basis for it.</p>
<p>It just means having to coordinate on the replacement.  What's the new name for the ornery result (is BAD-WORD! appealing at all to you?) and what is the name of the "typical" result that comes back from things like PRINT (e.g. <code>~trash~</code>, <code>~none~</code>, etc.)</p>
          <p><a href="https://forum.rebol.info/t/the-naming-of-null-and-void/1427/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-naming-of-null-and-void/1427/6</link>
        <pubDate>Thu, 10 Dec 2020 19:17:53 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1427-6</guid>
        <source url="https://forum.rebol.info/t/the-naming-of-null-and-void/1427.rss">The Naming of NULL and VOID!</source>
      </item>
      <item>
        <title>The Naming of NULL and VOID!</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I get that NULL tracks to other language uses, perhaps my having no background in those languages is why I find it jarring (it's not inconceivable that they all use the word incorrectly <img src="https://forum.rebol.info/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:">). I'm use to NONE as being control flow currency so the idea of NULL now having that role isn't that hard to grasp, just the other qualities that don't line up.</p>
<p>You're right in that I need to grapple with code, I need to review the test suite for the R3C branch where other changes aren't as big in comparison to NULL/BLANK/VOID. I should likely stop commenting on this issue until I've done that.</p>
          <p><a href="https://forum.rebol.info/t/the-naming-of-null-and-void/1427/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-naming-of-null-and-void/1427/5</link>
        <pubDate>Thu, 10 Dec 2020 13:55:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1427-5</guid>
        <source url="https://forum.rebol.info/t/the-naming-of-null-and-void/1427.rss">The Naming of NULL and VOID!</source>
      </item>
      <item>
        <title>The Naming of NULL and VOID!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="1" data-topic="1427">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I think nailing down the definitions of NULL and VOID outside of their current application or behaviour—even simply within English—would be instructive. I</p>
</blockquote>
</aside>
<p>Maybe the best way to attack the problem is to play out the sentences in your head:</p>
<blockquote>
<p>"Hey, I'm curious, what does the PRINT function return?  Does it return the string it printed?"</p>
<p>"No, that costs too much in the average case that doesn't use the generated output.  It just returns a <strong><code>&lt;your name here that's not void&gt;</code></strong>...so that you'll notice getting an error if you try to use the value.  Unless it doesn't output anything at all--hence no newline--in which case it returns a NULL...so you can react to that situation with ELSE or THEN or whatever."</p>
</blockquote>
<p>I firmly veto UNSET!... but am open to other suggestions.  Though I've not had these strong issues with questioning VOID! and still am not really seeing the problem.</p>
<p>Maybe there's some word in the family of "signal" or "marker" you'd like better.  But it seems to me that a big stamp with VOID on it is pretty well understood as a way of marking things as "alert, this thing is tainted, you might keep it for your records of what happened but don't try using it":</p>
<p><div class="lightbox-wrapper"><a class="lightbox" href="https://images-na.ssl-images-amazon.com/images/I/61-4tfZhK1L._AC_SL1500_.jpg" title=""><img src="https://images-na.ssl-images-amazon.com/images/I/61-4tfZhK1L._AC_SL1500_.jpg" alt="" width="362" height="500"><div class="meta"><svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename"></span><span class="informations">1052×1452</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg></div></a></div></p>
<h2>While VOID might be rethought, NULL is really non-negotiable</h2>
<p><strong>The parity with C's NULL (and all the languages that also embrace that meaning) is a critical element, and we can tick all the boxes:</strong> NULL is a 0 pointer value, it's falsey.  It's unable to lead you to data to operate on (e.g. you don't have a "thing" you can set a NEW-LINE on, there's no thing).  If a function returns NULL you are not stuck with a handle to an object that you have to free.</p>
<h2>I can appreciate VOID as being more debatable</h2>
<p>I could see the case that "VOID" <em>wouldn't refer to a datatype at all</em>, but the <em>return behavior</em> of functions like COMMENT and ELIDE.  This interpretation would be <em>really</em> nothing... not a NULL, not an ornery value, but full-on vaporization.  You might still phrase that as "The comment function returns void", or "has a void return", or something of this sort...as in C, when in fact returns don't even come into play.</p>
<p>While that has some appealing aspects (such as giving a seemingly plausible name for "the non-thing that invisibles could be said to return"), it has drawbacks:</p>
<ul>
<li>
<p>Vaporization is a pretty unique phenomenon, and doesn't fit what C programmers or other people think of "void functions" as being <em>for</em>.  They think of a "void function" more as one where the RETURN doesn't take an argument...the lack of a meaningful result is the reason for the distinction.  In this vein, I don't think a plain RETURN should cause invisibility at the callsite, I think it should return this ornery type as it does today.</p>
<pre><code>&gt;&gt; foo: func [x] [if x &gt;= 304 [return], print "less than 304"]

&gt;&gt; if foo 1020 [print "likely misunderstanding of foo's return value"]
** Script Error: VOID! values are not conditionally true or false

; you wouldn't want that RETURN behavior to act like:
;
;      if [print "likely misunderstanding of foo's return value"]
</code></pre>
</li>
<li>
<p>Taking void for vaporization would solve one naming problem, but we'd be stuck finding a name for the ornery type.  I've explained at length why I don't like UNSET! as that name... <em>because variables are unset, not values</em>.  (But I'm now comfortable with <code>~unset~</code> as a named purposeful instance of this WORDish thing).  POISON! or TRASH! or other things are awkward and I think maybe too pejorative...it indicates that there's some kind of problem, when there's only a problem if you try to use it in certain ways.</p>
</li>
</ul>
<p>I really do feel the overall usage in computer culture is that most people think of a function that returns no <em>useful</em> result, and they call that void.  They don't imagine that function actually vanishing out of the evaluation stream.</p>
<p>So when all this is taken in, it feels like VOID! is the right name for the type.  You have to explain it in terms of the void stamp... it's basically a WORD!, but it's been marked as a hot potato.</p>
<h2>...er, so, maybe BAD-WORD! ?</h2>
<p>Well, it's kind of in the WORD! family now...at least, you can interconvert voids and words.  I don't know that you'd want it actually be <em>in</em> the category:</p>
<pre><code>if any-word? x: second [10 ~bad~ 20] [
    print "Is this a good idea to have it run?"
]
</code></pre>
<p>I don't know if that's a smart or silly concept.  Maybe it would concretize it, and allow VOID to be used for eliding...though I can't say from here whether you're causing more problems than you solve with it.</p>
<p><em>(I've also not decided if these voids/bad-words should be able to carry bindings when they are converted or not.  You can't use the binding, but they could still have one you could use if you converted them to a regular word...)</em></p>
<p>I guess you have to think about how it plays out in explanatory conversation, and if you like it.</p>
<blockquote>
<p>"Hey, I'm curious, what does the PRINT function return? Does it return the string it printed?"</p>
<p>"No, that costs too much in the average case that doesn't use the generated output. It just returns a bad word...specifically the bad word <code>~nothing~</code>...so that you'll notice getting an error if you try to use the value. Unless it doesn't output anything at all--hence no newline--in which case it returns a NULL...so you can react to that situation with ELSE or THEN or whatever."</p>
</blockquote>
<p>I feel like the whole point of reclaiming the word "void" here would be defeated if the "bad word" you got from running a function that returned nothing useful was <code>~void~</code>.  You'd have to retake VOID for the "return disposition" of eliders and comments, or the whole renaming exercise was not useful.</p>
<p>This does line up to having meaning parity with C as far as the interface of "void" goes:</p>
<pre><code>void rebElide(...);  // this is the interface for rebElide, it "returns" void
REBVAL *rebValue(...);  // this is when you want a result back to C

rebElide("print {rebElide means you avoid an API handle to a bad-word!}");

rebValue("print {if you wrote this, you'd leak the returned handle...}");
</code></pre>
<p>So we'd be saying inside the language, ELIDE also "returns void".</p>
<p>Further exposition on the experience:</p>
<pre><code>&gt;&gt; foo: func [x] [if x &gt;= 304 [return], print "less than 304"]

&gt;&gt; if foo 1020 [print "likely misunderstanding of foo's return value"]
** Script Error: the BAD-WORD! ~nothing~ is not conditionally true or false
</code></pre>
<p>There could also be a repurposing of the <code>~none~</code> word for this, since it's shorter (same length as void).  But "null" and "none" are close words and it feels a little too close for my liking.</p>
<p>Well...maybe it could be <code>~trash~</code>?  I guess there's nothing wrong with calling it what it is.  You are "trashing" the output so the caller doesn't see it:</p>
<pre><code>&gt;&gt; foo: func [return: &lt;trash&gt;] [
       print "It's what this particular bad-word! application is used for..."
       some-var: select block 'none-of-callers-business-what-we-assigned
   ] 

&gt;&gt; if foo [...]
It's what this particular bad-word! application is used for...
** Script Error: ~trash~ is not conditionally true or false (bad-word!)
</code></pre>
<p>Other possibilities: <code>~opaque~</code>, <code>~nonya~</code> <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>The idea of whatever this name is being the thing the console doesn't show is probably good.  It could be <code>~hidden~</code>.  Well, <code>~none~</code> isn't a terrible baseline...thoughts welcome.</p>
<h2>Does That Resolve The Concerns?</h2>
<p>There's enough novelty in teaching people how a <em>true</em> "void function" can be leveraged in this model, to not worry about disrupting any preconceptions about how void functions are used elsewhere.  Then the alignment with the C interface is a nice bonus.</p>
<p><strong>word!, set-word!, get-word!, lit-word! and bad-word!</strong> feel like a nice group.  The "oooh... you said a bad wooooord" aspect is lightly entertaining and could make for some funny writing; it's easy to remember.  Having "word" in the name helps mitigate the pejorativeness, so you can see there's at least some signal in it and know it has a spelling you can get...while still some stigma.</p>
<p>If it reconciles the concerns you have so we can move on to the non-naming-related design points, then it's a huge step forward, and I say we do it.</p>
          <p><a href="https://forum.rebol.info/t/the-naming-of-null-and-void/1427/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-naming-of-null-and-void/1427/2</link>
        <pubDate>Thu, 10 Dec 2020 09:21:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1427-2</guid>
        <source url="https://forum.rebol.info/t/the-naming-of-null-and-void/1427.rss">The Naming of NULL and VOID!</source>
      </item>
      <item>
        <title>The Naming of NULL and VOID!</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>the difference between <strong>null</strong> and <strong>void</strong> is that <strong>null</strong> is a non-existent or empty value or set of values while <strong>void</strong> is an empty space — <a href="https://wikidiff.com/null/void">WikiDiff</a></p>
</blockquote>
<p>I think nailing down the definitions of NULL and VOID outside of their current application or behaviour—even simply within English—would be instructive. I still feel unsettled with the way both work in a way I can't put my finger on even if I agree from other posts there is a need for both. Looking at the definitions in the link above, it feels at first read that our NULL and VOID are backwards, that NULL is the tangible placeholder that can appear in a block and VOID is the vacuum.</p>
<p>Either way, I feel <code>do []</code> should vaporize:</p>
<pre><code class="lang-nohighlight">reduce [do []] =&gt; []
</code></pre>
          <p><a href="https://forum.rebol.info/t/the-naming-of-null-and-void/1427/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-naming-of-null-and-void/1427/1</link>
        <pubDate>Thu, 10 Dec 2020 03:45:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1427-1</guid>
        <source url="https://forum.rebol.info/t/the-naming-of-null-and-void/1427.rss">The Naming of NULL and VOID!</source>
      </item>
  </channel>
</rss>

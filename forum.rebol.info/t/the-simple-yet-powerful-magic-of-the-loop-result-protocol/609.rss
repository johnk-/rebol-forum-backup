<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Simple-yet-Powerful Magic of The Loop Result Protocol</title>
    <link>https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609</link>
    <description>**Note: This post has been updated 17-Nov-2018 to reflect the current state of the rules.**

## Loops return null if-and-only-if they break

One very good reason this rule exists is to make it easy to build custom loop constructs out of several other loop constructs.  You can tell &quot;from the outside&quot; whether one of your sub-loops was BREAK&#39;d...this way the the higher level construct is aware it shouldn&#39;t run any more of its component loop phases.

*(If this rule did not exist, then implementing a loop out of several other loops would have to invasively hook and rebind BREAK in each loop body to its own, and handle that.  Even if it were possible--which it probably should be--this would be complex and inefficient.  So the simpler rule is better!)* 

That&#39;s the only &quot;hard rule&quot; of loop return results, however...

## ...many common loops return a BLANK! if the body never ran

    &gt;&gt; loop 0 [&lt;unreturned&gt;]
    == _

    &gt;&gt; for-each x [] [&lt;unreturned&gt;]
    == _

To distinguish this case (and the breaking case) from normal running, such loops also &quot;voidify&quot; a body result of blank or null:

    &gt;&gt; for-each x [1 2 3] [null]
    // #[void] 

    &gt;&gt; loop 1 [_]
    // #[void]

    &gt;&gt; x: true while [x] [x: false] // evaluating to logic false still works
    == #[false] // so you can get a &quot;falsey&quot; result even if the body runs to completion

Remember that voids may be cantaknerous values, but they are nonetheless &quot;ANY-VALUE!&quot;s...hence they will trigger THEN and not trigger ELSE.  But if you try to use void with conditional logic and test it for truth or falsehood, you&#39;ll get an error.
 
## Reacting to BREAKs and empty loops is easy!

Loop aggregators aren&#39;t the only place that benefits from being able to tell what happened with a loop from its result.   Plain user code reaps the benefits as well.

Right off the bat, if your loop body always returns a truthy thing, you can leverage the result to make sure at least one body ran and there wasn&#39;t a break:

    all [
        for-each x block [
             if some-test x [break]
             &lt;truthy-result&gt;
        ]
        // ^-- falsey to interrupt ALL if block is empty, or BREAKs
        ...
    ]

If you don&#39;t want to count not having the body run as an equivalent result to a BREAK in a situation like this, leverage the fact that BLANK! is a value to trigger THEN and truthyify that case:

    all [
        for-each x block [
             if some-test x [break]
             &lt;truthy-result&gt;
        ] then [true]
        // ^-- only on BREAK is it now falsey to interrupt the ALL
        ...
    ]

If you&#39;re only concerned with whether a loop BREAKs, then ELSE is the ticket:

    for-each x block [
       if some-test x [break]
       &lt;truthy-result&gt;
    ] else [
        // This code runs only if the loop breaks
        // ...so it still runs even if block is []
    ]

You can combine that with THEN to segregate code when the loop *doesn&#39;t* break:

    for-each x block [
       if some-test x [break]
       &lt;truthy-result&gt;
    ] then [
        // This code runs only if the loop doesn&#39;t break
    ] else [
        // This code runs only if the loop breaks
    ]

You can use AND and OR to test the logic cases:

    for-each x block [
        if some-test x [break]
        &lt;truthy-result&gt;
    ] or [
        // This code runs if the loop breaks -or- DIDN&#39;T
        // run the body at least once
    ]

    for-each x block [
        if some-test x [break]
        &lt;truthy-result&gt;
    ] and [
        // This code runs if the loop doesn&#39;t break and ran
        // the body at least once
    ]

### Practical example?

Here&#39;s a very cool real world case from the console code:

    pos: molded: mold/limit :v 2048
    loop 20 [
        pos: next (find pos newline else [break])
    ] then [
        insert clear pos &quot;...&quot;
    ]

You have up to 2048 characters of data coming back from the mold, ok. Now you want just the first 20 lines of that.  If truncation is necessary, put an ellipsis on the end.

`loop 20` obviously will always try and run the body at least once. (So the loop will never return blank here.)

FIND will return NULL if it can&#39;t find the thing you asked it, so the ELSE runs when you can&#39;t get the position.  If it makes it up to 20 without breaking, then the THEN clause runs.

So there you go.  The first 20 lines of the first 2048 characters of a mold, truncating with &quot;...&quot;  I think the THEN really follows the idea of *completion*, it makes sense (to me) that a BREAK would bypass a THEN (or an ALSO, which is similar) clause.

I encourage people to get creative, to look at ways to use this to write clearer/shorter/better code.</description>
    
    <lastBuildDate>Mon, 25 Jan 2021 09:09:23 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Simple-yet-Powerful Magic of The Loop Result Protocol</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>This topic should be informed somewhat now by <a href="https://forum.rebol.info/t/what-should-do-do/1426">"What should DO [] do"</a>.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="9" data-topic="609">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Precedent note: Rebol2 and R3-Alpha chose NONE here:</p>
<pre><code class="lang-auto">rebol2/r3-alpha&gt;&gt; while [false] []
== none
</code></pre>
<p>Red is using UNSET!:</p>
<pre><code class="lang-auto">&gt;&gt; unset? while [false] []
== true
</code></pre>
</blockquote>
</aside>
<p>They're likely changing it.  <a href="https://github.com/red/red/issues/1706#issuecomment-660306764">This GitHub ticket has an inventory of Red's compiled and interpreted behaviors</a>.</p>
<p>Boris says:</p>
<blockquote>
<p>I haven't found any explanation of why Rebol chose that <code>loop 0 [1]</code> (and other non-evaluated loops) returns <code>none</code> rather than <code>unset</code> . I have however found numerous examples of relying on loops returning last result of their body evaluation. And that makes <code>none</code> more helpful than <code>unset</code> as we can chain loops into <code>if</code> s like <code>unless result: loop n [stuff] [handle empty case]</code> .</p>
</blockquote>
<p>Gregg says:</p>
<blockquote>
<p>Agreed on returning <code>none</code> consistently where the body is not processed.</p>
</blockquote>
<p>Ren-C is currently taking the tactic of returning NULL-2:</p>
<pre><code>&gt;&gt; while [false] []
; null-2
</code></pre>
<p>This means that a THEN clause will consider the loop to have "ran", distinctly from if a BREAK occurred.  The logic behind that is that all loops will--at some point--reach a condition which causes the loop to terminate, so if having a termination condition be met was enough to trigger an ELSE then one could argue the ELSE should always run.  That's not useful.</p>
          <p><a href="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609/10</link>
        <pubDate>Mon, 25 Jan 2021 09:09:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-609-10</guid>
        <source url="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609.rss">The Simple-yet-Powerful Magic of The Loop Result Protocol</source>
      </item>
      <item>
        <title>The Simple-yet-Powerful Magic of The Loop Result Protocol</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p><strong><a href="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609">The Simple-yet-Powerful Magic of The Loop Result Protocol</a></strong></p>
</blockquote>
<p>It's two years later and with the dawn of <strong><a href="https://forum.rebol.info/t/null-isotope-naming-issues/1417">NULL isotopes</a></strong>, voidification is dying.</p>
<p>So it's time to review the loop result protocol and where it stands at this point.</p>
<p>It means a loop whose body returns NULL would return the "heavy" isotope NULL-2.</p>
<pre><code>&gt;&gt; loop 2 [print "Hi", null]
Hi
Hi
; null-2
</code></pre>
<p>So that loop would trigger a THEN, but not trigger an ELSE.</p>
<pre><code>&gt;&gt; loop 2 [print "Hi", null] then [print "THEN!"] else [print "ELSE!"]
Hi
Hi
THEN!
== ~void~
</code></pre>
<p>If you BREAK it, you'd get the "light" isotope, and trigger ELSE:</p>
<pre><code>&gt;&gt; loop 2 [print "Hi", break] then [print "THEN!"] else [print "ELSE!"]
Hi
ELSE!
== ~void~
</code></pre>
<p>Either way, it's a NULL.</p>
<pre><code>&gt;&gt; null? loop 2 [print "Hi", null]
Hi
Hi
== #[true]

&gt;&gt; null? loop 2 [print "Hi", break]
Hi
== #[true]
</code></pre>
<h2>What About Knowing If The Loop Ran At Least Once or Not?</h2>
<p>The theory was that as long as we were taking away NULL, we might try using some other value to indicate the body never ran.  BLANK! was used, and then blank was voidified if the body returned it.</p>
<p>I haven't used this in practice...partially because the voiding made me uneasy, and called the whole feature into question.  One would think that if it were <em>really</em> useful, I would have likely overcome my uneasiness to try applying it.</p>
<p>But let's get back to top-level motivation.  Imagine you have a pipeline of loops, maybe inside an ALL or ANY:</p>
<pre><code> any [
     while [b &lt; 1020] [...]
     while [j &gt; 304] [...]
     ...
 ]
</code></pre>
<p>The question was what loops that don't run their body even once return, <em>when NULL is reserved specificially for breaking</em>.</p>
<p>They could prime themselves with a named void of their name, so you'd at least know where your non-useful-value came from.  :-/</p>
<pre><code>&gt;&gt; while [false] [&lt;not run&gt;]
== ~while~
</code></pre>
<p>BUT if they return VOID!, then they become ornery to work with in chains like this.  The theory was that priming them with another value would make it easier...and BLANK! was the offered choice.  So if you had a bunch of loops with conditions and they were looking to calculate values you could just skip the ones whose conditions blocked them from even trying.</p>
<p>We now have the alternative non-ELSE-triggering option of NULL-2 instead of BLANK! to throw in the mix.  Since it's not a value you might want to put in a block, it's probably a better choice than BLANK! is.</p>
<p><strong>Either way, with voidification being dead, we need to get rid of the voidification of loop body values.</strong>  I don't think reserving a value for "if and only if the loop body never ran" is justifiable.  If you want to make that convention arise yourself by never returning the value loops are primed with, that's up to you.</p>
<p>So no voidification, let's try priming with NULL-2 and see how it pans out.</p>
<pre><code>&gt;&gt; while [false] [&lt;not run&gt;]
; null-2

&gt;&gt; while [false] [&lt;not run&gt;] then [print "Counts as 'didn't break'"]
Counts as 'didn't break'
== ~void~
</code></pre>
<p>My instincts have been that it would be a mistake to conflate "condition didn't run the body" with "the body had a BREAK occur".  Because conditions being false is a normal exit condition of the loop.</p>
<p>If NULL-2 doesn't seem to have any particular usefulness then maybe just switch it to prime with void.</p>
<hr>
<p>Precedent note: Rebol2 and R3-Alpha chose NONE here:</p>
<pre><code>rebol2/r3-alpha&gt;&gt; while [false] []
== none
</code></pre>
<p>Red is using UNSET!:</p>
<pre><code>&gt;&gt; unset? while [false] []
== true
</code></pre>
<p>The advantages around UNSET! (VOID!) would be safety-motivated, where you are assigning a variable from the result of the loop and you think that erroring is better than continuing with a value that was never set by running a body.</p>
<p>I don't suppose anyone has a strong opinion...</p>
          <p><a href="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609/9</link>
        <pubDate>Wed, 25 Nov 2020 21:52:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-609-9</guid>
        <source url="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609.rss">The Simple-yet-Powerful Magic of The Loop Result Protocol</source>
      </item>
      <item>
        <title>The Simple-yet-Powerful Magic of The Loop Result Protocol</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="5" data-topic="609">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>You’ve thought it through very carefully, now we just need to try it on for size and see if it’s a good fit.</p>
</blockquote>
</aside>
<p>While the premise behind the "loop result protocol" has remained mostly consistent, there has been some shuffle to "perfect" it.  <img src="//forum.rebol.info/images/emoji/twitter/diamond_shape_with_a_dot_inside.png?v=7" title=":diamond_shape_with_a_dot_inside:" class="emoji" alt=":diamond_shape_with_a_dot_inside:">  I've updated the <a href="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609/">first post for this thread</a> to convey the subtleties.</p>
<p><strong>TL; DR</strong></p>
<ol>
<li>
<p>BREAK causes NULL for <em>all</em> loops, even MAP-EACH <em>(which previously would keep the in-progress, results, e.g. <code>map-each x [1 2 3 4] [if x = 3 [break] x]</code> would give you <code>[1 2]</code>)</em>.  That feature was simply not worth making it impossible to tell from the outside if the loop broke.</p>
</li>
<li>
<p><em>many</em> loops return BLANK! if they never run the body, MAP-EACH is an exception to this (it returns an empty block if the input block is empty).</p>
</li>
<li>
<p>The loops that follow (2) distinguish the case where their body-running-loop-result would be BLANK! or NULL by returning void ("voidification").  This means BLANK! is returned if-and-only-if the loop body never runs, and NULL is returned if-and-only-if the loop breaks.  Both are falsey, but can still be discerned from each other... e.g. ELSE is only null active, while OR is null and blank (and false) active.</p>
</li>
</ol>
<aside class="quote no-group" data-post="6" data-topic="609" data-full="true">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>I must admit I felt a bit uneasy about barification, so I like the new turn.</p>
</blockquote>
</aside>
<p>When you compare something like <em>"barification of false, null, or blank"</em> to <em>"voidification of null and blank"</em>, I think there's significantly less harm.  Also, the void has very high odds of stepping in to warn you of misunderstandings--so it "teaches the protocol".</p>
          <p><a href="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609/8</link>
        <pubDate>Sun, 18 Nov 2018 19:11:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-609-8</guid>
        <source url="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609.rss">The Simple-yet-Powerful Magic of The Loop Result Protocol</source>
      </item>
      <item>
        <title>The Simple-yet-Powerful Magic of The Loop Result Protocol</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>I must admit I felt a bit uneasy about barification, so I like the new turn.</p>
</blockquote>
<p>Me too...and hopefully you will also like the <a href="https://forum.rebol.info/t/void-and-the-end-of-blankification/704">end of blankification</a> (now a more limited form of result-mutating, known as voidification).</p>
<p>...which makes me feel less uneasy, also--especially in being able to cut out all those sprawling refinements and *-specializations...</p>
          <p><a href="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609/7</link>
        <pubDate>Fri, 22 Jun 2018 07:47:36 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-609-7</guid>
        <source url="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609.rss">The Simple-yet-Powerful Magic of The Loop Result Protocol</source>
      </item>
      <item>
        <title>The Simple-yet-Powerful Magic of The Loop Result Protocol</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>I must admit I felt a bit uneasy about barification, so I like the new turn.</p>
          <p><a href="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609/6</link>
        <pubDate>Mon, 11 Jun 2018 14:17:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-609-6</guid>
        <source url="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609.rss">The Simple-yet-Powerful Magic of The Loop Result Protocol</source>
      </item>
      <item>
        <title>The Simple-yet-Powerful Magic of The Loop Result Protocol</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Sounds good. You've thought it through very carefully, now we just need to try it on for size and see if it's a good fit.</p>
          <p><a href="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609/5</link>
        <pubDate>Fri, 08 Jun 2018 20:11:26 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-609-5</guid>
        <source url="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609.rss">The Simple-yet-Powerful Magic of The Loop Result Protocol</source>
      </item>
      <item>
        <title>The Simple-yet-Powerful Magic of The Loop Result Protocol</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="2" data-topic="609">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>I really like it. I’m curious to see what others have to say about it.</p>
</blockquote>
</aside>
<p>I've updated the post to convey a new--and I believe less "meddling"--version of the rules.</p>
<p>The previous idea of formalizing that a loop which never ran would return NULL arose from historical Rebol--as well as a desire to avoid fabricating a value when there was none.  So when it came time to think of how a loop would signal to the outside that it had been broken, NULL was "already taken".  That's how the idea of blank when a BREAK happened came up.</p>
<p>But I thought to look at it from a fresh frame of mind, after the recent reflection on why having <a href="https://forum.rebol.info/t/null-tolerance-and-conditionals-making-a-decision/663">failed conditionals return BLANK! is a bad idea</a>.  BLANK! is a legitimate value, and doing mutations of it to push such an in-band value to become some other in-band value...just to be able to use BLANK! to signal something else...is bad.</p>
<p><em>NULL is different</em>.  It can't be stored in a block, it's neither true nor false, and historical Rebol wouldn't even let you use it to unset a variable without a special refinement to SET.  It is supposed to be "edgy".  So should a conditional branch evaluate to a null, or a loop body evaluate to a null, it's not such a terrible sin to convert it to a BLANK!.  But it's much worse to convert another value, especially to convert a LOGIC! false into a (truthy) BAR!.</p>
<p>So this new spin on loop rules reassigns NULL to loops getting a BREAK.  A loop that never runs gives a BLANK!, which is also a legal value for if the loop body wants to return that.  <em>but</em> a loop user who wants to be complicit in distinguishing a loop that never ran from one that did may do so, simply by saying:</p>
<pre><code> while [...] [
     ...
     true
 ]
</code></pre>
<p>That gives null if it breaks, true if it runs at least once, and blank if it never runs.  So you get the three states, albeit having to get a little more involved.  <em>(Code golfers will generally find whatever the body returned naturally was already truthy, but I think explicitly putting the TRUE is wiser for the common codebase).</em></p>
<p>I think this is on the whole a better plan--giving basically all the same benefits, but in a clearer way.</p>
          <p><a href="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609/4</link>
        <pubDate>Fri, 08 Jun 2018 18:52:59 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-609-4</guid>
        <source url="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609.rss">The Simple-yet-Powerful Magic of The Loop Result Protocol</source>
      </item>
      <item>
        <title>The Simple-yet-Powerful Magic of The Loop Result Protocol</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I really like it. I'm curious to see what others have to say about it. I'm not the most clever ren-c coder, but I definitely see some of these new constructs enabling me to sidestep some of the bulkier expressions I often write.</p>
          <p><a href="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609/2</link>
        <pubDate>Tue, 08 May 2018 20:42:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-609-2</guid>
        <source url="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609.rss">The Simple-yet-Powerful Magic of The Loop Result Protocol</source>
      </item>
      <item>
        <title>The Simple-yet-Powerful Magic of The Loop Result Protocol</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><strong>Note: This post has been updated 17-Nov-2018 to reflect the current state of the rules.</strong></p>
<h2>Loops return null if-and-only-if they break</h2>
<p>One very good reason this rule exists is to make it easy to build custom loop constructs out of several other loop constructs.  You can tell "from the outside" whether one of your sub-loops was BREAK'd...this way the the higher level construct is aware it shouldn't run any more of its component loop phases.</p>
<p><em>(If this rule did not exist, then implementing a loop out of several other loops would have to invasively hook and rebind BREAK in each loop body to its own, and handle that.  Even if it were possible--which it probably should be--this would be complex and inefficient.  So the simpler rule is better!)</em></p>
<p>That's the only "hard rule" of loop return results, however...</p>
<h2>...many common loops return a BLANK! if the body never ran</h2>
<pre><code>&gt;&gt; loop 0 [&lt;unreturned&gt;]
== _

&gt;&gt; for-each x [] [&lt;unreturned&gt;]
== _
</code></pre>
<p>To distinguish this case (and the breaking case) from normal running, such loops also "voidify" a body result of blank or null:</p>
<pre><code>&gt;&gt; for-each x [1 2 3] [null]
// #[void] 

&gt;&gt; loop 1 [_]
// #[void]

&gt;&gt; x: true while [x] [x: false] // evaluating to logic false still works
== #[false] // so you can get a "falsey" result even if the body runs to completion
</code></pre>
<p>Remember that voids may be cantaknerous values, but they are nonetheless "ANY-VALUE!"s...hence they will trigger THEN and not trigger ELSE.  But if you try to use void with conditional logic and test it for truth or falsehood, you'll get an error.</p>
<h2>Reacting to BREAKs and empty loops is easy!</h2>
<p>Loop aggregators aren't the only place that benefits from being able to tell what happened with a loop from its result.   Plain user code reaps the benefits as well.</p>
<p>Right off the bat, if your loop body always returns a truthy thing, you can leverage the result to make sure at least one body ran and there wasn't a break:</p>
<pre><code>all [
    for-each x block [
         if some-test x [break]
         &lt;truthy-result&gt;
    ]
    // ^-- falsey to interrupt ALL if block is empty, or BREAKs
    ...
]
</code></pre>
<p>If you don't want to count not having the body run as an equivalent result to a BREAK in a situation like this, leverage the fact that BLANK! is a value to trigger THEN and truthyify that case:</p>
<pre><code>all [
    for-each x block [
         if some-test x [break]
         &lt;truthy-result&gt;
    ] then [true]
    // ^-- only on BREAK is it now falsey to interrupt the ALL
    ...
]
</code></pre>
<p>If you're only concerned with whether a loop BREAKs, then ELSE is the ticket:</p>
<pre><code>for-each x block [
   if some-test x [break]
   &lt;truthy-result&gt;
] else [
    // This code runs only if the loop breaks
    // ...so it still runs even if block is []
]
</code></pre>
<p>You can combine that with THEN to segregate code when the loop <em>doesn't</em> break:</p>
<pre><code>for-each x block [
   if some-test x [break]
   &lt;truthy-result&gt;
] then [
    // This code runs only if the loop doesn't break
] else [
    // This code runs only if the loop breaks
]
</code></pre>
<p>You can use AND and OR to test the logic cases:</p>
<pre><code>for-each x block [
    if some-test x [break]
    &lt;truthy-result&gt;
] or [
    // This code runs if the loop breaks -or- DIDN'T
    // run the body at least once
]

for-each x block [
    if some-test x [break]
    &lt;truthy-result&gt;
] and [
    // This code runs if the loop doesn't break and ran
    // the body at least once
]
</code></pre>
<h3>Practical example?</h3>
<p>Here's a very cool real world case from the console code:</p>
<pre><code>pos: molded: mold/limit :v 2048
loop 20 [
    pos: next (find pos newline else [break])
] then [
    insert clear pos "..."
]
</code></pre>
<p>You have up to 2048 characters of data coming back from the mold, ok. Now you want just the first 20 lines of that.  If truncation is necessary, put an ellipsis on the end.</p>
<p><code>loop 20</code> obviously will always try and run the body at least once. (So the loop will never return blank here.)</p>
<p>FIND will return NULL if it can't find the thing you asked it, so the ELSE runs when you can't get the position.  If it makes it up to 20 without breaking, then the THEN clause runs.</p>
<p>So there you go.  The first 20 lines of the first 2048 characters of a mold, truncating with "..."  I think the THEN really follows the idea of <em>completion</em>, it makes sense (to me) that a BREAK would bypass a THEN (or an ALSO, which is similar) clause.</p>
<p>I encourage people to get creative, to look at ways to use this to write clearer/shorter/better code.</p>
          <p><a href="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609/1</link>
        <pubDate>Tue, 08 May 2018 18:56:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-609-1</guid>
        <source url="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609.rss">The Simple-yet-Powerful Magic of The Loop Result Protocol</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Naming of bitwise OR, AND, XOR</title>
    <link>https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472</link>
    <description>The plain words OR and AND (and XOR, NOR, etc) were frequently desired to be made &quot;conditional&quot;:

[CureCode 1879: Conditional Operators](https://github.com/rebol/rebol-issues/issues/1879)

Early on, Ren-C implemented this...as well as the notion that the prefix forms would be the behavior of INTERSECT, UNION, etc.  (Then much later, it went down the path of [how exactly to handle short-circuiting](https://github.com/rebol/rebol-issues/issues/1879#issuecomment-354865401), which is its own topic...and it&#39;s why you have to parenthesize the second argument of AND and OR.)

But the question came up of what to name the infix bitwise operations.  What were chosen were `or+` and `and*`...which were allusions to the symbols for the operations used in boolean arithmetic:

https://www.allaboutcircuits.com/textbook/digital/chpt-7/boolean-arithmetic/

But since that early decision, `*` has taken on a kind of special meaning...what one might often think of as &quot;/ONLY&quot; or the more &quot;core&quot; or fundamental version of an operation.  (e.g. `select [a 10 b 20] &#39;c` gives back a BLANK! for convenience, even though that is conflated with `select [a 10 b 20 c _]`.  It is built on top of `select*` which would give a void in the first case, and a blank in the second.)

    select: redescribe [
        {Variant of SELECT* that returns BLANK when not found, instead of void}
    ](
        chain [:select* | :to-value]
    )

This usage of `*` has become so pervasive in the naming scheme, that it makes `and*` seem misleading.

Hence I think `or+` and `and+` may be a better choice to say &quot;the bitwise mathy or&quot; and &quot;the bitwise mathy and&quot;, rather than bow to this kind-of-obscure use of symbolism from boolean math.

Haven&#39;t changed it just yet, but plan to, unless anyone has better ideas.</description>
    
    <lastBuildDate>Wed, 11 Nov 2020 18:40:30 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Naming of bitwise OR, AND, XOR</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="iArnold" data-post="3" data-topic="1302">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/iarnold/40/226_2.png" class="avatar"><a href="https://forum.rebol.info/t/soliciting-ideas-for-a-bitwise-dialect/1302/3">Soliciting Ideas for a BITWISE Dialect</a>
</div>
<blockquote>
<p>I was looking for arbitrary length integers and came across <a href="https://smlfamily.github.io/Basis/int-inf.html">this page </a> where the bitwise operators are called andb orb and notb.</p>
</blockquote>
</aside>
<p>This was my suggestion in the other thread.</p>
          <p><a href="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/15</link>
        <pubDate>Wed, 11 Nov 2020 18:40:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-472-15</guid>
        <source url="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472.rss">Naming of bitwise OR, AND, XOR</source>
      </item>
      <item>
        <title>Naming of bitwise OR, AND, XOR</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="13" data-topic="472">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>In other news: it may be possible to do short-circuiting AND via a refinement like /SHORT.</p>
</blockquote>
</aside>
<p>All right, <strong>I think we have the actual, final answer</strong> (at least for the conditional operators, not the bitwise ones.  :-/)</p>
<p>The answer comes from the notion that <strong><a href="https://forum.rebol.info/t/plain-group-branching-only-run-if-branch-taken/1373">"Plain GROUP! branches only run if branch taken"</a></strong></p>
<p>Basically, we have precedent now that:</p>
<pre><code>&gt;&gt; branchy: func [flag] [either flag '[&lt;a&gt;] '[&lt;b&gt;]]

&gt;&gt; either true (print "a" branchy true) (print "b" branchy false)
a
== &lt;a&gt;
</code></pre>
<p>Most people seem to think this makes perfect sense...and if you want the less-intuitive behavior of running both branches you can get it with GET-GROUP!.</p>
<p>If you think <em>that</em> makes perfect sense, why be surprised at this:</p>
<pre><code>&gt;&gt; false and (print "right" false)
== #[false]

&gt;&gt; true and (print "right" true)
right
== #[true]
</code></pre>
<p>Not exactly universe-shattering to absorb that consequence.  Then, if you want the right hand side to run unconditionally, you use a GET-GROUP!:</p>
<pre><code>&gt;&gt; false and :(print "right" false)
right
== #[false]
</code></pre>
<p>That looks pretty sensible to me.  It just means that the right hand side of an AND has to be in a GROUP! or a GET-GROUP!, which you'd probably want a lot of the time anyway.</p>
          <p><a href="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/14</link>
        <pubDate>Wed, 11 Nov 2020 16:11:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-472-14</guid>
        <source url="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472.rss">Naming of bitwise OR, AND, XOR</source>
      </item>
      <item>
        <title>Naming of bitwise OR, AND, XOR</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Not sure what you mean...as bignums are different and addition is much more common than intersecting sets, so it would be untenable if <code>+</code> mutated.  It's more important to have an answer there than for set unions.</p>
<p>But I'm still contemplating mutation.  The issue is that implementation algorithms tend to involve making new sets.  But it just seems ever-random in a language that mutates by default on things like APPEND or UPPERCASE to be picking other foundational things that don't mutate.  The topic needs a broader philosophy.  :-/</p>
<p>In other news: it may be possible to do short-circuiting AND via a refinement like /SHORT.  Then since infix doesn't dispatch from a path (unless you use SHOVE &gt;-)...make it a modal argument that controls the refinement.</p>
<pre><code>&gt;&gt; 1 and 2
== #[true]

&gt;&gt; x: [...]
&gt;&gt; (integer? x) and @[x + 1 &lt; 2]
== #[false]

&gt;&gt; (integer? x) &gt;- and/short [x + 1 &lt; 2]  ; long way to write it
== #[false]
</code></pre>
<p>It's a feature people could use if they wanted to, or avoid if they didn't</p>
          <p><a href="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/13</link>
        <pubDate>Sun, 18 Oct 2020 16:21:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-472-13</guid>
        <source url="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472.rss">Naming of bitwise OR, AND, XOR</source>
      </item>
      <item>
        <title>Naming of bitwise OR, AND, XOR</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>How does "only mutating set operations fit into bignum plans?</p>
          <p><a href="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/12</link>
        <pubDate>Sun, 18 Oct 2020 07:11:32 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-472-12</guid>
        <source url="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472.rss">Naming of bitwise OR, AND, XOR</source>
      </item>
      <item>
        <title>Naming of bitwise OR, AND, XOR</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h3>Contemplation Point Six: INTERSECT and UNION etc. Have /SKIP</h3>
<p>From the tests, I'd noticed that operations like OR differed from their "set-based" counterparts like UNION on BINARY:</p>
<pre><code>r3-alpha&gt;&gt; #{0FF0} or #{FFF0}
== #{FFF0}

r3-alpha&gt;&gt; union #{0FF0} #{FFF0}
== #{0FF0FF}
</code></pre>
<p>OR was acting in a bitwise fashion... interpreting the binary as <em>a collection of bits</em>.  While UNION was treating the BINARY! bytewise... interpreting it as <em>a collection of bytes</em>.</p>
<p>If you notice that the set operations have a /SKIP parameter, it gets even more nuanced:</p>
<pre><code> r3-alpha&gt;&gt; intersect/skip "abcd" "cd" 2
 == "cd"

 r3-alpha&gt;&gt; intersect/skip "abcd" "bc" 2
 == none
</code></pre>
<p>So you can treat a series as a collection of subunits of a certain size--even strings and binaries.</p>
<p><em>This makes Ladislav's point that INTERSECT is like AND...or that UNION is like OR...seem not all that relevant.</em>  Operations that act on series with series-like properties are a rather distinct concept, and really shouldn't be wedged into the same space.</p>
<h2>Ideas Of The Moment</h2>
<p>Here's a possible game plan:</p>
<ul>
<li>
<p>conditional but <em>non-short-circuiting</em> AND/OR/XOR</p>
</li>
<li>
<p>implement bitwise AND/OR in the BITWISE dialect.  Instead of writing <strong>x: y and z</strong> you could say that as <strong>x: bitwise [y and z]</strong>  It looks better than <strong>x: y bitand z</strong>, and reads out loud like what it does.</p>
</li>
<li>
<p>set operations are mutating, unrelated to the bitwise ops, and don't have non-mutating forms (copy input if you need to).  COMPLEMENT would be mutating and not applicable to integers, so you'd say <strong>x: bitwise [not y]</strong> instead of <strong>x: complement y</strong>.</p>
</li>
</ul>
<p><strong>Trying to take all the evidence in, the argument for the appeal of conditional operators to newbies is still strong.</strong>  Yet if the operations don't have short-circuit behavior, they will not fit most people's expections...</p>
<pre><code> y: [a b c]
 if (integer? y) and (y + 1 &gt; 5) [
      print ["oops, left false but still ran right...the addition fails."]
 ]
</code></pre>
<p>But what I'm weighing is that maybe the lack of short-circuiting is a good teachable moment for the evaluator...and why ANY and ALL are different.  And there are plenty of cases...e.g. checking multiple refinements...were not being short-circuiting isn't some huge catastrophic performance or logistical problem:</p>
<pre><code>foo: func [arg /ref1 /ref2] [
    if ref1 and ref2 [
         fail "Would it be so bad if this worked?"
    ]
    ...
]
</code></pre>
<p>Besides such cases being common...used intelligently, a non-short-circuiting AND can fit in as a tool for things that short-circuiting ALL can't express as cleanly.  Plenty of applications in code golf...</p>
<p><strong>So I think the real referendum here isn't on conditional AND/OR/XOR...but on trying to wedge short-circuiting into it.</strong></p>
<p>It's time to go ahead and make the BITWISE dialect, even if it isn't great at first...to try it and see what the use cases dictate.  It looks like the right solution to this problem.</p>
          <p><a href="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/11</link>
        <pubDate>Sat, 17 Oct 2020 22:01:55 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-472-11</guid>
        <source url="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472.rss">Naming of bitwise OR, AND, XOR</source>
      </item>
      <item>
        <title>Naming of bitwise OR, AND, XOR</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="1" data-topic="472">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>The plain words OR and AND (and XOR, NOR, etc) were frequently desired to be made "conditional":</p>
<p><a href="https://github.com/rebol/rebol-issues/issues/1879" rel="nofollow noopener">CureCode 1879: Conditional Operators </a></p>
<p>Early on, Ren-C implemented this...as well as the notion that the prefix forms would be the behavior of INTERSECT, UNION, etc.</p>
</blockquote>
</aside>
<p>We've had quite a lot of time with this change.</p>
<p><em>...and I've been wondering if we might want to revert it...</em>  Maybe even to make them bit-operations and set-operations and <em>prefix</em>.  <img src="https://forum.rebol.info/images/emoji/twitter/astonished.png?v=9" title=":astonished:" class="emoji" alt=":astonished:"></p>
<p>This isn't firmed up, but it's a thought that has been on my mind.  Here's some reasoning.</p>
<h2>Reason One: The Need For Non Mutating INTERSECT/UNION/etc.</h2>
<p>In <a href="https://forum.rebol.info/t/planning-ahead-for-bignum-integer/623">Planning Ahead for BigNum Arithmetic</a> I discuss the tricks involved in defining variants of addition in mutating forms like ADD with a non-mutating variant like PLUS, and then enfixing PLUS as +.</p>
<p>I won't rewrite that post here.  I'll just say that a similar issue comes up with things like INTERSECT, UNION, and DIFFERENCE...which I always thought had "mutating-sounding" names anyway.  They're going to need an optimized non-mutating form that doesn't create a new numeric identity if what it makes fits in a cell.</p>
<p>So rather than making AND and OR and XOR some logic-heeding enfix knock-offs of THEN and ELSE, they might be better purposed to those non-mutating forms.  Possibly they'd be best not even being enfix, to keep people from using them wrongly.</p>
<p>After all, you can make anything enfix with SHOVE:</p>
<pre><code>1 &gt;- and 2
</code></pre>
<h2>Reason Two: Other Places To Get Our Enfix Fix</h2>
<p>One of the arguments for why people wanted enfix conditional AND and OR is that they just fit the pacing in people's mind better.  Using ANY or ALL for short-circuit evaluation has you looking at this:</p>
<pre><code>if any [condition1 condition2] [
    ...
]
</code></pre>
<p>This has two prefix conditions and then two argument blocks.  There's nothing breaking it up into a more natural grammar.  So it's a bit of a speedbump.</p>
<p>But now we can say:</p>
<pre><code>any [condition1 condition2] then [
    ...
]
</code></pre>
<p>I think the difference is particularly better for long condition lists:</p>
<pre><code>either any [
    condition1
    condition2
    ...
    conditionN
][
    ...
][
   ...
]

any [
    condition1
    condition2
    ...
    conditionN
]
then [
    ...
]
else [
]
</code></pre>
<p>So you get a bit of a better pacing...something more "natural language-like".  It's getting a word-in-edgewise between the blocks.</p>
<h2>Reason Three: No Satisfying Alternative Names</h2>
<p>I don't like <strong><code>bitand</code></strong> and friends, and I've been unhappy with <strong><code>and+</code></strong>, <strong><code>or+</code></strong>....</p>
<h2>Reason Four: Lack of Use</h2>
<p>Empirically I'm just not using the infix AND / OR / etc. much.</p>
<p>The fact that short-circuiting requires putting the right hand side in a block kills a lot of the benefits.<br>
Then you add that to the annoyance of having to put any interesting expressions on the left in parentheses.</p>
<p>Pretty much everything I want to do is covered by THEN, ELSE, ALSO, and the other things that have come along.  Reasoning about the AND and OR variants in these cases hasn't seemed worth the mental tax.</p>
<h2>Reason Five: Favoring Status Quo If Benefit Not Obvious</h2>
<p>So Ladislav made some good arguments for why this would be nice in theory...and why NOT being conditional and shoving off the non-conditionality to COMPLEMENT offers a hint that <em>users just expect coditional operators from AND, OR, and XOR</em>.</p>
<p>I guess what I'm saying here is...the benefit hasn't seemed to come across yet.</p>
<p><strong>Maybe the problem is that it hasn't been done right?</strong>  Perhaps AND and OR belong in a dialected situation where their expressions aren't being processed by the rules of the evaluator.  LOGICAL as a analogue to MATH (or maybe just part of it?)</p>
<pre><code> if math [
     (some expression and some other expression)
     or some expression on the next line
 ][
     ...
 ]
</code></pre>
<p>Maybe the default implementations of AND and OR don't exist at all, but point you to using this MATH dialect... where divisions also happen before additions, and things are "how people expect"?</p>
<p>I don't know, but I wanted to come back to this and put some of my qualms on the radar.</p>
          <p><a href="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/10</link>
        <pubDate>Fri, 09 Oct 2020 05:54:09 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-472-10</guid>
        <source url="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472.rss">Naming of bitwise OR, AND, XOR</source>
      </item>
      <item>
        <title>Naming of bitwise OR, AND, XOR</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>To re-summarize the trick of today for plain AND and OR: achieving short-circuitness requires some kind of array on the right hand side of an AND or an OR.  Given that an array needs to be there, the idea was that GROUP! vs. BLOCK! would give different behaviors.</p>
<pre><code> &lt;left&gt; and (&lt;right&gt;) =&gt; #[true] ;-- GROUP! means force result to LOGIC!
 &lt;left&gt; and [&lt;right&gt;] =&gt; &lt;right&gt; ;-- BLOCK! means act like `all [&lt;left&gt; &lt;right&gt;]`
</code></pre>
<aside class="quote no-group quote-modified" data-post="1" data-topic="472">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Hence I think or+ and and+ may be a better choice to say “the bitwise mathy or” and “the bitwise mathy and”, rather than bow to this kind-of-obscure use of symbolism from boolean math.</p>
<p>Haven’t changed it just yet, but plan to, unless anyone has better ideas.</p>
</blockquote>
</aside>
<p>...well, here's something that didn't come up yet--for some reason--to let the GROUP!'d form be UNION/INTERSECT-like.  They work on LOGIC!, and now we have the nice word DID.  Even in the worst case scenario that x and y aren't LOGIC!, and neither of them already needed a NOT on them anyway, you'd have:</p>
<pre><code>flag: did x and (did y) ;-- interpreted as `(did x) and (did y)`
</code></pre>
<p>So with this, we might be able to have our cake and eat it too.  AND and OR could be synonyms for INTERSECT and UNION when used with a GROUP!, and act like ALL and ANY when used with a BLOCK!.</p>
<ul>
<li>AND+ and OR+ are still kind of ugly and never really settled well</li>
<li>I'm not finding a huge need for AND/OR making LOGIC! variables</li>
<li>GROUP!s being used for COMPOSE means BLOCK! is often better for conditionals anyway</li>
<li>It would be a bit of a nod to historical Rebol</li>
</ul>
<p>What would be a bit annoying about it is that the blocks have a chunky aesthetic on a conditional line:</p>
<pre><code>if blah blah and [blah blah blah] [
    ...
]

if blah blah and (blah blah blah) [
    ...
]
</code></pre>
<p>But as I mention, you've got your DID and your NOT to let you use the second form if what you're testing isn't LOGIC! already.</p>
<p>I guess one must weigh it all in the balance, and if killing off AND+ and OR+ is worth it.  Maybe?  I imagine it would be more error-prone, which is probably a good argument against it.  But just weird it hadn't come up yet at all.</p>
          <p><a href="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/9</link>
        <pubDate>Wed, 25 Jul 2018 02:07:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-472-9</guid>
        <source url="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472.rss">Naming of bitwise OR, AND, XOR</source>
      </item>
      <item>
        <title>Naming of bitwise OR, AND, XOR</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="5" data-topic="472">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/gchiu/40/22_2.png" class="avatar"> gchiu:</div>
<blockquote>
<p>bitand, bitor</p>
</blockquote>
</aside>
<p>One of the goals of the change is that essentially:</p>
<pre><code> and+: enfix tighten :intersect
 or+: enfix tighten :union
 xor+: enfix tighten :difference
</code></pre>
<p>That is to say that these operations are the <em>abstract</em> mathematical concepts, like DIFFERENCE is the <a href="https://en.wikipedia.org/wiki/Symmetric_difference" rel="nofollow noopener">Symmetric Difference</a>. When applied to scalar numbers, there's no real other interpretation other than to think you mean it bitwise.  But they're not constrained to that, they work on sets too...</p>
<pre><code> &gt;&gt; [a b c e g] and+ [b e f]
 == [b e]
</code></pre>
<p>So putting "bit" in the name would suggest it's more limited than it is.</p>
<p>For the moment I'm just switching <code>AND*</code> to <code>AND+</code>, but going ahead and getting the intended change committed, so the issues related to moving plain AND and OR to being conditional can march forward.  <em>(And killing the definitely-badly-named AND~, OR~, XOR~.)</em>  By all means, people can keep thinking about the relevant issues.</p>
          <p><a href="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/8</link>
        <pubDate>Tue, 23 Jan 2018 11:08:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-472-8</guid>
        <source url="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472.rss">Naming of bitwise OR, AND, XOR</source>
      </item>
      <item>
        <title>Naming of bitwise OR, AND, XOR</title>
        <dc:creator><![CDATA[BrianOtto]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="5" data-topic="472">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/gchiu/40/22_2.png" class="avatar"> gchiu:</div>
<blockquote>
<p>bitand, bitor</p>
</blockquote>
</aside>
<p>+1 for this, I like it.</p>
          <p><a href="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/7</link>
        <pubDate>Tue, 23 Jan 2018 05:59:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-472-7</guid>
        <source url="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472.rss">Naming of bitwise OR, AND, XOR</source>
      </item>
      <item>
        <title>Naming of bitwise OR, AND, XOR</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>I like bitand and bitor.<br>
Then bitcoin should flip bits randomly?</p>
          <p><a href="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/6</link>
        <pubDate>Wed, 17 Jan 2018 14:32:14 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-472-6</guid>
        <source url="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472.rss">Naming of bitwise OR, AND, XOR</source>
      </item>
      <item>
        <title>Naming of bitwise OR, AND, XOR</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>To make it even more topical we could call them</p>
<p><code>bitand</code>, <code>bitor</code></p>
<p>and now to find a use for <code>bitcoin</code></p>
          <p><a href="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/5</link>
        <pubDate>Wed, 17 Jan 2018 04:21:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-472-5</guid>
        <source url="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472.rss">Naming of bitwise OR, AND, XOR</source>
      </item>
      <item>
        <title>Naming of bitwise OR, AND, XOR</title>
        <dc:creator><![CDATA[BrianOtto]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="1" data-topic="472">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>What were chosen were or+ and and*...which were allusions to the symbols for the operations used in boolean arithmetic:</p>
</blockquote>
</aside>
<p>I actually quite like this, it helps you figure out the logic as you read it, but I see your point about <code>*</code> being used elsewhere.</p>
<p><code>+</code> makes the most sense to me, to give it a "mathy" look. I think all other characters have either been ruled out (here and in that ticket) or don't give it that "mathy" feeling.</p>
<p>What about a different word? I think I still like <code>+</code> better, but throwing this out here ...</p>
<p>band (bitwise and)<br>
bor (bitwise or)</p>
          <p><a href="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/4</link>
        <pubDate>Wed, 17 Jan 2018 01:05:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-472-4</guid>
        <source url="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472.rss">Naming of bitwise OR, AND, XOR</source>
      </item>
      <item>
        <title>Naming of bitwise OR, AND, XOR</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="472">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/markeye/40/202_2.png" class="avatar"> MarkEye:</div>
<blockquote>
<p>and^</p>
</blockquote>
</aside>
<p>We've discussed allowing escaping in WORD!, e.g. <strong>spaces^-between</strong> <em>(I'm an advocate for <code>^-</code> being space instead of tab, else it would be <code>^_</code>)</em>, which would take away caret as a simple word character.</p>
<aside class="quote no-group" data-post="2" data-topic="472">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/markeye/40/202_2.png" class="avatar"> MarkEye:</div>
<blockquote>
<p>and&amp;</p>
</blockquote>
</aside>
<p>I'm still partial to moving to <code>&amp;</code> for something, possibly characters to line up with <a href="https://dev.w3.org/html5/html-author/charref" rel="nofollow noopener">HTML entities</a>.  It's an ugly word character, and this would help with the extreme overloading of meanings for <span class="hashtag">#:</span></p>
<pre><code>if &amp;c = first "cat" [
   print ["first character in cat" space &amp;RightArrow space "c"]
]</code></pre>
          <p><a href="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/3</link>
        <pubDate>Wed, 17 Jan 2018 00:32:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-472-3</guid>
        <source url="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472.rss">Naming of bitwise OR, AND, XOR</source>
      </item>
      <item>
        <title>Naming of bitwise OR, AND, XOR</title>
        <dc:creator><![CDATA[Mark-hi]]></dc:creator>
        <description><![CDATA[
            <p>(1) <code>and&amp;</code>, which is just as confusing as + (which should be v) and therefore perfect<br>
(2) <code>and^</code>, since that is the actual mathematical symbol used for and</p>
          <p><a href="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/2</link>
        <pubDate>Wed, 17 Jan 2018 00:12:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-472-2</guid>
        <source url="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472.rss">Naming of bitwise OR, AND, XOR</source>
      </item>
      <item>
        <title>Naming of bitwise OR, AND, XOR</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The plain words OR and AND (and XOR, NOR, etc) were frequently desired to be made "conditional":</p>
<p><a href="https://github.com/rebol/rebol-issues/issues/1879" rel="nofollow noopener">CureCode 1879: Conditional Operators</a></p>
<p>Early on, Ren-C implemented this...as well as the notion that the prefix forms would be the behavior of INTERSECT, UNION, etc.  (Then much later, it went down the path of <a href="https://github.com/rebol/rebol-issues/issues/1879#issuecomment-354865401" rel="nofollow noopener">how exactly to handle short-circuiting</a>, which is its own topic...and it's why you have to parenthesize the second argument of AND and OR.)</p>
<p>But the question came up of what to name the infix bitwise operations.  What were chosen were <code>or+</code> and <code>and*</code>...which were allusions to the symbols for the operations used in boolean arithmetic:</p>
<p><a href="https://www.allaboutcircuits.com/textbook/digital/chpt-7/boolean-arithmetic/" class="onebox" target="_blank" rel="nofollow noopener">https://www.allaboutcircuits.com/textbook/digital/chpt-7/boolean-arithmetic/</a></p>
<p>But since that early decision, <code>*</code> has taken on a kind of special meaning...what one might often think of as "/ONLY" or the more "core" or fundamental version of an operation.  (e.g. <code>select [a 10 b 20] 'c</code> gives back a BLANK! for convenience, even though that is conflated with <code>select [a 10 b 20 c _]</code>.  It is built on top of <code>select*</code> which would give a void in the first case, and a blank in the second.)</p>
<pre><code>select: redescribe [
    {Variant of SELECT* that returns BLANK when not found, instead of void}
](
    chain [:select* | :to-value]
)
</code></pre>
<p>This usage of <code>*</code> has become so pervasive in the naming scheme, that it makes <code>and*</code> seem misleading.</p>
<p>Hence I think <code>or+</code> and <code>and+</code> may be a better choice to say "the bitwise mathy or" and "the bitwise mathy and", rather than bow to this kind-of-obscure use of symbolism from boolean math.</p>
<p>Haven't changed it just yet, but plan to, unless anyone has better ideas.</p>
          <p><a href="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472/1</link>
        <pubDate>Tue, 16 Jan 2018 20:07:12 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-472-1</guid>
        <source url="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472.rss">Naming of bitwise OR, AND, XOR</source>
      </item>
  </channel>
</rss>

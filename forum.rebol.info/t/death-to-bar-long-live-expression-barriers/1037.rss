<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Death to BAR! (Long Live Expression Barriers!)</title>
    <link>https://forum.rebol.info/t/death-to-bar-long-live-expression-barriers/1037</link>
    <description>Rebol expressions have a habit of getting hard to read when you put them all on a line:

    if all [integer? x even? x x &gt; 10] [print &quot;confusing!&quot;]

You could put the expressions in GROUP!s:

    if all [(integer? x) (even? x) (x &gt; 10)] [print &quot;confusing!&quot;]

But that looks a bit cluttered.  And if you&#39;re going to be byte-conscious (and CPU-cycle-conscious), each GROUP! is a distinct array series, and represents a separate recursion in the evaluator.  You&#39;ve quadrupled space and CPU usage.  You&#39;ve also squandered GROUP! for any COMPOSE operations that you might have wanted to use it for.

Some people (@gchiu, and I&#39;ve seen Gregg do it) double space to get around it:

    if all [integer? x  even? x  x &gt; 10] [print &quot;better?&quot;]

That&#39;s not a terrible answer, though I think it looks like a mistake.  And there&#39;s no enforcement of if you&#39;re right about where the expression breaks are or not, you can get it completely wrong:

    if all [integer?  x even? x x  &gt; 10] [print &quot;nonsense...&quot;]

## Meet Expression Barrier

Expression barrier is a *postponing-enfix invisible* action.

All that means is that it won&#39;t run in an argument slot, it demands your evaluation be at a &quot;neutral&quot; point before it runs and takes the left-hand product.  This finicky-ness is perfect for the task:

    &gt;&gt; (1 + 2 | 10 + 20)
    == 30

    &gt;&gt; (1 + 2 |)
    == 3

    &gt;&gt; (1 + | 2)
    ** Script Error: + is missing its value2 argument

For practical purposes, it looks like an END to a variadic (much like a THEN or ELSE does now, to enforce consistency between variadic and non-variadic forms).  Which gives a pleasing result:

    foo: func [x [integer! &lt;...&gt;]] [
        sum: 0
        while [not tail? x] [
            sum: sum + take x
        ]
    ]

    &gt;&gt; (z: foo 1 2 3 | 4 5)
    == 5

    &gt;&gt; z
    == 6

## BAR! is not a Special Datatype Anymore!

In the early days of Ren-C, there was little hope for implementing what expression barriers wanted without a specific feature.  It was tried, e.g. an early attempt in R3-Alpha at getting an expression barrier was **|: does []**.   It was non-ideal, but since unsets were ignored by ANY and ALL you got at least a smidgeon of &quot;invisibility&quot;:

    r3-alpha&gt;&gt; |: does [] 
    r3-alpha&gt;&gt; all [true | true | 1020]
    == 1020
    r3-alpha&gt;&gt; any [false | false | 1020]
    == 1020

Red considers #[unset] to be truthy, so this doesn&#39;t work:

    red&gt;&gt; |: does [] 
    red&gt;&gt; all [true | true | 1020]
    == 1020
    red&gt;&gt; any [false | false | 1020]
    ; no result

The overall shape and design of Ren-C tried to embrace the concept of &quot;null as invisible&quot; until that really didn&#39;t work, leading to today&#39;s designs (falsey null, logically ambiguous void).  None of it has much to do with expression barriers...which have turned out to have more in common with COMMENT and THEN/ELSE than anything.

In any case, **`|`** comes back now as a WORD! for the best of reasons: all the magic is now in userspace features.  So mark down one fewer incompatibility point with Rebol2 and friends...and one more victory point for the Ren-C design.

*(I will *postpone* my examples of cool uses for postponing enfix operators for another thread...!)*</description>
    
    <lastBuildDate>Fri, 03 Jul 2020 17:32:29 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/death-to-bar-long-live-expression-barriers/1037.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Death to BAR! (Long Live Expression Barriers!)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Rebol expressions have a habit of getting hard to read when you put them all on a line:</p>
<pre><code>if all [integer? x even? x x &gt; 10] [print "confusing!"]
</code></pre>
<p>You could put the expressions in GROUP!s:</p>
<pre><code>if all [(integer? x) (even? x) (x &gt; 10)] [print "confusing!"]
</code></pre>
<p>But that looks a bit cluttered.  And if you're going to be byte-conscious (and CPU-cycle-conscious), each GROUP! is a distinct array series, and represents a separate recursion in the evaluator.  You've quadrupled space and CPU usage.  You've also squandered GROUP! for any COMPOSE operations that you might have wanted to use it for.</p>
<p>Some people (<a class="mention" href="/u/gchiu">@gchiu</a>, and I've seen Gregg do it) double space to get around it:</p>
<pre><code>if all [integer? x  even? x  x &gt; 10] [print "better?"]
</code></pre>
<p>That's not a terrible answer, though I think it looks like a mistake.  And there's no enforcement of if you're right about where the expression breaks are or not, you can get it completely wrong:</p>
<pre><code>if all [integer?  x even? x x  &gt; 10] [print "nonsense..."]
</code></pre>
<h2>Meet Expression Barrier</h2>
<p>Expression barrier is a <em>postponing-enfix invisible</em> action.</p>
<p>All that means is that it won't run in an argument slot, it demands your evaluation be at a "neutral" point before it runs and takes the left-hand product.  This finicky-ness is perfect for the task:</p>
<pre><code>&gt;&gt; (1 + 2 | 10 + 20)
== 30

&gt;&gt; (1 + 2 |)
== 3

&gt;&gt; (1 + | 2)
** Script Error: + is missing its value2 argument
</code></pre>
<p>For practical purposes, it looks like an END to a variadic (much like a THEN or ELSE does now, to enforce consistency between variadic and non-variadic forms).  Which gives a pleasing result:</p>
<pre><code>foo: func [x [integer! &lt;...&gt;]] [
    sum: 0
    while [not tail? x] [
        sum: sum + take x
    ]
]

&gt;&gt; (z: foo 1 2 3 | 4 5)
== 5

&gt;&gt; z
== 6
</code></pre>
<h2>BAR! is not a Special Datatype Anymore!</h2>
<p>In the early days of Ren-C, there was little hope for implementing what expression barriers wanted without a specific feature.  It was tried, e.g. an early attempt in R3-Alpha at getting an expression barrier was <strong>|: does []</strong>.   It was non-ideal, but since unsets were ignored by ANY and ALL you got at least a smidgeon of "invisibility":</p>
<pre><code>r3-alpha&gt;&gt; |: does [] 
r3-alpha&gt;&gt; all [true | true | 1020]
== 1020
r3-alpha&gt;&gt; any [false | false | 1020]
== 1020
</code></pre>
<p>Red considers #[unset] to be truthy, so this doesn't work:</p>
<pre><code>red&gt;&gt; |: does [] 
red&gt;&gt; all [true | true | 1020]
== 1020
red&gt;&gt; any [false | false | 1020]
; no result
</code></pre>
<p>The overall shape and design of Ren-C tried to embrace the concept of "null as invisible" until that really didn't work, leading to today's designs (falsey null, logically ambiguous void).  None of it has much to do with expression barriers...which have turned out to have more in common with COMMENT and THEN/ELSE than anything.</p>
<p>In any case, <strong><code>|</code></strong> comes back now as a WORD! for the best of reasons: all the magic is now in userspace features.  So mark down one fewer incompatibility point with Rebol2 and friends...and one more victory point for the Ren-C design.</p>
<p><em>(I will <em>postpone</em> my examples of cool uses for postponing enfix operators for another thread...!)</em></p>
          <p><a href="https://forum.rebol.info/t/death-to-bar-long-live-expression-barriers/1037/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/death-to-bar-long-live-expression-barriers/1037/1</link>
        <pubDate>Sun, 27 Jan 2019 01:52:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1037-1</guid>
        <source url="https://forum.rebol.info/t/death-to-bar-long-live-expression-barriers/1037.rss">Death to BAR! (Long Live Expression Barriers!)</source>
      </item>
  </channel>
</rss>

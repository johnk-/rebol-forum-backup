<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The About-1/3-Of-2018-is-Over Report</title>
    <link>https://forum.rebol.info/t/the-about-1-3-of-2018-is-over-report/595</link>
    <description>Here in late April, how are things going [on the list](https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443/6)?  Well..

* **UTF-8 Everywhere** - Being depressingly realistic/conservative, despite having spent quite a lot of time on this in January/February, I&#39;m going to call it *half done*.  There&#39;s a level at which it [does work...just slowly](https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374/4?u=hostilefork).  Though a lot of progress in other tangential areas needed to be made to get that much going.  For instance the relationship between the &quot;device layer&quot; and strings and the core, had to begin using the currency of STRING! values via libRebol.  Much of that is now committed with [Latin-1 Nowhere](https://github.com/metaeducation/ren-c/pull/773).

* **libRebol** - There&#39;s been a lot of progress on this, though it is a huge design space.  As just mentioned, parts of the system that used to speak in terms of weird structs and protocols are starting to exchange data as opaque REBVAL*.  I think philosophically, things have shaped up a bit in terms of direction on when a &quot;new API entry point&quot; is justified vs. asking users to use string-based imports...and doing something like a prepared statement for performance.  This is a vast task that isn&#39;t easy to say when it&#39;s &quot;finished&quot;; a lot of hard things have been looked at, there are a lot more.

* **Derived Binding** - This got committed and I thought it was done, because it had mechanically solved the problem of making copies.  Seemingly it was working great.  Yet despite that I know it&#39;s not making deep copies of function bodies, the memory profile of a pathological example I tried did not have significantly less memory use than R3-Alpha, and it ran slower.  :-/  I&#39;m confident it was &quot;working&quot; but something is going on that will require profiling to figure out, so I&#39;ll have to do that.  I bet/hope it&#39;s something dumb that will be easily fixed.

* **Bring Rebmu Up To Date:** I&#39;ve brought my old projects up to running condition, but Rebmu is going to take a while.  It&#39;s not just a toy--it has sparked real questions, and it&#39;s a way of looking at all the constructs as an organized package.  I&#39;ve realized that one thing it really needs is a kind of macro facility, as I need things like `IE: macro [] [if equal?]` which are executable but do not get involved with worrying about proxying any arguments...rather just splice their material into the evaluator stream and let arguments be picked up as-is.  We already need this for other reasons, and I&#39;ve discussed the likes of `1 inline [+ 2]` being able to produce 3.  That&#39;s probably the biggest missing mechanic, and while I&#39;m certain it can be done these things always end up being trickier than they sound, when all is taken into account.

* **Userspace Stepwise-Debugging and Tracing** - I&#39;ve done a little work on this but the issues involved here are substantial.  Some of the biggest problems involve basic questions of how resigned we should be to a single thread, single-Rebol-isolate model.  If you say that your debugger is always running on the same thread--in the same userspace as your program--that creates certain limitations.  I&#39;m not sure which of those limitations to accept, which to build scaffolding to help make them be understood as more temporary, or whether to try and solve isolates/threading in some more general way.  This is kind of the biggest unknown on this list, and it hasn&#39;t gotten much more known.  *(But I do believe FRAME! and other pieces of infrastructure are done quite well for debugging)*

---

**EMSCRIPTEN** wasn&#39;t in the forefront of my mind at first, but despite my natural aversion to webthings--it should be priority #1.  I still think an interactive online tutorial--where people don&#39;t need to download anything and can play with it--is probably the most relevant artifact we could have around.

We got a big step in progress on that from @giuliolunati, with turnkey emscripten builds.  That includes one on Travis-CI, so we don&#39;t let it fall by the wayside (as the experiments from previous years kept doing).  We can call Rebol from JavaScript, but that&#39;s not all that useful compared to *calling JavaScript from Rebol and having it react without the Rebol code having to finish all its functions off the stack*.  So what Giulio has been looking at is how we can:

* fire up Rebol under JavaScript
* have it run a Rebol script that wants to have an effect in the browser (but not yield its state)
* put the Rebol interpreter into a state of &quot;suspended animation&quot;, where it is waiting on a result
* while Rebol is in suspension, do arbitrary JavaScript manipulations--post timer messages, get callbacks, return control to the browser
* when the browser gives back control with the effects/information gathered, take Rebol out of suspended animation, so that the interpreter wakes up in the middle of whatever function was running before...but with the effects and information it requested accomplished.

Even if this is done in an ugly way, it would be like [the first transistor](https://www.extremetech.com/extreme/175004-the-genesis-of-the-transistor-the-single-greatest-discovery-in-the-last-100-years)...a proof of concept, so we&#39;d just work on making it prettier after that.  Or as pretty as JavaScript can be.  :-)

I&#39;d been trying to work on a particular aspect of the emscripten build, which is integration with JavaScript exceptions; and getting the part of the debugger that depends on exceptions to work is the hardest bit.  So I get distracted, but, it&#39;s still what we&#39;re aiming for as the *&quot;should probably be more important than everything else&quot;* thing.

---

Other neat things have been happening in the meantime, too.

* We got a [New Test Format](https://github.com/metaeducation/ren-c/pull/766) from @Brett, and I actually went through trying to get all the tests triaged that were hanging around.  *(Left to add are [his date tests](https://forum.rebol.info/t/how-to-deal-with-users-mutating-date-and-time-to-be-invalid/240/6?u=hostilefork) and work through the bugs they represent, which were the inspiration for the format change.)*  A lot of little bugs got fixed, or at least documented somewhere, in that process.  And all the test that are committed pass.

* [ELIDE and the &quot;invisibles&quot; mechanic](https://trello.com/c/snnG8xwW) has been pretty much the gift that keeps on giving.  A feature I once thought of little benefit beyond &quot;making comments truly invisible&quot; has turned out to have wide-ranging impacts and ramifications on the design.  Whether it&#39;s being able to [splice unconditional code in the middle of a CASE](https://github.com/metaeducation/ren-c/pull/770), or [lay the foundation for having voids in plain ANY and ALL be errors](https://github.com/metaeducation/ren-c/pull/769), or [retake the name ALSO for higher purposes](https://trello.com/c/pGhk9EbV), or letting you DUMP variables wherever you want... it&#39;s great.  I mention that it&#39;s the regular discovery of these kinds of things that keeps me interested.  So thanks to @MarkEye for provoking me to do it.

* [OR and AND got awesome](https://forum.rebol.info/t/how-to-use-else-and-or-and-knowing-the-difference/527), and actually motivated a design shift in enfix.  There&#39;s some real cleverness I think in the way they work, and how they handle GROUP! and BLOCK! on the right.

* [DOES got awesome](https://trello.com/c/KgwJRlyj/208-does-invokes-do-for-string-url-etc-can-fully-specialize-any-function-doesnt-intercept-return), [SPECIALIZE got awesomer](https://forum.rebol.info/t/the-now-even-more-special-specialize/588), and finally things like `:append/dup/part` [create *efficient* specializations](https://trello.com/c/adIrsQNl), vs just be an error or act weird.

* [ME and MY](https://trello.com/c/8Bmwvwya/185-me-and-my-operators-replace-and-by-allowing-a-variable-to-update-relative-to-itself) came about, and are good ways of avoiding repeating a variable name. 

* A nifty new generalized COMPOSE (that might need another name) [called CONCOCT](https://trello.com/c/ko89tF2Y/210-concoct-lets-you-choose-your-own-delimiter-pattern-to-compose-with) was assembled rather rapidly, and is working very well.  The increasing speed with which we can take feature ideas and put them into action--while having them play well with other features--is exactly what I hoped to see under the *&quot;modify with confidence&quot;* mantra.

---

So a lot can happen in not-quite 4 months.  I&#39;m going to be traveling a bit, but will have computer(s) with me, so hopefully a lot will still happen, anyway.

I realize not everything coming down the pipe appears to affect everyone&#39;s bottom line...in terms of practicalities of apps one is trying to write.  But I think the issues of the language core are *the bottom line*.  There are a lot of languages out there that people can use to &quot;just get things done&quot;.

I&#39;m not that worried that a working and meaningful language core could be hooked up to some C++ code (or otherwise) to use Rebol to script something.  If you look at what the Node.JS guy did, it wouldn&#39;t be that hard to copy.  IF the language and interfaces were right.  But if the language isn&#39;t something *really*-**really**-special, then today&#39;s world is just too saturated for it to get attention.</description>
    
    <lastBuildDate>Mon, 23 Apr 2018 09:24:06 +0000</lastBuildDate>
    <category>Announcements</category>
    <atom:link href="https://forum.rebol.info/t/the-about-1-3-of-2018-is-over-report/595.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The About-1/3-Of-2018-is-Over Report</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="595">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>Can't thank you enough.</p>
</blockquote>
</aside>
<p>Your support of the forums and servers for the builds is quite significant.  Just make sure <a class="mention" href="/u/gchiu">@gchiu</a> backs up my writings--this is becoming an important place to link to.  <img src="//forum.rebol.info/images/emoji/twitter/slight_smile.png?v=7" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://forum.rebol.info/t/the-about-1-3-of-2018-is-over-report/595/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-about-1-3-of-2018-is-over-report/595/3</link>
        <pubDate>Mon, 23 Apr 2018 09:24:06 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-595-3</guid>
        <source url="https://forum.rebol.info/t/the-about-1-3-of-2018-is-over-report/595.rss">The About-1/3-Of-2018-is-Over Report</source>
      </item>
      <item>
        <title>The About-1/3-Of-2018-is-Over Report</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Thanks Brian. You're doing amazing work and really pushing some boundaries. Can't thank you enough.</p>
          <p><a href="https://forum.rebol.info/t/the-about-1-3-of-2018-is-over-report/595/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-about-1-3-of-2018-is-over-report/595/2</link>
        <pubDate>Fri, 20 Apr 2018 13:18:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-595-2</guid>
        <source url="https://forum.rebol.info/t/the-about-1-3-of-2018-is-over-report/595.rss">The About-1/3-Of-2018-is-Over Report</source>
      </item>
      <item>
        <title>The About-1/3-Of-2018-is-Over Report</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Here in late April, how are things going <a href="https://forum.rebol.info/t/ren-c-2018-roadmap-and-retrospective/443/6">on the list</a>?  Well..</p>
<ul>
<li>
<p><strong>UTF-8 Everywhere</strong> - Being depressingly realistic/conservative, despite having spent quite a lot of time on this in January/February, I'm going to call it <em>half done</em>.  There's a level at which it <a href="https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374/4?u=hostilefork">does work...just slowly</a>.  Though a lot of progress in other tangential areas needed to be made to get that much going.  For instance the relationship between the "device layer" and strings and the core, had to begin using the currency of STRING! values via libRebol.  Much of that is now committed with <a href="https://github.com/metaeducation/ren-c/pull/773" rel="nofollow noopener">Latin-1 Nowhere</a>.</p>
</li>
<li>
<p><strong>libRebol</strong> - There's been a lot of progress on this, though it is a huge design space.  As just mentioned, parts of the system that used to speak in terms of weird structs and protocols are starting to exchange data as opaque REBVAL*.  I think philosophically, things have shaped up a bit in terms of direction on when a "new API entry point" is justified vs. asking users to use string-based imports...and doing something like a prepared statement for performance.  This is a vast task that isn't easy to say when it's "finished"; a lot of hard things have been looked at, there are a lot more.</p>
</li>
<li>
<p><strong>Derived Binding</strong> - This got committed and I thought it was done, because it had mechanically solved the problem of making copies.  Seemingly it was working great.  Yet despite that I know it's not making deep copies of function bodies, the memory profile of a pathological example I tried did not have significantly less memory use than R3-Alpha, and it ran slower.  :-/  I'm confident it was "working" but something is going on that will require profiling to figure out, so I'll have to do that.  I bet/hope it's something dumb that will be easily fixed.</p>
</li>
<li>
<p><strong>Bring Rebmu Up To Date:</strong> I've brought my old projects up to running condition, but Rebmu is going to take a while.  It's not just a toy--it has sparked real questions, and it's a way of looking at all the constructs as an organized package.  I've realized that one thing it really needs is a kind of macro facility, as I need things like <code>IE: macro [] [if equal?]</code> which are executable but do not get involved with worrying about proxying any arguments...rather just splice their material into the evaluator stream and let arguments be picked up as-is.  We already need this for other reasons, and I've discussed the likes of <code>1 inline [+ 2]</code> being able to produce 3.  That's probably the biggest missing mechanic, and while I'm certain it can be done these things always end up being trickier than they sound, when all is taken into account.</p>
</li>
<li>
<p><strong>Userspace Stepwise-Debugging and Tracing</strong> - I've done a little work on this but the issues involved here are substantial.  Some of the biggest problems involve basic questions of how resigned we should be to a single thread, single-Rebol-isolate model.  If you say that your debugger is always running on the same thread--in the same userspace as your program--that creates certain limitations.  I'm not sure which of those limitations to accept, which to build scaffolding to help make them be understood as more temporary, or whether to try and solve isolates/threading in some more general way.  This is kind of the biggest unknown on this list, and it hasn't gotten much more known.  <em>(But I do believe FRAME! and other pieces of infrastructure are done quite well for debugging)</em></p>
</li>
</ul>
<hr>
<p><strong>EMSCRIPTEN</strong> wasn't in the forefront of my mind at first, but despite my natural aversion to webthings--it should be priority <span class="hashtag">#1</span>.  I still think an interactive online tutorial--where people don't need to download anything and can play with it--is probably the most relevant artifact we could have around.</p>
<p>We got a big step in progress on that from <a class="mention" href="/u/giuliolunati">@giuliolunati</a>, with turnkey emscripten builds.  That includes one on Travis-CI, so we don't let it fall by the wayside (as the experiments from previous years kept doing).  We can call Rebol from JavaScript, but that's not all that useful compared to <em>calling JavaScript from Rebol and having it react without the Rebol code having to finish all its functions off the stack</em>.  So what Giulio has been looking at is how we can:</p>
<ul>
<li>fire up Rebol under JavaScript</li>
<li>have it run a Rebol script that wants to have an effect in the browser (but not yield its state)</li>
<li>put the Rebol interpreter into a state of "suspended animation", where it is waiting on a result</li>
<li>while Rebol is in suspension, do arbitrary JavaScript manipulations--post timer messages, get callbacks, return control to the browser</li>
<li>when the browser gives back control with the effects/information gathered, take Rebol out of suspended animation, so that the interpreter wakes up in the middle of whatever function was running before...but with the effects and information it requested accomplished.</li>
</ul>
<p>Even if this is done in an ugly way, it would be like <a href="https://www.extremetech.com/extreme/175004-the-genesis-of-the-transistor-the-single-greatest-discovery-in-the-last-100-years" rel="nofollow noopener">the first transistor</a>...a proof of concept, so we'd just work on making it prettier after that.  Or as pretty as JavaScript can be.  <img src="//forum.rebol.info/images/emoji/twitter/slight_smile.png?v=7" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>I'd been trying to work on a particular aspect of the emscripten build, which is integration with JavaScript exceptions; and getting the part of the debugger that depends on exceptions to work is the hardest bit.  So I get distracted, but, it's still what we're aiming for as the <em>"should probably be more important than everything else"</em> thing.</p>
<hr>
<p>Other neat things have been happening in the meantime, too.</p>
<ul>
<li>
<p>We got a <a href="https://github.com/metaeducation/ren-c/pull/766" rel="nofollow noopener">New Test Format</a> from <a class="mention" href="/u/brett">@Brett</a>, and I actually went through trying to get all the tests triaged that were hanging around.  <em>(Left to add are <a href="https://forum.rebol.info/t/how-to-deal-with-users-mutating-date-and-time-to-be-invalid/240/6?u=hostilefork">his date tests</a> and work through the bugs they represent, which were the inspiration for the format change.)</em>  A lot of little bugs got fixed, or at least documented somewhere, in that process.  And all the test that are committed pass.</p>
</li>
<li>
<p><a href="https://trello.com/c/snnG8xwW" rel="nofollow noopener">ELIDE and the "invisibles" mechanic</a> has been pretty much the gift that keeps on giving.  A feature I once thought of little benefit beyond "making comments truly invisible" has turned out to have wide-ranging impacts and ramifications on the design.  Whether it's being able to <a href="https://github.com/metaeducation/ren-c/pull/770" rel="nofollow noopener">splice unconditional code in the middle of a CASE</a>, or <a href="https://github.com/metaeducation/ren-c/pull/769" rel="nofollow noopener">lay the foundation for having voids in plain ANY and ALL be errors</a>, or <a href="https://trello.com/c/pGhk9EbV" rel="nofollow noopener">retake the name ALSO for higher purposes</a>, or letting you DUMP variables wherever you want... it's great.  I mention that it's the regular discovery of these kinds of things that keeps me interested.  So thanks to <a class="mention" href="/u/markeye">@MarkEye</a> for provoking me to do it.</p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/how-to-use-else-and-or-and-knowing-the-difference/527">OR and AND got awesome</a>, and actually motivated a design shift in enfix.  There's some real cleverness I think in the way they work, and how they handle GROUP! and BLOCK! on the right.</p>
</li>
<li>
<p><a href="https://trello.com/c/KgwJRlyj/208-does-invokes-do-for-string-url-etc-can-fully-specialize-any-function-doesnt-intercept-return" rel="nofollow noopener">DOES got awesome</a>, <a href="https://forum.rebol.info/t/the-now-even-more-special-specialize/588">SPECIALIZE got awesomer</a>, and finally things like <code>:append/dup/part</code> <a href="https://trello.com/c/adIrsQNl" rel="nofollow noopener">create <em>efficient</em> specializations</a>, vs just be an error or act weird.</p>
</li>
<li>
<p><a href="https://trello.com/c/8Bmwvwya/185-me-and-my-operators-replace-and-by-allowing-a-variable-to-update-relative-to-itself" rel="nofollow noopener">ME and MY</a> came about, and are good ways of avoiding repeating a variable name.</p>
</li>
<li>
<p>A nifty new generalized COMPOSE (that might need another name) <a href="https://trello.com/c/ko89tF2Y/210-concoct-lets-you-choose-your-own-delimiter-pattern-to-compose-with" rel="nofollow noopener">called CONCOCT</a> was assembled rather rapidly, and is working very well.  The increasing speed with which we can take feature ideas and put them into action--while having them play well with other features--is exactly what I hoped to see under the <em>"modify with confidence"</em> mantra.</p>
</li>
</ul>
<hr>
<p>So a lot can happen in not-quite 4 months.  I'm going to be traveling a bit, but will have computer(s) with me, so hopefully a lot will still happen, anyway.</p>
<p>I realize not everything coming down the pipe appears to affect everyone's bottom line...in terms of practicalities of apps one is trying to write.  But I think the issues of the language core are <em>the bottom line</em>.  There are a lot of languages out there that people can use to "just get things done".</p>
<p>I'm not that worried that a working and meaningful language core could be hooked up to some C++ code (or otherwise) to use Rebol to script something.  If you look at what the Node.JS guy did, it wouldn't be that hard to copy.  IF the language and interfaces were right.  But if the language isn't something <em>really</em>-<strong>really</strong>-special, then today's world is just too saturated for it to get attention.</p>
          <p><a href="https://forum.rebol.info/t/the-about-1-3-of-2018-is-over-report/595/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-about-1-3-of-2018-is-over-report/595/1</link>
        <pubDate>Fri, 20 Apr 2018 02:48:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-595-1</guid>
        <source url="https://forum.rebol.info/t/the-about-1-3-of-2018-is-over-report/595.rss">The About-1/3-Of-2018-is-Over Report</source>
      </item>
  </channel>
</rss>

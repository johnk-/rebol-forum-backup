<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>NULL Rule Failures and a Weird Parse Generator Idea</title>
    <link>https://forum.rebol.info/t/null-rule-failures-and-a-weird-parse-generator-idea/1648</link>
    <description>So a while ago, I was thinking about the idea of a kind of GROUP! as a PARSE rule that would fail if it was NULL.  

*It&#39;s not a property you want for plain GROUP! in PARSE!!!*

    uparse &quot;aaa&quot; [some [&quot;a&quot; (if trace [print &quot;Matched an A&quot;])]]

You wouldn&#39;t want that IF not running to give a NULL that caused the rule to not match.  That would mean you&#39;d have to write:

    uparse &quot;aaa&quot; [some [&quot;a&quot; opt (if trace [print &quot;Matched an A&quot;])]]

That&#39;s junky.  

But let&#39;s imagine there were *another* kind of group that did fail when it was NULL.  For the sake of argument let&#39;s call it **/(group)**.  Otherwise it&#39;s just like GROUP!...result discarded and everything.

When we had such a group on hand, I noticed we could do something like this:

     gen: func [&lt;static&gt; n (0)] [
         if n &lt; 3 [return n: n + 1]
         return null
     ]

    &gt;&gt; uparse &quot;a&quot; [&quot;a&quot;, collect [while keep /(gen)]]
    == [1 2 3]

Since generators return NULL when they&#39;re done making values, you&#39;d be able to use the natural looping ability of WHILE and then have it stop keeping things, and you&#39;d get your values collected.

So I wrote a test for that...which broke when that behavior of the group class went away. 

It&#39;s probably silly, since we&#39;d be able to write something like **(map :gen)** and get the same effect.  I&#39;m just writing it down here because there was a comment about it, and I had sort of a &quot;hmmm&quot; about uses for a GROUP! form that considered itself a failed parse match if it was NULL.

Better here than in a comment.</description>
    
    <lastBuildDate>Thu, 05 Aug 2021 18:53:40 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/null-rule-failures-and-a-weird-parse-generator-idea/1648.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>NULL Rule Failures and a Weird Parse Generator Idea</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So a while ago, I was thinking about the idea of a kind of GROUP! as a PARSE rule that would fail if it was NULL.</p>
<p><em>It's not a property you want for plain GROUP! in PARSE!!!</em></p>
<pre><code>uparse "aaa" [some ["a" (if trace [print "Matched an A"])]]
</code></pre>
<p>You wouldn't want that IF not running to give a NULL that caused the rule to not match.  That would mean you'd have to write:</p>
<pre><code>uparse "aaa" [some ["a" opt (if trace [print "Matched an A"])]]
</code></pre>
<p>That's junky.</p>
<p>But let's imagine there were <em>another</em> kind of group that did fail when it was NULL.  For the sake of argument let's call it <strong>/(group)</strong>.  Otherwise it's just like GROUP!...result discarded and everything.</p>
<p>When we had such a group on hand, I noticed we could do something like this:</p>
<pre><code> gen: func [&lt;static&gt; n (0)] [
     if n &lt; 3 [return n: n + 1]
     return null
 ]

&gt;&gt; uparse "a" ["a", collect [while keep /(gen)]]
== [1 2 3]
</code></pre>
<p>Since generators return NULL when they're done making values, you'd be able to use the natural looping ability of WHILE and then have it stop keeping things, and you'd get your values collected.</p>
<p>So I wrote a test for that...which broke when that behavior of the group class went away.</p>
<p>It's probably silly, since we'd be able to write something like <strong>(map :gen)</strong> and get the same effect.  I'm just writing it down here because there was a comment about it, and I had sort of a "hmmm" about uses for a GROUP! form that considered itself a failed parse match if it was NULL.</p>
<p>Better here than in a comment.</p>
          <p><a href="https://forum.rebol.info/t/null-rule-failures-and-a-weird-parse-generator-idea/1648/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/null-rule-failures-and-a-weird-parse-generator-idea/1648/1</link>
        <pubDate>Thu, 05 Aug 2021 18:33:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1648-1</guid>
        <source url="https://forum.rebol.info/t/null-rule-failures-and-a-weird-parse-generator-idea/1648.rss">NULL Rule Failures and a Weird Parse Generator Idea</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Why Isn&#39;t PRINT Invisible (&quot;void&quot;)?</title>
    <link>https://forum.rebol.info/t/why-isnt-print-invisible-void/1466</link>
    <description>Since PRINT doesn&#39;t have an interesting return value, we might ask what the harm would be in making it invisible.

But let&#39;s generalize the question to SOME-FUNCTION where the key point is that at the time you write it, you haven&#39;t thought of a meaningful result for it.

## Catching Erroneous Assignments

Returning an &quot;ornery&quot; value helps catch mistakes more easily when a meaningless result is accidentally used.

But with invisibles, we might adopt a philosophy like C&#39;s, and say you cannot put a void function directly after an assignment:

    int x = some_void_function(...);  /* compiler will error */

Interestingly, C lets use them in comma-delimited expressions so long as they are discarded...you have to use parentheses to do it:

    int x = (some_void_function(...), 10 + 20);  /* this is okay */
    int x =  some_void_function(...), 10 + 20;  /* this errors */

We could do something similar

    x: comment &quot;hi&quot; 1 + 2  ; this could error
    x: (comment &quot;hi&quot; 1 + 2)  ; this could be okay

That&#39;s a little bit of a bummer for comment, but not the end of the world.

However, I want to see Ren-C&#39;s void/invisible used for things like BREAKPOINT and other tools... where having to rearrange your code in this way could be a nuisance (or dialect-wise, the GROUP!s could have semantic implications, e.g. if the code was inside of a COMPOSE).

But there are other issues...

## Limiting Interface Flexibility

If at the time of writing a function you know that it doesn&#39;t have a meaningful return value, then making it void--instead of returning a trash value--ties your hands in changing it.

People will start writing things like:

    all [
        ...
        some-function ...  ; user assumes no effect, because invisible
        ...
    ]

But if SOME-FUNCTION had returned a trash value, then they could have gotten the same effect more obviously with:

    all [
        ...
        elide some-function ...
        ...
    ]

This also gives more freedom to change the interface later, if you think of an interesting value to return.  You can progressively add more return types after the fact.  But once people assume you always return void, this trap will happen...you&#39;re locked in forever in a way that was pretty much completely avoidable.

## In PRINT&#39;s Case, a Differentiated NULL Output Has Value

Having a return value from PRINT that is either an ornery value or nothing lets you offer the neat option of returning NULL if the result of the print was nothing.

     &gt;&gt; line: &quot;some text&quot;
     &gt;&gt; print line then [print &quot;We had output!&quot;]
     some text
     We had output!

     &gt;&gt; line: _
     &gt;&gt; print line then [print &quot;We had output!&quot;]  ; no-op

To do this kind of thing requires having an output value.

I might be convinced that how people want to use PRINT is universally enough that they would rather it be invisible.  But that would involve a very specific understanding of a very common function...similar to how **elide** and **comment** and **assert** and **--** are known to have no result.

I don&#39;t think the average &quot;no meaningful result&quot; function fits in this category, and I&#39;d say I&#39;m fairly skeptical if PRINT belongs in it.

## I Think &quot;Void&quot; Functions Should Be Used Sparingly

I think the feature should be *discoverable*, because how it&#39;s done is unique...and we are giving it a more normal name (&quot;void function&quot;)

I&#39;m feeling a bit more amenable to the idea that these are void return modes, even if it creates barriers to a multi-valued RETURN:

    f1: func [x] [return]
    f1: func [x] [return comment x]

But this means there needs to be a relatively comfortable syntax for returning a BAD-WORD! that is like what we&#39;re used to.  [I&#39;m wondering if **return none**, recycling the word none for **~none~**, is the right compromise.](https://forum.rebol.info/t/the-return-of-none/1467)

&gt; **UPDATE:** I&#39;ve found some other reasons why not to do this again.  So I think arity-0 RETURN is likely going to keep the &quot;return meaningless (and ornery) value&quot; semantic.</description>
    
    <lastBuildDate>Mon, 18 Jan 2021 04:47:44 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/why-isnt-print-invisible-void/1466.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Why Isn&#39;t PRINT Invisible (&quot;void&quot;)?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Since PRINT doesn't have an interesting return value, we might ask what the harm would be in making it invisible.</p>
<p>But let's generalize the question to SOME-FUNCTION where the key point is that at the time you write it, you haven't thought of a meaningful result for it.</p>
<h2>Catching Erroneous Assignments</h2>
<p>Returning an "ornery" value helps catch mistakes more easily when a meaningless result is accidentally used.</p>
<p>But with invisibles, we might adopt a philosophy like C's, and say you cannot put a void function directly after an assignment:</p>
<pre><code>int x = some_void_function(...);  /* compiler will error */
</code></pre>
<p>Interestingly, C lets use them in comma-delimited expressions so long as they are discarded...you have to use parentheses to do it:</p>
<pre><code>int x = (some_void_function(...), 10 + 20);  /* this is okay */
int x =  some_void_function(...), 10 + 20;  /* this errors */
</code></pre>
<p>We could do something similar</p>
<pre><code>x: comment "hi" 1 + 2  ; this could error
x: (comment "hi" 1 + 2)  ; this could be okay
</code></pre>
<p>That's a little bit of a bummer for comment, but not the end of the world.</p>
<p>However, I want to see Ren-C's void/invisible used for things like BREAKPOINT and other tools... where having to rearrange your code in this way could be a nuisance (or dialect-wise, the GROUP!s could have semantic implications, e.g. if the code was inside of a COMPOSE).</p>
<p>But there are other issues...</p>
<h2>Limiting Interface Flexibility</h2>
<p>If at the time of writing a function you know that it doesn't have a meaningful return value, then making it void--instead of returning a trash value--ties your hands in changing it.</p>
<p>People will start writing things like:</p>
<pre><code>all [
    ...
    some-function ...  ; user assumes no effect, because invisible
    ...
]
</code></pre>
<p>But if SOME-FUNCTION had returned a trash value, then they could have gotten the same effect more obviously with:</p>
<pre><code>all [
    ...
    elide some-function ...
    ...
]
</code></pre>
<p>This also gives more freedom to change the interface later, if you think of an interesting value to return.  You can progressively add more return types after the fact.  But once people assume you always return void, this trap will happen...you're locked in forever in a way that was pretty much completely avoidable.</p>
<h2>In PRINT's Case, a Differentiated NULL Output Has Value</h2>
<p>Having a return value from PRINT that is either an ornery value or nothing lets you offer the neat option of returning NULL if the result of the print was nothing.</p>
<pre><code> &gt;&gt; line: "some text"
 &gt;&gt; print line then [print "We had output!"]
 some text
 We had output!

 &gt;&gt; line: _
 &gt;&gt; print line then [print "We had output!"]  ; no-op
</code></pre>
<p>To do this kind of thing requires having an output value.</p>
<p>I might be convinced that how people want to use PRINT is universally enough that they would rather it be invisible.  But that would involve a very specific understanding of a very common function...similar to how <strong>elide</strong> and <strong>comment</strong> and <strong>assert</strong> and <strong>--</strong> are known to have no result.</p>
<p>I don't think the average "no meaningful result" function fits in this category, and I'd say I'm fairly skeptical if PRINT belongs in it.</p>
<h2>I Think "Void" Functions Should Be Used Sparingly</h2>
<p>I think the feature should be <em>discoverable</em>, because how it's done is unique...and we are giving it a more normal name ("void function")</p>
<p>I'm feeling a bit more amenable to the idea that these are void return modes, even if it creates barriers to a multi-valued RETURN:</p>
<pre><code>f1: func [x] [return]
f1: func [x] [return comment x]
</code></pre>
<p>But this means there needs to be a relatively comfortable syntax for returning a BAD-WORD! that is like what we're used to.  <a href="https://forum.rebol.info/t/the-return-of-none/1467">I'm wondering if <strong>return none</strong>, recycling the word none for <strong>~none~</strong>, is the right compromise.</a></p>
<blockquote>
<p><strong>UPDATE:</strong> I've found some other reasons why not to do this again.  So I think arity-0 RETURN is likely going to keep the "return meaningless (and ornery) value" semantic.</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/why-isnt-print-invisible-void/1466/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-isnt-print-invisible-void/1466/1</link>
        <pubDate>Mon, 18 Jan 2021 01:40:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1466-1</guid>
        <source url="https://forum.rebol.info/t/why-isnt-print-invisible-void/1466.rss">Why Isn&#39;t PRINT Invisible (&quot;void&quot;)?</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>You only get...ONESHOT</title>
    <link>https://forum.rebol.info/t/you-only-get-oneshot/934</link>
    <description>ONESHOT is a cool new function generator, which makes a DO-like function which holds state to run only once.

    once: oneshot
    for-each x [10 20 30] [
         once [print [&quot;loop begins with&quot; x]]
         print [x]
    ]

And that will give you:

    loop begins with 10
    10
    20
    30

So although ONCE was called for each step in the loop, it only ran what it was given one time.  Unlike code that is run before the loop, it has access to the first element.  *(If BREAK and CONTINUE were &quot;definitional&quot;, it would also be able to modify them just once in the loop...which will likely be a relevant thing in the near future.)*

It&#39;s obviously not anything you couldn&#39;t do with declaring a LOGIC! and putting in the test-and-flip code.  But it&#39;s shorter.  And unlike wrapping that logic up in a helper function, this lets the code that you&#39;re controlling *change*, so if one of the cases runs, the other case (with differing code) won&#39;t run.

Plus, ONESHOT will &quot;voidify&quot; the evaluative result of what it&#39;s given--like a conditional would.  So NULL will always mean it didn&#39;t run the code you gave it.  So for instance, this means that for every time but the first, you could respond to it with an ELSE.

    once: oneshot
    for-each x [10 20 30] [
         once [print [&quot;first:&quot; x]] else [print [&quot;rest:&quot; x]]
    ]

That gives you:

    first: 10
    rest: 20
    rest: 30

ONESHOT is actually a specialization of N-SHOT, which lets you specifiy a generic N.  If that N is negative, then it will actually *not* run the code you give it N times before it starts running it.

    &gt;&gt; anti: n-shot -2

    &gt;&gt; anti [5 + 5]
    // null

    &gt;&gt; anti [6 + 6]
    // null

    &gt;&gt; anti [7 + 7]
    == 14

    &gt;&gt; anti [8 + 8]
    == 16

@MarkEye/@Mark-hi suggested UPSHOT as the name for the specialization when it&#39;s -1, so I went with that as the complement to ONESHOT for now.

## Use with `&lt;static&gt;` and get lazy initialization

If you have something you want to happen only the first time you call a function, that&#39;s now pretty easy:

    operation: function [... &lt;static&gt; lazy (oneshot)] [
        lazy [
            ** &quot;do expensive initialization here&quot;
        ]
        ...
    ]

This is a shorter way of writing:

    operation: function [... &lt;static&gt; initialized (false)] [
        if not initialized [
            ** &quot;do expensive initialization here&quot;
            initialized: true
        ]
        ...
    ]

Generating oneshots makes an ACTION!, and hence incurs more overhead than making a LOGIC! variable.  But once they&#39;ve been created, the execution time should be less than a conditional.  e.g. for this case, `lazy` makes its decision faster than an IF, and doesn&#39;t have to look up the words for the logic variables to be tested.</description>
    
    <lastBuildDate>Sat, 01 Dec 2018 00:00:00 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/you-only-get-oneshot/934.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>You only get...ONESHOT</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>ONESHOT is a cool new function generator, which makes a DO-like function which holds state to run only once.</p>
<pre><code>once: oneshot
for-each x [10 20 30] [
     once [print ["loop begins with" x]]
     print [x]
]
</code></pre>
<p>And that will give you:</p>
<pre><code>loop begins with 10
10
20
30
</code></pre>
<p>So although ONCE was called for each step in the loop, it only ran what it was given one time.  Unlike code that is run before the loop, it has access to the first element.  <em>(If BREAK and CONTINUE were "definitional", it would also be able to modify them just once in the loop...which will likely be a relevant thing in the near future.)</em></p>
<p>It's obviously not anything you couldn't do with declaring a LOGIC! and putting in the test-and-flip code.  But it's shorter.  And unlike wrapping that logic up in a helper function, this lets the code that you're controlling <em>change</em>, so if one of the cases runs, the other case (with differing code) won't run.</p>
<p>Plus, ONESHOT will "voidify" the evaluative result of what it's given--like a conditional would.  So NULL will always mean it didn't run the code you gave it.  So for instance, this means that for every time but the first, you could respond to it with an ELSE.</p>
<pre><code>once: oneshot
for-each x [10 20 30] [
     once [print ["first:" x]] else [print ["rest:" x]]
]
</code></pre>
<p>That gives you:</p>
<pre><code>first: 10
rest: 20
rest: 30
</code></pre>
<p>ONESHOT is actually a specialization of N-SHOT, which lets you specifiy a generic N.  If that N is negative, then it will actually <em>not</em> run the code you give it N times before it starts running it.</p>
<pre><code>&gt;&gt; anti: n-shot -2

&gt;&gt; anti [5 + 5]
// null

&gt;&gt; anti [6 + 6]
// null

&gt;&gt; anti [7 + 7]
== 14

&gt;&gt; anti [8 + 8]
== 16
</code></pre>
<p><a class="mention" href="/u/markeye">@MarkEye</a>/<a class="mention" href="/u/mark-hi">@Mark-hi</a> suggested UPSHOT as the name for the specialization when it's -1, so I went with that as the complement to ONESHOT for now.</p>
<h2>Use with <code>&lt;static&gt;</code> and get lazy initialization</h2>
<p>If you have something you want to happen only the first time you call a function, that's now pretty easy:</p>
<pre><code>operation: function [... &lt;static&gt; lazy (oneshot)] [
    lazy [
        ** "do expensive initialization here"
    ]
    ...
]
</code></pre>
<p>This is a shorter way of writing:</p>
<pre><code>operation: function [... &lt;static&gt; initialized (false)] [
    if not initialized [
        ** "do expensive initialization here"
        initialized: true
    ]
    ...
]
</code></pre>
<p>Generating oneshots makes an ACTION!, and hence incurs more overhead than making a LOGIC! variable.  But once they've been created, the execution time should be less than a conditional.  e.g. for this case, <code>lazy</code> makes its decision faster than an IF, and doesn't have to look up the words for the logic variables to be tested.</p>
          <p><a href="https://forum.rebol.info/t/you-only-get-oneshot/934/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/you-only-get-oneshot/934/1</link>
        <pubDate>Fri, 30 Nov 2018 23:46:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-934-1</guid>
        <source url="https://forum.rebol.info/t/you-only-get-oneshot/934.rss">You only get...ONESHOT</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>UPARSE Parameter Conventions: How Flexible?</title>
    <link>https://forum.rebol.info/t/uparse-parameter-conventions-how-flexible/1586</link>
    <description>UPARSE is shaping up to be mostly uniform, in that most arguments to parsers take parsers...which are functions (that in turn take other parsers)

The job of the parse engine is to take sequences of words and symbols and turn them into these functions.  This is why you can write **some keep integer!** or **some [keep integer!]** or **some [keep [integer!]]**.  It&#39;s not the job of SOME or KEEP or INTEGER! to worry about these blocks.

There are not a lot of cases of breaking this rule.  But the Redbol emulator has to, in order to get things like:

    set x integer!

Here we see that X is basically being &quot;quoted&quot; by SET.  It is not a parser in its own right.  While the second parameter (integer!) is a parser, and could just as easily be **[some integer!]**.

Right now the way I&#39;m dealing with this is to say that arguments which are not parser functions, like the variable here, are quoted arguments.  If in the combinator spec it sees a quoted argument, it just gets it literally.

So clearly that&#39;s important for legacy features.  But does it have a place in the harmonious parse world going forward?

Well, right now the SEEK rule is using it.

     x: here  ; here is a rule...which is value-bearing with the current position
     some &quot;a&quot;
     seek x  ; hm, here we are at another one of those quoting non-rule variables

Should this be shuffled around to where SEEK takes a rule?  If so, this would be:

     x: here
     some &quot;a&quot;
     seek (x) 

Because GROUP! is set up as a rule that always succeeds, and bears the value of its evaluation.

This kind of formulation would imply you could also do something like:

     seek [some &quot;a&quot;, let pos: here, some &quot;b&quot;, (pos)]

So GROUP! would not be the only thing you could put there.  Whereas if we went with the quoting-variable-option, you&#39;d be locked into only putting words there.

## ...But it&#39;s a Bigger Question Than Just SEEK

I&#39;ve talked about maybe having a parse exposure of enbin and debin.  Could they look like:

     uparse #{1020} [x: debin [BE + 2]]  ; BE + 2 block is obviously not a &quot;rule&quot;

Might the DEBIN take a BLOCK! to not mean a rule at all, but be literal dialect data to tell it to be &quot;big-endian, unsigned, 2 bytes&quot;?  Or would such values always need to be passed to rules via GROUP! ...so you know they&#39;re not rules?

     uparse #{1020} [x: debin ([BE + 2])]

**As I say, the ability to read arguments quoted literally will be there, else we could not implement Redbol SET and COPY emulation.**  The feature of combinators taking arguments by quote is a given.

*But is it a good idea to have anything in the box that does this, and encourage the practice?*

## I Think Flexibility Should Be Taught (Possibly (?) Encouraged?)

This reminds me a lot of the questions raised over **[speaking with Tics](https://forum.rebol.info/t/speaking-with-tics-should-quoted-arguments-always-be-apostrophed/1359)**.

There I asked if there should be expressions **type of x** instead of **&#39;type of x**, or if it was setting a bad example.

When something is so common and you get stuck making it ugly...when it would be very learnable and natural to make it nicer, I don&#39;t see why you would want the ugly version.

It&#39;s debatable how much of this applies to DEBIN.  You&#39;re more likely to want to make a rule for uint16:

     uint16: [debin ([BE + 2])]
     uparse #{1020} [x: uint16]

Which may even challenge my &quot;does this need to be a combinator anyway&quot;:

     uint16: [let data: across 2 skip, (debin [BE + 2] data)]
     uparse #{1020} [x: uint16]

Though that&#39;s less efficient, as it has to create a new series vs. decoding the binary input directly.  But at least these things are becoming *possible*.  It&#39;s a step up.

The bigger point remains: I think if someone has an idiom that they like, telling them *&quot;all BLOCK!s in PARSE must be rules, and you have to put them in GROUP!s to pass as arguments&quot;* feels like a restriction on par with saying that you must pass QUOTED! values to any regular functions...that there are no implicitly quoted arguments.

Implicitly quoted arguments seem to me to be one of the things that makes the language able to shapeshift to let you build syntaxes on par with coming up with a new language.  It&#39;s not something we want to overuse, but not using it at all seems misguided.

So I think this same thing happens with PARSE.</description>
    
    <lastBuildDate>Wed, 14 Apr 2021 08:45:47 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/uparse-parameter-conventions-how-flexible/1586.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>UPARSE Parameter Conventions: How Flexible?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>UPARSE is shaping up to be mostly uniform, in that most arguments to parsers take parsers...which are functions (that in turn take other parsers)</p>
<p>The job of the parse engine is to take sequences of words and symbols and turn them into these functions.  This is why you can write <strong>some keep integer!</strong> or <strong>some [keep integer!]</strong> or <strong>some [keep [integer!]]</strong>.  It's not the job of SOME or KEEP or INTEGER! to worry about these blocks.</p>
<p>There are not a lot of cases of breaking this rule.  But the Redbol emulator has to, in order to get things like:</p>
<pre><code>set x integer!
</code></pre>
<p>Here we see that X is basically being "quoted" by SET.  It is not a parser in its own right.  While the second parameter (integer!) is a parser, and could just as easily be <strong>[some integer!]</strong>.</p>
<p>Right now the way I'm dealing with this is to say that arguments which are not parser functions, like the variable here, are quoted arguments.  If in the combinator spec it sees a quoted argument, it just gets it literally.</p>
<p>So clearly that's important for legacy features.  But does it have a place in the harmonious parse world going forward?</p>
<p>Well, right now the SEEK rule is using it.</p>
<pre><code> x: here  ; here is a rule...which is value-bearing with the current position
 some "a"
 seek x  ; hm, here we are at another one of those quoting non-rule variables
</code></pre>
<p>Should this be shuffled around to where SEEK takes a rule?  If so, this would be:</p>
<pre><code> x: here
 some "a"
 seek (x) 
</code></pre>
<p>Because GROUP! is set up as a rule that always succeeds, and bears the value of its evaluation.</p>
<p>This kind of formulation would imply you could also do something like:</p>
<pre><code> seek [some "a", let pos: here, some "b", (pos)]
</code></pre>
<p>So GROUP! would not be the only thing you could put there.  Whereas if we went with the quoting-variable-option, you'd be locked into only putting words there.</p>
<h2>...But it's a Bigger Question Than Just SEEK</h2>
<p>I've talked about maybe having a parse exposure of enbin and debin.  Could they look like:</p>
<pre><code> uparse #{1020} [x: debin [BE + 2]]  ; BE + 2 block is obviously not a "rule"
</code></pre>
<p>Might the DEBIN take a BLOCK! to not mean a rule at all, but be literal dialect data to tell it to be "big-endian, unsigned, 2 bytes"?  Or would such values always need to be passed to rules via GROUP! ...so you know they're not rules?</p>
<pre><code> uparse #{1020} [x: debin ([BE + 2])]
</code></pre>
<p><strong>As I say, the ability to read arguments quoted literally will be there, else we could not implement Redbol SET and COPY emulation.</strong>  The feature of combinators taking arguments by quote is a given.</p>
<p><em>But is it a good idea to have anything in the box that does this, and encourage the practice?</em></p>
<h2>I Think Flexibility Should Be Taught (Possibly (?) Encouraged?)</h2>
<p>This reminds me a lot of the questions raised over <strong><a href="https://forum.rebol.info/t/speaking-with-tics-should-quoted-arguments-always-be-apostrophed/1359">speaking with Tics</a></strong>.</p>
<p>There I asked if there should be expressions <strong>type of x</strong> instead of <strong>'type of x</strong>, or if it was setting a bad example.</p>
<p>When something is so common and you get stuck making it ugly...when it would be very learnable and natural to make it nicer, I don't see why you would want the ugly version.</p>
<p>It's debatable how much of this applies to DEBIN.  You're more likely to want to make a rule for uint16:</p>
<pre><code> uint16: [debin ([BE + 2])]
 uparse #{1020} [x: uint16]
</code></pre>
<p>Which may even challenge my "does this need to be a combinator anyway":</p>
<pre><code> uint16: [let data: across 2 skip, (debin [BE + 2] data)]
 uparse #{1020} [x: uint16]
</code></pre>
<p>Though that's less efficient, as it has to create a new series vs. decoding the binary input directly.  But at least these things are becoming <em>possible</em>.  It's a step up.</p>
<p>The bigger point remains: I think if someone has an idiom that they like, telling them <em>"all BLOCK!s in PARSE must be rules, and you have to put them in GROUP!s to pass as arguments"</em> feels like a restriction on par with saying that you must pass QUOTED! values to any regular functions...that there are no implicitly quoted arguments.</p>
<p>Implicitly quoted arguments seem to me to be one of the things that makes the language able to shapeshift to let you build syntaxes on par with coming up with a new language.  It's not something we want to overuse, but not using it at all seems misguided.</p>
<p>So I think this same thing happens with PARSE.</p>
          <p><a href="https://forum.rebol.info/t/uparse-parameter-conventions-how-flexible/1586/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/uparse-parameter-conventions-how-flexible/1586/1</link>
        <pubDate>Wed, 14 Apr 2021 07:24:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1586-1</guid>
        <source url="https://forum.rebol.info/t/uparse-parameter-conventions-how-flexible/1586.rss">UPARSE Parameter Conventions: How Flexible?</source>
      </item>
  </channel>
</rss>

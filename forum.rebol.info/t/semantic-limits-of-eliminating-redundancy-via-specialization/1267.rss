<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Semantic Limits of Eliminating Redundancy via Specialization</title>
    <link>https://forum.rebol.info/t/semantic-limits-of-eliminating-redundancy-via-specialization/1267</link>
    <description>R3-Alpha had a lot of redundant code.  If you said **clear series** you were effectively doing the same thing as **change/part series tail series**.   And if you said **remove/part series 4** you were doing the same thing as **change/part series [] 4**.

*(Note: today the latter could also be said more &quot;obviously&quot; as **change/part series null 4**)*

When you have redundant code, slightly different things happen on each path.  It makes it harder to test, and it means any optimizations you apply don&#39;t get applied evenly.  For instance: CLEAR would reset a series&#39;s &quot;bias&quot;, but a REMOVE or CHANGE that effectively emptied a series also, would not.

## I tried redefining REMOVE + CLEAR in terms of CHANGE, but...

...when I did try it, this pointed out some problems with the idea of taking narrower operations and trying to define them in more general ones.

As an example: [using the null-specialization hack I described](https://forum.rebol.info/t/partial-specialization-syntax-in-a-null-refinement-world/1266), **I tried defining CLEAR to be CHANGE to NULL with a /PART that is the TAIL of the input**.  Yet that doesn&#39;t work for MAP!, because it doesn&#39;t have a notion of position to get the tail from.  Similar problems exist for types like BITSET!, and operations like REMOVE when defined in terms of CHANGE.

It&#39;s possible to shuffle things around so that these types only support CHANGE with no /PART and assume you mean &quot;change everything&quot;.  But that&#39;s fairly inconsistent.

We wind up saying: *Some things can be &quot;cleared&quot;, but cannot be &quot;changed&quot;.*  It gets shaky, because these words are being reused and applied to things that do not obey a common &quot;series interface&quot;.

If sharing can be achieved in such an environment, it seems like there needs to be some kind of decision tree of fallbacks.  e.g. CLEAR could try to be understood by a datatype directly, and if it doesn&#39;t know how to do that (or lacks a specific optimization for it) then it would see if CHANGE to NULL was available.  Or you could tie the CLEAR to CHANGE translations to being an operation common on ANY-SERIES!, with other types hooking in differently.

I really don&#39;t know.  What I do know is that it looks pretty complicated and we don&#39;t have great answers at the moment.  On the other hand: it&#39;s nice that specialization is working and I can try things like this, but it doesn&#39;t feel like enough questions are answered yet about the bigger semantic model of how these generics work.

*(If you missed my post on user-defined types and related issues, e.g. how ADD currently tries to &quot;generalize&quot; but fails, see [User-Defined-Type Scenarios Solicited](https://forum.rebol.info/t/user-defined-type-scenarios-solicited/1253))*

**So I&#39;m backing off on the shared specialization attempt for the moment.**  It&#39;s good experience, and every time we try it we get to see how well SPECIALIZE is holding up, etc.  But not the most important thing to be doing right now, and I&#39;ve already failed at one other thing I tried today... so... time to do something more feel-good.  :-)</description>
    
    <lastBuildDate>Wed, 04 Mar 2020 19:55:46 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/semantic-limits-of-eliminating-redundancy-via-specialization/1267.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Semantic Limits of Eliminating Redundancy via Specialization</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>R3-Alpha had a lot of redundant code.  If you said <strong>clear series</strong> you were effectively doing the same thing as <strong>change/part series tail series</strong>.   And if you said <strong>remove/part series 4</strong> you were doing the same thing as <strong>change/part series [] 4</strong>.</p>
<p><em>(Note: today the latter could also be said more "obviously" as <strong>change/part series null 4</strong>)</em></p>
<p>When you have redundant code, slightly different things happen on each path.  It makes it harder to test, and it means any optimizations you apply don't get applied evenly.  For instance: CLEAR would reset a series's "bias", but a REMOVE or CHANGE that effectively emptied a series also, would not.</p>
<h2>I tried redefining REMOVE + CLEAR in terms of CHANGE, but...</h2>
<p>...when I did try it, this pointed out some problems with the idea of taking narrower operations and trying to define them in more general ones.</p>
<p>As an example: <a href="https://forum.rebol.info/t/partial-specialization-syntax-in-a-null-refinement-world/1266">using the null-specialization hack I described</a>, <strong>I tried defining CLEAR to be CHANGE to NULL with a /PART that is the TAIL of the input</strong>.  Yet that doesn't work for MAP!, because it doesn't have a notion of position to get the tail from.  Similar problems exist for types like BITSET!, and operations like REMOVE when defined in terms of CHANGE.</p>
<p>It's possible to shuffle things around so that these types only support CHANGE with no /PART and assume you mean "change everything".  But that's fairly inconsistent.</p>
<p>We wind up saying: <em>Some things can be "cleared", but cannot be "changed".</em>  It gets shaky, because these words are being reused and applied to things that do not obey a common "series interface".</p>
<p>If sharing can be achieved in such an environment, it seems like there needs to be some kind of decision tree of fallbacks.  e.g. CLEAR could try to be understood by a datatype directly, and if it doesn't know how to do that (or lacks a specific optimization for it) then it would see if CHANGE to NULL was available.  Or you could tie the CLEAR to CHANGE translations to being an operation common on ANY-SERIES!, with other types hooking in differently.</p>
<p>I really don't know.  What I do know is that it looks pretty complicated and we don't have great answers at the moment.  On the other hand: it's nice that specialization is working and I can try things like this, but it doesn't feel like enough questions are answered yet about the bigger semantic model of how these generics work.</p>
<p><em>(If you missed my post on user-defined types and related issues, e.g. how ADD currently tries to "generalize" but fails, see <a href="https://forum.rebol.info/t/user-defined-type-scenarios-solicited/1253">User-Defined-Type Scenarios Solicited</a>)</em></p>
<p><strong>So I'm backing off on the shared specialization attempt for the moment.</strong>  It's good experience, and every time we try it we get to see how well SPECIALIZE is holding up, etc.  But not the most important thing to be doing right now, and I've already failed at one other thing I tried today... so... time to do something more feel-good.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://forum.rebol.info/t/semantic-limits-of-eliminating-redundancy-via-specialization/1267/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/semantic-limits-of-eliminating-redundancy-via-specialization/1267/1</link>
        <pubDate>Wed, 04 Mar 2020 19:32:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1267-1</guid>
        <source url="https://forum.rebol.info/t/semantic-limits-of-eliminating-redundancy-via-specialization/1267.rss">Semantic Limits of Eliminating Redundancy via Specialization</source>
      </item>
  </channel>
</rss>

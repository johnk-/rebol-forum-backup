<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Over 20 Years of C99: Making a Concession</title>
    <link>https://forum.rebol.info/t/over-20-years-of-c99-making-a-concession/1554</link>
    <description>In the interest of bragging rights, we&#39;ve tried to say that Ren-C builds on C89.

Not quite true, since we use **`//`** comments instead of just **`/* */`** comments.  But a lot of compilers before C99 supported that, and you could just strip them out.

Also not quite true because we don&#39;t declare all locals at the top of blocks in a function.  But a lot of compilers before C99 supported that, and if not you could write a preprocessor to do it.

But a big feature that would helps if we permitted using it is C99 variadic macros.  It means we can automatically add terminator signals to API calls:

So instead of writing things like:

    if (rebNot(&quot;action?&quot;, rebQ(main_startup), rebEND))
        rebJumps(&quot;panic-value&quot;, rebQ(main_startup), rebEND);

We can say:

    if (rebNot(&quot;action?&quot;, rebQ(main_startup)))
        rebJumps(&quot;panic-value&quot;, rebQ(main_startup));

Right now we support both modes, but hold off on using the nicer mode in the internal implementation.

The C++ build checks to make sure that the rebENDs are there if you mark a file as &quot;C89-compatible&quot; and that it should have them.  So that makes it easier to not forget them if you meant them to be there.  But they&#39;re still an eyesore.

## I Think It&#39;s Time to Adjust The Rule

The original idea was that &quot;public-facing&quot; code would all use the nice mode, but we would bear the burden of rebEND in the internal code for the sake of making it compile on older systems.

However, the code for the interpreter itself is supposed to be a showcase of its features.  If you are looking at the startup sequence in `main.c` and are hit with these rebEND-based API calls, that&#39;s will prevent appreciating it fully.

**We should preserve the ability to call these APIs from C89.**   e.g. you should be able to include libRebol from a C89 compiler.  That API file should have a mode you can use to include it in a C89 program, where you have to provide the rebENDs explicitly.

**But the internal implementation should allow the usage of the macro form.**  Not leveraging it makes reading the code for Ren-C itself not as pleasing as it should be.  I want the code for stepping through the boot process and extensions to make the best impression.  And rebEND detracts from an otherwise profoundly distinct experience.

The answer for people who want to build the sources on a very old compiler would be the same answer as for those who want to build it on a system that doesn&#39;t have `//`-comments...run the source through a preprocessor.  Expand the rebXXX() macros to make a new version of the source, *and then compile that*.

Seems fair.</description>
    
    <lastBuildDate>Fri, 12 Mar 2021 01:44:23 +0000</lastBuildDate>
    <category>Build System</category>
    <atom:link href="https://forum.rebol.info/t/over-20-years-of-c99-making-a-concession/1554.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Over 20 Years of C99: Making a Concession</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In the interest of bragging rights, we've tried to say that Ren-C builds on C89.</p>
<p>Not quite true, since we use <strong><code>//</code></strong> comments instead of just <strong><code>/* */</code></strong> comments.  But a lot of compilers before C99 supported that, and you could just strip them out.</p>
<p>Also not quite true because we don't declare all locals at the top of blocks in a function.  But a lot of compilers before C99 supported that, and if not you could write a preprocessor to do it.</p>
<p>But a big feature that would helps if we permitted using it is C99 variadic macros.  It means we can automatically add terminator signals to API calls:</p>
<p>So instead of writing things like:</p>
<pre><code>if (rebNot("action?", rebQ(main_startup), rebEND))
    rebJumps("panic-value", rebQ(main_startup), rebEND);
</code></pre>
<p>We can say:</p>
<pre><code>if (rebNot("action?", rebQ(main_startup)))
    rebJumps("panic-value", rebQ(main_startup));
</code></pre>
<p>Right now we support both modes, but hold off on using the nicer mode in the internal implementation.</p>
<p>The C++ build checks to make sure that the rebENDs are there if you mark a file as "C89-compatible" and that it should have them.  So that makes it easier to not forget them if you meant them to be there.  But they're still an eyesore.</p>
<h2>I Think It's Time to Adjust The Rule</h2>
<p>The original idea was that "public-facing" code would all use the nice mode, but we would bear the burden of rebEND in the internal code for the sake of making it compile on older systems.</p>
<p>However, the code for the interpreter itself is supposed to be a showcase of its features.  If you are looking at the startup sequence in <code>main.c</code> and are hit with these rebEND-based API calls, that's will prevent appreciating it fully.</p>
<p><strong>We should preserve the ability to call these APIs from C89.</strong>   e.g. you should be able to include libRebol from a C89 compiler.  That API file should have a mode you can use to include it in a C89 program, where you have to provide the rebENDs explicitly.</p>
<p><strong>But the internal implementation should allow the usage of the macro form.</strong>  Not leveraging it makes reading the code for Ren-C itself not as pleasing as it should be.  I want the code for stepping through the boot process and extensions to make the best impression.  And rebEND detracts from an otherwise profoundly distinct experience.</p>
<p>The answer for people who want to build the sources on a very old compiler would be the same answer as for those who want to build it on a system that doesn't have <code>//</code>-comments...run the source through a preprocessor.  Expand the rebXXX() macros to make a new version of the source, <em>and then compile that</em>.</p>
<p>Seems fair.</p>
          <p><a href="https://forum.rebol.info/t/over-20-years-of-c99-making-a-concession/1554/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/over-20-years-of-c99-making-a-concession/1554/1</link>
        <pubDate>Fri, 12 Mar 2021 01:40:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1554-1</guid>
        <source url="https://forum.rebol.info/t/over-20-years-of-c99-making-a-concession/1554.rss">Over 20 Years of C99: Making a Concession</source>
      </item>
  </channel>
</rss>

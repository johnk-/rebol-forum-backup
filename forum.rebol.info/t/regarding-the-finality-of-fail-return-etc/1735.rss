<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Regarding The &quot;Finality&quot; Of FAIL, RETURN, etc.</title>
    <link>https://forum.rebol.info/t/regarding-the-finality-of-fail-return-etc/1735</link>
    <description>There are some functions that by name carry a certain *&quot;finality&quot;*.  You don&#39;t expect there to be a way to pass them an argument that will revoke them.

For instance, it would be a bit weird if FAIL followed the BLANK-IN, NULL-OUT convention:

    foo: func [error [error! blank!]] [
        fail error
    
        print &quot;This looks like unreachable code.&quot;
    ]

Today we don&#39;t offer that Wayne&#39;s World version of &quot;FAIL.... NOT!&quot;  So you have to write:

    if error [fail error]

I&#39;ve actually been in situations where repeating the error expression is complicated by things like API handle freeing issues, to where I&#39;ve considered making something like MAYBE-FAIL which would be a No-Op on BLANK!... or perhaps a refinement as FAIL/MAYBE.

But I&#39;ve not considered the idea of making plain FAIL a no-op on blanks.  That seems wrong.

## Does RETURN Have A Similar &quot;Finality&quot;?

I&#39;ve written a bunch about [how I stopped worrying and learned to love UPARSE&#39;s RETURN](https://forum.rebol.info/t/uparse-return-subtleties/1589/4).

But there&#39;s something a little weird to my tastes about it being &quot;non-final&quot;.  For example:

    &gt;&gt; uparse &quot;aabc&quot; [some &quot;a&quot; return &quot;x&quot; | some &quot;a&quot; return &quot;b&quot;]
    == &quot;b&quot;  ; today&#39;s answer (also R3-Alpha&#39;s answer with PARSE)

When it reached the point of RETURN &quot;X&quot;, there were two potential interpretations:

1. *&quot;Okay, it&#39;s time to return!  Let&#39;s see if this rule matches or not...and if not, we&#39;re returning NULL!&quot;*

2. *&quot;It might be time to return if this rule matches.  If it doesn&#39;t match, pretend we were never asked to return.&quot;*

Today we have (2).  It&#39;s strictly more powerful... as you can get (1) with **return opt &quot;x&quot;**.

    &gt;&gt; uparse &quot;aabc&quot; [some &quot;a&quot; return opt &quot;x&quot; | some &quot;a&quot; return opt &quot;b&quot;]
    ; null

Note also that if your RETURN value is in a GROUP! and evaluated as DO code instead of a rule, it will always succeed...and hence always final.  It&#39;s only when you pass a rule that it can get revoked.

As with needing to write **if error [fail error]**, if we switched to parse-RETURN-finality that would mean more code for opting out:

    ; opting out in RETURN-non-final style
    uparse data [... return [your rule here] ...]

    ; opting out in RETURN-final style
    uparse data [... result: [your rule here] return (result) ...]

**But I still feel weird about RETURN in PARSE being something that can just be opted out of by the nature of its argument.**

And so far, every time I&#39;ve wanted to use RETURN it has been either a RETURN of a GROUP! (thus unconditional) or a RETURN OPT.

So I&#39;m thinking of making RETURN &quot;final&quot;...if you give it a rule that doesn&#39;t match it returns NULL.</description>
    
    <lastBuildDate>Sun, 03 Oct 2021 15:49:20 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/regarding-the-finality-of-fail-return-etc/1735.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Regarding The &quot;Finality&quot; Of FAIL, RETURN, etc.</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There are some functions that by name carry a certain <em>"finality"</em>.  You don't expect there to be a way to pass them an argument that will revoke them.</p>
<p>For instance, it would be a bit weird if FAIL followed the BLANK-IN, NULL-OUT convention:</p>
<pre><code>foo: func [error [error! blank!]] [
    fail error

    print "This looks like unreachable code."
]
</code></pre>
<p>Today we don't offer that Wayne's World version of "FAIL.... NOT!"  So you have to write:</p>
<pre><code>if error [fail error]
</code></pre>
<p>I've actually been in situations where repeating the error expression is complicated by things like API handle freeing issues, to where I've considered making something like MAYBE-FAIL which would be a No-Op on BLANK!... or perhaps a refinement as FAIL/MAYBE.</p>
<p>But I've not considered the idea of making plain FAIL a no-op on blanks.  That seems wrong.</p>
<h2>Does RETURN Have A Similar "Finality"?</h2>
<p>I've written a bunch about <a href="https://forum.rebol.info/t/uparse-return-subtleties/1589/4">how I stopped worrying and learned to love UPARSE's RETURN</a>.</p>
<p>But there's something a little weird to my tastes about it being "non-final".  For example:</p>
<pre><code>&gt;&gt; uparse "aabc" [some "a" return "x" | some "a" return "b"]
== "b"  ; today's answer (also R3-Alpha's answer with PARSE)
</code></pre>
<p>When it reached the point of RETURN "X", there were two potential interpretations:</p>
<ol>
<li>
<p><em>"Okay, it's time to return!  Let's see if this rule matches or not...and if not, we're returning NULL!"</em></p>
</li>
<li>
<p><em>"It might be time to return if this rule matches.  If it doesn't match, pretend we were never asked to return."</em></p>
</li>
</ol>
<p>Today we have (2).  It's strictly more powerful... as you can get (1) with <strong>return opt "x"</strong>.</p>
<pre><code>&gt;&gt; uparse "aabc" [some "a" return opt "x" | some "a" return opt "b"]
; null
</code></pre>
<p>Note also that if your RETURN value is in a GROUP! and evaluated as DO code instead of a rule, it will always succeed...and hence always final.  It's only when you pass a rule that it can get revoked.</p>
<p>As with needing to write <strong>if error [fail error]</strong>, if we switched to parse-RETURN-finality that would mean more code for opting out:</p>
<pre><code>; opting out in RETURN-non-final style
uparse data [... return [your rule here] ...]

; opting out in RETURN-final style
uparse data [... result: [your rule here] return (result) ...]
</code></pre>
<p><strong>But I still feel weird about RETURN in PARSE being something that can just be opted out of by the nature of its argument.</strong></p>
<p>And so far, every time I've wanted to use RETURN it has been either a RETURN of a GROUP! (thus unconditional) or a RETURN OPT.</p>
<p>So I'm thinking of making RETURN "final"...if you give it a rule that doesn't match it returns NULL.</p>
          <p><a href="https://forum.rebol.info/t/regarding-the-finality-of-fail-return-etc/1735/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/regarding-the-finality-of-fail-return-etc/1735/1</link>
        <pubDate>Sun, 03 Oct 2021 15:49:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1735-1</guid>
        <source url="https://forum.rebol.info/t/regarding-the-finality-of-fail-return-etc/1735.rss">Regarding The &quot;Finality&quot; Of FAIL, RETURN, etc.</source>
      </item>
  </channel>
</rss>

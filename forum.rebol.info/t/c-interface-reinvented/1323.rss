<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>C++ Interface Reinvented</title>
    <link>https://forum.rebol.info/t/c-interface-reinvented/1323</link>
    <description>I believe libRebol to be one of the most interesting pure C language bindings out there.  However, when you have a C++ compiler on hand it seems it should be able to compile something like:

    REBVAL *ten = rebValue(&quot;add&quot;, 4, 6);

But `rebValue` has been based on &quot;sniffing&quot; items in C&#39;s **[va_list](https://en.cppreference.com/w/c/variadic/va_arg)**, so it has required everything passed to conform to a bit-pattern of something it could &quot;sniff&quot;.  They all had to be *pointers* to something with a compatible layout (&quot;add&quot; is a pointer to UTF-8, leaving room for alternatives in the illegal UTF-8 space).  So in the above code, 4 and 6 would get interpreted as pointers, and dereferencing memory location 4 or 6 would crash.

To get around this in C, you *must* use helpers that allocate detectable things, like `rebI()` for making a &quot;transient integer&quot; (e.g. one that would be freed by rebValue as it processed it):

    REBVAL *ten = rebValue(&quot;add&quot;, rebI(4), rebI(6));

For C++ we expect more!  So **I&#39;m pleased to say that a solution (even better than in RenCpp&#39;s) for passing C++ values has been implemented.**

## The Very Generic TO_REBARG

After some acrobatics involving C++&#39;s **[`templated variadic parameter packs`](https://en.cppreference.com/w/cpp/language/parameter_pack)**, I&#39;ve styled a solution for C++ that works by building *on top of* the mechanics used by the C.

If you want to make a type passable by value, you just write an overload of **`to_rebarg`**.  Integer is a simple example:

    inline static const void *to_rebarg(int i)
        { return rebI(i); }

While the C++ template is recursively unpacking the parameters, it calls `to_rebarg` to process each one.  You can translate things as simply or as complex-ly as you like...and you don&#39;t have to edit the library to add support for a new type.  Imagine:

    class MyDate {
       friend const void* to_rebarg(const MyDate &amp;date);  // allow access to private
       private:
           int day;
           int month;
           int year;
       public:
          // your C++ class code here
    };

    const void* to_rebarg(const MyDate &amp;date) {
        return rebR(  // autorelease
            rebValue(&quot;make date! [&quot;, date-&gt;day, date-&gt;month, date-&gt;year, &quot;]&quot;)
        );
    } 

Now all you would have to do if you wanted to pass a date in would be something like:

    void OutputDate(const MyDate &amp;date) {
        rebElide(&quot;print [{The date is}&quot;, date, &quot;]&quot;);
    }

## C++ Helping Catch Bugs in C89 Builds

Being able to build with a C89 compiler is not really *that* relevant, but we still shoot for it.  Which means we don&#39;t take variadic macros for granted, and in the core all API calls have to be explicitly terminated with `rebEND`.  So if we&#39;d wanted to compile the code from up top, we&#39;d need to say:

    REBVAL *ten = rebValue(&quot;add&quot;, rebI(4), rebI(6), rebEND);

The way that C++ templates &quot;unpack&quot; variadic parameters is via compile-time recursion, which actually needs to differentiate the last step to terminate it.  So as a special case, when you use the C++ build on a file with REBOL_EXPLICIT_END (e.g. anything from core), it warns you if a rebEND is not in that last slot.

It [caught a few mistakes](https://github.com/metaeducation/ren-c/commit/cbc1f2bffbe781b2384b8f2003dc63c995895584), though not all that many--because missing ones cause crashes, and any in active code would have been fixed.  But those crashes take time to investigate.

&gt; **UPDATE:** I forgot but rediscovered that there actually is a reason to care about rebEND at some callsites.  This is when you want to use preprocessor macros *inside* a call.  You can&#39;t put macros-inside macros.  So for example, from the FFI:
&gt;
&gt;     ffi_abi abi = (ffi_abi)rebUnboxInteger(
&gt;       &quot;switch&quot;, rebQ(word), &quot;[&quot;,
&gt;
&gt;          &quot;&#39;default [&quot;, rebI(FFI_DEFAULT_ABI), &quot;]&quot;,
&gt;
&gt;       #ifdef X86_WIN64
&gt;
&gt;          &quot;&#39;win64 [&quot;, rebI(FFI_WIN64), &quot;]&quot;,
&gt;
&gt;       #elif defined(X86_WIN32) \
&gt;            || defined(TO_LINUX_X86) || defined(TO_LINUX_X64)
&gt;
&gt;         &quot;&#39;sysv [&quot;, rebI(FFI_SYSV), &quot;]&quot;,
&gt; ...

You can&#39;t do that unless you fall back on the C89-like mechanism.  The way you do this now is:

    ffi_abi abi = (ffi_abi)LIBREBOL_NOMACRO(rebUnboxInteger)(

That gives you a version that in C99+ doesn&#39;t offer the convenience of the rebEND.  But the C++ version is not a macro, so it can have #ifdefs inside it *and* not require a rebEND.

## Still More To Go

This is a necessary step in making the C++ API pleasant to work with.  The next big question is on how to make a class that wraps up a value pointer and manages its lifetime, so you don&#39;t have to worry about `rebR()` or `rebRelease()`, `rebUnmanage()`, and other lifetime-related calls.  But getting this done was a prerequisite to looking at that.

RenCpp explored several other ideas that are a mixed bag.  One thing it tried to do was try to establish a constraint of what type a value was.  Although a superclass of `Any_Value` existed, the idea was that if you could `static_cast` to something more narrow you&#39;d get a class that offered specialized methods.

Here&#39;s a simple example from that era, showing types like `Logic`, `Block`, and `Word`:

    int main(int, char **) {
        std::string data {&quot;Hello [Ren C++ Binding] World!&quot;}; 

        Word variable {&quot;foo&quot;};

        Block rule {
            &quot;thru {[}&quot;,
            &quot;copy&quot;, variable, &quot;to {]}&quot;,
            &quot;to end&quot;
        };

        auto result = static_cast&lt;Logic&gt;(*runtime(&quot;parse&quot;, data, rule));

        if (result) 
            std::cout &lt;&lt; &quot;Success and target was &quot; &lt;&lt; variable() &lt;&lt; &quot;\n&quot;;
        else
            std::cout &lt;&lt; &quot;PARSE failed.&quot;;
    }

If you look at `variable` you see an example of a &quot;weird&quot; idea in action.  It is of type Word, and holds the Rebol WORD! `foo`.  A plain reference as **`variable`** will give the word as-is (like when the `rule` block is being constructed), while using function application to it as **`variable()`** would act like **`get &#39;foo`**.

A lot of things like that were looked at, such as what **block[n]** would do (is that a PICK or a SELECT?), or if **++block** would act like **block: next block**.

Some of this might be interesting, but I don&#39;t think it represents a use case anyone has...namely, using C++ to puppeteer a pokey interpreter in an obscure way.  Most of the time you&#39;re looking at throwing data over the fence and getting an answer back.

**To me, a central idea is that the interpreter you are hooking up to might be styled to act nothing like the default out-of-the-box Rebol.**  This means that giving people APIs like `rebAppend()` (or the infinite regression of `rebAppendDup()` and `rebAppendOnlyDup()`) that are &quot;fast&quot; is of not much use if that isn&#39;t what your dialect means by the word **`append`**.  The same argument could apply to trying to pin down the behaviors of **block[n]** or similar.</description>
    
    <lastBuildDate>Sun, 30 Aug 2020 07:56:00 +0000</lastBuildDate>
    <category>Language Bridging</category>
    <atom:link href="https://forum.rebol.info/t/c-interface-reinvented/1323.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>C++ Interface Reinvented</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I believe libRebol to be one of the most interesting pure C language bindings out there.  However, when you have a C++ compiler on hand it seems it should be able to compile something like:</p>
<pre><code>REBVAL *ten = rebValue("add", 4, 6);
</code></pre>
<p>But <code>rebValue</code> has been based on "sniffing" items in C's <strong><a href="https://en.cppreference.com/w/c/variadic/va_arg" rel="nofollow noopener">va_list</a></strong>, so it has required everything passed to conform to a bit-pattern of something it could "sniff".  They all had to be <em>pointers</em> to something with a compatible layout ("add" is a pointer to UTF-8, leaving room for alternatives in the illegal UTF-8 space).  So in the above code, 4 and 6 would get interpreted as pointers, and dereferencing memory location 4 or 6 would crash.</p>
<p>To get around this in C, you <em>must</em> use helpers that allocate detectable things, like <code>rebI()</code> for making a "transient integer" (e.g. one that would be freed by rebValue as it processed it):</p>
<pre><code>REBVAL *ten = rebValue("add", rebI(4), rebI(6));
</code></pre>
<p>For C++ we expect more!  So <strong>I'm pleased to say that a solution (even better than in RenCpp's) for passing C++ values has been implemented.</strong></p>
<h2>The Very Generic TO_REBARG</h2>
<p>After some acrobatics involving C++'s <strong><a href="https://en.cppreference.com/w/cpp/language/parameter_pack" rel="nofollow noopener"><code>templated variadic parameter packs</code></a></strong>, I've styled a solution for C++ that works by building <em>on top of</em> the mechanics used by the C.</p>
<p>If you want to make a type passable by value, you just write an overload of <strong><code>to_rebarg</code></strong>.  Integer is a simple example:</p>
<pre><code>inline static const void *to_rebarg(int i)
    { return rebI(i); }
</code></pre>
<p>While the C++ template is recursively unpacking the parameters, it calls <code>to_rebarg</code> to process each one.  You can translate things as simply or as complex-ly as you like...and you don't have to edit the library to add support for a new type.  Imagine:</p>
<pre><code>class MyDate {
   friend const void* to_rebarg(const MyDate &amp;date);  // allow access to private
   private:
       int day;
       int month;
       int year;
   public:
      // your C++ class code here
};

const void* to_rebarg(const MyDate &amp;date) {
    return rebR(  // autorelease
        rebValue("make date! [", date-&gt;day, date-&gt;month, date-&gt;year, "]")
    );
} 
</code></pre>
<p>Now all you would have to do if you wanted to pass a date in would be something like:</p>
<pre><code>void OutputDate(const MyDate &amp;date) {
    rebElide("print [{The date is}", date, "]");
}
</code></pre>
<h2>C++ Helping Catch Bugs in C89 Builds</h2>
<p>Being able to build with a C89 compiler is not really <em>that</em> relevant, but we still shoot for it.  Which means we don't take variadic macros for granted, and in the core all API calls have to be explicitly terminated with <code>rebEND</code>.  So if we'd wanted to compile the code from up top, we'd need to say:</p>
<pre><code>REBVAL *ten = rebValue("add", rebI(4), rebI(6), rebEND);
</code></pre>
<p>The way that C++ templates "unpack" variadic parameters is via compile-time recursion, which actually needs to differentiate the last step to terminate it.  So as a special case, when you use the C++ build on a file with REBOL_EXPLICIT_END (e.g. anything from core), it warns you if a rebEND is not in that last slot.</p>
<p>It <a href="https://github.com/metaeducation/ren-c/commit/cbc1f2bffbe781b2384b8f2003dc63c995895584" rel="nofollow noopener">caught a few mistakes</a>, though not all that many--because missing ones cause crashes, and any in active code would have been fixed.  But those crashes take time to investigate.</p>
<blockquote>
<p><strong>UPDATE:</strong> I forgot but rediscovered that there actually is a reason to care about rebEND at some callsites.  This is when you want to use preprocessor macros <em>inside</em> a call.  You can't put macros-inside macros.  So for example, from the FFI:</p>
<pre><code>ffi_abi abi = (ffi_abi)rebUnboxInteger(
  "switch", rebQ(word), "[",

     "'default [", rebI(FFI_DEFAULT_ABI), "]",

  #ifdef X86_WIN64

     "'win64 [", rebI(FFI_WIN64), "]",

  #elif defined(X86_WIN32) \
       || defined(TO_LINUX_X86) || defined(TO_LINUX_X64)

    "'sysv [", rebI(FFI_SYSV), "]",
</code></pre>
<p>...</p>
</blockquote>
<p>You can't do that unless you fall back on the C89-like mechanism.  The way you do this now is:</p>
<pre><code>ffi_abi abi = (ffi_abi)LIBREBOL_NOMACRO(rebUnboxInteger)(
</code></pre>
<p>That gives you a version that in C99+ doesn't offer the convenience of the rebEND.  But the C++ version is not a macro, so it can have <span class="hashtag">#ifdefs</span> inside it <em>and</em> not require a rebEND.</p>
<h2>Still More To Go</h2>
<p>This is a necessary step in making the C++ API pleasant to work with.  The next big question is on how to make a class that wraps up a value pointer and manages its lifetime, so you don't have to worry about <code>rebR()</code> or <code>rebRelease()</code>, <code>rebUnmanage()</code>, and other lifetime-related calls.  But getting this done was a prerequisite to looking at that.</p>
<p>RenCpp explored several other ideas that are a mixed bag.  One thing it tried to do was try to establish a constraint of what type a value was.  Although a superclass of <code>Any_Value</code> existed, the idea was that if you could <code>static_cast</code> to something more narrow you'd get a class that offered specialized methods.</p>
<p>Here's a simple example from that era, showing types like <code>Logic</code>, <code>Block</code>, and <code>Word</code>:</p>
<pre><code>int main(int, char **) {
    std::string data {"Hello [Ren C++ Binding] World!"}; 

    Word variable {"foo"};

    Block rule {
        "thru {[}",
        "copy", variable, "to {]}",
        "to end"
    };

    auto result = static_cast&lt;Logic&gt;(*runtime("parse", data, rule));

    if (result) 
        std::cout &lt;&lt; "Success and target was " &lt;&lt; variable() &lt;&lt; "\n";
    else
        std::cout &lt;&lt; "PARSE failed.";
}
</code></pre>
<p>If you look at <code>variable</code> you see an example of a "weird" idea in action.  It is of type Word, and holds the Rebol WORD! <code>foo</code>.  A plain reference as <strong><code>variable</code></strong> will give the word as-is (like when the <code>rule</code> block is being constructed), while using function application to it as <strong><code>variable()</code></strong> would act like <strong><code>get 'foo</code></strong>.</p>
<p>A lot of things like that were looked at, such as what <strong>block[n]</strong> would do (is that a PICK or a SELECT?), or if <strong>++block</strong> would act like <strong>block: next block</strong>.</p>
<p>Some of this might be interesting, but I don't think it represents a use case anyone has...namely, using C++ to puppeteer a pokey interpreter in an obscure way.  Most of the time you're looking at throwing data over the fence and getting an answer back.</p>
<p><strong>To me, a central idea is that the interpreter you are hooking up to might be styled to act nothing like the default out-of-the-box Rebol.</strong>  This means that giving people APIs like <code>rebAppend()</code> (or the infinite regression of <code>rebAppendDup()</code> and <code>rebAppendOnlyDup()</code>) that are "fast" is of not much use if that isn't what your dialect means by the word <strong><code>append</code></strong>.  The same argument could apply to trying to pin down the behaviors of <strong>block[n]</strong> or similar.</p>
          <p><a href="https://forum.rebol.info/t/c-interface-reinvented/1323/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/c-interface-reinvented/1323/1</link>
        <pubDate>Sun, 30 Aug 2020 06:36:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1323-1</guid>
        <source url="https://forum.rebol.info/t/c-interface-reinvented/1323.rss">C++ Interface Reinvented</source>
      </item>
  </channel>
</rss>

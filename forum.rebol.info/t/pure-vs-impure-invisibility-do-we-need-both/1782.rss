<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Pure vs. Impure Invisibility: Do We Need Both?</title>
    <link>https://forum.rebol.info/t/pure-vs-impure-invisibility-do-we-need-both/1782</link>
    <description>&quot;Invisibles&quot; [were conceived 4 years ago](https://forum.rebol.info/t/issues-with-invisibles-a-truly-disappearing-comment/405)...long before BAD-WORD!s, isotopes, ^META parameters, etc.

The terminology needs a bit of an update, because I want to make a distinction between two different kinds:

* **IMPURE INVISIBLITY** is when a special state (like a ~void~ isotope) is discarded in contexts where it&#39;s assumed to represent an invisible intent.

   Remember that plain BAD-WORD!s (unevaluated) are normal values and can be in blocks.

      &gt;&gt; first [~void~]
      == ~void~

   But an evaluated ~void~ becomes an isotope, and operations like ALL are willing to tolerate that as a signal of invisible intent it should discard:

      &gt;&gt; ~void~
      == ~void~  ; isotope

      &gt;&gt; all [10 + 20, ~void~]
      == 30

   Unfortunately, this is extra work that ALL must do, since ~void~ isotopes are valid evaluative products.  Every construct that wants to integrate impure invisibility bears the burden.

* **PURE INVISIBILITY** is an evaluator feature when a function call can truly erase arbitrary code, such as to the right of a SET-WORD!:

      &gt;&gt; y: elide (1 + 2 print &quot;Erased!&quot; 3 + 4) 10 + 20
      Erased!
      == 30

      &gt;&gt; y
      == 30

    This can only be done when a function like ELIDE specially says that it is not expected to return any result at all.  Otherwise it&#39;s not clear whether **y:** is supposed to get the `~void~` isotope or something after it.

    (Over time I embraced the odd idea that just saying RETURN and not giving it an argument would be the way of being purely invisible...which has the interesting property that **`(return some-other-function ...)`** can actually chain cases where the other function is sometimes purely invisible and sometimes not!  This insight arose because of the frustrating fact that C/C++ cannot do such chains... if you say **`return some_other_function(...);`** and then change the other function from returning `int` to `void`, it will complain that you cannot use `return` with an argument inside of void functions...even if that function itself returns void.)

## Why Not Make &quot;Impure&quot; Invisibility Act &quot;Pure&quot; (&quot;Semipure?&quot;)

The existence of the ^META types and operators raises an interesting theoretical option...that a ~void~ isotope could be treated as pure by the evaluator, and it&#39;s your responsibility to use meta operations if you wanted to see it:

    &gt;&gt; 1 + 2 ~void~
    == 1 + 2

    &gt;&gt; x: ~void~ 1 + 2
    == 3

    &gt;&gt; x
    == 3

    &gt;&gt; y: ^ ~void~ 1 + 2
    == 3

    &gt;&gt; y
    == ~void~
        ; ^-- not an isotope

Pondering the potential implications of this form of thinking, it would mean there wouldn&#39;t be a form of invisibility that could beat a ^META operation:

    &gt;&gt; z: ^ comment [&quot;hi&quot;] ~something~
    == ~something~  ; isotope

    &gt;&gt; z
    == ~void~
       ; ^-- the COMMENT was seen by the ^META, instead of bypassed
       ; (today COMMENT&#39;s status as a purely invisible construct means you
       ; would get Z as a non-isotope ~something~)

**Note that since parameters to functions are allowed to be meta if they need to be, changing a parameter from normal to meta would break commenting constructs.**  This is not too surprising, as if you have `my-function comment &quot;hi&quot; 1 + 2` and change MY-FUNCTION&#39;s argument to be quoted instead of evaluated, that&#39;s another kind of parameter change that would break the commenting feature.

Meta parameters should be used very sparingly--far more sparingly than quoted parameters--so this may not be a problem.  I notice that a function like RETURN (which takes its argument meta so it can return isotopes) could still chain an invisible function, as it would receive ~void~ as a measure of what an isotope was.

## If Truly Pure Invisibility Is Not Implemented, Would People Just Reinvent it with Variadics in a Less Efficient Way Than The Current Evaluator Internals Do It?

Let&#39;s say someone writes:

    foo: func [] [return comment &quot;hi&quot; 1 + 2]

Today this returns 3 due to comment&#39;s &quot;purely invisible&quot; status, RETURN takes its argument as a ^META parameter.  If we decide meta parameters are allowed to see the &quot;semipure&quot; void isotopes described above, then it would just be like you&#39;d written:

    foo: func [] [return comment &quot;hi&quot;]

**That would make it seem like COMMENT is unreliable.**  True, if you take a quoted argument you expect COMMENT to break in such cases as well...but meta parameters are evaluative and so it&#39;s a bit different.

Perhaps it should be just the **^** operator at the callsite that has the special vision, and meta parameters are evaluated and discard the void isotopes.  This would mean you only have to learn the rule that **^ comment &quot;hi&quot;** breaks the invisibility.

*(Here we wind up with **^** either being a built-in thing the user has no way to write themselves, or invent a &quot;supermeta&quot; parameter flag to say &quot;I can see void isotopes, too&quot;.)*

## Either way, &quot;Impure Invisibility&quot; Is MUCH Easier To Work With

The easy meta-transformations between ~void~ isotopes and plain ~void~ BAD-WORD! allow you to work with an invisible function gracefully...even when you don&#39;t know if it&#39;s invisible or not.

Early problems cropped up with pure invisible COMMENT like this:

    &gt;&gt; f: make frame! :comment
    &gt;&gt; f.discarded: &quot;Ignore Me&quot;

    &gt;&gt; x: do f   y: 1 + 2
    == 3
   
    &gt;&gt; x
    == 3  ; this could seem surprising, but maybe not?
 
But the new world does have at least *an* answer, meta your result and you can test for void cases and handle them as you wish.

    &gt;&gt; x: ^ do f  y: 1 + 2
    == 3

    &gt;&gt; x
    == ~void~

    ; alternately could have said `[^x]: do f  y: 1 + 2`

Yet it&#39;s still uncomfortable to imagine that an operation like DO could vanish, which is why DO tried to use void isotopes as a proxy for its return value.  A ~void~ isotope could then be semantically interpreted or converted to pure invisibility on an as-needed basis.

## &quot;If You Don&#39;t Know What You&#39;re Doing, Then Do It Meta&quot;

My urge to build safety into the system is driven by wanting to enable people to write generic code.

...but... trying to protect people from **`do f`** from vanishing when **`f`** is a FRAME! for the COMMENT function may be misguided.  That protection could be breaking the very cool trick they are trying to perform.

And there&#39;s a real complexity cost to having a distinction between pure and impure invisibility.  If you allow that distinction then impure invisibility has a meta form (a plain ~void~ BAD-WORD!) while pure invisibility doesn&#39;t have one.  The powerful tool of META therefore offers no answers for a purely invisible function.

Maybe things like DO should have a switch to say **do/vanishable** and that&#39;s the right protection, otherwise they error if they could vanish.  Same with **unmeta**?

Or maybe there&#39;s a better finesse, to say that the evaluator has some generalized protection which notices when you might have meant for an invisible result to be used, and there&#39;s generic mitigation for such cases.  Like with **`x: do f  y: 1 + 2`**, if it notices the potential for misunderstanding you can say **`x: vanishable do f y: 1 + 2`**...and you&#39;d be provoked to decide if you wanted to use VANISHABLE or ^ based on what you were actually trying to accomplish.  

*That actually sounds like a really clever mitigation, if a word or symbol were picked for it!*

---

**This post has been in draft form for a while, as I let it turn over in my head.  But I think I am turning to feeling that void isotopes cannot be stored in variables but are something whose existence can only be philosophically imagined by seeing a meta state register as a plain ~void~ BAD-WORD!.  This is bolstered by the idea that function frames cannot receive isotopes, and parallels to the idea that ~null~ isotopes cannot be stored in variables either (though they decay to ordinary NULL)**</description>
    
    <lastBuildDate>Sat, 22 Jan 2022 08:21:22 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/pure-vs-impure-invisibility-do-we-need-both/1782.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Pure vs. Impure Invisibility: Do We Need Both?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>"Invisibles" <a href="https://forum.rebol.info/t/issues-with-invisibles-a-truly-disappearing-comment/405">were conceived 4 years ago</a>...long before BAD-WORD!s, isotopes, ^META parameters, etc.</p>
<p>The terminology needs a bit of an update, because I want to make a distinction between two different kinds:</p>
<ul>
<li>
<p><strong>IMPURE INVISIBLITY</strong> is when a special state (like a ~void~ isotope) is discarded in contexts where it's assumed to represent an invisible intent.</p>
<p>Remember that plain BAD-WORD!s (unevaluated) are normal values and can be in blocks.</p>
<pre><code>&gt;&gt; first [~void~]
== ~void~
</code></pre>
<p>But an evaluated ~void~ becomes an isotope, and operations like ALL are willing to tolerate that as a signal of invisible intent it should discard:</p>
<pre><code>&gt;&gt; ~void~
== ~void~  ; isotope

&gt;&gt; all [10 + 20, ~void~]
== 30
</code></pre>
<p>Unfortunately, this is extra work that ALL must do, since ~void~ isotopes are valid evaluative products.  Every construct that wants to integrate impure invisibility bears the burden.</p>
</li>
<li>
<p><strong>PURE INVISIBILITY</strong> is an evaluator feature when a function call can truly erase arbitrary code, such as to the right of a SET-WORD!:</p>
<pre><code>&gt;&gt; y: elide (1 + 2 print "Erased!" 3 + 4) 10 + 20
Erased!
== 30

&gt;&gt; y
== 30
</code></pre>
<p>This can only be done when a function like ELIDE specially says that it is not expected to return any result at all.  Otherwise it's not clear whether <strong>y:</strong> is supposed to get the <code>~void~</code> isotope or something after it.</p>
<p>(Over time I embraced the odd idea that just saying RETURN and not giving it an argument would be the way of being purely invisible...which has the interesting property that <strong><code>(return some-other-function ...)</code></strong> can actually chain cases where the other function is sometimes purely invisible and sometimes not!  This insight arose because of the frustrating fact that C/C++ cannot do such chains... if you say <strong><code>return some_other_function(...);</code></strong> and then change the other function from returning <code>int</code> to <code>void</code>, it will complain that you cannot use <code>return</code> with an argument inside of void functions...even if that function itself returns void.)</p>
</li>
</ul>
<h2>Why Not Make "Impure" Invisibility Act "Pure" ("Semipure?")</h2>
<p>The existence of the ^META types and operators raises an interesting theoretical option...that a ~void~ isotope could be treated as pure by the evaluator, and it's your responsibility to use meta operations if you wanted to see it:</p>
<pre><code>&gt;&gt; 1 + 2 ~void~
== 1 + 2

&gt;&gt; x: ~void~ 1 + 2
== 3

&gt;&gt; x
== 3

&gt;&gt; y: ^ ~void~ 1 + 2
== 3

&gt;&gt; y
== ~void~
    ; ^-- not an isotope
</code></pre>
<p>Pondering the potential implications of this form of thinking, it would mean there wouldn't be a form of invisibility that could beat a ^META operation:</p>
<pre><code>&gt;&gt; z: ^ comment ["hi"] ~something~
== ~something~  ; isotope

&gt;&gt; z
== ~void~
   ; ^-- the COMMENT was seen by the ^META, instead of bypassed
   ; (today COMMENT's status as a purely invisible construct means you
   ; would get Z as a non-isotope ~something~)
</code></pre>
<p><strong>Note that since parameters to functions are allowed to be meta if they need to be, changing a parameter from normal to meta would break commenting constructs.</strong>  This is not too surprising, as if you have <code>my-function comment "hi" 1 + 2</code> and change MY-FUNCTION's argument to be quoted instead of evaluated, that's another kind of parameter change that would break the commenting feature.</p>
<p>Meta parameters should be used very sparingly--far more sparingly than quoted parameters--so this may not be a problem.  I notice that a function like RETURN (which takes its argument meta so it can return isotopes) could still chain an invisible function, as it would receive ~void~ as a measure of what an isotope was.</p>
<h2>If Truly Pure Invisibility Is Not Implemented, Would People Just Reinvent it with Variadics in a Less Efficient Way Than The Current Evaluator Internals Do It?</h2>
<p>Let's say someone writes:</p>
<pre><code>foo: func [] [return comment "hi" 1 + 2]
</code></pre>
<p>Today this returns 3 due to comment's "purely invisible" status, RETURN takes its argument as a ^META parameter.  If we decide meta parameters are allowed to see the "semipure" void isotopes described above, then it would just be like you'd written:</p>
<pre><code>foo: func [] [return comment "hi"]
</code></pre>
<p><strong>That would make it seem like COMMENT is unreliable.</strong>  True, if you take a quoted argument you expect COMMENT to break in such cases as well...but meta parameters are evaluative and so it's a bit different.</p>
<p>Perhaps it should be just the <strong>^</strong> operator at the callsite that has the special vision, and meta parameters are evaluated and discard the void isotopes.  This would mean you only have to learn the rule that <strong>^ comment "hi"</strong> breaks the invisibility.</p>
<p><em>(Here we wind up with <strong>^</strong> either being a built-in thing the user has no way to write themselves, or invent a "supermeta" parameter flag to say "I can see void isotopes, too".)</em></p>
<h2>Either way, "Impure Invisibility" Is MUCH Easier To Work With</h2>
<p>The easy meta-transformations between ~void~ isotopes and plain ~void~ BAD-WORD! allow you to work with an invisible function gracefully...even when you don't know if it's invisible or not.</p>
<p>Early problems cropped up with pure invisible COMMENT like this:</p>
<pre><code>&gt;&gt; f: make frame! :comment
&gt;&gt; f.discarded: "Ignore Me"

&gt;&gt; x: do f   y: 1 + 2
== 3

&gt;&gt; x
== 3  ; this could seem surprising, but maybe not?
</code></pre>
<p>But the new world does have at least <em>an</em> answer, meta your result and you can test for void cases and handle them as you wish.</p>
<pre><code>&gt;&gt; x: ^ do f  y: 1 + 2
== 3

&gt;&gt; x
== ~void~

; alternately could have said `[^x]: do f  y: 1 + 2`
</code></pre>
<p>Yet it's still uncomfortable to imagine that an operation like DO could vanish, which is why DO tried to use void isotopes as a proxy for its return value.  A ~void~ isotope could then be semantically interpreted or converted to pure invisibility on an as-needed basis.</p>
<h2>"If You Don't Know What You're Doing, Then Do It Meta"</h2>
<p>My urge to build safety into the system is driven by wanting to enable people to write generic code.</p>
<p>...but... trying to protect people from <strong><code>do f</code></strong> from vanishing when <strong><code>f</code></strong> is a FRAME! for the COMMENT function may be misguided.  That protection could be breaking the very cool trick they are trying to perform.</p>
<p>And there's a real complexity cost to having a distinction between pure and impure invisibility.  If you allow that distinction then impure invisibility has a meta form (a plain ~void~ BAD-WORD!) while pure invisibility doesn't have one.  The powerful tool of META therefore offers no answers for a purely invisible function.</p>
<p>Maybe things like DO should have a switch to say <strong>do/vanishable</strong> and that's the right protection, otherwise they error if they could vanish.  Same with <strong>unmeta</strong>?</p>
<p>Or maybe there's a better finesse, to say that the evaluator has some generalized protection which notices when you might have meant for an invisible result to be used, and there's generic mitigation for such cases.  Like with <strong><code>x: do f  y: 1 + 2</code></strong>, if it notices the potential for misunderstanding you can say <strong><code>x: vanishable do f y: 1 + 2</code></strong>...and you'd be provoked to decide if you wanted to use VANISHABLE or ^ based on what you were actually trying to accomplish.</p>
<p><em>That actually sounds like a really clever mitigation, if a word or symbol were picked for it!</em></p>
<hr>
<p><strong>This post has been in draft form for a while, as I let it turn over in my head.  But I think I am turning to feeling that void isotopes cannot be stored in variables but are something whose existence can only be philosophically imagined by seeing a meta state register as a plain ~void~ BAD-WORD!.  This is bolstered by the idea that function frames cannot receive isotopes, and parallels to the idea that ~null~ isotopes cannot be stored in variables either (though they decay to ordinary NULL)</strong></p>
          <p><a href="https://forum.rebol.info/t/pure-vs-impure-invisibility-do-we-need-both/1782/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/pure-vs-impure-invisibility-do-we-need-both/1782/1</link>
        <pubDate>Fri, 21 Jan 2022 09:19:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1782-1</guid>
        <source url="https://forum.rebol.info/t/pure-vs-impure-invisibility-do-we-need-both/1782.rss">Pure vs. Impure Invisibility: Do We Need Both?</source>
      </item>
  </channel>
</rss>

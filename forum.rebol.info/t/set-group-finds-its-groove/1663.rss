<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>SET-GROUP! Finds its Groove</title>
    <link>https://forum.rebol.info/t/set-group-finds-its-groove/1663</link>
    <description>Having seen the slick multi-return behavior for SET-BLOCK!, I wondered if there was a better purpose for SET-GROUP! than merely a synonym for SET.

    (word): value
    set word value

That felt a bit anticlimactic.  You save one character, but you add three non-alphabetic symbols.

If these were equivalent, were we really getting the bang for the buck we would want out of a sparkly new datatype?

So I hesitated to declare that to be the meaning.

## But I&#39;ve Found The Reason *Why* It Needs To Be The Meaning...

**It fills the role of being a *SINGLE* value, that can sit in literal slots to represent an assignment.**

That means you can say things like:

    (var): default [10]

It&#39;s impossible for this to work with:

    set var default [10]

Because it splits the intent to set the word pointed to by the variable into a function call to SET and a WORD! reference to VAR.  *DEFAULT can only quote value left, and it has to pack up all the information it needs to do its job.*

So it really is a missing piece.  And really, I think there are a lot of cases where I&#39;m just going to like **(word):** it better than **set word**.  It may be a bit more symbolic, but by not being wordy it could blend in better.

    var1: blah blah blah
    var2: blah blah blah
    (word): blah blah blah  ; doesn&#39;t break the rhythm as much as SET WORD

## I&#39;ll Start Patching In Behaviors For It... The First Is UPARSE EMIT!

Right now, if you know the name you&#39;re going to emit for a variable, you can use it literally in GATHER:

    &gt;&gt; uparse [10 20] [gather [emit x: integer!, emit y: integer!]]
    == make object! [
        x: 10
        y: 20
    ]

But what if the field&#39;s name is dynamic (maybe even captured from the parsed material itself?)  Well, SET-GROUP! seems the obvious answer, doesn&#39;t it?

    &gt;&gt; word: &#39;xxx

    &gt;&gt; uparse &quot;a&quot; [gather [emit (word): &lt;any&gt;]]
    == make object! [
        xxx: #a
    ]</description>
    
    <lastBuildDate>Sun, 15 Aug 2021 02:47:46 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/set-group-finds-its-groove/1663.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>SET-GROUP! Finds its Groove</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Having seen the slick multi-return behavior for SET-BLOCK!, I wondered if there was a better purpose for SET-GROUP! than merely a synonym for SET.</p>
<pre><code>(word): value
set word value
</code></pre>
<p>That felt a bit anticlimactic.  You save one character, but you add three non-alphabetic symbols.</p>
<p>If these were equivalent, were we really getting the bang for the buck we would want out of a sparkly new datatype?</p>
<p>So I hesitated to declare that to be the meaning.</p>
<h2>But I've Found The Reason <em>Why</em> It Needs To Be The Meaning...</h2>
<p><strong>It fills the role of being a <em>SINGLE</em> value, that can sit in literal slots to represent an assignment.</strong></p>
<p>That means you can say things like:</p>
<pre><code>(var): default [10]
</code></pre>
<p>It's impossible for this to work with:</p>
<pre><code>set var default [10]
</code></pre>
<p>Because it splits the intent to set the word pointed to by the variable into a function call to SET and a WORD! reference to VAR.  <em>DEFAULT can only quote value left, and it has to pack up all the information it needs to do its job.</em></p>
<p>So it really is a missing piece.  And really, I think there are a lot of cases where I'm just going to like <strong>(word):</strong> it better than <strong>set word</strong>.  It may be a bit more symbolic, but by not being wordy it could blend in better.</p>
<pre><code>var1: blah blah blah
var2: blah blah blah
(word): blah blah blah  ; doesn't break the rhythm as much as SET WORD
</code></pre>
<h2>I'll Start Patching In Behaviors For It... The First Is UPARSE EMIT!</h2>
<p>Right now, if you know the name you're going to emit for a variable, you can use it literally in GATHER:</p>
<pre><code>&gt;&gt; uparse [10 20] [gather [emit x: integer!, emit y: integer!]]
== make object! [
    x: 10
    y: 20
]
</code></pre>
<p>But what if the field's name is dynamic (maybe even captured from the parsed material itself?)  Well, SET-GROUP! seems the obvious answer, doesn't it?</p>
<pre><code>&gt;&gt; word: 'xxx

&gt;&gt; uparse "a" [gather [emit (word): &lt;any&gt;]]
== make object! [
    xxx: #a
]</code></pre>
          <p><a href="https://forum.rebol.info/t/set-group-finds-its-groove/1663/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/set-group-finds-its-groove/1663/1</link>
        <pubDate>Sun, 15 Aug 2021 01:20:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1663-1</guid>
        <source url="https://forum.rebol.info/t/set-group-finds-its-groove/1663.rss">SET-GROUP! Finds its Groove</source>
      </item>
  </channel>
</rss>

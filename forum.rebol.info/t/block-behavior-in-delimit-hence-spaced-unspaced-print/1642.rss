<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>BLOCK! Behavior In DELIMIT (hence SPACED, UNSPACED, PRINT)</title>
    <link>https://forum.rebol.info/t/block-behavior-in-delimit-hence-spaced-unspaced-print/1642</link>
    <description>Because I&#39;ve thought of Redbols as targeting being a kind of &quot;user friendly&quot; and intuitive language, I was long bent out of shape about how junky things like PRINT and REJOIN were.

If your &quot;Hello World&quot; level programs are unpredictable nonsense, I don&#39;t see how you know where to start.  :-/

So an early thing I came up with was the idea to replace REJOIN with something that had some nice learnable invariants...which was called COMBINE.  It was harder than I thought.

Among the various philosophies that were tried out, was that blocks would be reduced recursively:

    &gt;&gt; var: &quot;World&quot;

    old&gt;&gt; print [&quot;Hello&quot; var]
    Hello World

    &gt;&gt; block: [&quot;Hello&quot; var]

    &gt;&gt; print [&quot;((&quot; block &quot;))&quot;]
    (( Hello World ))

But I began having second thoughts, because it seemed like reducing blocks inside the print was a bit &quot;dangerous&quot;.  You were in an evaluative context so if you wanted reduction you could ask for it.

Many ideas were tried over time, such as using BLOCK! as a means of getting &quot;tight spacing&quot; so you could intermix spaced and unspaced portions:

    &gt;&gt; print [&quot;Outer&quot; &quot;spaced&quot; [&quot;inner&quot; &quot;not&quot; &quot;spaced&quot;] &quot;was an&quot; &quot;idea&quot;]
    Outer spaced innernotspaced was an idea

This seemed to give a best of both worlds scenario.  But it wasn&#39;t clear whether the blocks should be reduced, or exactly what this &quot;unspaced non-reduced block&quot; operation was.

## Today, I Think We Have A Direction and Rationale

[I just posted my reasoning for why I think this should be true](https://forum.rebol.info/t/print-for-empty-block-empty-text-or-text-of-just-spaces/1641):

    &gt;&gt; print [&quot;abc&quot; [] &quot;def&quot;]
    abc def

Rebol2 and Red throw in two spaces and that&#39;s no good.

If BLOCK! is going to be an aggregator for material inside of PRINT then the base case needs to basically act as if no material is there.  Otherwise it&#39;s mostly useless, e.g. it couldn&#39;t be used for indentation:

    print [collect [repeat indent [keep tab]]], &quot;what if indent is 0?&quot;]

With that laid down I think it&#39;s safe to say that we want what&#39;s in a BLOCK! to be considered as being *pre-reduced*.  But also, *that it be unspaced*.

    &gt;&gt; word: &quot;part&quot;
    == &quot;part&quot;

    &gt;&gt; print [&quot;Mixing&quot; [&quot;unspaced&quot; word] &quot;with&quot; &quot;spaced&quot; word]
    Mixing unspacedword with spaced part

We have a nice tool now with GET-BLOCK! that will reduce, so you have every tool on hand:

    &gt;&gt; print [&quot;Mixing&quot; :[&quot;unspaced&quot; word] &quot;with&quot; &quot;spaced&quot; word]
    Mixing unspacedpart with spaced part

## Invariant For BLOCK! Inside DELIMIT (hence PRINT, etc)

So I came up with a good model for what the BLOCK! inside of the PRINT above will do.

**It does the same thing that APPEND of a BLOCK! to a string would do.**

    &gt;&gt; append copy {} [&quot;unspaced&quot; word]
    == &quot;unspacedword&quot;

**Whatever that is, that&#39;s what happens with blocks in print.**  So it&#39;s not FORM-ing, and no spaces.  It&#39;s the behavior of raw material being appended blockwise to a string.

This keeps us from having to define a separate new behavior.  It doesn&#39;t define that behavior, so we&#39;re not out of the woods.  But as I say, it&#39;s a slow process...one step at a time.</description>
    
    <lastBuildDate>Mon, 02 Aug 2021 20:14:42 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/block-behavior-in-delimit-hence-spaced-unspaced-print/1642.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>BLOCK! Behavior In DELIMIT (hence SPACED, UNSPACED, PRINT)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>While we're on the subject, I might ask if we'd expect the following:</p>
<pre><code>&gt;&gt; parse "abcd" ['[a "b" c] "d"]
== "d"
</code></pre>
<p>We might look for analogous questions like:</p>
<pre><code>rebol2&gt;&gt; find "abc" [a "b" c]
== "abc"
</code></pre>
<p>But in Red and R3-Alpha, that doesn't work:</p>
<pre><code>red&gt;&gt; find "abc" [a "b" c]
== none

r3-alpha&gt;&gt; find "abc" [a "b" c]
== none
</code></pre>
<p>I think it's evident that when we talk about the relationship between BLOCK! and TEXT!, the most <em>foundational</em> is to just treat everything as being smooshed together...no spaces.</p>
<p>This makes me lean to wanting to say that TO TEXT! of a BLOCK! would have that behavior...thus leaving other behaviors to the likes of SPACED, FORM, MOLD, etc.</p>
<p>Even so...how many places that accept strings should accept BLOCK!s-of-string-parts?  It's interesting that representationally, blocks of string parts have better characteristics for rearrangement and growth...especially if a string is long.</p>
<p>Just more things to think about.</p>
          <p><a href="https://forum.rebol.info/t/block-behavior-in-delimit-hence-spaced-unspaced-print/1642/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/block-behavior-in-delimit-hence-spaced-unspaced-print/1642/2</link>
        <pubDate>Mon, 02 Aug 2021 20:14:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1642-2</guid>
        <source url="https://forum.rebol.info/t/block-behavior-in-delimit-hence-spaced-unspaced-print/1642.rss">BLOCK! Behavior In DELIMIT (hence SPACED, UNSPACED, PRINT)</source>
      </item>
      <item>
        <title>BLOCK! Behavior In DELIMIT (hence SPACED, UNSPACED, PRINT)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Because I've thought of Redbols as targeting being a kind of "user friendly" and intuitive language, I was long bent out of shape about how junky things like PRINT and REJOIN were.</p>
<p>If your "Hello World" level programs are unpredictable nonsense, I don't see how you know where to start.  :-/</p>
<p>So an early thing I came up with was the idea to replace REJOIN with something that had some nice learnable invariants...which was called COMBINE.  It was harder than I thought.</p>
<p>Among the various philosophies that were tried out, was that blocks would be reduced recursively:</p>
<pre><code>&gt;&gt; var: "World"

old&gt;&gt; print ["Hello" var]
Hello World

&gt;&gt; block: ["Hello" var]

&gt;&gt; print ["((" block "))"]
(( Hello World ))
</code></pre>
<p>But I began having second thoughts, because it seemed like reducing blocks inside the print was a bit "dangerous".  You were in an evaluative context so if you wanted reduction you could ask for it.</p>
<p>Many ideas were tried over time, such as using BLOCK! as a means of getting "tight spacing" so you could intermix spaced and unspaced portions:</p>
<pre><code>&gt;&gt; print ["Outer" "spaced" ["inner" "not" "spaced"] "was an" "idea"]
Outer spaced innernotspaced was an idea
</code></pre>
<p>This seemed to give a best of both worlds scenario.  But it wasn't clear whether the blocks should be reduced, or exactly what this "unspaced non-reduced block" operation was.</p>
<h2>Today, I Think We Have A Direction and Rationale</h2>
<p><a href="https://forum.rebol.info/t/print-for-empty-block-empty-text-or-text-of-just-spaces/1641">I just posted my reasoning for why I think this should be true</a>:</p>
<pre><code>&gt;&gt; print ["abc" [] "def"]
abc def
</code></pre>
<p>Rebol2 and Red throw in two spaces and that's no good.</p>
<p>If BLOCK! is going to be an aggregator for material inside of PRINT then the base case needs to basically act as if no material is there.  Otherwise it's mostly useless, e.g. it couldn't be used for indentation:</p>
<pre><code>print [collect [repeat indent [keep tab]]], "what if indent is 0?"]
</code></pre>
<p>With that laid down I think it's safe to say that we want what's in a BLOCK! to be considered as being <em>pre-reduced</em>.  But also, <em>that it be unspaced</em>.</p>
<pre><code>&gt;&gt; word: "part"
== "part"

&gt;&gt; print ["Mixing" ["unspaced" word] "with" "spaced" word]
Mixing unspacedword with spaced part
</code></pre>
<p>We have a nice tool now with GET-BLOCK! that will reduce, so you have every tool on hand:</p>
<pre><code>&gt;&gt; print ["Mixing" :["unspaced" word] "with" "spaced" word]
Mixing unspacedpart with spaced part
</code></pre>
<h2>Invariant For BLOCK! Inside DELIMIT (hence PRINT, etc)</h2>
<p>So I came up with a good model for what the BLOCK! inside of the PRINT above will do.</p>
<p><strong>It does the same thing that APPEND of a BLOCK! to a string would do.</strong></p>
<pre><code>&gt;&gt; append copy {} ["unspaced" word]
== "unspacedword"
</code></pre>
<p><strong>Whatever that is, that's what happens with blocks in print.</strong>  So it's not FORM-ing, and no spaces.  It's the behavior of raw material being appended blockwise to a string.</p>
<p>This keeps us from having to define a separate new behavior.  It doesn't define that behavior, so we're not out of the woods.  But as I say, it's a slow process...one step at a time.</p>
          <p><a href="https://forum.rebol.info/t/block-behavior-in-delimit-hence-spaced-unspaced-print/1642/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/block-behavior-in-delimit-hence-spaced-unspaced-print/1642/1</link>
        <pubDate>Sat, 31 Jul 2021 17:35:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1642-1</guid>
        <source url="https://forum.rebol.info/t/block-behavior-in-delimit-hence-spaced-unspaced-print/1642.rss">BLOCK! Behavior In DELIMIT (hence SPACED, UNSPACED, PRINT)</source>
      </item>
  </channel>
</rss>

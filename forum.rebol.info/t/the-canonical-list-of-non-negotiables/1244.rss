<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Canonical List of Non-Negotiables</title>
    <link>https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244</link>
    <description>I realized this is something that maybe hasn&#39;t been attempted, but would be very useful.  That is **a list of concrete code samples where if Rebol won&#39;t run that code looking that way, *then it is dead to you*.**

I&#39;d imagine it&#39;s easier to say things like *&quot;it&#39;s dead to me if it requires me to install Java&quot;*.  But there must be something other than the meta-properties of the language which people consider foundational?  Actual code--looking and acting an actual way?

I&#39;m not looking for *controversial* things here--rather things generally agreed on as good.    But naming some of them out loud might have benefit.  I&#39;ll start.

## COMPOSE, UNSPACED, ETC. VAPORIZING CONDITIONALS

The lack of conditional vaporization bugged me to no end about Rebol2:

    rebol2&gt;&gt; compose [&lt;a&gt; (if false [&lt;b&gt;]) &lt;c&gt;]
    == [&lt;a&gt; none &lt;c&gt;]

    rebol2&gt;&gt; rejoin [&quot;a&quot; if false [&quot;b&quot;] &quot;c&quot;]
    == &quot;anonec&quot;

You had to throw in an EITHER with an empty branch:

    rebol2&gt;&gt; compose [&lt;a&gt; (either false [&lt;b&gt;] []) &lt;c&gt;]
    == [&lt;a&gt; &lt;c&gt;]

    rebol2&gt;&gt; rejoin [&quot;a&quot; either false [&quot;b&quot;] [] &quot;c&quot;]
    == &quot;ac&quot;

So I advocated vaporizing NONE! by default for a while...facing resistance from those wanting to use them as placeholders in blocks, adamant that NONE! *was a value*.

This tension spawned a new philosophy based around a NULL state...which had no datatype and could never be put in blocks.  This state was then used to uniquely represent the failure of a conditional.

    &gt;&gt; compose [&lt;a&gt; (if false [&lt;b&gt;]) &lt;c&gt;]
    == [&lt;a&gt; &lt;c&gt;]

    &gt;&gt; unspaced [&quot;a&quot; if false [&quot;b&quot;] &quot;c&quot;]
    == &quot;ac&quot;

I don&#39;t want to belabor how it&#39;s implemented too much (even though I&#39;m 99.99% settled with NULL as *the* right answer, and correct result for all failed conditionals).  But I don&#39;t think it should be harder than this.  so no **opt if condition [...]** or other markings.

If some brilliant replacement plan eliminated the idea of failed conditional returning something other than the absence of a value, then those would just have to dissolve in COMPOSE unless you use COMPOSE/ONLY or something.  But I&#39;m not holding my breath.  NULL is the ticket, here.

## DEFINITIONAL RETURN

Novices using Rebol2 or Red aren&#39;t really clear on how their RETURN works.  (Or *doesn&#39;t* work, as the case my be.)  RETURN climbs the stack until it finds a function that is willing to accept returns.

* Functions in Rebol2/Red that *won&#39;t* accept returns: **IF, WHILE, or pretty much any native**
* Functions in Rebol2/Red that *will* accept returns: **any user FUNC you write**

To give a brutally simple example, you cannot implement UNLESS in terms of IF:

     rebol2&gt;&gt; foo: func [x] [if not x = 10 [return &quot;not 10&quot;] return &quot;it&#39;s 10!&quot;]
     rebol2&gt;&gt; foo 20
     == &quot;not 10&quot;

     rebol2&gt;&gt; unless: func [cond block] [if not cond block]
     rebol2&gt;&gt; bar: func [x] [unless x = 10 [return &quot;not 10&quot;] return &quot;it&#39;s 10!&quot;]
     rebol2&gt;&gt; bar 20
     == &quot;it&#39;s 10&quot;  ; D&#39;oh

That UNLESS, because it&#39;s a FUNC and not a native, is a candidate for receiving RETURN.  So the UNLESS itself returned &quot;not 10&quot; instead of returning from bar.  Execution continued and the `return &quot;it&#39;s 10!&quot; ran.  **I maintain that correct behavior constitutes another must-have, [and I was by no means alone in this, nor the first to say so](https://github.com/rebol/rebol-issues/issues/539#issuecomment-170878011)**.

    &gt;&gt; unless: function [cond block] [if not cond (block)]  ; see note re: group!
    &gt;&gt; bar: function [x] [unless x = 10 [return &quot;not 10&quot;] return &quot;it&#39;s 10!&quot;]
    &gt;&gt; bar 20
    == &quot;not 10&quot;

**I do not consider annotating UNLESS to say &quot;I&#39;m the kind of thing that doesn&#39;t catch returns&quot; to be remotely acceptable.**  I&#39;d sooner throw out the project than go that route.  Addressing definitional returns wasn&#39;t at all trivial...even though conceptually it was understood what needed to be done.  It was one of the first things I tried to do in open-sourced R3-Alpha.  The rearranging I had to do in order to understand the code well enough to accomplish it laid the groundwork for many features to come.

So this belongs in the non-negotiable list.

*(Note: The reason you have to put a group! around `block` (or say `:block`) is due to soft-quoted branching, and I [argue for the tradeoff here](https://forum.rebol.info/t/stylistic-questions-and-soft-quoted-branching/1220).  I would not consider that one of my non-negotiable points for this list, though I&#39;ve offered what I believe to be some compelling arguments.  I do--however--consider FUNCTION instead of FUNC to be a non-negotiable way of writing this, with current leaning that [FUNC is a full synonym for FUNCTION](https://forum.rebol.info/t/abbreviations-as-synonyms/1211))*

## ...and...

That&#39;s only two off the top of my head.  But my idea was that we can keep adding posts to this thread whenever someone thinks of something.  What *has* to work else it&#39;s &quot;dead to you&quot;?  @IngoHohmann, @rgchris, @gchiu, @Mark-hi, @BlackAttr... ?

Like I say: please avoid functionality concepts like &quot;has to talk to ODBC&quot;...unless you have a very specific code sample that looks *exactly* right for how it needs to look for some case.</description>
    
    <lastBuildDate>Mon, 16 Aug 2021 18:40:15 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Canonical List of Non-Negotiables</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="3" data-topic="1244">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I've spotted <code>&lt;*&gt;</code> in some areas of source. I'm not sure what it means, but it looks intimidating.</p>
</blockquote>
</aside>
<p>It's just a tag I thought looked good for use with the COMPOSE feature of a skippable FILE! or TAG! that shows you which slots to compose.  <a href="https://forum.rebol.info/t/the-even-more-powerful-compose/1101">I think that's pretty great</a>.  If you want you can pick another tag.</p>
<p><em>(The predicate functionality is currently disabled, pending more research on how predicates will be done system-wise...)</em></p>
<aside class="quote no-group" data-username="rgchris" data-post="3" data-topic="1244">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I'm uncomfortable with new considerations for the <code>/refinement</code> form.</p>
</blockquote>
</aside>
<p>There's definitely a lot to think through regarding this.  I'll be the first to say that.</p>
<p>But I feel like /foo/bar being legal is feeling fairly close to non-negotiable for me.  And if /foo/bar is legal, I don't want that to be a PATH! and /foo to be a REFINEMENT!.</p>
<p>I wish there was more experience with this.  :-/  I mentioned that I did some tinkering on NewPath stuff, which raises questions...like maybe if perhaps GROUP!s inside of <span class="mention">@paths</span> should evaluate:</p>
<pre><code>file: @/usr/(first [local bin])/subdir
; e.g. file is now @/usr/local/subdir

xxx: '@/usr/(first [local bin])/subdir
; e.g. file is now @/usr/(first [local bin])/subdir
</code></pre>
<aside class="quote no-group" data-username="rgchris" data-post="3" data-topic="1244">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I don't like the <code>@inert</code> form. I have a strong preference for <code>@name</code> string sub-type (or just a variation of the email type).</p>
</blockquote>
</aside>
<p>The inert forms bring in a missing piece for the language.  Not having an inert form of WORD!/PATH!/GROUP! is too much a sacrifice to make just for a relatively unsophisticated string type.</p>
<p>This might be something you find you appreciate more with time.  Hopefully you can be happy enough by virtue of getting back <span class="hashtag">#issue</span> as a string type, and there is %file ... that's pretty good coverage.</p>
<aside class="quote no-group" data-username="rgchris" data-post="3" data-topic="1244">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I need to better understand the rationale behind <strong>type-of</strong> returning quoted types. My preference on the face of it would be <strong>type-of 1</strong> be the same as <strong>type-of '''''1</strong> with a different operator determining quotedness.</p>
</blockquote>
</aside>
<p>It was historically the case that quoted values returned a distinct type, so this isn't a new behavior.</p>
<pre><code>rebol2&gt;&gt; (type? first [x])
== word!  ; new plan would be @[word]

rebol2&gt;&gt; (type? first ['x])
== lit-word!   ; new plan would be @['word]
</code></pre>
<p>Today the KIND OF operation conflates all QUOTED!s:</p>
<pre><code>&gt;&gt; kind of first [x]
== #[datatype! word!]  ; new plan probably `@[word]` vs. e.g. `word` or `@word`

&gt;&gt; kind of first ['x]
== #[datatype! quoted!]

&gt;&gt; kind of first [''''(a b c)]
== #[datatype! quoted!]
</code></pre>
<p>And if you want to, you can say <strong>kind of noquote value</strong> to get what you are asking for (will likely be the same answer as <strong>type of noquote value</strong> but would make it more clear that you wouldn't be getting any quotes on the answer itself).</p>
<p>I would counter that I am skeptical of the use cases for such an indiscriminate "I don't care if it's quoted or not" test.  I just don't see it coming up that you want to ignore how many quote levels there are and treating everything the same regardless.  The cases where this would make sense seem covered by NOQUOTE.</p>
          <p><a href="https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244/4</link>
        <pubDate>Wed, 11 Dec 2019 18:02:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1244-4</guid>
        <source url="https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244.rss">The Canonical List of Non-Negotiables</source>
      </item>
      <item>
        <title>The Canonical List of Non-Negotiables</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I don't know that anything I have is above negotiation, I suppose. I've used Rebol long enough and am generally productive with it and would prefer something resembling that language at the end of day.</p>
<p>I have my biases:</p>
<ul>
<li>Data/messaging come first, and words without qualifying symbols be the premium currency.</li>
<li>Source should as much as possible resemble the molded representation of said source loaded.</li>
<li>Now that PARSE returns a position rather than a confirmation, I'm not sure I'd tolerate going back.</li>
</ul>
<p><em>Will likely revisit these after mulling them over a bit, don't consider them to be dogmatic.</em></p>
<p>Rebol tries to straddle being a soft, human programming language against something that is more rigorous and consistent. Ren-C does move the needle more toward the latter and I consider that almost universally better, with one or two areas of reservation.</p>
<p>My other thoughts would relate to the meta, so I'll hold on to those (save to say, if you are going to introduce a Java dependency, then Rebol being dead might just be a mercy).</p>
<p>Update:</p>
<p>I'm not saying these are non-negotiable and it may be the form and not the substance that I object to. I know these are not necessarily behavioural facets of the language, but as we don't have a page for that, I would like to have them on record:</p>
<ul>
<li>
<p>I don't like the <code>@inert</code> form. I have a strong preference for <code>@name</code> string sub-type (or just a variation of the email type).</p>
</li>
<li>
<p>I'm uncomfortable with new considerations for the <code>/refinement</code> form.</p>
</li>
<li>
<p>I've spotted <code>&lt;*&gt;</code> in some areas of source. I'm not sure what it means, but it looks intimidating.</p>
</li>
<li>
<p>I need to better understand the rationale behind <strong>type-of</strong> returning quoted types. My preference on the face of it would be <strong>type-of 1</strong> be the same as <strong>type-of '''''1</strong> with a different operator determining quotedness.</p>
</li>
</ul>
          <p><a href="https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244/3</link>
        <pubDate>Wed, 04 Dec 2019 04:03:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1244-3</guid>
        <source url="https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244.rss">The Canonical List of Non-Negotiables</source>
      </item>
      <item>
        <title>The Canonical List of Non-Negotiables</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I don't have any non-negotiables at this stage of things. In the R2 past I've had minor annoyances, and I'm sure as I use Ren-C there will be things that I wish were more simple or compact.</p>
          <p><a href="https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244/2</link>
        <pubDate>Mon, 02 Dec 2019 16:25:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1244-2</guid>
        <source url="https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244.rss">The Canonical List of Non-Negotiables</source>
      </item>
      <item>
        <title>The Canonical List of Non-Negotiables</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I realized this is something that maybe hasn't been attempted, but would be very useful.  That is <strong>a list of concrete code samples where if Rebol won't run that code looking that way, <em>then it is dead to you</em>.</strong></p>
<p>I'd imagine it's easier to say things like <em>"it's dead to me if it requires me to install Java"</em>.  But there must be something other than the meta-properties of the language which people consider foundational?  Actual code--looking and acting an actual way?</p>
<p>I'm not looking for <em>controversial</em> things here--rather things generally agreed on as good.    But naming some of them out loud might have benefit.  I'll start.</p>
<h2>COMPOSE, UNSPACED, ETC. VAPORIZING CONDITIONALS</h2>
<p>The lack of conditional vaporization bugged me to no end about Rebol2:</p>
<pre><code>rebol2&gt;&gt; compose [&lt;a&gt; (if false [&lt;b&gt;]) &lt;c&gt;]
== [&lt;a&gt; none &lt;c&gt;]

rebol2&gt;&gt; rejoin ["a" if false ["b"] "c"]
== "anonec"
</code></pre>
<p>You had to throw in an EITHER with an empty branch:</p>
<pre><code>rebol2&gt;&gt; compose [&lt;a&gt; (either false [&lt;b&gt;] []) &lt;c&gt;]
== [&lt;a&gt; &lt;c&gt;]

rebol2&gt;&gt; rejoin ["a" either false ["b"] [] "c"]
== "ac"
</code></pre>
<p>So I advocated vaporizing NONE! by default for a while...facing resistance from those wanting to use them as placeholders in blocks, adamant that NONE! <em>was a value</em>.</p>
<p>This tension spawned a new philosophy based around a NULL state...which had no datatype and could never be put in blocks.  This state was then used to uniquely represent the failure of a conditional.</p>
<pre><code>&gt;&gt; compose [&lt;a&gt; (if false [&lt;b&gt;]) &lt;c&gt;]
== [&lt;a&gt; &lt;c&gt;]

&gt;&gt; unspaced ["a" if false ["b"] "c"]
== "ac"
</code></pre>
<p>I don't want to belabor how it's implemented too much (even though I'm 99.99% settled with NULL as <em>the</em> right answer, and correct result for all failed conditionals).  But I don't think it should be harder than this.  so no <strong>opt if condition [...]</strong> or other markings.</p>
<p>If some brilliant replacement plan eliminated the idea of failed conditional returning something other than the absence of a value, then those would just have to dissolve in COMPOSE unless you use COMPOSE/ONLY or something.  But I'm not holding my breath.  NULL is the ticket, here.</p>
<h2>DEFINITIONAL RETURN</h2>
<p>Novices using Rebol2 or Red aren't really clear on how their RETURN works.  (Or <em>doesn't</em> work, as the case my be.)  RETURN climbs the stack until it finds a function that is willing to accept returns.</p>
<ul>
<li>Functions in Rebol2/Red that <em>won't</em> accept returns: <strong>IF, WHILE, or pretty much any native</strong>
</li>
<li>Functions in Rebol2/Red that <em>will</em> accept returns: <strong>any user FUNC you write</strong>
</li>
</ul>
<p>To give a brutally simple example, you cannot implement UNLESS in terms of IF:</p>
<pre><code> rebol2&gt;&gt; foo: func [x] [if not x = 10 [return "not 10"] return "it's 10!"]
 rebol2&gt;&gt; foo 20
 == "not 10"

 rebol2&gt;&gt; unless: func [cond block] [if not cond block]
 rebol2&gt;&gt; bar: func [x] [unless x = 10 [return "not 10"] return "it's 10!"]
 rebol2&gt;&gt; bar 20
 == "it's 10"  ; D'oh
</code></pre>
<p>That UNLESS, because it's a FUNC and not a native, is a candidate for receiving RETURN.  So the UNLESS itself returned "not 10" instead of returning from bar.  Execution continued and the `return "it's 10!" ran.  <strong>I maintain that correct behavior constitutes another must-have, <a href="https://github.com/rebol/rebol-issues/issues/539#issuecomment-170878011">and I was by no means alone in this, nor the first to say so</a></strong>.</p>
<pre><code>&gt;&gt; unless: function [cond block] [if not cond (block)]  ; see note re: group!
&gt;&gt; bar: function [x] [unless x = 10 [return "not 10"] return "it's 10!"]
&gt;&gt; bar 20
== "not 10"
</code></pre>
<p><strong>I do not consider annotating UNLESS to say "I'm the kind of thing that doesn't catch returns" to be remotely acceptable.</strong>  I'd sooner throw out the project than go that route.  Addressing definitional returns wasn't at all trivial...even though conceptually it was understood what needed to be done.  It was one of the first things I tried to do in open-sourced R3-Alpha.  The rearranging I had to do in order to understand the code well enough to accomplish it laid the groundwork for many features to come.</p>
<p>So this belongs in the non-negotiable list.</p>
<p><em>(Note: The reason you have to put a group! around <code>block</code> (or say <code>:block</code>) is due to soft-quoted branching, and I <a href="https://forum.rebol.info/t/stylistic-questions-and-soft-quoted-branching/1220">argue for the tradeoff here</a>.  I would not consider that one of my non-negotiable points for this list, though I've offered what I believe to be some compelling arguments.  I do--however--consider FUNCTION instead of FUNC to be a non-negotiable way of writing this, with current leaning that <a href="https://forum.rebol.info/t/abbreviations-as-synonyms/1211">FUNC is a full synonym for FUNCTION</a>)</em></p>
<h2>...and...</h2>
<p>That's only two off the top of my head.  But my idea was that we can keep adding posts to this thread whenever someone thinks of something.  What <em>has</em> to work else it's "dead to you"?  <a class="mention" href="/u/ingohohmann">@IngoHohmann</a>, <a class="mention" href="/u/rgchris">@rgchris</a>, <a class="mention" href="/u/gchiu">@gchiu</a>, <a class="mention" href="/u/mark-hi">@Mark-hi</a>, <a class="mention" href="/u/blackattr">@BlackAttr</a>... ?</p>
<p>Like I say: please avoid functionality concepts like "has to talk to ODBC"...unless you have a very specific code sample that looks <em>exactly</em> right for how it needs to look for some case.</p>
          <p><a href="https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244/1</link>
        <pubDate>Fri, 29 Nov 2019 05:04:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1244-1</guid>
        <source url="https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244.rss">The Canonical List of Non-Negotiables</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Is there a better name for VOIDIFY?</title>
    <link>https://forum.rebol.info/t/is-there-a-better-name-for-voidify/1360</link>
    <description>There&#39;s a sort of fundamental question about what REDUCE should do about NULLs:

    &gt;&gt; reduce [1 if false [&lt;vaporized&gt;] 2]
    == ???

It can&#39;t put NULL in the slots of the reduced block.  So does it throw the NULL out, raise an error, or put voids or blanks in those positions?

Historically I&#39;d tried adding refinements like REDUCE/TRY that attempted to take care of this situation...but there&#39;s a question of how many of these you want (and how to deal with multiple refinements that contradict each other).  It felt unclean.

But with the help of predicates, we have a generic option:

    &gt;&gt; reduce .try [1 if false [&lt;vaporized&gt;] 2]
    == [1 _ 2]  ; TRY turns NULL to blank

    &gt;&gt; reduce .identity [1 if false [&lt;vaporized&gt;] 2]
    == [1 2]  ; we could say identity is &quot;it was NULL and I meant it&quot;

    &gt;&gt; reduce .non.null [1 if false [&lt;vaporized&gt;] 2]
    ** Script Error: NON wasn&#39;t expecting NULL for its VALUE argument

What I&#39;d propose is that the `.non.null` case be the default behavior.  So the other choices would be a way of overriding that conservative handling that &quot;just errored&quot;.

I&#39;ve been toying with the idea that a lone dot be a synonym for identity.  Which would make a clean way in general for &quot;undoing&quot; any work that a default predicate does to protect you, and get the &quot;raw&quot; result...such as the dissolving behavior here:

    &gt;&gt; reduce . [1 if false [&lt;vaporized&gt;] 2]
    == [1 2]

It&#39;s an interesting idea, in any case.  This would be most useful if the system is conservative about noticing error conditions by default--as above--and you&#39;d be turning off those protections like NON NULL.

## But...what about voidify?

TRY has a nice name.  VOIDIFY isn&#39;t as nice.

     &gt;&gt; reduce .voidify [1 if false [&lt;vaporized&gt;] 2]
     == [1 #[void] 2]

Is there some better conceptual name for &quot;if something is null, make it void...otherwise pass it through&quot;?  You&#39;re saying &quot;I want a value here, even if it&#39;s a bad one&quot;.  REIFY wouldn&#39;t be particularly good since in most contexts we&#39;d say that BLANK! is the &quot;reified&quot; version of NULL.

Anyway, wanted to introduce the concept of REDUCE predicates...and figured I&#39;d mention this naming issue while I was at it.</description>
    
    <lastBuildDate>Thu, 08 Oct 2020 06:21:18 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/is-there-a-better-name-for-voidify/1360.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Is there a better name for VOIDIFY?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There's a sort of fundamental question about what REDUCE should do about NULLs:</p>
<pre><code>&gt;&gt; reduce [1 if false [&lt;vaporized&gt;] 2]
== ???
</code></pre>
<p>It can't put NULL in the slots of the reduced block.  So does it throw the NULL out, raise an error, or put voids or blanks in those positions?</p>
<p>Historically I'd tried adding refinements like REDUCE/TRY that attempted to take care of this situation...but there's a question of how many of these you want (and how to deal with multiple refinements that contradict each other).  It felt unclean.</p>
<p>But with the help of predicates, we have a generic option:</p>
<pre><code>&gt;&gt; reduce .try [1 if false [&lt;vaporized&gt;] 2]
== [1 _ 2]  ; TRY turns NULL to blank

&gt;&gt; reduce .identity [1 if false [&lt;vaporized&gt;] 2]
== [1 2]  ; we could say identity is "it was NULL and I meant it"

&gt;&gt; reduce .non.null [1 if false [&lt;vaporized&gt;] 2]
** Script Error: NON wasn't expecting NULL for its VALUE argument
</code></pre>
<p>What I'd propose is that the <code>.non.null</code> case be the default behavior.  So the other choices would be a way of overriding that conservative handling that "just errored".</p>
<p>I've been toying with the idea that a lone dot be a synonym for identity.  Which would make a clean way in general for "undoing" any work that a default predicate does to protect you, and get the "raw" result...such as the dissolving behavior here:</p>
<pre><code>&gt;&gt; reduce . [1 if false [&lt;vaporized&gt;] 2]
== [1 2]
</code></pre>
<p>It's an interesting idea, in any case.  This would be most useful if the system is conservative about noticing error conditions by default--as above--and you'd be turning off those protections like NON NULL.</p>
<h2>But...what about voidify?</h2>
<p>TRY has a nice name.  VOIDIFY isn't as nice.</p>
<pre><code> &gt;&gt; reduce .voidify [1 if false [&lt;vaporized&gt;] 2]
 == [1 #[void] 2]
</code></pre>
<p>Is there some better conceptual name for "if something is null, make it void...otherwise pass it through"?  You're saying "I want a value here, even if it's a bad one".  REIFY wouldn't be particularly good since in most contexts we'd say that BLANK! is the "reified" version of NULL.</p>
<p>Anyway, wanted to introduce the concept of REDUCE predicates...and figured I'd mention this naming issue while I was at it.</p>
          <p><a href="https://forum.rebol.info/t/is-there-a-better-name-for-voidify/1360/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/is-there-a-better-name-for-voidify/1360/1</link>
        <pubDate>Thu, 08 Oct 2020 04:12:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1360-1</guid>
        <source url="https://forum.rebol.info/t/is-there-a-better-name-for-voidify/1360.rss">Is there a better name for VOIDIFY?</source>
      </item>
  </channel>
</rss>

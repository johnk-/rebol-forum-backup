<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</title>
    <link>https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968</link>
    <description>There&#39;s efficiency to be gained when you compose your parse rules ahead of time.  But what if the rule depends on other things, and you want to generate a rule to splice in that gets composed in *every time it&#39;s run*?

    &gt;&gt; num: 1
    &gt;&gt; char: #&quot;a&quot;
    &gt;&gt; did parse [&quot;a&quot; &quot;bb&quot; &quot;ccc&quot;] [
          some [
              into [:(
                  rule: reduce [num char]
                  num: num + 1
                  char: char + 1
                  rule
              )]
         ] end
      ]
    == #[true]

*(Note: You shouldn&#39;t need the block outside the GET-GROUP! for the INTO, but at the moment INTO isn&#39;t aware of these get groups in its immediate argument...so they have to go in a block rule.  It will be updated to recognize them directly.)*

If the expression inside the GET-GROUP! evaluates to a null, it splices nothing into the rule stream.  With so many null-signaling routines to choose from, that&#39;s rather cool.

    &gt;&gt; did parse &quot;aaabbbcccddd&quot; [
          some &quot;a&quot;
          :(case [1 &gt; 2 [[some &quot;x&quot;]] 4 &gt; 3 [[some &quot;b&quot;]]])
          some &quot;c&quot;
          :(switch 1 + 2 [
              4 [[some &quot;z&quot;]] 3 + 2 [[some &quot;q&quot;]]
          ])
          some &quot;d&quot;
          end
       ]
    == #[true]

Though you can return BLOCK! rules to splice, you can also just return single WORD!s.  At the moment, returning a **`|`** is disabled, though that might be relaxed based on feedback and allowed to mean &quot;skip to next rule&quot; (but clearly this is going to be different from a **`|`** in the source, as being literally in the source is a prerequisite to participating in the skipping.)</description>
    
    <lastBuildDate>Wed, 06 Mar 2019 02:53:38 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="15" data-topic="968">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>Doesn’t seem like the juice is worth the squeeze, so to speak.</p>
</blockquote>
</aside>
<p>One thing I notice about the evaluative parity of literal blocks and regular blocks is that it can act as a comment, of sorts:</p>
<pre><code> either condition [  ; code fragment producing parse rule
      blah blah blah
      '[some "a"]
 ][
     blah blah blah
     '[thru &lt;terminal&gt;]
 ]
</code></pre>
<p>It might be clearer that you are evaluating to that block as a value, and it's not a parameter to <code>blah blah blah</code>.</p>
<p>So it may have some kind of idiomatic usage.</p>
          <p><a href="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/16">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/16</link>
        <pubDate>Thu, 27 Dec 2018 17:40:53 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-968-16</guid>
        <source url="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968.rss">GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</source>
      </item>
      <item>
        <title>GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Agreed. Doesn't seem like the juice is worth the squeeze, so to speak.</p>
          <p><a href="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/15</link>
        <pubDate>Wed, 26 Dec 2018 15:02:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-968-15</guid>
        <source url="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968.rss">GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</source>
      </item>
      <item>
        <title>GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="13" data-topic="968" data-full="true">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>I like the LIT-BLOCK! form too. It’s not a huge difference but it is cleaner here.</p>
</blockquote>
</aside>
<p>There's a bit of a problem here that lit-THING! has to become THING! in the evaluator, and lit-lit-THING! has to become lit-THING!... in a fairly regimented way.  So it might not be able to work.</p>
<blockquote>
<p><strong>UPDATE:</strong> <a href="https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020">Soft-quoting branches makes this work, and is an experiment in progress</a></p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/14</link>
        <pubDate>Wed, 26 Dec 2018 14:12:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-968-14</guid>
        <source url="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968.rss">GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</source>
      </item>
      <item>
        <title>GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I like the LIT-BLOCK! form too. It's not a huge difference but it is cleaner here.</p>
          <p><a href="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/13</link>
        <pubDate>Wed, 26 Dec 2018 14:05:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-968-13</guid>
        <source url="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968.rss">GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</source>
      </item>
      <item>
        <title>GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="10" data-topic="968">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>Makes perfect sense, and was in some other examples earlier.</p>
</blockquote>
</aside>
<p>Do you think this would be clearer?</p>
<pre><code>:(either var '[
    set var: any-word! (
        append exclusions var  ; exclude args/refines
        append new-spec var
    )
        |
    set other: [block! | text!] (
        append/only new-spec other  ; spec notes or data type blocks
    )
] '[
    set var: set-word! (  ; locals legal anywhere
        append exclusions var
        append new-spec var
        var: _
    )
])</code></pre>
          <p><a href="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/12</link>
        <pubDate>Mon, 24 Dec 2018 14:52:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-968-12</guid>
        <source url="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968.rss">GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</source>
      </item>
      <item>
        <title>GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="10" data-topic="968">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>Makes perfect sense, and was in some other examples earlier.</p>
</blockquote>
</aside>
<p>Once upon a time, I believed that doubling brackets up was ugly, and hence there needed to be an IF/ONLY that would not evaluate branches.</p>
<p><a class="mention" href="/u/markeye">@MarkEye</a> didn't think /ONLY was better.  Over time, I changed my mind to think /ONLY wasn't worth it, and double brackets weren't so bad.  Good, even.  You say what you mean, and that's what it looks like.</p>
<p>Eventually the idioms can grow on you, and you find other ways to deal with it.</p>
          <p><a href="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/11</link>
        <pubDate>Thu, 20 Dec 2018 20:46:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-968-11</guid>
        <source url="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968.rss">GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</source>
      </item>
      <item>
        <title>GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Ah ah ah, yes, thanks. Makes perfect sense, and was in some other examples earlier.</p>
          <p><a href="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/10</link>
        <pubDate>Thu, 20 Dec 2018 20:44:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-968-10</guid>
        <source url="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968.rss">GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</source>
      </item>
      <item>
        <title>GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="8" data-topic="968">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>but in the improved code, why are those EITHER blocks doubled up?</p>
</blockquote>
</aside>
<p>Because the GET-GROUP! wants to return a BLOCK! that's a parse rule.  Without the inner block, it would try to run the PARSE code...in DO.</p>
<pre><code>parse "aaa" [:(if true [some "a"])]  ; gives error, SOME is unset, etc.

parse "aaa" [:(if true [[some "a"]])]  ; works
</code></pre>
<p>If you're writing code like this and that bothers you, then stylistically you could space it out.</p>
<pre><code>parse "aaa" [ :(if true [ [some "a"] ]) ]  ; works
</code></pre>
<p>Or put it in a variable, etc.</p>
          <p><a href="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/9</link>
        <pubDate>Thu, 20 Dec 2018 20:43:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-968-9</guid>
        <source url="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968.rss">GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</source>
      </item>
      <item>
        <title>GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Thumbs up on the GET-GROUP!s here-- but in the improved code, why are those EITHER blocks doubled up?</p>
          <p><a href="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/8</link>
        <pubDate>Thu, 20 Dec 2018 20:40:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-968-8</guid>
        <source url="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968.rss">GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</source>
      </item>
      <item>
        <title>GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="6" data-topic="968">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>I haven’t used the conditional parse keywords very much, so I’m looking into digging into it with this nicer approach.</p>
</blockquote>
</aside>
<p>I was confused by it, because I thought that IF was arity 2 and was running the rule after it.  But it doesn't run any rule at all, it just directs continue-or-not.</p>
<p>Here's the one example I have of me using it, in the implementation of FUNCTION going over the spec to look at the locals and args.  I had to basically hack up EITHER by using <strong>if (var) [...] | if (not var) [...]</strong></p>
<pre><code>    if (var) [
        set var: any-word! (
            append exclusions var  ; exclude args/refines
            append new-spec var
        )
            |
        set other: [block! | text!] (
            append/only new-spec other  ; spec notes or data type blocks
        )
    ]
|
    if (not var) [
        set var: set-word! (  ; locals legal anywhere
            append exclusions var
            append new-spec var
            var: _
        )
    ]
</code></pre>
<p>Complex code is going to be tricky no matter how you read it.  But I think it's more clear by just breaking into normal code, and getting to use an EITHER to pick your rules:</p>
<pre><code>    :(either var [[
        set var: any-word! (
            append exclusions var  ; exclude args/refines
            append new-spec var
        )
            |
        set other: [block! | text!] (
            append/only new-spec other  ; spec notes or data type blocks
        )
    ]][[
        set var: set-word! (  ; locals legal anywhere
            append exclusions var
            append new-spec var
            var: _
        )
    ]])
</code></pre>
<p>Now the sky's the limit on your conditional constructs.</p>
<p>This further tightens the notion that PARSE never sees what you put in a single GROUP!...it always executes and gets discarded, while double groups always splice.  That's been a major sticking point for me in the past, and we're killing off the things that used it... IF, RETURN... bonus!</p>
          <p><a href="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/7</link>
        <pubDate>Thu, 20 Dec 2018 20:14:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-968-7</guid>
        <source url="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968.rss">GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</source>
      </item>
      <item>
        <title>GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Cleaner, more concise. I like!<br>
I haven't used the conditional parse keywords very much, so I'm looking into digging into it with this nicer approach.</p>
          <p><a href="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/6</link>
        <pubDate>Thu, 20 Dec 2018 20:02:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-968-6</guid>
        <source url="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968.rss">GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</source>
      </item>
      <item>
        <title>GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="968" data-full="true">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>Love both of these features. Definitely useful immediately for me.</p>
</blockquote>
</aside>
<p>I proposed another I-think-awesome feature in chat, which is that LOGIC! #[true] be a no-op in parse (same as BLANK!) while #[false] not match anything.</p>
<p><a class="mention" href="/u/rgchris">@rgchris</a> has summarized:</p>
<pre><code>parse "abc" ["a" :(true) (-- "this prints") :(false) to end (-- "this doesn't")]

foo?: true parse "abc" [foo? "a" (foo?: false) "b" foo? (-- "doesn't print")]
</code></pre>
<p>This eliminates the need for PARSE's IF construct.  IF would take a condition as a parameter, in a GROUP!, and continue the parse if the condition were truthy and cease matching if it were falsey.  But that was one conditional construct, with the oddity that it was "single-arity".  So it created questions about what its branch would be, where was the EITHER or SWITCH, etc.</p>
<p>Now instead of <strong>if (x = 10)</strong> you can just say <strong>:(x = 10)</strong>, and you have all the power this implies.  If you want to stop a parse from continuing a match, you can do so just by having whatever you put in that GET-GROUP! evaluate to false!  Should you feel that's too obtuse, you might also write <strong>:(if x != 10 [false])</strong> and it would work just as well, using null to proceed matching with an opt-out vs. by returning true.</p>
<p>And if you had <strong>if (condition)</strong> before and it was a logic, you can just say <strong>condition</strong> !</p>
<p>A major benefit in my eyes is that FALSE can take the place of FAIL--as FAIL has now come to be tightly associated with raising errors.  I'd been worried about how to fix that, and this takes care of it.</p>
<p>Of course, as with INTEGER! and BLANK! and WORD! for keywords, you won't be able to match literal logics any more with TRUE or FALSE.  You'll need <strong>lit :(condition):</strong>, <strong>lit #[true]</strong>, etc.  This is par for the course.</p>
          <p><a href="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/5</link>
        <pubDate>Thu, 20 Dec 2018 18:52:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-968-5</guid>
        <source url="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968.rss">GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</source>
      </item>
      <item>
        <title>GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="3" data-topic="968">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<pre><code>normal: lit ([some "b"])
getter: lit (([some "c"]))
parse "bbbccc" [some [(normal) | getter]]
</code></pre>
</blockquote>
</aside>
<p>The <strong>(normal)</strong> there would be a no-op.  It sees a single group in the rule, so it invokes the evaluator and ignores the result.  You're ignoring ([some "b"]) the evaluation product...so no-op.</p>
<p>The <strong>getter</strong> there should run the code and splice, so in this case that just makes <strong>[some "c"]</strong> the next rule.</p>
<p>Hence this should fail, the b's won't match.</p>
<p>I'll do some work on the retriggering of groups.  It's a little weird because you have a step where if it's a GET-GROUP! you have to process it beforehand to see if it's a WORD!, but then if it's a word you have to retrigger it to see if it's a group (!).  I guess that just means do group processing if necessary, do word lookup if necessary, then loop up to do group processing if necessary.</p>
<p>Will have to make sure there's a cancellation opportunity if you somehow produce an infinite loop on this.</p>
          <p><a href="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/4</link>
        <pubDate>Thu, 20 Dec 2018 17:18:12 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-968-4</guid>
        <source url="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968.rss">GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</source>
      </item>
      <item>
        <title>GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>Two PARSE cases to consider:</p>
<pre><code class="lang-auto">normal: lit ([some "b"])
getter: lit :([some "c"])
parse "bbbccc" [some [(normal) | getter]]
</code></pre>
          <p><a href="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/3</link>
        <pubDate>Thu, 20 Dec 2018 16:17:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-968-3</guid>
        <source url="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968.rss">GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</source>
      </item>
      <item>
        <title>GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Love both of these features. Definitely useful immediately for me.</p>
          <p><a href="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/2</link>
        <pubDate>Thu, 20 Dec 2018 15:10:44 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-968-2</guid>
        <source url="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968.rss">GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</source>
      </item>
      <item>
        <title>GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There's efficiency to be gained when you compose your parse rules ahead of time.  But what if the rule depends on other things, and you want to generate a rule to splice in that gets composed in <em>every time it's run</em>?</p>
<pre><code>&gt;&gt; num: 1
&gt;&gt; char: #"a"
&gt;&gt; did parse ["a" "bb" "ccc"] [
      some [
          into [:(
              rule: reduce [num char]
              num: num + 1
              char: char + 1
              rule
          )]
     ] end
  ]
== #[true]
</code></pre>
<p><em>(Note: You shouldn't need the block outside the GET-GROUP! for the INTO, but at the moment INTO isn't aware of these get groups in its immediate argument...so they have to go in a block rule.  It will be updated to recognize them directly.)</em></p>
<p>If the expression inside the GET-GROUP! evaluates to a null, it splices nothing into the rule stream.  With so many null-signaling routines to choose from, that's rather cool.</p>
<pre><code>&gt;&gt; did parse "aaabbbcccddd" [
      some "a"
      :(case [1 &gt; 2 [[some "x"]] 4 &gt; 3 [[some "b"]]])
      some "c"
      :(switch 1 + 2 [
          4 [[some "z"]] 3 + 2 [[some "q"]]
      ])
      some "d"
      end
   ]
== #[true]
</code></pre>
<p>Though you can return BLOCK! rules to splice, you can also just return single WORD!s.  At the moment, returning a <strong><code>|</code></strong> is disabled, though that might be relaxed based on feedback and allowed to mean "skip to next rule" (but clearly this is going to be different from a <strong><code>|</code></strong> in the source, as being literally in the source is a prerequisite to participating in the skipping.)</p>
          <p><a href="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968/1</link>
        <pubDate>Thu, 20 Dec 2018 05:19:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-968-1</guid>
        <source url="https://forum.rebol.info/t/get-group-s-in-parse-mean-execute-and-splice-as-rule/968.rss">GET-GROUP!s in PARSE mean &quot;execute and splice as rule&quot;</source>
      </item>
  </channel>
</rss>

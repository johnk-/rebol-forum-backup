<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What to call the anti-DEFAULT?</title>
    <link>https://forum.rebol.info/t/what-to-call-the-anti-default/475</link>
    <description>DEFAULT exists to run a block of code to give something a value if it doesn&#39;t have one already.

     &gt;&gt; unset &#39;x
     &gt;&gt; x: default [10 + 20]
     &gt;&gt; print x
     30

     &gt;&gt; x: &lt;some-tag&gt;
     &gt;&gt; x: default [10 + 20]
     &gt;&gt; print x
     &lt;some-tag&gt;

With `DEFAULT`, the basic version treats both blanks and voids as &quot;nothingness&quot; and `DEFAULT*` only considers a void to be truly nothing, so it won&#39;t overwrite a blank.

@gchiu at one time asked for an *&quot;anti-default&quot;*.  Rather than make the decision of whether to overwrite or not based on the content of the variable and only sometimes evaluate the block...*always* evaluate the block, then decide whether to overwrite or not based on the result of that evaluation.

The name suggested for it was **UPDATE**:

    &gt;&gt; x: &lt;some-tag&gt;
    &gt;&gt; x: update [()]
    &gt;&gt; print x
    &lt;some-tag&gt;

     &gt;&gt; x: &lt;some-tag&gt;
     &gt;&gt; x: update [10 + 20]
     &gt;&gt; print x
     30

This seems very useful to me, especially when used with conditionals.  While simple conditionals can move assignments into the block of code, e.g. `x: if c [v]` =&gt; `if c [x: v]`, more complex instances might have several points they&#39;d have to selectively do the same assignment:

    number-of-variants: update [
       case [
           whatever1 [do some stuff | 1020] ;-- update for this case
           whatever2 [do some stuff | blank] ;-- don&#39;t update in this case
           whatever3 [do some stuff | 304] ;-- update for this case 
       ] ;-- don&#39;t update if no matches
    ]

As with DEFAULT it would ordinarily consider the right hand side evaluating to blank to be the same as void, e.g. not a new value, and a `UPDATE*` would overwrite even if it was blank...only not if void.

But what we noticed was that UPDATE has been taken for a somewhat esoteric port action that I don&#39;t think anyone is using at the moment.

This raises a bigger question about what exactly the plan is about taking generic global namespace words away from the language and generalizing them in case a port might want to use them.  I said this:

&gt; What one notices with the &quot;word space&quot; in Rebol is that there has been a sort of ambition to take generic words and in the grammar prefix them before things. So if you say update X it can be polymorphic where x is a port or a string or whatever.
&gt;
&gt; So it seems that swiping something like the word UPDATE for an enfixed operator is bad. But yet, even without enfixing, this genericity runs up against another Rebol policy of fixed arity. If arity is fixed, how many parameters does the UPDATE operation that works for all time take?
&gt;
&gt; The cheat is to make it arity 2, and then worst comes to worst, you find some way to fit whatever you want to say into a block. Or add refinements that somehow only work for some targets and not others.
&gt;
&gt; Having previously expressed skepticism of the refinement model and other things about ports, I really do wonder if DO is being overloaded with a task it is unfit for, in a language that&#39;s supposed to be about dialecting. Should there be a generic operator, like `foo &lt;- [ ... ]` and it just writes instructions at ports, where they&#39;re expected to know their &quot;language&quot; and arity of instructions?</description>
    
    <lastBuildDate>Mon, 22 Jan 2018 06:32:40 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/what-to-call-the-anti-default/475.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What to call the anti-DEFAULT?</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>Well, instead of <code>maybe</code> we could use <code>could</code>.</p>
          <p><a href="https://forum.rebol.info/t/what-to-call-the-anti-default/475/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-call-the-anti-default/475/7</link>
        <pubDate>Mon, 22 Jan 2018 06:32:40 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-475-7</guid>
        <source url="https://forum.rebol.info/t/what-to-call-the-anti-default/475.rss">What to call the anti-DEFAULT?</source>
      </item>
      <item>
        <title>What to call the anti-DEFAULT?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="5" data-topic="475">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/iarnold/40/226_2.png" class="avatar"> iArnold:</div>
<blockquote>
<p>Yes MIGHT is a good candidate.</p>
</blockquote>
</aside>
<p>There's also PERHAPS to throw in this mix.</p>
<p>I actually think that MAYBE--which is currently used for other purposes--is probably better.  Unfortunately, the purpose maybe is serving at the moment is important.  It performs tests on a value via a little "testing dialect", and if the value passes the test, it is that value...else it is blank.</p>
<pre><code>&gt;&gt; maybe [integer! string!] 10
== 10

&gt;&gt; maybe [integer! string!] &lt;some-tag&gt;
== _

&gt;&gt; maybe :even? 10
== 10

&gt;&gt; maybe :even? 3
== _
</code></pre>
<p>A stronger version of it is called REALLY which instead of returning blank, will error if the test fails.</p>
<p>It would seem <strong>x: maybe [...]</strong> is better than <strong>x: might [...]</strong> for the anti-default.  I guess something about MAYBE makes me feel like it's single arity, whereas words like ENSURE make me think "ensure <em>what</em> about the value".  <strong>ensure [integer! string!] foo</strong> seems natural to me, while <strong>maybe [integer! string!] foo</strong> is less natural.</p>
<p>So ENSURE and REALLY could switch places...it's just that can't think of a better name for today's MAYBE.  Words like FILTER and their brethren have a lot of expectations built up on them about operating on data sets as opposed to just one value.</p>
<p>Since TRY(/EXCEPT) has been replaced by TRAP(/WITH), it might be repurposed. Could confuse people who have expectations set up around TRY, but it actually kind of makes sense:</p>
<pre><code> &gt;&gt; try :even? 10
 == 10

 &gt;&gt; try :even? 3
 == _

 &gt;&gt; ensure :even? 10
 == 10

 &gt;&gt; ensure :even? 3
 ** Script Error: 3 failed ENSURE test</code></pre>
          <p><a href="https://forum.rebol.info/t/what-to-call-the-anti-default/475/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-call-the-anti-default/475/6</link>
        <pubDate>Sun, 21 Jan 2018 12:33:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-475-6</guid>
        <source url="https://forum.rebol.info/t/what-to-call-the-anti-default/475.rss">What to call the anti-DEFAULT?</source>
      </item>
      <item>
        <title>What to call the anti-DEFAULT?</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>Use your magic wand<br>
x: DIBBEDEEDABBEDEEBOO [...]</p>
<p>Yes MIGHT is a good candidate.<br>
Introduce it and if a better option comes along it can always be replaced by that.</p>
          <p><a href="https://forum.rebol.info/t/what-to-call-the-anti-default/475/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-call-the-anti-default/475/5</link>
        <pubDate>Sat, 20 Jan 2018 11:22:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-475-5</guid>
        <source url="https://forum.rebol.info/t/what-to-call-the-anti-default/475.rss">What to call the anti-DEFAULT?</source>
      </item>
      <item>
        <title>What to call the anti-DEFAULT?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="/u/gchiu">@gchiu</a> suggests MIGHT</p>
<p>I think I like it.  Though one thought is that <strong>x: might [...]</strong> has the problem of it sounding a bit like the thing that might happen or not is the code in the block running, vs the assignment that might happen.</p>
<p><em>(Writing <strong>might x: [...]</strong> may make it look a bit more like it's the assignment which might happen, at the cost of making it look like it might assign the block literally.  :-/)</em></p>
<p>Anyway, MIGHT is my favorite so far.</p>
          <p><a href="https://forum.rebol.info/t/what-to-call-the-anti-default/475/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-call-the-anti-default/475/4</link>
        <pubDate>Fri, 19 Jan 2018 21:05:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-475-4</guid>
        <source url="https://forum.rebol.info/t/what-to-call-the-anti-default/475.rss">What to call the anti-DEFAULT?</source>
      </item>
      <item>
        <title>What to call the anti-DEFAULT?</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>UPDATE also is used for database manipulation.<br>
TLUAFED as anti DEFAULT.<br>
Or some other creative option, INGEST, TAKE-IN, TRY-ASSIGN<br>
I like WHATEVER too.</p>
          <p><a href="https://forum.rebol.info/t/what-to-call-the-anti-default/475/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-call-the-anti-default/475/3</link>
        <pubDate>Fri, 19 Jan 2018 18:30:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-475-3</guid>
        <source url="https://forum.rebol.info/t/what-to-call-the-anti-default/475.rss">What to call the anti-DEFAULT?</source>
      </item>
      <item>
        <title>What to call the anti-DEFAULT?</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>I'm suggesting <code>something</code> for the anti-default though</p>
<pre><code>&gt;&gt; help something
something is a WORD! bound to a context, but has no value.
</code></pre>
<p>for the reason that <a href="https://philosophy.stackexchange.com/questions/8173/can-something-come-out-of-nothing-or-not-why" rel="nofollow noopener">something can not come out of nothing</a></p>
<p>Alternatives include <code>becomes</code> and <code>be</code> which aren't used.</p>
          <p><a href="https://forum.rebol.info/t/what-to-call-the-anti-default/475/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-call-the-anti-default/475/2</link>
        <pubDate>Thu, 18 Jan 2018 03:47:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-475-2</guid>
        <source url="https://forum.rebol.info/t/what-to-call-the-anti-default/475.rss">What to call the anti-DEFAULT?</source>
      </item>
      <item>
        <title>What to call the anti-DEFAULT?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>DEFAULT exists to run a block of code to give something a value if it doesn't have one already.</p>
<pre><code> &gt;&gt; unset 'x
 &gt;&gt; x: default [10 + 20]
 &gt;&gt; print x
 30

 &gt;&gt; x: &lt;some-tag&gt;
 &gt;&gt; x: default [10 + 20]
 &gt;&gt; print x
 &lt;some-tag&gt;
</code></pre>
<p>With <code>DEFAULT</code>, the basic version treats both blanks and voids as "nothingness" and <code>DEFAULT*</code> only considers a void to be truly nothing, so it won't overwrite a blank.</p>
<p><a class="mention" href="/u/gchiu">@gchiu</a> at one time asked for an <em>"anti-default"</em>.  Rather than make the decision of whether to overwrite or not based on the content of the variable and only sometimes evaluate the block...<em>always</em> evaluate the block, then decide whether to overwrite or not based on the result of that evaluation.</p>
<p>The name suggested for it was <strong>UPDATE</strong>:</p>
<pre><code>&gt;&gt; x: &lt;some-tag&gt;
&gt;&gt; x: update [()]
&gt;&gt; print x
&lt;some-tag&gt;

 &gt;&gt; x: &lt;some-tag&gt;
 &gt;&gt; x: update [10 + 20]
 &gt;&gt; print x
 30
</code></pre>
<p>This seems very useful to me, especially when used with conditionals.  While simple conditionals can move assignments into the block of code, e.g. <code>x: if c [v]</code> =&gt; <code>if c [x: v]</code>, more complex instances might have several points they'd have to selectively do the same assignment:</p>
<pre><code>number-of-variants: update [
   case [
       whatever1 [do some stuff | 1020] ;-- update for this case
       whatever2 [do some stuff | blank] ;-- don't update in this case
       whatever3 [do some stuff | 304] ;-- update for this case 
   ] ;-- don't update if no matches
]
</code></pre>
<p>As with DEFAULT it would ordinarily consider the right hand side evaluating to blank to be the same as void, e.g. not a new value, and a <code>UPDATE*</code> would overwrite even if it was blank...only not if void.</p>
<p>But what we noticed was that UPDATE has been taken for a somewhat esoteric port action that I don't think anyone is using at the moment.</p>
<p>This raises a bigger question about what exactly the plan is about taking generic global namespace words away from the language and generalizing them in case a port might want to use them.  I said this:</p>
<blockquote>
<p>What one notices with the "word space" in Rebol is that there has been a sort of ambition to take generic words and in the grammar prefix them before things. So if you say update X it can be polymorphic where x is a port or a string or whatever.</p>
<p>So it seems that swiping something like the word UPDATE for an enfixed operator is bad. But yet, even without enfixing, this genericity runs up against another Rebol policy of fixed arity. If arity is fixed, how many parameters does the UPDATE operation that works for all time take?</p>
<p>The cheat is to make it arity 2, and then worst comes to worst, you find some way to fit whatever you want to say into a block. Or add refinements that somehow only work for some targets and not others.</p>
<p>Having previously expressed skepticism of the refinement model and other things about ports, I really do wonder if DO is being overloaded with a task it is unfit for, in a language that's supposed to be about dialecting. Should there be a generic operator, like <code>foo &lt;- [ ... ]</code> and it just writes instructions at ports, where they're expected to know their "language" and arity of instructions?</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/what-to-call-the-anti-default/475/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-call-the-anti-default/475/1</link>
        <pubDate>Thu, 18 Jan 2018 00:51:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-475-1</guid>
        <source url="https://forum.rebol.info/t/what-to-call-the-anti-default/475.rss">What to call the anti-DEFAULT?</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Using URL! for an IPv6 Type</title>
    <link>https://forum.rebol.info/t/using-url-for-an-ipv6-type/1627</link>
    <description>TUPLE! is now generalized, and can be mixed with paths, which I think is a good direction.  It&#39;s also encouraging that it is mostly compatible with the previous kind of tuple.

However, those who think tuples were primarily for representing IP addresses will note that this doesn&#39;t really help you with representing IPv6 addresses.

I was closing some old rebol-issues and noticed there was a suggestion from earl of tackling this via the URL! type.

I thought I would link to that discussion and the points it raises:

  https://github.com/metaeducation/rebol-issues/issues/1976

One of the points is that URL!s aren&#39;t checked for validity, so it doesn&#39;t have the &quot;rigor&quot; that a notational IPV6! datatype might have.  Which may displease some people, as not being much better than a string.

In any case, I&#39;m closing the original issue itself, as I feel the broad issue of TUPLE!s is solved.  But wanted something to come up here if a search were done on &quot;IPv6&quot;.</description>
    
    <lastBuildDate>Tue, 31 Aug 2021 05:22:08 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/using-url-for-an-ipv6-type/1627.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Using URL! for an IPv6 Type</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So libuv is a modern library that lives in the modern world, and as such, IPv6 support is a real thing we could have.</p>
<p>But once we have it that means usermode code will be seeing IPv6 addresses.  What are we going to do about it?</p>
<h2>Seeing if Red has Any Ideas... no</h2>
<p>Red's issue database they don't say anything about it, <a href="https://github.com/red/red/blob/42d9d6a76bc48c204b00faf40ef9a769f0fb4a0d/environment/networking.red#L78">but of URL! parsing</a> they say:</p>
<blockquote>
<p>"Host is not detailed per the RFC yet. It covers IPv6 addresses, which go in square brackets, making them a non-loadable URL in Red. They can also contain colons, which makes finding the port marker more involved.  The percent encoded options for brackets here are a bit of a hack as well,  because Red encodes them in URLs, even in the IP literal segment.|</p>
<pre><code>   ; simplified from [IPv6address | IPvFuture]|
   IP-literal:  [copy =IP-literal [[#[ | %5B] thru [#] | %5D]]] 
</code></pre>
</blockquote>
<p>What they're talking about is that in the internet spec, these IPv6 addresses:</p>
<pre><code>FEDC:BA98:7654:3210:FEDC:BA98:7654:3210
1080:0:0:0:8:800:200C:4171
3ffe:2a00:100:7031::1
1080::8:800:200C:417A
::192.9.5.5
::FFFF:129.144.52.38
2010:836B:4179::836B:4179
</code></pre>
<p>would embed into URL!s like:</p>
<pre><code>http://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]:80/index.html
http://[1080:0:0:0:8:800:200C:417A]/index.html
http://[3ffe:2a00:100:7031::1]
http://[1080::8:800:200C:417A]/foo
http://[::192.9.5.5]/ipng
http://[::FFFF:129.144.52.38]:80/index.html
http://[2010:836B:4179::836B:4179]
</code></pre>
<p>The brackets don't seem like any particular problem for Ren-C, because we don't intend to load <strong><code>http://[a b c]</code></strong> as two separate items of a URL! and a BLOCK!, e.g. <strong><code>http:// [a b c]</code></strong>.</p>
<p><em>(But we do have the question of what to do about <strong><code>[... http://]</code></strong>.  I think that the idea of letting URLs do paired parentheses and paired blocks in them probably would work for most cases people would care about.)</em></p>
<h2>Could we just use a BINARY!?</h2>
<p>It might seem like we could just punt on it and use a BINARY!...saying the address is a black box.  It sound like it will work, but earl writes the following in the <a href="https://github.com/metaeducation/rebol-issues/issues/1976">issue I cite in the post above</a>:</p>
<blockquote>
<p>As mentioned in my first comment above, IPv6 literal syntax is in latent conflict with url! and get-word! literal syntax: a::b is a valid IPv6 address, but is currently a valid url!; ::a is a valid IPv6 address, but currently a valid get-word!. Maybe there are other conflicts as well.</p>
<p>Also note, that IPv6 addresses may need to be qualified with a "zone index" to be routeable. The suggested notations for a zone index is to append it to the address separated with a %. The syntax for a valid zone index itself is OS-specific. Examples: fe80::1%1, fe80::1%wlan0. (Obviously, this notation conflicts with percent encoding in url!s.) You'll have to store the zone index along with the address. For some usage scenarios you can get by with storing the zone index pre-decoded into a 32-bit integer; for other scenarios, you may have to keep the original, literal zone index specification around.</p>
</blockquote>
<p>So that "zone index" is a thorn, suggesting some part of IPv6 addressing might have to be passed around as a string...</p>
<p>I don't know, but if anyone feels like reading up on IPv6 and thinking about it please do so.  I was actually going to make a new post to bring it up, but searched and found I'd already brought it up.</p>
<p>Guess the point being we're now past the theory and into the practice of IPv6.  So it's a more pressing issue.</p>
          <p><a href="https://forum.rebol.info/t/using-url-for-an-ipv6-type/1627/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/using-url-for-an-ipv6-type/1627/2</link>
        <pubDate>Tue, 31 Aug 2021 05:22:08 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1627-2</guid>
        <source url="https://forum.rebol.info/t/using-url-for-an-ipv6-type/1627.rss">Using URL! for an IPv6 Type</source>
      </item>
      <item>
        <title>Using URL! for an IPv6 Type</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>TUPLE! is now generalized, and can be mixed with paths, which I think is a good direction.  It's also encouraging that it is mostly compatible with the previous kind of tuple.</p>
<p>However, those who think tuples were primarily for representing IP addresses will note that this doesn't really help you with representing IPv6 addresses.</p>
<p>I was closing some old rebol-issues and noticed there was a suggestion from earl of tackling this via the URL! type.</p>
<p>I thought I would link to that discussion and the points it raises:</p>
<p><a href="https://github.com/metaeducation/rebol-issues/issues/1976" class="inline-onebox">Revisit, refactor or rename tuple! · Issue #1976 · metaeducation/rebol-issues · GitHub</a></p>
<p>One of the points is that URL!s aren't checked for validity, so it doesn't have the "rigor" that a notational IPV6! datatype might have.  Which may displease some people, as not being much better than a string.</p>
<p>In any case, I'm closing the original issue itself, as I feel the broad issue of TUPLE!s is solved.  But wanted something to come up here if a search were done on "IPv6".</p>
          <p><a href="https://forum.rebol.info/t/using-url-for-an-ipv6-type/1627/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/using-url-for-an-ipv6-type/1627/1</link>
        <pubDate>Thu, 17 Jun 2021 22:33:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1627-1</guid>
        <source url="https://forum.rebol.info/t/using-url-for-an-ipv6-type/1627.rss">Using URL! for an IPv6 Type</source>
      </item>
  </channel>
</rss>

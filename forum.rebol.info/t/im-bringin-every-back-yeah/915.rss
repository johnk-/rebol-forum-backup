<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>I&#39;m bringin&#39; EVERY back (yeah!)</title>
    <link>https://forum.rebol.info/t/im-bringin-every-back-yeah/915</link>
    <description>*(:man_dancing:  :musical_note: :desktop_computer: ...them other boys don&#39;t know how to hack (yeah!) :musical_note: :man_dancing: :computer:)*

With [apologies to Justin Timberlake](https://youtu.be/UD8tGWIqA-c?t=17), I re-present to you EVERY.  It was [temporarily shelved](https://github.com/metaeducation/ren-c/issues/847) due to ambiguous semantics, that recent changes to the loop result protocol have basically solved.

It&#39;s like a FOR-EACH but if the loop body ever returns false, it returns false:

    &gt;&gt; every x [1 3 7] [print [x] | odd? x]
    1
    3
    7
    == #[true]

    &gt;&gt; every x [1 4 7] [print [x] | odd? x]
    1
    4
    7
    == #[false]

So EVERY runs through all the loop steps (assuming you don&#39;t break), but remembers if the body ever returns a falsey value...and if so returns #[false].  Otherwise it returns the last truthy value.

Note that `CONTINUE` is interpreted as `CONTINUE NULL`, which means &quot;act as if the loop body reached the end and had evaluated to null for this iteration&quot;.  As null is falsey, that means you need to say `CONTINUE TRUE` (or other truthy value) if you want that loop iteration to not count as disrupting the everyness.

    &gt;&gt; every x [1 2 3] [print [x] | if x = 2 [continue] x]
    1
    2
    3
    == #[false]

    &gt;&gt; every x [1 2 3] [print [x] | if x = 2 [continue true] x]
    1
    2
    3
    == 3

It still obeys the loop result protocol, so that means if the loop ever breaks you&#39;ll get a NULL... and if the loop body never runs you&#39;ll get blank.  All three states are falsey so you get:

    every x data [
        ...
    ] or [
        // code to run if there was a break, there was no data,
        // or any of the loop body runs returned null/break/false
    ]

If you&#39;re trying to build an opt-out situation which would default to an empty input being okay (instead of falsey like if the body failed), test against false explicitly so the blank case won&#39;t qualify:

    false &lt;&gt; every x data [
        // if this body returns false (null, blank) then that will
        // make the whole expression false.  But the no data
        // case which returns blank will still give you truthyness
    ]

Though just because of how things work out, that will treat BREAK as a &quot;success&quot;, since `false &lt;&gt; null`.  So if you have a need to use both BREAKs *and* falsey loop bodies in the every, turn the nulls into false explicitly:

    false &lt;&gt; (every x data [
        ...
    ] else [false])

Loop iterations must return something that can be tested for conditional truth or falsehood, so voids aren&#39;t legal.  This is an important distinction with FOR-EACH, which is able to run loop bodies that return void

    &gt;&gt; every x [1 2 3] [print &quot;this errors, void loop body result&quot;]
    this errors, void loop body result
    ** Script Error: VOID! values are not conditionally true or false

*:musical_note: ...so get your EVERY on (go &#39;head, be gone with it) :musical_note:*</description>
    
    <lastBuildDate>Tue, 20 Nov 2018 12:29:24 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/im-bringin-every-back-yeah/915.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>I&#39;m bringin&#39; EVERY back (yeah!)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em>(<img src="//forum.rebol.info/images/emoji/twitter/man_dancing.png?v=7" title=":man_dancing:" class="emoji" alt=":man_dancing:">  <img src="//forum.rebol.info/images/emoji/twitter/musical_note.png?v=7" title=":musical_note:" class="emoji" alt=":musical_note:"> <img src="//forum.rebol.info/images/emoji/twitter/desktop_computer.png?v=7" title=":desktop_computer:" class="emoji" alt=":desktop_computer:"> ...them other boys don't know how to hack (yeah!) <img src="//forum.rebol.info/images/emoji/twitter/musical_note.png?v=7" title=":musical_note:" class="emoji" alt=":musical_note:"> <img src="//forum.rebol.info/images/emoji/twitter/man_dancing.png?v=7" title=":man_dancing:" class="emoji" alt=":man_dancing:"> <img src="//forum.rebol.info/images/emoji/twitter/computer.png?v=7" title=":computer:" class="emoji" alt=":computer:">)</em></p>
<p>With <a href="https://youtu.be/UD8tGWIqA-c?t=17" rel="nofollow noopener">apologies to Justin Timberlake</a>, I re-present to you EVERY.  It was <a href="https://github.com/metaeducation/ren-c/issues/847" rel="nofollow noopener">temporarily shelved</a> due to ambiguous semantics, that recent changes to the loop result protocol have basically solved.</p>
<p>It's like a FOR-EACH but if the loop body ever returns false, it returns false:</p>
<pre><code>&gt;&gt; every x [1 3 7] [print [x] | odd? x]
1
3
7
== #[true]

&gt;&gt; every x [1 4 7] [print [x] | odd? x]
1
4
7
== #[false]
</code></pre>
<p>So EVERY runs through all the loop steps (assuming you don't break), but remembers if the body ever returns a falsey value...and if so returns #[false].  Otherwise it returns the last truthy value.</p>
<p>Note that <code>CONTINUE</code> is interpreted as <code>CONTINUE NULL</code>, which means "act as if the loop body reached the end and had evaluated to null for this iteration".  As null is falsey, that means you need to say <code>CONTINUE TRUE</code> (or other truthy value) if you want that loop iteration to not count as disrupting the everyness.</p>
<pre><code>&gt;&gt; every x [1 2 3] [print [x] | if x = 2 [continue] x]
1
2
3
== #[false]

&gt;&gt; every x [1 2 3] [print [x] | if x = 2 [continue true] x]
1
2
3
== 3
</code></pre>
<p>It still obeys the loop result protocol, so that means if the loop ever breaks you'll get a NULL... and if the loop body never runs you'll get blank.  All three states are falsey so you get:</p>
<pre><code>every x data [
    ...
] or [
    // code to run if there was a break, there was no data,
    // or any of the loop body runs returned null/break/false
]
</code></pre>
<p>If you're trying to build an opt-out situation which would default to an empty input being okay (instead of falsey like if the body failed), test against false explicitly so the blank case won't qualify:</p>
<pre><code>false &lt;&gt; every x data [
    // if this body returns false (null, blank) then that will
    // make the whole expression false.  But the no data
    // case which returns blank will still give you truthyness
]
</code></pre>
<p>Though just because of how things work out, that will treat BREAK as a "success", since <code>false &lt;&gt; null</code>.  So if you have a need to use both BREAKs <em>and</em> falsey loop bodies in the every, turn the nulls into false explicitly:</p>
<pre><code>false &lt;&gt; (every x data [
    ...
] else [false])
</code></pre>
<p>Loop iterations must return something that can be tested for conditional truth or falsehood, so voids aren't legal.  This is an important distinction with FOR-EACH, which is able to run loop bodies that return void</p>
<pre><code>&gt;&gt; every x [1 2 3] [print "this errors, void loop body result"]
this errors, void loop body result
** Script Error: VOID! values are not conditionally true or false
</code></pre>
<p><em><img src="//forum.rebol.info/images/emoji/twitter/musical_note.png?v=7" title=":musical_note:" class="emoji" alt=":musical_note:"> ...so get your EVERY on (go 'head, be gone with it) <img src="//forum.rebol.info/images/emoji/twitter/musical_note.png?v=7" title=":musical_note:" class="emoji" alt=":musical_note:"></em></p>
          <p><a href="https://forum.rebol.info/t/im-bringin-every-back-yeah/915/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/im-bringin-every-back-yeah/915/1</link>
        <pubDate>Mon, 19 Nov 2018 15:25:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-915-1</guid>
        <source url="https://forum.rebol.info/t/im-bringin-every-back-yeah/915.rss">I&#39;m bringin&#39; EVERY back (yeah!)</source>
      </item>
  </channel>
</rss>

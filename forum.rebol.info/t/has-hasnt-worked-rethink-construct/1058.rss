<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>HAS hasn&#39;t (worked) ...rethink CONSTRUCT?</title>
    <link>https://forum.rebol.info/t/has-hasnt-worked-rethink-construct/1058</link>
    <description>Back long ago--before I knew I&#39;d somehow have spent years solving issues with this crazy language--we were looking for how to deal with the OBJECT and CONTEXT words.

It&#39;s not very good to use nouns as verbs.  It seems like you would write something like **context: binding of &#39;some-word**, not **obj: context [x: 10 y: 20]**.

Rebol2 had CONTEXT, and then R3-Alpha added OBJECT as being slightly different:

    object: func [
        &quot;Defines a unique object.&quot;
        blk [block!] &quot;Object words and values (modified)&quot;
    ][
        make object! append blk none
    ]

    context: func [
        &quot;Defines a unique object.&quot;
        blk [block!] &quot;Object words and values (modified)&quot;
    ][
        make object! blk
    ]

So there&#39;s a puzzling difference to add into the mix.

## The HAS suggestion

There was increasing talk of OBJECT! having a &quot;spec&quot; like functions did.  You&#39;d be able to specify the types of the keys, or if things were public/private.  Ren-C came along with questions of how to resolve the situation of wanting to have keys be null, yet being unable to literally represent nulls in blocks.

This environment gave rise to the idea of an arity-2 object constructor.  The name CONSTRUCT (which had another purpose historically in Rebol) was thought to be taken for this arity-2 form.  Then, in the same way that DOES was an arity-1 function, HAS would be an arity-1 constructor for objects.

    foo: function [x [integer!] &lt;local&gt; y] [y: 1 | x + 1]
    printer: does [print &quot;hi&quot;]

    obj: construct [x [integer!] &lt;private&gt; y] [x: 10 y: 20]
    cat: has [claws: yes | teeth: yes]

## Sounds interesting in theory, in practice I haven&#39;t cared for it

This has been around for quite a while, and I still use MAKE OBJECT! all the time.  Part of that is compatibility, but also I just don&#39;t know if it scans very well.  Also, some problems with MAKE OBJECT! have been [resolved with generalized quoting](https://forum.rebol.info/t/generic-quoting-makes-headway-on-make-object/997)

What I *have* really been wanting would be an infix way of testing for fields in objects.  Maybe even a soft quoting form.  Making IN infix has some downsides, so HAS might be a fit there...and maybe CONSTRUCT is the better word to take to replace CONTEXT and OBJECT

    &gt;&gt; cat: construct [claws: yes | teeth: yes]

    &gt;&gt; cat has teeth
    == #[true]

    &gt;&gt; print either cat has (first [claws tusks]) [&quot;scratch&quot;] [&quot;poke&quot;]
    scratch

    &gt;&gt; cat has gun
    == #[false]

Quoted or not (could just be `cat has &#39;teeth`, permitting `cat has first [claws tusks]` with no GROUP!), this just seems to fit better for the word, and something you&#39;d use all the time (or at least I would).  So I&#39;ll propose the HAS/DOES parallel was a red herring, and it&#39;s time to put that on ice.

## ...and then...what if CONSTRUCT could use &quot;predicates&quot;?

What if this new form of construct was willing to go field by field in the spec, and use a function on each step?  *(Not technically a predicate because it doesn&#39;t return LOGIC!, I don&#39;t know what we would call the more general form.)*

    &gt;&gt; foo: 10

    &gt;&gt; construct .negative [x: foo y: (1 + 2)]
    == make object! [x: -10 y: -3]

    &gt;&gt; construct .quote [x: foo y: (1 + 2)]
    == make object! [x: &#39;foo | y: &#39;(1 + 2)]

This could give the lone CONSTRUCT the necessary polymorphism to load module headers as well as do any number of other things.

None of this gets us any closer to having specs for objects.  But if you read [Seeing ACTION!s as Generalized FRAME!-makers](https://forum.rebol.info/t/seeing-all-action-s-as-variadic-frame-makers/1002), it may be things should go the other direction, to where actions *don&#39;t* have specs.

Thoughts?</description>
    
    <lastBuildDate>Wed, 06 Feb 2019 16:02:02 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/has-hasnt-worked-rethink-construct/1058.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>HAS hasn&#39;t (worked) ...rethink CONSTRUCT?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Back long ago--before I knew I'd somehow have spent years solving issues with this crazy language--we were looking for how to deal with the OBJECT and CONTEXT words.</p>
<p>It's not very good to use nouns as verbs.  It seems like you would write something like <strong>context: binding of 'some-word</strong>, not <strong>obj: context [x: 10 y: 20]</strong>.</p>
<p>Rebol2 had CONTEXT, and then R3-Alpha added OBJECT as being slightly different:</p>
<pre><code>object: func [
    "Defines a unique object."
    blk [block!] "Object words and values (modified)"
][
    make object! append blk none
]

context: func [
    "Defines a unique object."
    blk [block!] "Object words and values (modified)"
][
    make object! blk
]
</code></pre>
<p>So there's a puzzling difference to add into the mix.</p>
<h2>The HAS suggestion</h2>
<p>There was increasing talk of OBJECT! having a "spec" like functions did.  You'd be able to specify the types of the keys, or if things were public/private.  Ren-C came along with questions of how to resolve the situation of wanting to have keys be null, yet being unable to literally represent nulls in blocks.</p>
<p>This environment gave rise to the idea of an arity-2 object constructor.  The name CONSTRUCT (which had another purpose historically in Rebol) was thought to be taken for this arity-2 form.  Then, in the same way that DOES was an arity-1 function, HAS would be an arity-1 constructor for objects.</p>
<pre><code>foo: function [x [integer!] &lt;local&gt; y] [y: 1 | x + 1]
printer: does [print "hi"]

obj: construct [x [integer!] &lt;private&gt; y] [x: 10 y: 20]
cat: has [claws: yes | teeth: yes]
</code></pre>
<h2>Sounds interesting in theory, in practice I haven't cared for it</h2>
<p>This has been around for quite a while, and I still use MAKE OBJECT! all the time.  Part of that is compatibility, but also I just don't know if it scans very well.  Also, some problems with MAKE OBJECT! have been <a href="https://forum.rebol.info/t/generic-quoting-makes-headway-on-make-object/997">resolved with generalized quoting</a></p>
<p>What I <em>have</em> really been wanting would be an infix way of testing for fields in objects.  Maybe even a soft quoting form.  Making IN infix has some downsides, so HAS might be a fit there...and maybe CONSTRUCT is the better word to take to replace CONTEXT and OBJECT</p>
<pre><code>&gt;&gt; cat: construct [claws: yes | teeth: yes]

&gt;&gt; cat has teeth
== #[true]

&gt;&gt; print either cat has (first [claws tusks]) ["scratch"] ["poke"]
scratch

&gt;&gt; cat has gun
== #[false]
</code></pre>
<p>Quoted or not (could just be <code>cat has 'teeth</code>, permitting <code>cat has first [claws tusks]</code> with no GROUP!), this just seems to fit better for the word, and something you'd use all the time (or at least I would).  So I'll propose the HAS/DOES parallel was a red herring, and it's time to put that on ice.</p>
<h2>...and then...what if CONSTRUCT could use "predicates"?</h2>
<p>What if this new form of construct was willing to go field by field in the spec, and use a function on each step?  <em>(Not technically a predicate because it doesn't return LOGIC!, I don't know what we would call the more general form.)</em></p>
<pre><code>&gt;&gt; foo: 10

&gt;&gt; construct .negative [x: foo y: (1 + 2)]
== make object! [x: -10 y: -3]

&gt;&gt; construct .quote [x: foo y: (1 + 2)]
== make object! [x: 'foo | y: '(1 + 2)]
</code></pre>
<p>This could give the lone CONSTRUCT the necessary polymorphism to load module headers as well as do any number of other things.</p>
<p>None of this gets us any closer to having specs for objects.  But if you read <a href="https://forum.rebol.info/t/seeing-all-action-s-as-variadic-frame-makers/1002">Seeing ACTION!s as Generalized FRAME!-makers</a>, it may be things should go the other direction, to where actions <em>don't</em> have specs.</p>
<p>Thoughts?</p>
          <p><a href="https://forum.rebol.info/t/has-hasnt-worked-rethink-construct/1058/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/has-hasnt-worked-rethink-construct/1058/1</link>
        <pubDate>Wed, 06 Feb 2019 13:49:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1058-1</guid>
        <source url="https://forum.rebol.info/t/has-hasnt-worked-rethink-construct/1058.rss">HAS hasn&#39;t (worked) ...rethink CONSTRUCT?</source>
      </item>
  </channel>
</rss>

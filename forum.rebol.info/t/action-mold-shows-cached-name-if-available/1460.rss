<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>ACTION! Mold Shows Cached Name (If Available)</title>
    <link>https://forum.rebol.info/t/action-mold-shows-cached-name-if-available/1460</link>
    <description>Since the label used to reference the function [may be cached in the cell](https://forum.rebol.info/t/more-comprehensible-errors-with-per-cell-labeling/1357), I&#39;m making MOLD give that if it&#39;s there, plus the parameter list:

    &gt;&gt; mold reduce [1 2 :help]
    == &quot;[1 2 #[action! {help} [&#39;topic /doc]]]&quot;

It&#39;s useful, and it also will help make any bugs or oversights in the feature more obvious--if you see things with labels that seem wrong, please report it *(but make sure you&#39;ve read this whole post first...)*

## Remember: It&#39;s The Name *Last Accessed* Through

Function value cells that were produced and never given a name won&#39;t have a label, so it just omits it:

    &gt;&gt; mold reduce [1 2 func [x] [print [x]]]
    == &quot;[1 2 #[action! [x]]]&quot;

Remember this isn&#39;t the name that the function was *defined* with (SET-WORD!s do not manipulate the cache).  It&#39;s the name the action was *last accessed* through:

    &gt;&gt; foo: :help
    == &quot;[1 2 #[action! {help} [&#39;topic /doc]]]&quot;  ; here, accessed through :help

    &gt;&gt; mold reduce [1 2 :foo]
    == &quot;[1 2 #[action! {foo} [&#39;topic /doc]]]&quot;  ; but here, accessed through :foo

**We might review the question of if SET-WORD!s update the cache.**  I&#39;m open to it, but there are some complications various places if we do that.

## Don&#39;t Forget to Be Impressed: The Feature is Robust!

    &gt;&gt; f: make frame! :append

    &gt;&gt; f/value: 10

    &gt;&gt; reeval make action! f [a b c]
    == [a b c 10]

    &gt;&gt; reeval make action! f 12-Dec-20120
    ** Script Error: append does not allow #[datatype! date!] for its series argument
                     ; ^-- neat!

    &gt;&gt; make action! f
    == #[action! {append} [series /part /only /dup /line]]
                 ; ^-- now you can keep tabs on what the magic is doing...

Originally I left the label feature out of the 2020 accomplishments list, but that was an oversight.  It&#39;s going to matter to help legibility of debug stacks, when you are creating and using these things in mid-expression...it would suck if such power tools showed no name information.

## Be Aware: Of Function Derivation Issues...

This could mean that temporary names that aren&#39;t meaningful get exposed, e.g. when writing something that makes derivative functions:

    &gt;&gt; greetify: func [action] [adapt :action [print &quot;HELLO THERE!&quot;]]
    == #[action! [action]]  ; no cached-name, generated with func [...]

    &gt;&gt; friendly-append: greetify :append
    == #[action! {action} [series value /part /only /dup /line]]
                 ; ^-- note this is {action} from `:action`, not {append} 

    &gt;&gt; friendly-append [a b c] &lt;d&gt;
    HELLO THERE!
    [a b c &lt;d&gt;]

    &gt;&gt; mold reduce [1 2 greetify :help]
    == &quot;[1 2 #[action! {action} [&#39;topic /doc]]]&quot;

You can see how the parameter name `action` contaminates to lose the label that a function derivation process started out with.  You can use GET to subert this, which doesn&#39;t update the label the way accessing through a GET-WORD! does.

    &gt;&gt; greetify: func [action] [adapt get &#39;action [print &quot;HELLO THERE!&quot;]]
    == #[action! [action]]  ; no cached-name from a last fetch

    &gt;&gt; friendly-append: greetify :append
    == #[action! {append} [series value /part /only /dup /line]]
                 ; ^-- see this is now {append} and not {action}

This method is used by ADAPT and SPECIALIZE and all those functions.  However, it&#39;s not perfect because it&#39;s a modified version.  The label cache is really only a hint.

## Why Not Include the Body of the Action

Historical &quot;molding&quot; of an action tried to give its source code.  I deemed this as not a useful direction, since the source code lacks bindings you can&#39;t get the action back from it.  All it does is make blocks that contain actions nigh-illegible.

Red continues this pattern, and doesn&#39;t use construction syntax...hence making the representation look like it contains the WORD! func, which is even worse:

    red&gt;&gt; append [1 2] :help-string
    == [1 2 func [{Returns information about functions, values, objects, and datatypes.} 
        &#39;word [any-type!] 
        /local ref-given? value
    ][
        clear output-buffer 
        case [
     ...

I don&#39;t have any perfect answers here.  What you really need is some identity to get at the function.  The pointer value is about the best we&#39;d have, though pointers are unstable and you might look them up after a mold and they could be invalid (or point to something different entirely).

For the near term, I think this compact rendering that includes a label is best, and making getting at the function&#39;s body done with other tools.</description>
    
    <lastBuildDate>Wed, 08 Sep 2021 11:31:03 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/action-mold-shows-cached-name-if-available/1460.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>ACTION! Mold Shows Cached Name (If Available)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1460">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><strong>We might review the question of if SET-WORD!s update the cache.</strong> I'm open to it, but there are some complications various places if we do that.</p>
</blockquote>
</aside>
<h2>Let's Look At An Example...</h2>
<pre><code>call-with-10: func [your-func [action!]] [
    apply :your-func [10]
]

print-tag: func [value [tag!]] [
    print mold value
]

&gt;&gt; call-with-10 :print-tag
** Error: [[???]] does not accept INTEGER! for its value argument 
</code></pre>
<p>So here you'd get an error because you're passing an integer where a tag was expected.  <strong>What name do you expect in the error: PRINT-TAG or YOUR-FUNC?</strong></p>
<p>I think PRINT-TAG is probably the more useful option in this kind of scenario.  This suggests a default of making SET-WORD! cache the name, while GET-WORD! does nothing.</p>
<p>Note: Originally GET-WORD!'s captured the name because it was a direct translation of the old method of taking a WORD! to APPLY as a way of asking APPLY to preserve the name of the function tied to that word.  But now I think it's probably better to cache the name on the SET-WORD!.</p>
<h2>What About When You Don't Want To Cache the Name?</h2>
<p>How about this slightly different example:</p>
<pre><code>call-with-10: func [your-func [action!]] [
    your-func-hi: adapt :your-func [print "hi"]
    apply :your-func-hi [10]
]

print-tag: func [value [tag!]] [
    print mold value
]

call-with-10 :print-tag
</code></pre>
<p>This gets more complicated, when you have a mutation to a function...it's no longer the same thing.</p>
<p>But some cases are capturing functions into variables with the idea of working on them in a way that it shouldn't corrupt the name.  If SET-WORD! gives it a new cache, how do you subvert it?</p>
<p>One way could be to say that SET doesn't do it.</p>
<pre><code>set 'your-func-hi adapt :your-func [print "hi"]
</code></pre>
<p>We might make a weird rule, like that SET-BLOCK! with a single element in it is a way to avoid the cache:</p>
<pre><code>[temp]: :some-function
</code></pre>
<p>I've contemplated for a while if there's a shade of meaning that a SET-BLOCK! single assignment of a word might have that assigning the word itself would not have.  Maybe this is that shade?</p>
<p>I don't know...but just mentioning that I think the cache is moving from SETs vs GETs, and we'll see what the fallout is.</p>
<p>This is still relatively new stuff, and I actually haven't been paying all that much attention to this feature.  So there's not a lot of experience with it.  I think we need some means of manually updating the label cache for function-building things, and probably some other features...but without people actively giving feedback it's hard to say.</p>
          <p><a href="https://forum.rebol.info/t/action-mold-shows-cached-name-if-available/1460/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/action-mold-shows-cached-name-if-available/1460/2</link>
        <pubDate>Wed, 08 Sep 2021 11:18:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1460-2</guid>
        <source url="https://forum.rebol.info/t/action-mold-shows-cached-name-if-available/1460.rss">ACTION! Mold Shows Cached Name (If Available)</source>
      </item>
      <item>
        <title>ACTION! Mold Shows Cached Name (If Available)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Since the label used to reference the function <a href="https://forum.rebol.info/t/more-comprehensible-errors-with-per-cell-labeling/1357">may be cached in the cell</a>, I'm making MOLD give that if it's there, plus the parameter list:</p>
<pre><code>&gt;&gt; mold reduce [1 2 :help]
== "[1 2 #[action! {help} ['topic /doc]]]"
</code></pre>
<p>It's useful, and it also will help make any bugs or oversights in the feature more obvious--if you see things with labels that seem wrong, please report it <em>(but make sure you've read this whole post first...)</em></p>
<h2>Remember: It's The Name <em>Last Accessed</em> Through</h2>
<p>Function value cells that were produced and never given a name won't have a label, so it just omits it:</p>
<pre><code>&gt;&gt; mold reduce [1 2 func [x] [print [x]]]
== "[1 2 #[action! [x]]]"
</code></pre>
<p>Remember this isn't the name that the function was <em>defined</em> with (SET-WORD!s do not manipulate the cache).  It's the name the action was <em>last accessed</em> through:</p>
<pre><code>&gt;&gt; foo: :help
== "[1 2 #[action! {help} ['topic /doc]]]"  ; here, accessed through :help

&gt;&gt; mold reduce [1 2 :foo]
== "[1 2 #[action! {foo} ['topic /doc]]]"  ; but here, accessed through :foo
</code></pre>
<p><strong>We might review the question of if SET-WORD!s update the cache.</strong>  I'm open to it, but there are some complications various places if we do that.</p>
<h2>Don't Forget to Be Impressed: The Feature is Robust!</h2>
<pre><code>&gt;&gt; f: make frame! :append

&gt;&gt; f/value: 10

&gt;&gt; reeval make action! f [a b c]
== [a b c 10]

&gt;&gt; reeval make action! f 12-Dec-20120
** Script Error: append does not allow #[datatype! date!] for its series argument
                 ; ^-- neat!

&gt;&gt; make action! f
== #[action! {append} [series /part /only /dup /line]]
             ; ^-- now you can keep tabs on what the magic is doing...
</code></pre>
<p>Originally I left the label feature out of the 2020 accomplishments list, but that was an oversight.  It's going to matter to help legibility of debug stacks, when you are creating and using these things in mid-expression...it would suck if such power tools showed no name information.</p>
<h2>Be Aware: Of Function Derivation Issues...</h2>
<p>This could mean that temporary names that aren't meaningful get exposed, e.g. when writing something that makes derivative functions:</p>
<pre><code>&gt;&gt; greetify: func [action] [adapt :action [print "HELLO THERE!"]]
== #[action! [action]]  ; no cached-name, generated with func [...]

&gt;&gt; friendly-append: greetify :append
== #[action! {action} [series value /part /only /dup /line]]
             ; ^-- note this is {action} from `:action`, not {append} 

&gt;&gt; friendly-append [a b c] &lt;d&gt;
HELLO THERE!
[a b c &lt;d&gt;]

&gt;&gt; mold reduce [1 2 greetify :help]
== "[1 2 #[action! {action} ['topic /doc]]]"
</code></pre>
<p>You can see how the parameter name <code>action</code> contaminates to lose the label that a function derivation process started out with.  You can use GET to subert this, which doesn't update the label the way accessing through a GET-WORD! does.</p>
<pre><code>&gt;&gt; greetify: func [action] [adapt get 'action [print "HELLO THERE!"]]
== #[action! [action]]  ; no cached-name from a last fetch

&gt;&gt; friendly-append: greetify :append
== #[action! {append} [series value /part /only /dup /line]]
             ; ^-- see this is now {append} and not {action}
</code></pre>
<p>This method is used by ADAPT and SPECIALIZE and all those functions.  However, it's not perfect because it's a modified version.  The label cache is really only a hint.</p>
<h2>Why Not Include the Body of the Action</h2>
<p>Historical "molding" of an action tried to give its source code.  I deemed this as not a useful direction, since the source code lacks bindings you can't get the action back from it.  All it does is make blocks that contain actions nigh-illegible.</p>
<p>Red continues this pattern, and doesn't use construction syntax...hence making the representation look like it contains the WORD! func, which is even worse:</p>
<pre><code>red&gt;&gt; append [1 2] :help-string
== [1 2 func [{Returns information about functions, values, objects, and datatypes.} 
    'word [any-type!] 
    /local ref-given? value
][
    clear output-buffer 
    case [
 ...
</code></pre>
<p>I don't have any perfect answers here.  What you really need is some identity to get at the function.  The pointer value is about the best we'd have, though pointers are unstable and you might look them up after a mold and they could be invalid (or point to something different entirely).</p>
<p>For the near term, I think this compact rendering that includes a label is best, and making getting at the function's body done with other tools.</p>
          <p><a href="https://forum.rebol.info/t/action-mold-shows-cached-name-if-available/1460/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/action-mold-shows-cached-name-if-available/1460/1</link>
        <pubDate>Thu, 07 Jan 2021 16:22:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1460-1</guid>
        <source url="https://forum.rebol.info/t/action-mold-shows-cached-name-if-available/1460.rss">ACTION! Mold Shows Cached Name (If Available)</source>
      </item>
  </channel>
</rss>

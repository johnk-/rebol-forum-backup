<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Special Syntax for FOR-EACH/etc. to receive ACTION!s?</title>
    <link>https://forum.rebol.info/t/special-syntax-for-for-each-etc-to-receive-action-s/955</link>
    <description>Here is some pretty innocuous-looking code:

    n: 1
    for-each item block [
        print [&quot;the&quot; item &quot;is&quot; n &quot;in the block&quot;]
        n: n + 1
    ]

But because Rebol runs ACTION!s when they are bound to WORD!s, and you can put ACTION!s in BLOCK!s, you can get into trouble:

    muhaha: func [&#39;x &#39;y &#39;z] [print [&quot;stealing your args!&quot; x y z]]
    block: compose [10 (:muhaha) 20]

Enumerating such a thing produces total garbage:

    the 10 is 1 in the block
    stealing your args! is n in the block
    the #[void]
    the 20 is 3 in the block
    == 4

I&#39;m not concerned about malicious cases--Rebol is fundamentally not secure about this kind of thing (see and discuss at [&quot;The Philosophy of Security in Rebol&quot;](https://forum.rebol.info/t/the-philosophy-of-security-in-rebol/172))  But you want to write code that gives reasonable error messages, especially when writing a mezzanine routine.

Unfortunately, doing this &quot;the right way&quot; is ugly (and it doesn&#39;t actually work in a general sense):

    n: 1
    for-each item block [
        print [&quot;the&quot; :item &quot;is&quot; n &quot;in the block&quot;]
        n: n + 1
    ]

That only has one reference to the item, but it&#39;s clearly much uglier in real cases.  But beyond being ugly, tacking a `:` onto the front of everything doesn&#39;t have the same semantics.  What if you *think* you&#39;re dealing with a block of objects, and want to call methods on them?  `item/some-method` and `:item/some-method` aren&#39;t the same.  (Note: perhaps (:item)/some-method should work?)

Point being: even if you think adding colons is mitigating the problems, you&#39;re not getting what you really want...which most of the time, is an error.

## Could we make the common case work better?

Something I&#39;ve often wondered is if these enumerators which take words and set them through a loop would only let you get at ACTION!s if you used some other ANY-WORD! type.  This way, they could error otherwise...and common loops could feel safe.

For the sake of example, let&#39;s say it&#39;s a GET-WORD! passed to FOR-EACH if you actually are prepared to work with ACTION!s.  The first example above, by using a plain WORD!, would output a clear error instead of gibberish:

    the 10 is 1 in the block
    ** Error: Variable `item` must be GET-WORD! to hold ACTION! in FOR-EACH

If GET-WORD! were used, it would make some amount of sense--and line up with the fact that you would be wanting to use GET-WORD! in the body too.  But it sacrifices the current feature for GET-WORD!, which is &quot;soft quoting&quot;...where the word specifies the word to look at to find the word to use:

     &gt;&gt; word: &#39;item
     &gt;&gt; for-each :word [1 2 3] [print [item]]
     1
     2
     3

However, there&#39;s another way of doing this, with GROUP!:

     &gt;&gt; word: &#39;item
     &gt;&gt; for-each (word) [1 2 3] [print [item]]
     1
     2
     3

Soft-quoting doesn&#39;t really come up all *that* terribly often.  Still, it&#39;s a little annoying that this would throw a wrench into COMPOSE situations doing simple soft-quotes, but you could attack that multiple ways.

I think it would be much better if you could mark very clearly which enumerations were intentionally working with ACTION!s.  The error messages would be better, and people are savvy enough to know there could be a problem won&#39;t be so paranoid in their basic enumerations--knowing the error will be delivered.

## Should just loops be affected, or all soft quotes?

It could be loops for starters.  They could be switched to hard quotes and do their own logic, only giving soft-quote semantics for GROUP!s.

Or maybe soft-quoting is too sacred as a mechanism in PATH! processing...and you don&#39;t want to have to type **foo/(bar)** instead of **foo/:bar**...so that translates to wanting to keep it in sync.

This might mean using another datatype, e.g. **for-each @item block [...]** to say &quot;ACTION!s are okay&quot;.

Any thoughts?  I know Rebol has some elements of &quot;it&#39;s a fundamentally unsafe language&quot;, but I just feel there need to be *some* limits.  But I don&#39;t want to bulletproof every FOR-EACH in the system against function injections--even if they are all just accidents, you want better feedback than having a mess be made.</description>
    
    <lastBuildDate>Fri, 13 Aug 2021 02:39:54 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/special-syntax-for-for-each-etc-to-receive-action-s/955.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Special Syntax for FOR-EACH/etc. to receive ACTION!s?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="955">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Soft literal optional, permitting action</p>
<pre><code>func [/param 'arg] [...]  ; historical

func ['(:/param)] [...]  ; proposed
</code></pre>
</blockquote>
</aside>
<p>With the recent changes to where <a href="https://github.com/metaeducation/ren-c/pull/1088">:X, :Y/Y, and :(Z) are the quoting callsite escapes </a>, then subvertible quoting is tied directly to colons.</p>
<p>This strongly suggests an inversion of the current convention for parameters, where <strong><code>'foo</code></strong> is the "quote regardless" and <strong>:foo</strong> is "subvertible quoting".  I'm on the fence about an extra apostrophe for <code>':foo</code> ... it helps convey that it is both quoted <em>and</em> subvertible, but then you're in a situation in which <code>:foo</code> might mean something else (which could be confusing) or where it doesn't (and you're just complicating the value typing for little benefit).</p>
<p>So the above is probably just:</p>
<pre><code>func [/param 'arg] [...]  ; historical

func [:/param] [...]  ; proposed
</code></pre>
<ul>
<li>
<p>I'm glad that it makes it possible to get a semiotically consistent spec that doesn't have to use GROUP!s, which makes it less of a hassle to COMPOSE specs.</p>
</li>
<li>
<p>It's going to be kind of a nuisance to flip it, but if bootstrap is any indication then quote subversion isn't <em>terribly</em> common.</p>
</li>
<li>
<p>Having generalized tuples and <strong>foo.</strong> for "no function invocations" seems like a pretty good way to put that guard on a parameter too, if you like.  It's short, and completely optional...just to save you time of more elaborate checks.</p>
</li>
</ul>
          <p><a href="https://forum.rebol.info/t/special-syntax-for-for-each-etc-to-receive-action-s/955/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/special-syntax-for-for-each-etc-to-receive-action-s/955/5</link>
        <pubDate>Tue, 27 Oct 2020 18:40:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-955-5</guid>
        <source url="https://forum.rebol.info/t/special-syntax-for-for-each-etc-to-receive-action-s/955.rss">Special Syntax for FOR-EACH/etc. to receive ACTION!s?</source>
      </item>
      <item>
        <title>Special Syntax for FOR-EACH/etc. to receive ACTION!s?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="955">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Imagine if plain WORD! arguments prohibited ACTION! (even if in the typeset, as per ANY-TYPE!), but GET-WORD! arguments allowed it:</p>
</blockquote>
</aside>
<p>Today I've conceived the idea that <a href="https://forum.rebol.info/t/tuple-and-path-big-picture-concept/1330">TUPLE!s could be used to indicate things to the left of a dot should not be a function</a>.</p>
<p>That decoration could be used as an alternative for functions...</p>
<pre><code>&gt;&gt; print-val: func [x.] [print ["The value is" x]]
&gt;&gt; print-val :foo 
* Error: Function assigned to X, disallowed functions (spec'd as X.)

&gt;&gt; print-val: func [x] [print ["The value is" x]]
&gt;&gt; print-val :foo 
The value is Formatting hard drive...
</code></pre>
<p>Or for iteration:</p>
<pre><code>&gt;&gt; block: compose [1 (:foo) 2]
&gt;&gt; for-each var. block [print ["The value is" var]]
The value is 1
** Error: Function assigned to VAR, disallowed (spec'd as VAR.)

&gt;&gt; block: compose [1 (:foo) 2]
&gt;&gt; for-each var block [print ["The value is" var]]
The value is 1
The value is Formatting hard drive...

The value is 2
</code></pre>
<p>This would give library authors peace of mind and save them the trouble of less efficient ways of writing bulletproof code... moving the burden of annotation to those who need it.</p>
<p>It makes me a bit uncomfortable as the default seems <em>unsafe</em>.  But that unsafety can also be seen as flexibility for code golf.</p>
<p>Slashes could be used as well, but that wouldn't seem to combine well with refinements... as <strong>/a/</strong> meaning "optional parameter than can be a function if it wants" seems less natural than <strong>/a.</strong> as "optional parameter that can't be a function".  It also seems the cleanest expression...</p>
<pre><code>foo: func [/a.] [...]
foo: func [/a/] [...]
foo: func [:/a] [...]
</code></pre>
<p>So all told, we could have something like <strong>foo: func ['(/a.)] [...]</strong> for meaning "quoted optional parameter that can escape the quoting via GROUP!, but can't be a function."  In my ranking listed above (1-4) it brings the best of all worlds... since TUPLE! would be legal in PATH! while GET-WORD! wouldn't, it binds the non-executability to the parameter -and- puts the escapability right next to the quote.</p>
<p>Having a pretty good feeling about this...so maybe the lax default is okay.  If anyone is bothered by it they can build their own wrapper that enforces the non-executability unless you annotate it somehow.</p>
          <p><a href="https://forum.rebol.info/t/special-syntax-for-for-each-etc-to-receive-action-s/955/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/special-syntax-for-for-each-etc-to-receive-action-s/955/4</link>
        <pubDate>Sat, 19 Sep 2020 15:52:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-955-4</guid>
        <source url="https://forum.rebol.info/t/special-syntax-for-for-each-etc-to-receive-action-s/955.rss">Special Syntax for FOR-EACH/etc. to receive ACTION!s?</source>
      </item>
      <item>
        <title>Special Syntax for FOR-EACH/etc. to receive ACTION!s?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="955">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I've in the past suggested <strong>func ['(arg)] [...]</strong> as a more semiotic way of denoting "escapable literal parameters"...and then <strong>func ['arg] [...]</strong> could be unescapable. It looks nice and kind of shows you the idea that "it's quoted, but a GROUP! can get you past that". Also you can mix it with the colon cases, for <strong>func [':arg] [...]</strong> or <strong>func ['(:arg)] [...]</strong> to say that even though you're quoting, you still consider ACTION! a candidate (if found literally in the block or evaluated to by a soft literal situation).</p>
</blockquote>
</aside>
<p>Just a note that this has to also account for optional arguments ("refinements"), and there should be a canon representation.</p>
<p>How many ways might you say "literal escapable optional argument that can be an action"?</p>
<ol>
<li><strong>func ['(:/param)] [...]</strong></li>
<li><strong>func [':(/param)] [...]</strong></li>
<li><strong>func [:/('param)] [...]</strong></li>
<li><strong>func ['/(:param)] [...]</strong></li>
</ol>
<p>All are legal, but I feel like only one representation should be allowed.  I like option 1 because it puts the escapability right inside the quote.  I like option 4 because it puts the "actions are legal" directly on the arg.  <em>(Note that <strong>func ['(/:param)] [...]</strong> isn't legal because colons are not allowed interior to path elements.)</em></p>
<p>I think 1 wins, just because of preserving the junction of the quoting with the escapability.</p>
<p>For comparison, here's soft literal optional, default not permitting ACTION!</p>
<pre><code>not-any-function!: make typeset! [... everything but any-function! ...]
func [/param 'arg [not-any-function!]] [...]  ; historical

func ['(/param)] [...]  ; proposed
</code></pre>
<p>Soft literal optional, permitting action</p>
<pre><code>func [/param 'arg] [...]  ; historical

func ['(:/param)] [...]  ; proposed
</code></pre>
<p>Hard literal optional, default not permitting ACTION!</p>
<pre><code>not-any-function!: make typeset! [... everything but any-function! ...]
func [/param :arg [not-any-function!]] [...]  ; historical

func ['/param] [...]  ; proposed
</code></pre>
<p>Hard literal optional, permitting ACTION!</p>
<pre><code>func [/param :arg] [...]  ; historical

func [':/param] [...]  ; proposed
</code></pre>
<p><strong>I know it's a little dense, but it seems to me that the semiotics are there.</strong></p>
<ul>
<li>Apostrophe means quote, don't evaluate</li>
<li>GROUP! immediately inside apostrophe means escapable quote, use GROUP! to subvert</li>
<li>Colon means ACTION!s allowed (you likely want to use GET-WORD!s inside the function with their own colons)</li>
<li>Slash means optional, like a refinement.</li>
</ul>
<p>I haven't actually seen a whole lot of quoted refinements, ever.  So the most common weird thing you'd see would be <strong>:/param</strong>, a refinement that accepts ACTION! (like a comparison function for sorts, or a function for filling in elements for ARRAY/INITIAL).</p>
<hr>
<p><em>While this might seem overly symbolic, function specs are a bit tough since they try to be full spectrum in permitting WORD!s, which means they've taken all the words away.</em>  We can't do <strong>func [quoted optional escapable x] [...]</strong> Because that would be 4 parameters.  <strong>func ['/(x)] [...]</strong> is compact and--I think--learnable.</p>
          <p><a href="https://forum.rebol.info/t/special-syntax-for-for-each-etc-to-receive-action-s/955/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/special-syntax-for-for-each-etc-to-receive-action-s/955/3</link>
        <pubDate>Thu, 16 Jul 2020 06:23:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-955-3</guid>
        <source url="https://forum.rebol.info/t/special-syntax-for-for-each-etc-to-receive-action-s/955.rss">Special Syntax for FOR-EACH/etc. to receive ACTION!s?</source>
      </item>
      <item>
        <title>Special Syntax for FOR-EACH/etc. to receive ACTION!s?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I feel comfortable with the step ahead (well, technically step <em>back</em> to Rebol2 semantics) on <a href="https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301">GET-WORD! of unset variables</a> raising errors.  <strong>So GET-WORD! really is dedicated to the defusing of ACTION!s so that they do not run.</strong></p>
<p>With that hardened association, it makes me wonder if a related concept might make sense...which is to cue people to notice when a parameter or loop variable is allowed to be an ACTION! by its declaration:</p>
<p>This would let people be less paranoid about writing their routines, keeping them from obfuscating it with protections in the common case.  Let's take an example:</p>
<pre><code>&gt;&gt; foo: func [] [print "Formatting hard drive...."]

; In today's world...

&gt;&gt; print-val: func [x] [print ["The value is" x]]
&gt;&gt; print-val :foo
The value is Formatting hard drive...
</code></pre>
<p>Imagine if plain WORD! arguments prohibited ACTION! (even if in the typeset, as per ANY-TYPE!), but GET-WORD! arguments allowed it:</p>
<pre><code>; The proposed world...

&gt;&gt; print-val: func [x] [print ["The value is" x]]
&gt;&gt; print-val :foo 
** Error: Function assigned to X, to allow this name the token :X

&gt;&gt; print-val: func [:x] [print ["The value is" x]]
&gt;&gt; print-val :foo 
The value is Formatting hard drive...
</code></pre>
<p>Yet the real point is what you get when you can scan the second example and notice the asymmetry.  You've been given a short visual clue that might hint you into the behavior of mirroring the spec.  If you see <strong>print-val: func [:x] [print ["The value is" x]]</strong> and then notice the disparity of the parameter being named <strong>:x</strong> and invoked as <strong>x</strong>, you might question why that's not <strong>:x</strong> to match.</p>
<p>It seems to me that every little bit of such cue-ing can help.  I'm imagining this applying in loops as well:</p>
<pre><code>&gt;&gt; block: compose [1 (:foo) 2]
&gt;&gt; for-each var block [print ["The value is" var]]
The value is 1
** Error: Function assigned to VAR, to allow this name the token :VAR

&gt;&gt; block: compose [1 (:foo) 2]
&gt;&gt; for-each :var block [print ["The value is" var]]
The value is 1
The value is Formatting hard drive...

The value is 2
</code></pre>
<p>Again, seeing the colon on the variable helps hint what's going on.  And basic code doing loops that doesn't expect to be finding ACTION!s in a block will be somewhat protected.</p>
<p><strong>This would need new notation for "hard literal parameters"</strong></p>
<p>Today's GET-WORD! is an "unescapable" literal argument.  So even if the callsite is a GROUP!, the argument receives the group vs. the evaluation product.</p>
<p>I've in the past suggested <strong>func ['(arg)] [...]</strong> as a more semiotic way of denoting "escapable literal parameters"...and then <strong>func ['arg] [...]</strong> could be unescapable.  It looks nice and kind of shows you the idea that "it's quoted, but a GROUP! can get you past that".  Also you can mix it with the colon cases, for <strong>func [':arg] [...]</strong> or <strong>func ['(:arg)] [...]</strong> to say that even though you're quoting, you still consider ACTION! a candidate (if found literally in the block or evaluated to by a soft literal situation).</p>
<p>On the downside, you really want people to use hard literal parameters as a last resort.  So this makes it easy to forget the more relaxed form as the better default choice.</p>
<p><strong>Only GROUP! could do escaping for loop parameters</strong></p>
<p>Historically <strong>for-each :named-var [...] [...]</strong> was a shorthand <strong>for-each (named-var) [...] [...]</strong>.  This would be reclaiming those GET-WORD! and GET-PATH! cases for the "I can process actions in the loop body" signal.</p>
<p>Honestly, needing to escape via an already named variable doesn't come up all <em>that</em> often.  One case I mentioned was the idea of reusing a variable that already exists (to save on creating an OBJECT! for the iteration), but that could be done with <strong><span class="mention">@word</span></strong> or <strong>'word</strong> perhaps.</p>
<p><strong>What do people think?</strong></p>
<p>I know this isn't the end-all and be-all of somehow making the language safe.  Once you start picking things out of objects, anything you thought could have been just data could actually be active.</p>
<p>But I think it would help ease the pain of perfectionists who want to write "correct" code, to take it easy and think "well I don't have to handle these dangerous cases, because the proper errors will happen for me just by not using GET-WORD!".</p>
<p><strong>This has been on my mind a long time -- this thread began in Dec '18</strong>.  Because I'm one of those people who tries to write generic code and frets about what would happen on the day that unset variables or ACTION!s come along...so I'm caught between the balance of feeling negligent by not peppering with checks, or junking up otherwise elegant code for the sake of something that <em>could</em> happen.</p>
<p>I feel like it may be time for it, now that we're committing to the GET-WORD! really meaning only "defuse action" and not "get void" (disallowed) or "get null" (always allowed, even with WORD!).  That shores up the bit about unsets not being able to run amok.  This change would be a nice way of complementing that by stopping ACTION!s from throwing a wrench into things--while keeping the common case code clean.</p>
          <p><a href="https://forum.rebol.info/t/special-syntax-for-for-each-etc-to-receive-action-s/955/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/special-syntax-for-for-each-etc-to-receive-action-s/955/2</link>
        <pubDate>Thu, 16 Jul 2020 05:41:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-955-2</guid>
        <source url="https://forum.rebol.info/t/special-syntax-for-for-each-etc-to-receive-action-s/955.rss">Special Syntax for FOR-EACH/etc. to receive ACTION!s?</source>
      </item>
      <item>
        <title>Special Syntax for FOR-EACH/etc. to receive ACTION!s?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Here is some pretty innocuous-looking code:</p>
<pre><code>n: 1
for-each item block [
    print ["the" item "is" n "in the block"]
    n: n + 1
]
</code></pre>
<p>But because Rebol runs ACTION!s when they are bound to WORD!s, and you can put ACTION!s in BLOCK!s, you can get into trouble:</p>
<pre><code>muhaha: func ['x 'y 'z] [print ["stealing your args!" x y z]]
block: compose [10 (:muhaha) 20]
</code></pre>
<p>Enumerating such a thing produces total garbage:</p>
<pre><code>the 10 is 1 in the block
stealing your args! is n in the block
the #[void]
the 20 is 3 in the block
== 4
</code></pre>
<p>I'm not concerned about malicious cases--Rebol is fundamentally not secure about this kind of thing (see and discuss at <a href="https://forum.rebol.info/t/the-philosophy-of-security-in-rebol/172">"The Philosophy of Security in Rebol"</a>)  But you want to write code that gives reasonable error messages, especially when writing a mezzanine routine.</p>
<p>Unfortunately, doing this "the right way" is ugly (and it doesn't actually work in a general sense):</p>
<pre><code>n: 1
for-each item block [
    print ["the" :item "is" n "in the block"]
    n: n + 1
]
</code></pre>
<p>That only has one reference to the item, but it's clearly much uglier in real cases.  But beyond being ugly, tacking a <code>:</code> onto the front of everything doesn't have the same semantics.  What if you <em>think</em> you're dealing with a block of objects, and want to call methods on them?  <code>item/some-method</code> and <code>:item/some-method</code> aren't the same.  (Note: perhaps (:item)/some-method should work?)</p>
<p>Point being: even if you think adding colons is mitigating the problems, you're not getting what you really want...which most of the time, is an error.</p>
<h2>Could we make the common case work better?</h2>
<p>Something I've often wondered is if these enumerators which take words and set them through a loop would only let you get at ACTION!s if you used some other ANY-WORD! type.  This way, they could error otherwise...and common loops could feel safe.</p>
<p>For the sake of example, let's say it's a GET-WORD! passed to FOR-EACH if you actually are prepared to work with ACTION!s.  The first example above, by using a plain WORD!, would output a clear error instead of gibberish:</p>
<pre><code>the 10 is 1 in the block
** Error: Variable `item` must be GET-WORD! to hold ACTION! in FOR-EACH
</code></pre>
<p>If GET-WORD! were used, it would make some amount of sense--and line up with the fact that you would be wanting to use GET-WORD! in the body too.  But it sacrifices the current feature for GET-WORD!, which is "soft quoting"...where the word specifies the word to look at to find the word to use:</p>
<pre><code> &gt;&gt; word: 'item
 &gt;&gt; for-each :word [1 2 3] [print [item]]
 1
 2
 3
</code></pre>
<p>However, there's another way of doing this, with GROUP!:</p>
<pre><code> &gt;&gt; word: 'item
 &gt;&gt; for-each (word) [1 2 3] [print [item]]
 1
 2
 3
</code></pre>
<p>Soft-quoting doesn't really come up all <em>that</em> terribly often.  Still, it's a little annoying that this would throw a wrench into COMPOSE situations doing simple soft-quotes, but you could attack that multiple ways.</p>
<p>I think it would be much better if you could mark very clearly which enumerations were intentionally working with ACTION!s.  The error messages would be better, and people are savvy enough to know there could be a problem won't be so paranoid in their basic enumerations--knowing the error will be delivered.</p>
<h2>Should just loops be affected, or all soft quotes?</h2>
<p>It could be loops for starters.  They could be switched to hard quotes and do their own logic, only giving soft-quote semantics for GROUP!s.</p>
<p>Or maybe soft-quoting is too sacred as a mechanism in PATH! processing...and you don't want to have to type <strong>foo/(bar)</strong> instead of <strong>foo/:bar</strong>...so that translates to wanting to keep it in sync.</p>
<p>This might mean using another datatype, e.g. <strong>for-each <span class="mention">@item</span> block [...]</strong> to say "ACTION!s are okay".</p>
<p>Any thoughts?  I know Rebol has some elements of "it's a fundamentally unsafe language", but I just feel there need to be <em>some</em> limits.  But I don't want to bulletproof every FOR-EACH in the system against function injections--even if they are all just accidents, you want better feedback than having a mess be made.</p>
          <p><a href="https://forum.rebol.info/t/special-syntax-for-for-each-etc-to-receive-action-s/955/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/special-syntax-for-for-each-etc-to-receive-action-s/955/1</link>
        <pubDate>Mon, 10 Dec 2018 18:33:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-955-1</guid>
        <source url="https://forum.rebol.info/t/special-syntax-for-for-each-etc-to-receive-action-s/955.rss">Special Syntax for FOR-EACH/etc. to receive ACTION!s?</source>
      </item>
  </channel>
</rss>

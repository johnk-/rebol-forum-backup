<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Another long-tail stand: No backslashes in FILE!</title>
    <link>https://forum.rebol.info/t/another-long-tail-stand-no-backslashes-in-file/1336</link>
    <description>There is behavior in Rebol2 and R3-Alpha where the scanner just automatically flips backslashes into forward slashes in FILE!

    rebol2&gt;&gt; %C\Projects
    == %C/Projects

That&#39;s the kind of random fiddling that I call &quot;the worst answer&quot;.  Red preserves the backslashes as-is, which is at least a slight improvement:

    red&gt;&gt; %C\Projects
    == %C\Projects

But one theoretical benefit of being able to paste your file paths &quot;as-is&quot; is missing, because colons aren&#39;t legal:

    red&gt;&gt; %C:\Projects
    *** Syntax Error: (line 1) invalid word at :\Projects

## Could Restricting FILE! Be A Selling Point?

For whatever it&#39;s worth, UNIX does allow you to have backslashes in filenames.  (They typically have to be escaped (as `\\`) in shell commands.)

But mechanically speaking, FILE! does not need to be able to contain all characters...because TEXT! is the currency used for naming *local* files.  Red follows this convention:

    red&gt;&gt; to-local-file %a/b/c
    == &quot;a\b\c&quot;  ; on Windows

But it does this regardless of if you give it a FILE! or a TEXT! as input:

    red&gt;&gt; to-local-file &quot;a/b/c&quot;
    == &quot;a\b\c&quot;

Ren-C doesn&#39;t do this, and instead says that TO-LOCAL-FILE only works on FILE!...(unless you use the /PASS refinement, in which case TEXT! is allowed to pass through unmodified):

    ren-c&gt;&gt; to-local-file &quot;a/b/c&quot;
    ** Error: Filename already in local format (as a TEXT!), use /PASS to allow

    ren-c&gt;&gt; to-local-file/pass &quot;a/b/c&quot;  ; pass-thru
    == &quot;a/b/c&quot;

I think this suggests a means for sanity checking to prevail.  FILE! can be a tool for righteousness.

## What to do if you have a weird filename

If you&#39;re making some kind of dialect with filenames in it, and you want to give people the ability to copy/paste literally things like `&quot;C:\Projects\red\README.md&quot;`, you use TEXT!.

    file-list: [
        %ren-c/README.md
        &quot;C:\Projects\ren-c\LICENSE&quot;
    ]

Maybe you have to decorate the TEXT! with something like `&lt;file&gt;`, if you have other baseline uses for strings in the dialect.

Then when you&#39;re writing your code and find you have a filename in a TEXT! you have these options:

* **With &quot;sane&quot; filenames, just use LOCAL-TO-FILE to get a FILE! out of it.**  If you have something in your hand that&#39;s either a FILE! or a TEXT!, then use LOCAL-TO-FILE/PASS.  This should work for &quot;sane&quot; filenames and handle most cases.

* **With &quot;insane&quot; filenames, your first instinct should be to just FIX them** So let&#39;s say you have something like this on UNIX:


      file-list: [
          %/usr/local/bin/gcc
           &quot;/home/crazy\file&quot;
      ]

   Just drop out to your OS shell and rename it with whatever tools you&#39;ve got, **`mv crazy\\file sane-file`**.  Or automate it with CALL out to the shell, if you like.  We did you a solid by making LOCAL-TO-FILE refuse to call that a FILE!, and the world is a safer place.

* **If you insist on keeping the file with its name and still operating in it, then manually use mechanisms that let you specify PORT! with TEXT!**.  I don&#39;t know what the exact syntax of this is, but it would be in the spirit of:

      p: make port! compose [type: &#39;file name: (crazy-filename-as-text)]
      data: read p
      close p 

   So that takes the place of the failing call to **read file-to-local/pass crazy-filename-as-text** which refused to make the FILE!.

## I Think These Bold Moves are The Point

Software has gotten so bad that we never know what&#39;s going on.  Some people just pile on layer after layer of filter...like the people who use ad blockers, and pass on URLs of crappy sites to others not knowing what version of it they&#39;re going to see.

Experienced programmers (or at least old ones who remember The Times Before) have a sense of when things have gone beyond control.  I think the long tail of development is that people shake down systems to try and get sanity out of them with guidelines that become common-sense (&quot;don&#39;t put backslashes in filenames&quot;).

Here we have an opportunity with a data type that doesn&#39;t exist in nature, the FILE!.  We can make it discern from raw TEXT!.  And we can ask you to keep unprincipled things as TEXT!...letting those people with edge cases pay for it, and letting everyone else breathe easier.</description>
    
    <lastBuildDate>Tue, 22 Sep 2020 00:43:37 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/another-long-tail-stand-no-backslashes-in-file/1336.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Another long-tail stand: No backslashes in FILE!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There is behavior in Rebol2 and R3-Alpha where the scanner just automatically flips backslashes into forward slashes in FILE!</p>
<pre><code>rebol2&gt;&gt; %C\Projects
== %C/Projects
</code></pre>
<p>That's the kind of random fiddling that I call "the worst answer".  Red preserves the backslashes as-is, which is at least a slight improvement:</p>
<pre><code>red&gt;&gt; %C\Projects
== %C\Projects
</code></pre>
<p>But one theoretical benefit of being able to paste your file paths "as-is" is missing, because colons aren't legal:</p>
<pre><code>red&gt;&gt; %C:\Projects
*** Syntax Error: (line 1) invalid word at :\Projects
</code></pre>
<h2>Could Restricting FILE! Be A Selling Point?</h2>
<p>For whatever it's worth, UNIX does allow you to have backslashes in filenames.  (They typically have to be escaped (as <code>\\</code>) in shell commands.)</p>
<p>But mechanically speaking, FILE! does not need to be able to contain all characters...because TEXT! is the currency used for naming <em>local</em> files.  Red follows this convention:</p>
<pre><code>red&gt;&gt; to-local-file %a/b/c
== "a\b\c"  ; on Windows
</code></pre>
<p>But it does this regardless of if you give it a FILE! or a TEXT! as input:</p>
<pre><code>red&gt;&gt; to-local-file "a/b/c"
== "a\b\c"
</code></pre>
<p>Ren-C doesn't do this, and instead says that TO-LOCAL-FILE only works on FILE!...(unless you use the /PASS refinement, in which case TEXT! is allowed to pass through unmodified):</p>
<pre><code>ren-c&gt;&gt; to-local-file "a/b/c"
** Error: Filename already in local format (as a TEXT!), use /PASS to allow

ren-c&gt;&gt; to-local-file/pass "a/b/c"  ; pass-thru
== "a/b/c"
</code></pre>
<p>I think this suggests a means for sanity checking to prevail.  FILE! can be a tool for righteousness.</p>
<h2>What to do if you have a weird filename</h2>
<p>If you're making some kind of dialect with filenames in it, and you want to give people the ability to copy/paste literally things like <code>"C:\Projects\red\README.md"</code>, you use TEXT!.</p>
<pre><code>file-list: [
    %ren-c/README.md
    "C:\Projects\ren-c\LICENSE"
]
</code></pre>
<p>Maybe you have to decorate the TEXT! with something like <code>&lt;file&gt;</code>, if you have other baseline uses for strings in the dialect.</p>
<p>Then when you're writing your code and find you have a filename in a TEXT! you have these options:</p>
<ul>
<li>
<p><strong>With "sane" filenames, just use LOCAL-TO-FILE to get a FILE! out of it.</strong>  If you have something in your hand that's either a FILE! or a TEXT!, then use LOCAL-TO-FILE/PASS.  This should work for "sane" filenames and handle most cases.</p>
</li>
<li>
<p><strong>With "insane" filenames, your first instinct should be to just FIX them</strong> So let's say you have something like this on UNIX:</p>
<pre><code>file-list: [
    %/usr/local/bin/gcc
     "/home/crazy\file"
]
</code></pre>
<p>Just drop out to your OS shell and rename it with whatever tools you've got, <strong><code>mv crazy\\file sane-file</code></strong>.  Or automate it with CALL out to the shell, if you like.  We did you a solid by making LOCAL-TO-FILE refuse to call that a FILE!, and the world is a safer place.</p>
</li>
<li>
<p><strong>If you insist on keeping the file with its name and still operating in it, then manually use mechanisms that let you specify PORT! with TEXT!</strong>.  I don't know what the exact syntax of this is, but it would be in the spirit of:</p>
<pre><code>p: make port! compose [type: 'file name: (crazy-filename-as-text)]
data: read p
close p 
</code></pre>
<p>So that takes the place of the failing call to <strong>read file-to-local/pass crazy-filename-as-text</strong> which refused to make the FILE!.</p>
</li>
</ul>
<h2>I Think These Bold Moves are The Point</h2>
<p>Software has gotten so bad that we never know what's going on.  Some people just pile on layer after layer of filter...like the people who use ad blockers, and pass on URLs of crappy sites to others not knowing what version of it they're going to see.</p>
<p>Experienced programmers (or at least old ones who remember The Times Before) have a sense of when things have gone beyond control.  I think the long tail of development is that people shake down systems to try and get sanity out of them with guidelines that become common-sense ("don't put backslashes in filenames").</p>
<p>Here we have an opportunity with a data type that doesn't exist in nature, the FILE!.  We can make it discern from raw TEXT!.  And we can ask you to keep unprincipled things as TEXT!...letting those people with edge cases pay for it, and letting everyone else breathe easier.</p>
          <p><a href="https://forum.rebol.info/t/another-long-tail-stand-no-backslashes-in-file/1336/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/another-long-tail-stand-no-backslashes-in-file/1336/1</link>
        <pubDate>Tue, 22 Sep 2020 00:33:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1336-1</guid>
        <source url="https://forum.rebol.info/t/another-long-tail-stand-no-backslashes-in-file/1336.rss">Another long-tail stand: No backslashes in FILE!</source>
      </item>
  </channel>
</rss>

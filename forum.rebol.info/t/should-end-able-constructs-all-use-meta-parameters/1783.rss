<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should END-able constructs all use ^META parameters?</title>
    <link>https://forum.rebol.info/t/should-end-able-constructs-all-use-meta-parameters/1783</link>
    <description>R3-Alpha and Rebol2 could only have functions that were &quot;endable&quot; if the argument they took was quoted.  This feature was added primarily for HELP, so that you could say either:

    &gt;&gt; help
    ; (would display generic HELP usage information)

    &gt;&gt; help topic
    ; (would display help for the given topic)
    
It was a *very limited form of variadic-ness*...generally used only in console-oriented commands (HELP, LS).  You couldn&#39;t write a function that was evaluative, like:

    redbol&gt;&gt; printer 1 + 2
    3

    redbol&gt;&gt; printer
    You called the PRINTER function with no arguments
        ; ^-- not possible to accomplish with an otherwise evaluative argument!

Being able to handle getting to the end of input was entwined with taking quoted arguments.

## Ren-C added `&lt;end&gt;`-able Evaluative Parameters

To facilitate certain demos in Ren Garden, Ren-C could mark an ordinary parameter as being `&lt;end&gt;`-able.  This would mean that the argument would show up as being NULL if the end was reached before an argument was seen.

This was--however--ambiguous with if you actually passed an evaluative NULL.

    ren-c&gt;&gt; printer 1 + 2
    3

    ren-c&gt;&gt; printer
    You called the PRINTER function with no arguments

    ren-c&gt;&gt; printer null  
    You called the PRINTER function with no arguments  ; d&#39;oh

**This kind of ambiguity wasn&#39;t new...the Redbol version had it.**  The signal for quoted parameters that were endable-and-missing was to make the parameter an UNSET!.  Which meant they couldn&#39;t tell the difference between **help #[unset!]** and just-plain-help:

    red&gt;&gt; help #[unset!]
    To use HELP, supply a word or value as its
    argument:

        help insert
        help system
        help system/script

    To view all words that...

**Interestingly enough, Ren-C has a solution for this with quoted parameters, because NULL cannot appear literally in source...so it can&#39;t be at the callsite.  Thus NULL can represent a missing quoted argument.**  Which is neat.

## ^META parameters can do `&lt;end&gt;` another way...

A meta parameter is quoted, but will be a plain non-quoted BAD-WORD! if the callsite was passing an isotope.  With the [recent design concept that suggests ~void~ isotopes are &quot;pure&quot; and equivalent to the full absence of a value](https://forum.rebol.info/t/pure-vs-impure-invisibility-do-we-need-both/1782), you get evaluative endability without needing a separate feature. 

So if our PRINTER took a ^META argument:

    &gt;&gt; printer 1 + 2
    3
    ; (it actually received &#39;3, quoted)

    &gt;&gt; printer
    You called the PRINTER function with no arguments
    ; (it actually received ~void~, not quoted)

The ambiguity is still there, though...

    &gt;&gt; printer ~void~
    You called the PRINTER function with no arguments
    ; (again, it actually received ~void~, not quoted)

If you&#39;re following the details then I pointed out that supermeta parameters would be necessary to implement something that would know the difference in the suggested model.

**But at least you could differentiate NULL from an end.**  The conflation of an invisible argument with the end doesn&#39;t seem that troubling to me, as the problem with HELP is fixed since it quotes and can tell when you say **help ~void~** vs. plain **help**

## Killing off `&lt;end&gt;` as a core parameter flag would simplify things...

* If a quoted parameter tolerates NULL as one of its legal types that&#39;s sufficient to say it is &quot;endable&quot;

* If an evaluative parameter needs to detect endability, it could be your job to make it a ^META parameter and look for void, and unquote it to handle other results.

The code and typeset flags for `&lt;end&gt;` could then be scrapped.

If someone really liked the NULL conflating version of endability they could write something to do it in usermode.

**You&#39;d have to see the code to understand why I would think throwing away **`&lt;end&gt;`** is worth it.** The way the type checking is done frames have to be filled first, which means if a function doesn&#39;t want an actual null but wants just ends to reflect as null... or wants an actual null but doesn&#39;t want ends reflected as null... hidden bits need to be grafted onto these nulls at the time of frame fulfillment to say whether it&#39;s an &quot;endish&quot; null or a regular null.  Various parts of the system then need to test a NULL for this invisible property.  **^META parameters pull such invisible state into the light.**

**Basically take my word for it: meta is much cleaner, and offers a way to expose these distinctions to the user--so I think the odds are that `&lt;end&gt;` and its current mechanics need to die.**</description>
    
    <lastBuildDate>Mon, 24 Jan 2022 01:49:21 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/should-end-able-constructs-all-use-meta-parameters/1783.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should END-able constructs all use ^META parameters?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>R3-Alpha and Rebol2 could only have functions that were "endable" if the argument they took was quoted.  This feature was added primarily for HELP, so that you could say either:</p>
<pre><code>&gt;&gt; help
; (would display generic HELP usage information)

&gt;&gt; help topic
; (would display help for the given topic)
</code></pre>
<p>It was a <em>very limited form of variadic-ness</em>...generally used only in console-oriented commands (HELP, LS).  You couldn't write a function that was evaluative, like:</p>
<pre><code>redbol&gt;&gt; printer 1 + 2
3

redbol&gt;&gt; printer
You called the PRINTER function with no arguments
    ; ^-- not possible to accomplish with an otherwise evaluative argument!
</code></pre>
<p>Being able to handle getting to the end of input was entwined with taking quoted arguments.</p>
<h2>Ren-C added <code>&lt;end&gt;</code>-able Evaluative Parameters</h2>
<p>To facilitate certain demos in Ren Garden, Ren-C could mark an ordinary parameter as being <code>&lt;end&gt;</code>-able.  This would mean that the argument would show up as being NULL if the end was reached before an argument was seen.</p>
<p>This was--however--ambiguous with if you actually passed an evaluative NULL.</p>
<pre><code>ren-c&gt;&gt; printer 1 + 2
3

ren-c&gt;&gt; printer
You called the PRINTER function with no arguments

ren-c&gt;&gt; printer null  
You called the PRINTER function with no arguments  ; d'oh
</code></pre>
<p><strong>This kind of ambiguity wasn't new...the Redbol version had it.</strong>  The signal for quoted parameters that were endable-and-missing was to make the parameter an UNSET!.  Which meant they couldn't tell the difference between <strong>help #[unset!]</strong> and just-plain-help:</p>
<pre><code>red&gt;&gt; help #[unset!]
To use HELP, supply a word or value as its
argument:

    help insert
    help system
    help system/script

To view all words that...
</code></pre>
<p><strong>Interestingly enough, Ren-C has a solution for this with quoted parameters, because NULL cannot appear literally in source...so it can't be at the callsite.  Thus NULL can represent a missing quoted argument.</strong>  Which is neat.</p>
<h2>^META parameters can do <code>&lt;end&gt;</code> another way...</h2>
<p>A meta parameter is quoted, but will be a plain non-quoted BAD-WORD! if the callsite was passing an isotope.  With the <a href="https://forum.rebol.info/t/pure-vs-impure-invisibility-do-we-need-both/1782">recent design concept that suggests ~void~ isotopes are "pure" and equivalent to the full absence of a value</a>, you get evaluative endability without needing a separate feature.</p>
<p>So if our PRINTER took a ^META argument:</p>
<pre><code>&gt;&gt; printer 1 + 2
3
; (it actually received '3, quoted)

&gt;&gt; printer
You called the PRINTER function with no arguments
; (it actually received ~void~, not quoted)
</code></pre>
<p>The ambiguity is still there, though...</p>
<pre><code>&gt;&gt; printer ~void~
You called the PRINTER function with no arguments
; (again, it actually received ~void~, not quoted)
</code></pre>
<p>If you're following the details then I pointed out that supermeta parameters would be necessary to implement something that would know the difference in the suggested model.</p>
<p><strong>But at least you could differentiate NULL from an end.</strong>  The conflation of an invisible argument with the end doesn't seem that troubling to me, as the problem with HELP is fixed since it quotes and can tell when you say <strong>help ~void~</strong> vs. plain <strong>help</strong></p>
<h2>Killing off <code>&lt;end&gt;</code> as a core parameter flag would simplify things...</h2>
<ul>
<li>
<p>If a quoted parameter tolerates NULL as one of its legal types that's sufficient to say it is "endable"</p>
</li>
<li>
<p>If an evaluative parameter needs to detect endability, it could be your job to make it a ^META parameter and look for void, and unquote it to handle other results.</p>
</li>
</ul>
<p>The code and typeset flags for <code>&lt;end&gt;</code> could then be scrapped.</p>
<p>If someone really liked the NULL conflating version of endability they could write something to do it in usermode.</p>
<p><strong>You'd have to see the code to understand why I would think throwing away <strong><code>&lt;end&gt;</code></strong> is worth it.</strong> The way the type checking is done frames have to be filled first, which means if a function doesn't want an actual null but wants just ends to reflect as null... or wants an actual null but doesn't want ends reflected as null... hidden bits need to be grafted onto these nulls at the time of frame fulfillment to say whether it's an "endish" null or a regular null.  Various parts of the system then need to test a NULL for this invisible property.  <strong>^META parameters pull such invisible state into the light.</strong></p>
<p><strong>Basically take my word for it: meta is much cleaner, and offers a way to expose these distinctions to the user--so I think the odds are that <code>&lt;end&gt;</code> and its current mechanics need to die.</strong></p>
          <p><a href="https://forum.rebol.info/t/should-end-able-constructs-all-use-meta-parameters/1783/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-end-able-constructs-all-use-meta-parameters/1783/1</link>
        <pubDate>Fri, 21 Jan 2022 17:01:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1783-1</guid>
        <source url="https://forum.rebol.info/t/should-end-able-constructs-all-use-meta-parameters/1783.rss">Should END-able constructs all use ^META parameters?</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Cutting PARSE&#39;s &quot;THEN&quot; Rule</title>
    <link>https://forum.rebol.info/t/cutting-parses-then-rule/1535</link>
    <description>Has anyone ever actually used THEN?  Does anyone actually understand what it&#39;s for?

Red describes it as:

&gt; **then** : regardless of failure or success of what follows, skip the next alternate rule

But the easiest way to think of it is that these two things are equivalent:

    rule1 THEN rule2 | rule3

    [rule1 (cont: rule2) | (cont: rule3)] cont

It doesn&#39;t fit into the combinator model at all.  Something like this would have to be part of the BLOCK! rules and recognized literally.  It skips just one `|`, which doesn&#39;t feel like it makes any sense.

Topaz says it removes `then` (and that it &quot;should be removed from Red&#39;s `parse` too&quot;).  Yup.

The longer-winded PARSE project documentation tries to justify it by saying that dynamic rules (e.g. those using GROUP!s) are irregular or bad somehow.  But this construct is much more irregular and bad.  Axing it.

&gt; **Purpose:** Syntactic conditional pattern matching without dynamic rules.
&gt;
&gt; **Importance:**
&gt;
&gt; Increases the expressiveness of the PARSE dialect to match that of the Generalized TDPL.
&gt;
&gt; Together with FAIL it allows direct usage of the GTDPL in PARSE.
&gt;
&gt; Dynamic rules tend to be a tricky process to write and debug, not to mention the potential binding issues if they aren&#39;t done just right. The more language patterns we can recognize without dynamic rules, the better.
&gt;
&gt; Replaces the idiom:
&gt; 
&gt;     [rule1 (cont: rule2) | (cont: rule3)] cont
&gt;
&gt; **Syntax:**
&gt;
&gt;    THEN rule2 | rule3
&gt;
&gt; If THEN is reached (any implied rule1 succeeded), then rule2 is matched and the next alternate (containing rule3) is skipped. If rule1 failed, the next alternate is backtracked to using the normal backtracking rules. If rule2 fails, then it backtracks to whatever rule4 alternate that there may be after the rule3 alternate, if any.
&gt;
&gt; **Examples:**
&gt;
&gt; Parse to the #&quot;a&quot; delimiter, to the #&quot;b&quot; delimiter, or to the end of the input, whichever comes first:
&gt;
&gt;     any [[#&quot;a&quot; | #&quot;b&quot;] then [end skip] | skip]
&gt;
&gt; **Note:** The word =&gt; has been suggested instead of THEN for this operation, but would require a REBOL syntax exception. THEN was accepted with that name, not as =&gt;.

Here is the sole test of THEN that I&#39;m deleting:

    b: &quot;abc&quot;
    c: [&quot;a&quot; | &quot;b&quot;]
    a2: [any [b, e: here, (d: [seek e]) then fail | [c | (d: [fail]) fail]] d]
    a4: [any [b then e: here (d: [seek e]) fail | [c | (d: [fail]) fail]] d]
    equal? parse &quot;aaaaabc&quot; a2 parse &quot;aaaaabc&quot; a4</description>
    
    <lastBuildDate>Wed, 03 Mar 2021 21:59:46 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/cutting-parses-then-rule/1535.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Cutting PARSE&#39;s &quot;THEN&quot; Rule</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Has anyone ever actually used THEN?  Does anyone actually understand what it's for?</p>
<p>Red describes it as:</p>
<blockquote>
<p><strong>then</strong> : regardless of failure or success of what follows, skip the next alternate rule</p>
</blockquote>
<p>But the easiest way to think of it is that these two things are equivalent:</p>
<pre><code>rule1 THEN rule2 | rule3

[rule1 (cont: rule2) | (cont: rule3)] cont
</code></pre>
<p>It doesn't fit into the combinator model at all.  Something like this would have to be part of the BLOCK! rules and recognized literally.  It skips just one <code>|</code>, which doesn't feel like it makes any sense.</p>
<p>Topaz says it removes <code>then</code> (and that it "should be removed from Red's <code>parse</code> too").  Yup.</p>
<p>The longer-winded PARSE project documentation tries to justify it by saying that dynamic rules (e.g. those using GROUP!s) are irregular or bad somehow.  But this construct is much more irregular and bad.  Axing it.</p>
<blockquote>
<p><strong>Purpose:</strong> Syntactic conditional pattern matching without dynamic rules.</p>
<p><strong>Importance:</strong></p>
<p>Increases the expressiveness of the PARSE dialect to match that of the Generalized TDPL.</p>
<p>Together with FAIL it allows direct usage of the GTDPL in PARSE.</p>
<p>Dynamic rules tend to be a tricky process to write and debug, not to mention the potential binding issues if they aren't done just right. The more language patterns we can recognize without dynamic rules, the better.</p>
<p>Replaces the idiom:</p>
<pre><code>[rule1 (cont: rule2) | (cont: rule3)] cont
</code></pre>
<p><strong>Syntax:</strong></p>
<p>THEN rule2 | rule3</p>
<p>If THEN is reached (any implied rule1 succeeded), then rule2 is matched and the next alternate (containing rule3) is skipped. If rule1 failed, the next alternate is backtracked to using the normal backtracking rules. If rule2 fails, then it backtracks to whatever rule4 alternate that there may be after the rule3 alternate, if any.</p>
<p><strong>Examples:</strong></p>
<p>Parse to the #"a" delimiter, to the #"b" delimiter, or to the end of the input, whichever comes first:</p>
<pre><code>any [[#"a" | #"b"] then [end skip] | skip]
</code></pre>
<p><strong>Note:</strong> The word =&gt; has been suggested instead of THEN for this operation, but would require a REBOL syntax exception. THEN was accepted with that name, not as =&gt;.</p>
</blockquote>
<p>Here is the sole test of THEN that I'm deleting:</p>
<pre><code>b: "abc"
c: ["a" | "b"]
a2: [any [b, e: here, (d: [seek e]) then fail | [c | (d: [fail]) fail]] d]
a4: [any [b then e: here (d: [seek e]) fail | [c | (d: [fail]) fail]] d]
equal? parse "aaaaabc" a2 parse "aaaaabc" a4</code></pre>
          <p><a href="https://forum.rebol.info/t/cutting-parses-then-rule/1535/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/cutting-parses-then-rule/1535/1</link>
        <pubDate>Wed, 03 Mar 2021 20:43:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1535-1</guid>
        <source url="https://forum.rebol.info/t/cutting-parses-then-rule/1535.rss">Cutting PARSE&#39;s &quot;THEN&quot; Rule</source>
      </item>
  </channel>
</rss>

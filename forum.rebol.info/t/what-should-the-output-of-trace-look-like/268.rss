<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What should the output of TRACE look like?</title>
    <link>https://forum.rebol.info/t/what-should-the-output-of-trace-look-like/268</link>
    <description>Rebol&#39;s only real historical debugging tool was TRACE.  So before we talk about single-step-debugging, let&#39;s talk about what it does...and what it can and can&#39;t do.

For a very simplified example, let&#39;s say your code looked like this:

    &gt;&gt; foo: func [x] [add x bar 10]
    &gt;&gt; bar: func [y] [either y = 10 [20] [y + 1]]

    &gt;&gt; foo 30
    == 50

With TRACE ON you would get the following output.

    &gt;&gt; foo 30
      1: foo : function! [x]
      2: 3n
         --&gt; foo
          1: add : action! [value1 value2]
          2: x : 30
          3: bar : function! [y]
          4: 1n
             --&gt; bar
              1: either : native! [condition true-branch false-branch /only]
              2: y : 10
              3: = : op! [value1 value2]
              4: 10
                 --&gt; =
             &lt;-- = == true
              5: [20]
              6: [y + 1]
                 --&gt; either
                  1: 20
             &lt;-- either == 20
         &lt;-- bar == 20
             --&gt; add
         &lt;-- add == 50
     &lt;-- foo == 50
     == 50

*(If you&#39;re wondering what `2: 3n` and `4: 1n` is, those are supposed to be `2: 30` and `4: 10`, respectively.  R3-Alpha had quite a number of memory bugs, and running a trace over large amounts of code was a good way to see them.  One of the earliest tasks in Ren-C was in fact to have TRACE on for the entirety of boot, without tripping any asserts or address sanitizer problems.)*

Another example:

    &gt;&gt; do [x: 10 y: add 20 30]
     1: do : native! [value /args arg /next var]
     2: [x: 10 y: add 20 30]
        --&gt; do
         1: x:
         2: 10
         3: y:
         4: add : action! [value1 value2]
         5: 20
         6: 30
            --&gt; add
        &lt;-- add == 50
    &lt;-- do == 50
    == 50

What we see here is that in terms of the &quot;what am I about to run&quot;, you get *one unit of information*.  If the one unit of thing turns out to be a FUNCTION!, then you get a level of indentation.

Rebol doesn&#39;t really have a way to simulate the evaluator&#39;s logic to know how much of an expression is going to be consumed in advance, in order to print that full expression out.  Hence the &quot;one unit&quot;.  The only reliable way to know where an expression is going to end is to run it...which means the trace output would come *after* the expression is run.

So take into account the evaluation order is such that if you say **foo bar x** then x evaluates, then bar evaluates, then foo evaluates.  So the only way you&#39;re going to see output that says the whole expression `foo bar x` is if you wait until all the sub-expressions have evaluated (and suppress their output) and then show the full expression.

This suggests the difference between &quot;step-over&quot; and &quot;step-into&quot;, where &quot;step-over&quot; generates no output until the stack level you started from has finished, at which point you get the full expression.  I&#39;m not sure how this pertains to trace, or what the relationship between trace and step debugging is.

I&#39;ve done some light experimentation with alternatives, and wonder if people have an intuition of what they would like to see.</description>
    
    <lastBuildDate>Sat, 26 Aug 2017 05:54:35 +0000</lastBuildDate>
    <category>Debugger</category>
    <atom:link href="https://forum.rebol.info/t/what-should-the-output-of-trace-look-like/268.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What should the output of TRACE look like?</title>
        <dc:creator><![CDATA[Brett]]></dc:creator>
        <description><![CDATA[
            <p>Never used this trace, but having studied your example I can see the use of it, it demonstrates how DO evaluates.</p>
<p>I see how each element of the same block is at the same indentation level , though at first I didn't see that.  I was automatically looking for a tree even though I know emitting text only at each instruction doesn't lend itself to that.</p>
<p>An alternative explanatory view, that shows a tree would be nice, especially now that there are more enfixed operations.  If one could indent something after it has been emitted, then perhaps we don't need to wait until the expression is complete to see the structure evolve.  In the console, this may mean rewriting the screen, a GUI would probably be more suitable.</p>
          <p><a href="https://forum.rebol.info/t/what-should-the-output-of-trace-look-like/268/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-the-output-of-trace-look-like/268/2</link>
        <pubDate>Sat, 26 Aug 2017 05:54:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-268-2</guid>
        <source url="https://forum.rebol.info/t/what-should-the-output-of-trace-look-like/268.rss">What should the output of TRACE look like?</source>
      </item>
      <item>
        <title>What should the output of TRACE look like?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Rebol's only real historical debugging tool was TRACE.  So before we talk about single-step-debugging, let's talk about what it does...and what it can and can't do.</p>
<p>For a very simplified example, let's say your code looked like this:</p>
<pre><code>&gt;&gt; foo: func [x] [add x bar 10]
&gt;&gt; bar: func [y] [either y = 10 [20] [y + 1]]

&gt;&gt; foo 30
== 50
</code></pre>
<p>With TRACE ON you would get the following output.</p>
<pre><code>&gt;&gt; foo 30
  1: foo : function! [x]
  2: 3n
     --&gt; foo
      1: add : action! [value1 value2]
      2: x : 30
      3: bar : function! [y]
      4: 1n
         --&gt; bar
          1: either : native! [condition true-branch false-branch /only]
          2: y : 10
          3: = : op! [value1 value2]
          4: 10
             --&gt; =
         &lt;-- = == true
          5: [20]
          6: [y + 1]
             --&gt; either
              1: 20
         &lt;-- either == 20
     &lt;-- bar == 20
         --&gt; add
     &lt;-- add == 50
 &lt;-- foo == 50
 == 50
</code></pre>
<p><em>(If you're wondering what <code>2: 3n</code> and <code>4: 1n</code> is, those are supposed to be <code>2: 30</code> and <code>4: 10</code>, respectively.  R3-Alpha had quite a number of memory bugs, and running a trace over large amounts of code was a good way to see them.  One of the earliest tasks in Ren-C was in fact to have TRACE on for the entirety of boot, without tripping any asserts or address sanitizer problems.)</em></p>
<p>Another example:</p>
<pre><code>&gt;&gt; do [x: 10 y: add 20 30]
 1: do : native! [value /args arg /next var]
 2: [x: 10 y: add 20 30]
    --&gt; do
     1: x:
     2: 10
     3: y:
     4: add : action! [value1 value2]
     5: 20
     6: 30
        --&gt; add
    &lt;-- add == 50
&lt;-- do == 50
== 50
</code></pre>
<p>What we see here is that in terms of the "what am I about to run", you get <em>one unit of information</em>.  If the one unit of thing turns out to be a FUNCTION!, then you get a level of indentation.</p>
<p>Rebol doesn't really have a way to simulate the evaluator's logic to know how much of an expression is going to be consumed in advance, in order to print that full expression out.  Hence the "one unit".  The only reliable way to know where an expression is going to end is to run it...which means the trace output would come <em>after</em> the expression is run.</p>
<p>So take into account the evaluation order is such that if you say <strong>foo bar x</strong> then x evaluates, then bar evaluates, then foo evaluates.  So the only way you're going to see output that says the whole expression <code>foo bar x</code> is if you wait until all the sub-expressions have evaluated (and suppress their output) and then show the full expression.</p>
<p>This suggests the difference between "step-over" and "step-into", where "step-over" generates no output until the stack level you started from has finished, at which point you get the full expression.  I'm not sure how this pertains to trace, or what the relationship between trace and step debugging is.</p>
<p>I've done some light experimentation with alternatives, and wonder if people have an intuition of what they would like to see.</p>
          <p><a href="https://forum.rebol.info/t/what-should-the-output-of-trace-look-like/268/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-the-output-of-trace-look-like/268/1</link>
        <pubDate>Thu, 24 Aug 2017 01:24:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-268-1</guid>
        <source url="https://forum.rebol.info/t/what-should-the-output-of-trace-look-like/268.rss">What should the output of TRACE look like?</source>
      </item>
  </channel>
</rss>

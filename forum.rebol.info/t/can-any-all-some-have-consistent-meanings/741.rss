<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Can ANY, ALL, SOME have consistent meanings?</title>
    <link>https://forum.rebol.info/t/can-any-all-some-have-consistent-meanings/741</link>
    <description>These words are used in multiple places and don&#39;t always mean parallel things.

From some point of view, the idea that words have many different meanings is part of the point.  It still seems like when you&#39;re putting things in the box together it might be nice if there was more consistency.

Not the highest priority thing to worry about, but definitely worth thinking about, so here are a few thoughts:

### ALL [...] vs. CASE/ALL

ALL is a *short-circuit* construct.  The first time it sees a falsey thing, it stops.

    &gt;&gt; all [(probe 1) (probe 2 false) (probe 3)]
    1
    ;-- null

But CASE/ALL takes away CASE&#39;s natural &quot;ALL-like&quot; short circuiting.  The /ALL makes it evaluate *every* condition, potentially running branches even after it has seen falsey conditions:

    &gt;&gt; case/all [true [probe 1] false [probe 2] true [probe 3]]
    1
    3
    == 3

Ren-C chose to make CASE/ALL return *the evaluation of the branch associated with the last truthy condition*.  (Rebol2 and Red just return false if the last condition was falsey.)  That aside, both of them evaluate &quot;all of the cases&quot;.

Could we have a word for something that wasn&#39;t short-circuit, yet evaluated &quot;all&quot; of the conditions...and just returned the last truthy one or NULL?

### ANY [...] vs. PARSE&#39;s ANY

PARSE&#39;s ANY means &quot;match this rule any number of times, including 0 times&quot;.  In the past I&#39;ve griped about the use of the word.  If PARSE were a fruit stand the conversation might go like:

&gt; **me:** &quot;Do you have any apples?&quot;
&gt; **parse:** &quot;Yes.&quot;
&gt; **me:** &quot;Can I buy an apple?&quot;
&gt; **parse:** &quot;No.&quot;
&gt; **me:** &quot;I&#39;m [not @gchiu](https://www.youtube.com/watch?v=i3HokGUffcU)...so why not?&quot;
&gt; **parse:** &quot;Because I have zero apples.&quot;
&gt; **me:** &quot;Why didn&#39;t you didn&#39;t tell me you didn&#39;t have any?&quot;
&gt; **parse:** &quot;Because I do.  I just don&#39;t have *some*.&quot;

What bothered me was how much in direct contradiction with ANY&#39;s use in the language this was:

    if any [
        1 &gt; 2
        3 &gt; 4
    ][
        print &quot;if 0 matching conditions was &#39;any&#39;, this would run&quot;
    ]

One thought is that we don&#39;t really have a single word that means &quot;zero or any number of&quot;.  So why have a single word in PARSE?  It could just be **OPT SOME**, which is unambiguous:

    ;-- any number of &quot;a&quot;s (including zero), followed by some &quot;bs&quot;
    parse &quot;bbb&quot; [any &quot;a&quot; some &quot;b&quot;]

    ;-- optionally some &quot;a&quot;s, followed by some &quot;b&quot;s
    parse &quot;bbb&quot; [opt some &quot;a&quot; some &quot;b&quot;]

I think it would be a reasonable argument for getting rid of ANY, even if there weren&#39;t a direct opposition in every day use coming from `ANY [...]`.  One less thing to be confusing, one less thing to teach.

The true parallel application of ANY in PARSE would be to pick the first matching parse rule out of a list.  But that&#39;s currently implicit: just having a BLOCK! with `|` between expressions turns it into PARSE&#39;s idea of an ANY:

     parse &quot;abcbca&quot; [some [any [&quot;a&quot; | &quot;bc&quot;]]

But you don&#39;t want to have to say that any time you are making an alternate rule.  I&#39;m just trying to make the point that It just seems that it might be clearer if ANY wasn&#39;t an iterative construct.

### So, thoughts...?

* Has anyone ever thought that ANY in PARSE was kind of confusing?  Could you get behind OPT SOME?
* Is there any name for an ANY-or-ALL-like thing which would evaluate all its conditions and return the last truthy result, else NULL?  Could it have a catchy name to fill in CASE/XXX instead of CASE/ALL?</description>
    
    <lastBuildDate>Mon, 16 Jul 2018 02:42:44 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/can-any-all-some-have-consistent-meanings/741.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Can ANY, ALL, SOME have consistent meanings?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="741">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/markeye/40/202_2.png" class="avatar"> MarkEye:</div>
<blockquote>
<p>Currently parse keywords only apply to rules, not to other keywords.</p>
</blockquote>
</aside>
<p>Not sure what you're referring to, but if it's <strong>opt some</strong>, that's not a rule in and of itself.  OPT acts on the rule after it, allowing its failure to still count as success:</p>
<pre><code>&gt;&gt; did parse "bbb" [opt some "a" some "b"]
== true

&gt;&gt; did parse "aaabbb" [opt some "a" some "b"]
== true
</code></pre>
<p>Works as expected, clears up the problems with ANY.</p>
          <p><a href="https://forum.rebol.info/t/can-any-all-some-have-consistent-meanings/741/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/can-any-all-some-have-consistent-meanings/741/3</link>
        <pubDate>Mon, 16 Jul 2018 02:42:44 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-741-3</guid>
        <source url="https://forum.rebol.info/t/can-any-all-some-have-consistent-meanings/741.rss">Can ANY, ALL, SOME have consistent meanings?</source>
      </item>
      <item>
        <title>Can ANY, ALL, SOME have consistent meanings?</title>
        <dc:creator><![CDATA[Mark-hi]]></dc:creator>
        <description><![CDATA[
            <p>Currently parse keywords only apply to rules, not to other keywords. So there's no nesting, or keyword stack. I think this is important enough for readability to preserve if at all possible.</p>
          <p><a href="https://forum.rebol.info/t/can-any-all-some-have-consistent-meanings/741/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/can-any-all-some-have-consistent-meanings/741/2</link>
        <pubDate>Mon, 16 Jul 2018 02:20:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-741-2</guid>
        <source url="https://forum.rebol.info/t/can-any-all-some-have-consistent-meanings/741.rss">Can ANY, ALL, SOME have consistent meanings?</source>
      </item>
      <item>
        <title>Can ANY, ALL, SOME have consistent meanings?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>These words are used in multiple places and don't always mean parallel things.</p>
<p>From some point of view, the idea that words have many different meanings is part of the point.  It still seems like when you're putting things in the box together it might be nice if there was more consistency.</p>
<p>Not the highest priority thing to worry about, but definitely worth thinking about, so here are a few thoughts:</p>
<h3>ALL [...] vs. CASE/ALL</h3>
<p>ALL is a <em>short-circuit</em> construct.  The first time it sees a falsey thing, it stops.</p>
<pre><code>&gt;&gt; all [(probe 1) (probe 2 false) (probe 3)]
1
;-- null
</code></pre>
<p>But CASE/ALL takes away CASE's natural "ALL-like" short circuiting.  The /ALL makes it evaluate <em>every</em> condition, potentially running branches even after it has seen falsey conditions:</p>
<pre><code>&gt;&gt; case/all [true [probe 1] false [probe 2] true [probe 3]]
1
3
== 3
</code></pre>
<p>Ren-C chose to make CASE/ALL return <em>the evaluation of the branch associated with the last truthy condition</em>.  (Rebol2 and Red just return false if the last condition was falsey.)  That aside, both of them evaluate "all of the cases".</p>
<p>Could we have a word for something that wasn't short-circuit, yet evaluated "all" of the conditions...and just returned the last truthy one or NULL?</p>
<h3>ANY [...] vs. PARSE's ANY</h3>
<p>PARSE's ANY means "match this rule any number of times, including 0 times".  In the past I've griped about the use of the word.  If PARSE were a fruit stand the conversation might go like:</p>
<blockquote>
<p><strong>me:</strong> "Do you have any apples?"<br>
<strong>parse:</strong> "Yes."<br>
<strong>me:</strong> "Can I buy an apple?"<br>
<strong>parse:</strong> "No."<br>
<strong>me:</strong> "I'm <a href="https://www.youtube.com/watch?v=i3HokGUffcU" rel="nofollow noopener">not @gchiu</a>...so why not?"<br>
<strong>parse:</strong> "Because I have zero apples."<br>
<strong>me:</strong> "Why didn't you didn't tell me you didn't have any?"<br>
<strong>parse:</strong> "Because I do.  I just don't have <em>some</em>."</p>
</blockquote>
<p>What bothered me was how much in direct contradiction with ANY's use in the language this was:</p>
<pre><code>if any [
    1 &gt; 2
    3 &gt; 4
][
    print "if 0 matching conditions was 'any', this would run"
]
</code></pre>
<p>One thought is that we don't really have a single word that means "zero or any number of".  So why have a single word in PARSE?  It could just be <strong>OPT SOME</strong>, which is unambiguous:</p>
<pre><code>;-- any number of "a"s (including zero), followed by some "bs"
parse "bbb" [any "a" some "b"]

;-- optionally some "a"s, followed by some "b"s
parse "bbb" [opt some "a" some "b"]
</code></pre>
<p>I think it would be a reasonable argument for getting rid of ANY, even if there weren't a direct opposition in every day use coming from <code>ANY [...]</code>.  One less thing to be confusing, one less thing to teach.</p>
<p>The true parallel application of ANY in PARSE would be to pick the first matching parse rule out of a list.  But that's currently implicit: just having a BLOCK! with <code>|</code> between expressions turns it into PARSE's idea of an ANY:</p>
<pre><code> parse "abcbca" [some [any ["a" | "bc"]]
</code></pre>
<p>But you don't want to have to say that any time you are making an alternate rule.  I'm just trying to make the point that It just seems that it might be clearer if ANY wasn't an iterative construct.</p>
<h3>So, thoughts...?</h3>
<ul>
<li>Has anyone ever thought that ANY in PARSE was kind of confusing?  Could you get behind OPT SOME?</li>
<li>Is there any name for an ANY-or-ALL-like thing which would evaluate all its conditions and return the last truthy result, else NULL?  Could it have a catchy name to fill in CASE/XXX instead of CASE/ALL?</li>
</ul>
          <p><a href="https://forum.rebol.info/t/can-any-all-some-have-consistent-meanings/741/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/can-any-all-some-have-consistent-meanings/741/1</link>
        <pubDate>Sun, 15 Jul 2018 18:35:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-741-1</guid>
        <source url="https://forum.rebol.info/t/can-any-all-some-have-consistent-meanings/741.rss">Can ANY, ALL, SOME have consistent meanings?</source>
      </item>
  </channel>
</rss>

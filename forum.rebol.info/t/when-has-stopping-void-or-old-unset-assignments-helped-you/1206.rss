<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>When has Stopping VOID! (or old &quot;UNSET!&quot;) Assignments Helped You?</title>
    <link>https://forum.rebol.info/t/when-has-stopping-void-or-old-unset-assignments-helped-you/1206</link>
    <description>I think it&#39;s good that VOID! is not conditionally true or false:

    &gt;&gt; if print &quot;This error seems good&quot; [&lt;does it not?&gt;]
    This error seems good
    ** Script Error: VOID! values are not conditionally true or false
    ** Where: if console
    ** Near: [... print &quot;This error seems good&quot; [&lt;does it not?&gt;] ~~]

And I think it&#39;s good that you don&#39;t get it accepted as a function argument by default...nor can you dereference a variable containing it by default.

But with NULL being used to unset variables, I kind of wonder:

    &gt;&gt; value: print &quot;how much do we gain by stopping this assignment?&quot;
    how much do we gain by stopping this assignment?
    ** Script Error: value: is VOID!
    ** Where: console
    ** Near: [value: print &quot;how much do we gain by stopping this assignme...

For access, you have the ability to say :VALUE and get it.  But for writing, you have to turn this into a SET/ANY.  That&#39;s inconvenient.

Any time you call DO on CODE that is arbitrary, you have to switch away from the use of a SET-WORD!...

    switch type of x: do code [
        void! [print &quot;What a pain you can&#39;t get here without SET/ANY &#39;X DO CODE&quot;]
        ...
    ]

## How often has this *actually helped anyone* vs. just being a PITA?

I&#39;m sure it&#39;s probably helped catch some mistake somewhere.  But my memories of it doing so are few and far between, while my memories of having to use SET/ANY when I didn&#39;t want to are pretty hard to count.

The issue is that if we take this away, we take away a tool for error locality.  Most notably things like:

     x: if 2 = 1 + 1 [select [a 10 b 20] &#39;c]  ; null gets VOID!-ified

You won&#39;t find out until you try to read X that you didn&#39;t get the value you meant, because NULL had to be reserved for the signal that the branch did not run.

This is all explained pretty well in [&quot;Why VOID! is not like UNSET! (and why its more ornery)&quot;](https://forum.rebol.info/t/why-void-is-not-like-unset-and-why-its-more-ornery/947).  But quoting myself:

&gt; **A void! is a means of giving a hot potato back that is a warning about  *something* , but you don&#39;t want to force an error &quot;in the moment&quot;...in case the returned information wasn&#39;t going to be used anyway.**

Is the assignment itself an important &quot;hot potato&quot; moment, or is that not one of the cases?  Do we really need to know that the X: assignment didn&#39;t go well *right then*?  What if the variable is never accessed (or if you have a **if void? x: ...something...** to handle it?

## Looking for any anecdotes...

All I can think about is how annoying it is that I can&#39;t write generic code using **X:** and **:X** and trust the premise of symmetry and substitution.  That&#39;s the main anecdote I have.  I dislike what SET/ANY does to the elegance my generic code that is trying to work with any value...including VOID!.  And in a language where safety is not the raison d&#39;etre, seeing that elegance lost is frustrating.

Taking away this mechanism would take away the *ability* to stop a plain SET-WORD! assignment of anything...they would all be legal...including NULLs.  But you could still stop it a lot of other places (function arguments by default, variable reads, and SET and GET without /ANY).  With the objectives of the language being what they are, should we just go ahead and allow it?

&gt; Tangential thought: Maybe we can make **[X]:** have a different property, e.g. enforcing non-null values?  You can&#39;t put nulls in blocks.  So you&#39;d have to say **[X]: try null** and get **[_]** as the result, vs. an error on **[X]: null**.  Or maybe **[X]: null** sets X to VOID! and evaluates to a block containing a void value?
&gt;
&gt; (This would be going with the idea that SET-BLOCK! was part of some [multi-return value scheme](https://forum.rebol.info/t/multiple-return-values/1134) instead of a pure synonym for SET of a BLOCK! as written today (which could be under another name, e.g. **assign [a b] [1 2]** giving a as 1 and b as 2.  Then SET could mean something else entirely when applied to blocks!)</description>
    
    <lastBuildDate>Wed, 01 Jul 2020 05:40:17 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/when-has-stopping-void-or-old-unset-assignments-helped-you/1206.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>When has Stopping VOID! (or old &quot;UNSET!&quot;) Assignments Helped You?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="3" data-topic="1206">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>Your suggestion here would present a more obvious way to un-set a word: <strong>x: void</strong></p>
</blockquote>
</aside>
<p>Right.  though I would call this "voiding" a variable, e.g. poisoning it in a way that will generate problems on casual access, if such access ever actually comes about.</p>
<p>To repeat what I've said: <strong>"variables can be set or unset, but values cannot.  a variable that holds a value is set.  a variable that holds no value is unset.  mechanically, blocks can contain any values.  null is a state reflecting the absence of a value and as such cannot be put in a block."</strong></p>
<p>In the time over seeing VOID! act more and more like UNSET! did, I've questioned where it's worth it to change names of things if what you've wound up is kind of parallel to the old thing.  But I really feel like the new concept of "set" and "unset" referring to a variable having <em>no</em> value (and not an <em>ornery</em> value which may appear in a block) is important.  Not seeing that caused a lot of detours.</p>
<p>Think about something like making a frame that starts out empty, and then setting some of the values, and then executing the frame:</p>
<pre><code> &gt;&gt; f: make frame! :append

 &gt;&gt; f/series
 ; null

 &gt;&gt; f/value
 ; null

 &gt;&gt; f/dup
 ; null

 &gt;&gt; f/part
 ; null

 &gt;&gt; f/value: 10
 &gt;&gt; f/series: [a b c]
 &gt;&gt; f/dup: 3  ; in the post refinements-are-values world
 &gt;&gt; do f
 [a b c 10 10 10]
</code></pre>
<p>To me it seems like saying "at the beginning when you make a frame, none of the variables have been set yet".  Then you "set" them, and then you can execute the frame.  You don't want to start these variables out in a void state, because you don't want the /PART to cause it to error having that void value...which may be a legitimate thing for a refinement to be set to.</p>
<p>So I claim <em>a variable that is unset is one that has no value at all</em>.  Variables can be unset, and values by definition cannot be unset.  I float the idea of maybe saying a variable is UNDEFINED? if it is <em>set to void</em>...though I'm panning this as it's longer and less clear than VOIDED?, and too questionable in surface looks from UNSET?.</p>
<pre><code>&gt;&gt; x: void

&gt;&gt; x
** Error: x is void and must use GET-WORD! vs. WORD! to access

&gt;&gt; type of :x
== @[void]  ; if recent proposal is used

&gt;&gt; void? :x
== #[true]

&gt;&gt; var: 'x
&gt;&gt; voided? var
== #[true]
</code></pre>
<p>What's changed here conceptually is that accessing a variable which is not set does not raise an error through word access.  It just gives null... which is not a value, and <strong>value? null</strong> is false, and it cannot be a member of ANY-VALUE!...while VOID!s are.  The errors on plain word access happen when you have a variable that is <strong>set</strong>, but <em>set to a void! value</em>.</p>
<aside class="quote no-group" data-post="3" data-topic="1206">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I'm not sure why PRINT returns VOID and wonder if it wouldn't be better to have it be silent like ELIDE? Would that create havoc if new users did confuse its usage?</p>
</blockquote>
</aside>
<p>The usefulness of the return result is that it isn't always VOID!, but NULL if nothing--not even a newline--was printed.  This lets you use it with the likes of ELSE.  It's also going with the traditional assumption that relying on the return result in any more general sense is probably a mistake.  It's less convenient with ANY and ALL or similar, because you'd have to test for <strong>void? print [...]</strong> or <strong>not null? print [...]</strong> or <strong>value? print [...]</strong> kinds-of-things.  But it still works.</p>
<p>(Performance dictates that returning the printed string itself is probably wasteful, since it is used so infrequently.  It could arguably return a logic, so you could write <strong>did print [...]</strong> or <strong>not print [...]</strong> as well as use it with ELSE, but that bucks the traditional trend of thinking that being "ornery" in trying to use print's result is a good thing.)</p>
<p>Being able to <strong>elide print [...]</strong> covers the case where you want an invisible usage somewhere in the middle of an evaluation, which is nice and general...and not so strange once you get used to using it.  Having dump routines like <strong>--</strong> be invisible is nice though.</p>
          <p><a href="https://forum.rebol.info/t/when-has-stopping-void-or-old-unset-assignments-helped-you/1206/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/when-has-stopping-void-or-old-unset-assignments-helped-you/1206/4</link>
        <pubDate>Tue, 30 Jun 2020 22:58:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1206-4</guid>
        <source url="https://forum.rebol.info/t/when-has-stopping-void-or-old-unset-assignments-helped-you/1206.rss">When has Stopping VOID! (or old &quot;UNSET!&quot;) Assignments Helped You?</source>
      </item>
      <item>
        <title>When has Stopping VOID! (or old &quot;UNSET!&quot;) Assignments Helped You?</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I'm still working to internalise the NULL/VOID/BLANK triumvirate, a part of that is current practice of the NULL -&gt; VOID switcheroo (despite the fact I myself had suggested it somewhere—still working on it). Your suggestion here would present a more obvious way to un-set a word: <strong>x: void</strong></p>
<p>I don't have any immediate thoughts as to why this'd be problematic.</p>
<p>On a tangential note: I'm not sure why PRINT returns VOID and wonder if it wouldn't be better to have it be silent like ELIDE? Would that create havoc if new users did confuse its usage?</p>
          <p><a href="https://forum.rebol.info/t/when-has-stopping-void-or-old-unset-assignments-helped-you/1206/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/when-has-stopping-void-or-old-unset-assignments-helped-you/1206/3</link>
        <pubDate>Mon, 29 Jun 2020 15:03:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1206-3</guid>
        <source url="https://forum.rebol.info/t/when-has-stopping-void-or-old-unset-assignments-helped-you/1206.rss">When has Stopping VOID! (or old &quot;UNSET!&quot;) Assignments Helped You?</source>
      </item>
      <item>
        <title>When has Stopping VOID! (or old &quot;UNSET!&quot;) Assignments Helped You?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="1" data-topic="1206">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I'm sure it's probably helped catch some mistake somewhere.</p>
</blockquote>
</aside>
<p>Continuing the general question of competitive analysis with JavaScript, let's look at what they do:</p>
<pre><code>&gt; function nothing() { return; }

&gt; let x = nothing()
&lt;- undefined

&gt; if (x) { console.log("it doesn't error even on dereference"); }
&lt;- undefined

&gt; if (!x) { console.log("because it's falsey"); }
because it's falsey
&lt;- undefined
</code></pre>
<p>That's even more forgiving.  <em>(I definitely like the neither-truthy-nor-falsey status of VOID!, and the falsey status of NULL, so those are unlikely to change.)</em></p>
<p>But does this point to the idea that it's better to make all assignments work, to get a solid "substitution principle"?  e.g. wherever you could say:</p>
<pre><code>  some-func (some expression)
</code></pre>
<p>You could alternately say:</p>
<pre><code> sub: (some expression)
 some-func :sub
</code></pre>
<p><em>Is the value of being able to take this for granted more than the value of having a datatype which defies SET-WORD! assignment, and requires special handling e.g. SET/ANY?</em></p>
<p>I really am leaning toward saying that prohibiting assignments of VOID! values via SET-WORD! is probably not all it's cracked up to be.  Conscientious programmers should be trying things like:</p>
<pre><code> &gt;&gt; x: ensure integer! add 1 2
 == 3
</code></pre>
<p>That's even stronger, and if you said <strong>x: ensure integer! print "Hello"</strong> you'd catch the problem if you were so concerned.  Or even <strong>x: add 1 2 matched integer!</strong> if you want to say it in another order.</p>
<p>Similar reasoning led to the allowance for NULL to unset variables.  I feel like going all the way to saying SET-WORD! is SET/ANY, and GET-WORD! is GET/ANY, is probably what to do...and then let plain WORD!-access catch the unset variables and voids is the better answer.</p>
          <p><a href="https://forum.rebol.info/t/when-has-stopping-void-or-old-unset-assignments-helped-you/1206/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/when-has-stopping-void-or-old-unset-assignments-helped-you/1206/2</link>
        <pubDate>Mon, 30 Sep 2019 14:49:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1206-2</guid>
        <source url="https://forum.rebol.info/t/when-has-stopping-void-or-old-unset-assignments-helped-you/1206.rss">When has Stopping VOID! (or old &quot;UNSET!&quot;) Assignments Helped You?</source>
      </item>
      <item>
        <title>When has Stopping VOID! (or old &quot;UNSET!&quot;) Assignments Helped You?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I think it's good that VOID! is not conditionally true or false:</p>
<pre><code>&gt;&gt; if print "This error seems good" [&lt;does it not?&gt;]
This error seems good
** Script Error: VOID! values are not conditionally true or false
** Where: if console
** Near: [... print "This error seems good" [&lt;does it not?&gt;] ~~]
</code></pre>
<p>And I think it's good that you don't get it accepted as a function argument by default...nor can you dereference a variable containing it by default.</p>
<p>But with NULL being used to unset variables, I kind of wonder:</p>
<pre><code>&gt;&gt; value: print "how much do we gain by stopping this assignment?"
how much do we gain by stopping this assignment?
** Script Error: value: is VOID!
** Where: console
** Near: [value: print "how much do we gain by stopping this assignme...
</code></pre>
<p>For access, you have the ability to say :VALUE and get it.  But for writing, you have to turn this into a SET/ANY.  That's inconvenient.</p>
<p>Any time you call DO on CODE that is arbitrary, you have to switch away from the use of a SET-WORD!...</p>
<pre><code>switch type of x: do code [
    void! [print "What a pain you can't get here without SET/ANY 'X DO CODE"]
    ...
]
</code></pre>
<h2>How often has this <em>actually helped anyone</em> vs. just being a PITA?</h2>
<p>I'm sure it's probably helped catch some mistake somewhere.  But my memories of it doing so are few and far between, while my memories of having to use SET/ANY when I didn't want to are pretty hard to count.</p>
<p>The issue is that if we take this away, we take away a tool for error locality.  Most notably things like:</p>
<pre><code> x: if 2 = 1 + 1 [select [a 10 b 20] 'c]  ; null gets VOID!-ified
</code></pre>
<p>You won't find out until you try to read X that you didn't get the value you meant, because NULL had to be reserved for the signal that the branch did not run.</p>
<p>This is all explained pretty well in <a href="https://forum.rebol.info/t/why-void-is-not-like-unset-and-why-its-more-ornery/947">"Why VOID! is not like UNSET! (and why its more ornery)"</a>.  But quoting myself:</p>
<blockquote>
<p><strong>A void! is a means of giving a hot potato back that is a warning about  <em>something</em> , but you don't want to force an error "in the moment"...in case the returned information wasn't going to be used anyway.</strong></p>
</blockquote>
<p>Is the assignment itself an important "hot potato" moment, or is that not one of the cases?  Do we really need to know that the X: assignment didn't go well <em>right then</em>?  What if the variable is never accessed (or if you have a <strong>if void? x: ...something...</strong> to handle it?</p>
<h2>Looking for any anecdotes...</h2>
<p>All I can think about is how annoying it is that I can't write generic code using <strong>X:</strong> and <strong>:X</strong> and trust the premise of symmetry and substitution.  That's the main anecdote I have.  I dislike what SET/ANY does to the elegance my generic code that is trying to work with any value...including VOID!.  And in a language where safety is not the raison d'etre, seeing that elegance lost is frustrating.</p>
<p>Taking away this mechanism would take away the <em>ability</em> to stop a plain SET-WORD! assignment of anything...they would all be legal...including NULLs.  But you could still stop it a lot of other places (function arguments by default, variable reads, and SET and GET without /ANY).  With the objectives of the language being what they are, should we just go ahead and allow it?</p>
<blockquote>
<p>Tangential thought: Maybe we can make <strong>[X]:</strong> have a different property, e.g. enforcing non-null values?  You can't put nulls in blocks.  So you'd have to say <strong>[X]: try null</strong> and get <strong>[_]</strong> as the result, vs. an error on <strong>[X]: null</strong>.  Or maybe <strong>[X]: null</strong> sets X to VOID! and evaluates to a block containing a void value?</p>
<p>(This would be going with the idea that SET-BLOCK! was part of some <a href="https://forum.rebol.info/t/multiple-return-values/1134">multi-return value scheme</a> instead of a pure synonym for SET of a BLOCK! as written today (which could be under another name, e.g. <strong>assign [a b] [1 2]</strong> giving a as 1 and b as 2.  Then SET could mean something else entirely when applied to blocks!)</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/when-has-stopping-void-or-old-unset-assignments-helped-you/1206/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/when-has-stopping-void-or-old-unset-assignments-helped-you/1206/1</link>
        <pubDate>Sat, 14 Sep 2019 23:06:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1206-1</guid>
        <source url="https://forum.rebol.info/t/when-has-stopping-void-or-old-unset-assignments-helped-you/1206.rss">When has Stopping VOID! (or old &quot;UNSET!&quot;) Assignments Helped You?</source>
      </item>
  </channel>
</rss>

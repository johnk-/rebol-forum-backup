<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>PARSE (and FIND) Behavior on Empty Series</title>
    <link>https://forum.rebol.info/t/parse-and-find-behavior-on-empty-series/1628</link>
    <description>Historically searching for empty series in a series would fail:

    rebol2&gt;&gt; find &quot;abc&quot; &quot;&quot;
    == none

This seems inconsistent with what it would seem you would want, e.g. in PARSE when a string is empty:

    &gt;&gt; parse &quot;abc&quot; [&quot;&quot; &quot;abc&quot;]
    == &quot;abc&quot;

Of course, when PARSE had the &quot;must make progress rule&quot; it wouldn&#39;t work.  But the fact that FIND didn&#39;t support it provided a reason why it wouldn&#39;t work even without that rule in place!

## Conceptually Why You Should Always FIND an Empty Series

You can think of a string as being any number of empty strings glued together...

    &gt;&gt; unspaced [&quot;&quot; &quot;&quot; &quot;&quot; &quot;a&quot; &quot;&quot; &quot;&quot; &quot;b&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;c&quot; &quot;&quot; &quot;&quot;]
    == &quot;abc&quot;

So it doesn&#39;t seem that strange to say that you can &quot;find&quot; an empty string at any point you wish to look.

(The same reasoning applies to finding empty blocks in blocks, etc.)

## Feature-Wise Why You Should Always FIND an Empty Series

It seems that the ability to uniquely express the intent of BLANK! vs. empty string gives FIND the ability to discern the two, offering a means of opting out (never find the target, always return null) -and- a means of opting in (always find the target, returning original series):

    &gt;&gt; find &quot;abc&quot; _
    ; null

    &gt;&gt; find &quot;abc&quot; &quot;&quot;
    == &quot;abc&quot;

## This Changes PARSE and FIND for the Better...

Red doesn&#39;t embrace the FIND feature:

    red&gt;&gt; find &quot;abc&quot; &quot;&quot;
    == none

But they do accept that &quot;&quot; is a match in PARSE:

    red&gt;&gt; parse &quot;abc&quot; [&quot;&quot; &quot;abc&quot;]
    == true

Which seems inconsistent.  Either there&#39;s an empty string you can match at the head of &quot;abc&quot;, or there isn&#39;t!

*This is another one of the benefits to implementing PARSE in usermode, and forming a consistent model across the routines.*</description>
    
    <lastBuildDate>Sun, 20 Jun 2021 17:34:42 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/parse-and-find-behavior-on-empty-series/1628.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>PARSE (and FIND) Behavior on Empty Series</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Historically searching for empty series in a series would fail:</p>
<pre><code>rebol2&gt;&gt; find "abc" ""
== none
</code></pre>
<p>This seems inconsistent with what it would seem you would want, e.g. in PARSE when a string is empty:</p>
<pre><code>&gt;&gt; parse "abc" ["" "abc"]
== "abc"
</code></pre>
<p>Of course, when PARSE had the "must make progress rule" it wouldn't work.  But the fact that FIND didn't support it provided a reason why it wouldn't work even without that rule in place!</p>
<h2>Conceptually Why You Should Always FIND an Empty Series</h2>
<p>You can think of a string as being any number of empty strings glued together...</p>
<pre><code>&gt;&gt; unspaced ["" "" "" "a" "" "" "b" "" "" "" "c" "" ""]
== "abc"
</code></pre>
<p>So it doesn't seem that strange to say that you can "find" an empty string at any point you wish to look.</p>
<p>(The same reasoning applies to finding empty blocks in blocks, etc.)</p>
<h2>Feature-Wise Why You Should Always FIND an Empty Series</h2>
<p>It seems that the ability to uniquely express the intent of BLANK! vs. empty string gives FIND the ability to discern the two, offering a means of opting out (never find the target, always return null) -and- a means of opting in (always find the target, returning original series):</p>
<pre><code>&gt;&gt; find "abc" _
; null

&gt;&gt; find "abc" ""
== "abc"
</code></pre>
<h2>This Changes PARSE and FIND for the Better...</h2>
<p>Red doesn't embrace the FIND feature:</p>
<pre><code>red&gt;&gt; find "abc" ""
== none
</code></pre>
<p>But they do accept that "" is a match in PARSE:</p>
<pre><code>red&gt;&gt; parse "abc" ["" "abc"]
== true
</code></pre>
<p>Which seems inconsistent.  Either there's an empty string you can match at the head of "abc", or there isn't!</p>
<p><em>This is another one of the benefits to implementing PARSE in usermode, and forming a consistent model across the routines.</em></p>
          <p><a href="https://forum.rebol.info/t/parse-and-find-behavior-on-empty-series/1628/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/parse-and-find-behavior-on-empty-series/1628/1</link>
        <pubDate>Sun, 20 Jun 2021 15:49:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1628-1</guid>
        <source url="https://forum.rebol.info/t/parse-and-find-behavior-on-empty-series/1628.rss">PARSE (and FIND) Behavior on Empty Series</source>
      </item>
  </channel>
</rss>

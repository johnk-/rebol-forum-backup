<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>MAKE-FILE and %% Unleashed: Time To Use It</title>
    <link>https://forum.rebol.info/t/make-file-and-unleashed-time-to-use-it/1398</link>
    <description>There&#39;s a lot that isn&#39;t known about how NewPath files are going to work.  But I&#39;m at the point where I think enough is known that it&#39;s time to start using it and get to pushing on its development.

This is the basic gist of the idea, showing the prototype MAKE-FILE and the [quoting shorthand **%%**](https://forum.rebol.info/t/the-newpath-finesse-make-file-lit/1386)

    &gt;&gt; extension: &quot;txt&quot;
    &gt;&gt; dir: %/home/test/

    &gt;&gt; make-file &#39;(dir)/subdir/foo.(extension)
    == %/home/test/subdir/foo.txt

    &gt;&gt; %% (dir)/subdir/foo.(extension)
    == %/home/test/subdir/foo.txt
 
It completely replaces the *extremely sketchy* historical &quot;pathing&quot; of a FILE! to produce a new FILE!:

    &gt;&gt; dir: %/home/test

    &gt;&gt; dir/subdir/foo  ; cases like this give no hint that it&#39;s a file
    == %/home/test/subdir/foo

It&#39;s bad for all sorts of reasons--like that you don&#39;t really know what **dir/2** should do (does it give the `#h` character, or `%/home/test/2` ?).  The slash handling mechanics were ad hoc, adding more variability to the process instead of more certainty.

Now it will be an error, and good riddance.

## Structure Means More Checks Possible

The hope of MAKE-FILE is not just to provide a representation that&#39;s nice to look at, but also one that can help you avoid mistakes that aren&#39;t caught by normal string operations.

For example:

    &gt;&gt; extension: &quot;txt/bad&quot;

    &gt;&gt; %% a/b.(extension)
    ** Error: Embedded / encountered inside filename component: &quot;txt/bad&quot;

There is no mechanism for silent tolerance of doubled slashes.  Instead, situations that generate doubled slashes are called out:

    &gt;&gt; base: %/home/test/

    &gt;&gt; %% [(base) /subdir]
    ** Error: Doubled / encountered while generating filename: /subdir

The code is a very rough prototype, **and the reason I want to push forward on it is that I want other people involved in designing it**.  Or at least throwing more situations at it so that we can figure out what protections offer good value propositions vs. just getting in the way.</description>
    
    <lastBuildDate>Thu, 12 Nov 2020 10:58:05 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/make-file-and-unleashed-time-to-use-it/1398.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>MAKE-FILE and %% Unleashed: Time To Use It</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There's a lot that isn't known about how NewPath files are going to work.  But I'm at the point where I think enough is known that it's time to start using it and get to pushing on its development.</p>
<p>This is the basic gist of the idea, showing the prototype MAKE-FILE and the <a href="https://forum.rebol.info/t/the-newpath-finesse-make-file-lit/1386">quoting shorthand <strong>%%</strong></a></p>
<pre><code>&gt;&gt; extension: "txt"
&gt;&gt; dir: %/home/test/

&gt;&gt; make-file '(dir)/subdir/foo.(extension)
== %/home/test/subdir/foo.txt

&gt;&gt; %% (dir)/subdir/foo.(extension)
== %/home/test/subdir/foo.txt
</code></pre>
<p>It completely replaces the <em>extremely sketchy</em> historical "pathing" of a FILE! to produce a new FILE!:</p>
<pre><code>&gt;&gt; dir: %/home/test

&gt;&gt; dir/subdir/foo  ; cases like this give no hint that it's a file
== %/home/test/subdir/foo
</code></pre>
<p>It's bad for all sorts of reasons--like that you don't really know what <strong>dir/2</strong> should do (does it give the <code>#h</code> character, or <code>%/home/test/2</code> ?).  The slash handling mechanics were ad hoc, adding more variability to the process instead of more certainty.</p>
<p>Now it will be an error, and good riddance.</p>
<h2>Structure Means More Checks Possible</h2>
<p>The hope of MAKE-FILE is not just to provide a representation that's nice to look at, but also one that can help you avoid mistakes that aren't caught by normal string operations.</p>
<p>For example:</p>
<pre><code>&gt;&gt; extension: "txt/bad"

&gt;&gt; %% a/b.(extension)
** Error: Embedded / encountered inside filename component: "txt/bad"
</code></pre>
<p>There is no mechanism for silent tolerance of doubled slashes.  Instead, situations that generate doubled slashes are called out:</p>
<pre><code>&gt;&gt; base: %/home/test/

&gt;&gt; %% [(base) /subdir]
** Error: Doubled / encountered while generating filename: /subdir
</code></pre>
<p>The code is a very rough prototype, <strong>and the reason I want to push forward on it is that I want other people involved in designing it</strong>.  Or at least throwing more situations at it so that we can figure out what protections offer good value propositions vs. just getting in the way.</p>
          <p><a href="https://forum.rebol.info/t/make-file-and-unleashed-time-to-use-it/1398/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/make-file-and-unleashed-time-to-use-it/1398/1</link>
        <pubDate>Thu, 12 Nov 2020 09:23:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1398-1</guid>
        <source url="https://forum.rebol.info/t/make-file-and-unleashed-time-to-use-it/1398.rss">MAKE-FILE and %% Unleashed: Time To Use It</source>
      </item>
  </channel>
</rss>

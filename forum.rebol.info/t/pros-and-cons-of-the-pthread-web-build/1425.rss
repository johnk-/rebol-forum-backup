<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Pros and Cons of the Pthread Web Build</title>
    <link>https://forum.rebol.info/t/pros-and-cons-of-the-pthread-web-build/1425</link>
    <description>So... browsers aren&#39;t making it easy to use `SharedArrayBuffer`--a requirement for the pthreads web build.  This is due to something called COOP/COEP.  It&#39;s making what was already some tough work to turn on threads even tougher:

[https://web.dev/coop-coep/](https://web.dev/coop-coep/)

My ranting response on the topic:

&gt; (What I see is a lot of half-baked security theater, where the answer is putting flags on things saying *&quot;yes, I meant to use that resource...the one I said to use&quot;*.  You&#39;re not able to put this canon list of &quot;I meant to do that&quot; in a nice central location...instead you have to weave the list around piecemeal in various places that express the flag (sometimes [in different cases](https://stackoverflow.com/a/28907499)).  Then some places just haven&#39;t been parameterized to allow the flag, which breaks the whole thing in a frustrating way.)

At one time, the pthreads build was quite a lot faster than the &quot;emterpreter&quot; build.  But emterpreter was replaced with the much superior &quot;asyncify&quot; method (if you want to be more specific actually version 2 of it, called &quot;bsyncify&quot;).  So right now the performance difference is negligible...and the principal advantage of the pthreads build is that the .wasm generated is less than half the size of the asyncify build.

*But* if stackless is implemented (which I intend), even asyncify should not be necessary...because we&#39;d be able to unwind our own stack.  We wouldn&#39;t need asyncify&#39;s magical backbone woven into the source that assists in teleporting out-of and back-into any point of the evaluator.  So the size difference would go in the reverse direction: pretty much all of the pthreads extra hassle would be make-work, and all those files and code would make it the bigger build.

**I&#39;m seriously considering simplifying life and the build/test matrix by dropping the pthreads build.** I believed it would be available in all browsers by default, and that part is shaping up to be true.  But what I didn&#39;t anticipate was the mire of serving concerns that makes it such a hassle--it won&#39;t get better, and it may get worse.

Whether it&#39;s jsfiddle or any other page where you can&#39;t bend every server in the chain to your will...you just couldn&#39;t use the pthreads.  We&#39;re going to need a non-pthreads build.  And if we make that the one build that we focus on, deploy, and test...it&#39;s just easier.

**Remember that pthreads was only a mechanical tool for switching stacks, it had nothing to do with concurrency.**  You can&#39;t make a single-threaded interpreter suddenly able to run in parallel by linking it to a thread library.  We were only running one thread at a time: one for JavaScript, and one for Ren-C...so they could pass off to each other without losing their place in what they were doing.

This isn&#39;t to be confused with features related to *concurrency*...which *is* something being looked to.  But that would be with techniques like &quot;green threading&quot;, that don&#39;t actually ever have multiple CPU cores potentially competing at a simultaneous moment for the same byte of memory.

JavaScript doesn&#39;t have &quot;threads&quot; either: it has &quot;workers&quot;...which are isolated from each other in most every way, to the point you can just about think of them as separate processes that just pass messages back and forth--without sharing data structures.  The single example of them *actually* sharing a data structure (SharedArrayBuffer) has created a lot of hullaballoo; getting disabled due to Spectre, and quarantined with all kinds of crazy flags that make it rather difficult to use.

**For the sake of sanity and ease of deployment, I&#39;m leaning to the idea of killing off the pthreads build.**  Asyncify changed the game by closing the performance gap, and Stackless will be an even better answer.  Let&#39;s make life (and testing) easier.

---

## One Lingering Thought...

The thing that pthreads actually gives us is not the ability to run Ren-C code in parallel, but to run Ren-C code in parallel with JavaScript code.  *We weren&#39;t doing that* with it.  But theoretically we could have.

We could still do it...if you load the library into a worker.  Then your main thread is all JavaScript, posting requests in JavaScript format that are picked up by the JavaScript in the worker...which then makes calls to the interpreter and proxies the answers back.

But this means the Rebol code would not have access to the DOM, and that&#39;s not a very interesting working model.  (That would be an issue anytime you are trying to run code concurrently...only one thread can access the DOM.)

Then another thing pthreads gives that stackless does not is the ability to &quot;signal&quot; code to wake up, instead of using a polling strategy.  That might sound more efficient, but unfortunately a of time when you look under the hood at how these &quot;signals&quot; are implemented actually involves a bunch of timeouts that are isomorphic to polling.

**I&#39;m still hedging a bit.  What I&#39;ll probably do is start ripping out the pthreads code and then pause to reflect if I find anything and think &quot;hmm, that&#39;s valuable and would be hard to put back&quot;.**</description>
    
    <lastBuildDate>Sat, 05 Dec 2020 22:16:36 +0000</lastBuildDate>
    <category>Emscripten</category>
    <atom:link href="https://forum.rebol.info/t/pros-and-cons-of-the-pthread-web-build/1425.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Pros and Cons of the Pthread Web Build</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The deed is done, here's the change:</p>
<aside class="onebox githubcommit">
  <header class="source">
      <a href="https://github.com/metaeducation/ren-c/commit/be75335267836631ba24e645de77dedbedfae31e" target="_blank" rel="noopener">github.com/metaeducation/ren-c</a>
  </header>
  <article class="onebox-body">
    <div class="github-row">
  <div class="github-icon-container" title="Commit">
    <svg width="60" height="60" class="github-icon" viewBox="0 0 14 16" aria-hidden="true"><path d="M10.86 7c-.45-1.72-2-3-3.86-3-1.86 0-3.41 1.28-3.86 3H0v2h3.14c.45 1.72 2 3 3.86 3 1.86 0 3.41-1.28 3.86-3H14V7h-3.14zM7 10.2c-1.22 0-2.2-.98-2.2-2.2 0-1.22.98-2.2 2.2-2.2 1.22 0 2.2.98 2.2 2.2 0 1.22-.98 2.2-2.2 2.2z"></path></svg>
  </div>

  <div class="github-info-container">
    <h4>
      <a href="https://github.com/metaeducation/ren-c/commit/be75335267836631ba24e645de77dedbedfae31e" target="_blank" rel="noopener">Eliminate the Pthread Build of Emscripten</a>
    </h4>

    <div class="github-info">
      <div class="date">
        committed <span class="discourse-local-date" data-format="ll" data-date="2020-12-05" data-time="20:36:57" data-timezone="UTC">08:36PM - 05 Dec 20 UTC</span>
      </div>

      <div class="user">
        <a href="https://github.com/hostilefork" target="_blank" rel="noopener">
          <img alt="hostilefork" src="https://avatars1.githubusercontent.com/u/20440?v=4" class="onebox-avatar-inline" width="20" height="20">
          hostilefork
        </a>
        
      </div>

      <div class="lines" title="changed 6 files with 202 additions and 644 deletions">
        <a href="https://github.com/metaeducation/ren-c/commit/be75335267836631ba24e645de77dedbedfae31e" target="_blank" rel="noopener">
          <span class="added">+202</span>
          <span class="removed">-644</span>
        </a>
      </div>
    </div>

  </div>
</div>


  <div class="github-row">
    <pre class="github-content" style="white-space: normal;">This retains the relevant code in load-r3.js (in case something
analogous comes up in the future). But it makes a commitment to...</pre>
  </div>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>It says "+202 / -644" and all the + are comments explaining what happened.  The real news story is the deletions in %mod-javascript.js, where all the thread code is removed, and almost as importantly the deletions in main.yml, where the <em>testing</em> is removed.  One build path and one binary has a very big value.</p>
<p>I did not get rid of the worker.js loading related code.  We may support pthreads for <em>other</em> reasons in the future...e.g. using a library that truly is concurrent code.  We're only axing it here for the foundational purpose of suspending the interpreter long enough to make JS calls and then resume it without skipping a beat.  Other motivators might have us loading C code built with pthreads... <em>we just wouldn't require it for console operation or other basic DOM manipulation</em>.</p>
<p>I know this is a sort of esoteric-sounding detail but it does have a really big impact.  When I talked about the importance of <a href="https://forum.rebol.info/t/switching-to-stackless-why-this-why-now/1247">"Switching to Stackless: Why This, Why Now"</a> it was precisely to inform this kind of issue.  We're gambling about what's going to be true a year from now, two years from now, and then beyond.  It's not easy.</p>
          <p><a href="https://forum.rebol.info/t/pros-and-cons-of-the-pthread-web-build/1425/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/pros-and-cons-of-the-pthread-web-build/1425/2</link>
        <pubDate>Sat, 05 Dec 2020 22:16:36 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1425-2</guid>
        <source url="https://forum.rebol.info/t/pros-and-cons-of-the-pthread-web-build/1425.rss">Pros and Cons of the Pthread Web Build</source>
      </item>
      <item>
        <title>Pros and Cons of the Pthread Web Build</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So... browsers aren't making it easy to use <code>SharedArrayBuffer</code>--a requirement for the pthreads web build.  This is due to something called COOP/COEP.  It's making what was already some tough work to turn on threads even tougher:</p>
<p><a href="https://web.dev/coop-coep/">https://web.dev/coop-coep/</a></p>
<p>My ranting response on the topic:</p>
<blockquote>
<p>(What I see is a lot of half-baked security theater, where the answer is putting flags on things saying <em>"yes, I meant to use that resource...the one I said to use"</em>.  You're not able to put this canon list of "I meant to do that" in a nice central location...instead you have to weave the list around piecemeal in various places that express the flag (sometimes <a href="https://stackoverflow.com/a/28907499">in different cases</a>).  Then some places just haven't been parameterized to allow the flag, which breaks the whole thing in a frustrating way.)</p>
</blockquote>
<p>At one time, the pthreads build was quite a lot faster than the "emterpreter" build.  But emterpreter was replaced with the much superior "asyncify" method (if you want to be more specific actually version 2 of it, called "bsyncify").  So right now the performance difference is negligible...and the principal advantage of the pthreads build is that the .wasm generated is less than half the size of the asyncify build.</p>
<p><em>But</em> if stackless is implemented (which I intend), even asyncify should not be necessary...because we'd be able to unwind our own stack.  We wouldn't need asyncify's magical backbone woven into the source that assists in teleporting out-of and back-into any point of the evaluator.  So the size difference would go in the reverse direction: pretty much all of the pthreads extra hassle would be make-work, and all those files and code would make it the bigger build.</p>
<p><strong>I'm seriously considering simplifying life and the build/test matrix by dropping the pthreads build.</strong> I believed it would be available in all browsers by default, and that part is shaping up to be true.  But what I didn't anticipate was the mire of serving concerns that makes it such a hassle--it won't get better, and it may get worse.</p>
<p>Whether it's jsfiddle or any other page where you can't bend every server in the chain to your will...you just couldn't use the pthreads.  We're going to need a non-pthreads build.  And if we make that the one build that we focus on, deploy, and test...it's just easier.</p>
<p><strong>Remember that pthreads was only a mechanical tool for switching stacks, it had nothing to do with concurrency.</strong>  You can't make a single-threaded interpreter suddenly able to run in parallel by linking it to a thread library.  We were only running one thread at a time: one for JavaScript, and one for Ren-C...so they could pass off to each other without losing their place in what they were doing.</p>
<p>This isn't to be confused with features related to <em>concurrency</em>...which <em>is</em> something being looked to.  But that would be with techniques like "green threading", that don't actually ever have multiple CPU cores potentially competing at a simultaneous moment for the same byte of memory.</p>
<p>JavaScript doesn't have "threads" either: it has "workers"...which are isolated from each other in most every way, to the point you can just about think of them as separate processes that just pass messages back and forth--without sharing data structures.  The single example of them <em>actually</em> sharing a data structure (SharedArrayBuffer) has created a lot of hullaballoo; getting disabled due to Spectre, and quarantined with all kinds of crazy flags that make it rather difficult to use.</p>
<p><strong>For the sake of sanity and ease of deployment, I'm leaning to the idea of killing off the pthreads build.</strong>  Asyncify changed the game by closing the performance gap, and Stackless will be an even better answer.  Let's make life (and testing) easier.</p>
<hr>
<h2>One Lingering Thought...</h2>
<p>The thing that pthreads actually gives us is not the ability to run Ren-C code in parallel, but to run Ren-C code in parallel with JavaScript code.  <em>We weren't doing that</em> with it.  But theoretically we could have.</p>
<p>We could still do it...if you load the library into a worker.  Then your main thread is all JavaScript, posting requests in JavaScript format that are picked up by the JavaScript in the worker...which then makes calls to the interpreter and proxies the answers back.</p>
<p>But this means the Rebol code would not have access to the DOM, and that's not a very interesting working model.  (That would be an issue anytime you are trying to run code concurrently...only one thread can access the DOM.)</p>
<p>Then another thing pthreads gives that stackless does not is the ability to "signal" code to wake up, instead of using a polling strategy.  That might sound more efficient, but unfortunately a of time when you look under the hood at how these "signals" are implemented actually involves a bunch of timeouts that are isomorphic to polling.</p>
<p><strong>I'm still hedging a bit.  What I'll probably do is start ripping out the pthreads code and then pause to reflect if I find anything and think "hmm, that's valuable and would be hard to put back".</strong></p>
          <p><a href="https://forum.rebol.info/t/pros-and-cons-of-the-pthread-web-build/1425/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/pros-and-cons-of-the-pthread-web-build/1425/1</link>
        <pubDate>Fri, 04 Dec 2020 18:34:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1425-1</guid>
        <source url="https://forum.rebol.info/t/pros-and-cons-of-the-pthread-web-build/1425.rss">Pros and Cons of the Pthread Web Build</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>There Came an ECHO</title>
    <link>https://forum.rebol.info/t/there-came-an-echo/1722</link>
    <description>I just fixed a bug in Sea of Words...which hopefully means it&#39;s a little more trustworthy.

It seemed like a good time to add the ECHO feature I&#39;ve talked about.

    &gt;&gt; echo It&#39;s this feature, which I&#39;ve described in the past.
    It&#39;s this feature, which I&#39;ve described in the past.

ECHO is a variadic function which processes what you pass it to the end of line.  If you prefer, you can also use a BLOCK!.

    &gt;&gt; echo [A block allows
        you to put an arbitrary number
        of newlines]
    A block allows you to put an arbitrary number of newlines

    &gt;&gt; echo [Or two echos] echo [on the same line]
    Or two echos
    on the same line

There is a variable substitution mechanism so you can use @ to point out variables or expressions.

    &gt;&gt; x: 10
    &gt;&gt; echo The value is @x
    The value is 10

    &gt;&gt; echo The doubled value is @(x * 2)
    The doubled value is 20

## It&#39;s Shorter!

Can&#39;t argue against that.

    print [&quot;You have written&quot; num-lines &quot;lines of code.&quot;]

    echo [You have written @num-lines lines of code.]

    echo You have written @num-lines of code.

## The API Benefits

Not needing quotes helps API calls:

    rebElide(&quot;print [{You have written}&quot;, num_lines, &quot;{lines of code.}]&quot;);

    rebElide(&quot;echo [You have written&quot;, num_lines, &quot;lines of code.]&quot;);

    rebElide(&quot;echo You have written&quot;, num_lines, &quot;lines of code.&quot;);

It&#39;s the kind of change that opens up the choose-your-own-adventure of syntax to let you build a system more like bash, or less like bash.  It&#39;s an important decoupling of the use of words from the creation of variables.  So, onward.</description>
    
    <lastBuildDate>Sun, 12 Dec 2021 13:40:25 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/there-came-an-echo/1722.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>There Came an ECHO</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1722">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>print ["You have written" num-lines "lines of code."]

echo [You have written @num-lines lines of code.]

echo You have written @num-lines of code.
</code></pre>
</blockquote>
</aside>
<p>In thinking about the variable arity question...as well as string interpolation...I started wondering if maybe giving ECHO a string should imply interpolation.</p>
<p>Look at this line from the HTTP server stress test:</p>
<pre><code>print [{CLIENT} n {: Will read} partial {/} total {bytes}]
</code></pre>
<p>This isn't really even the spacing that I wanted.  Getting that would be laborious:</p>
<pre><code>print [
   {CLIENT} unspaced [n {:}]
   {Will read} unspaced [partial {/} total] {bytes}
]
</code></pre>
<p>I've made this a little better with GET-BLOCK!s reducing and the resulting BLOCK! implying unspacedness:</p>
<pre><code>print [
   {CLIENT} :[n {:}] {Will read} :[partial {/} total] {bytes}
]
</code></pre>
<p>That's cool when you're building code up programmatically, but <em>this is a statically templated string</em>.  Being forced to be messier than that sucks.</p>
<h2><strong><a href="https://forum.rebol.info/t/could-strings-have-context/587/10">But With Interpolation...</a></strong></h2>
<pre><code>echo {CLIENT $n: Will read $partial/$total bytes}
</code></pre>
<p>I kind of like the idea of defaulting to saying that if you don't use delimiters like $(...) then it assumes you're using a simple WORD!, and it wouldn't try to read any further than that.  So it would see dots or slashes as terminal--as above.  But you could put things like field selections or function calls in a group, like $(now/hour) for example.</p>
<p>Anyway, the concept here would be that if you give ECHO a string it would act like PRINT INTERPOLATE of whatever that string was.  And then, if you give it a BLOCK! it would have the literalness that helps API clients splice values directly.</p>
<p>What's a bit annoying here is that being able to actually have <code>$XXX</code> access environment variables is extremely handy in scripting.  So maybe we could say <code>@XXX</code> are language variables and <code>$XXX</code> are environment variables?  :-/  I don't know.</p>
          <p><a href="https://forum.rebol.info/t/there-came-an-echo/1722/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/there-came-an-echo/1722/8</link>
        <pubDate>Sun, 12 Dec 2021 01:43:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1722-8</guid>
        <source url="https://forum.rebol.info/t/there-came-an-echo/1722.rss">There Came an ECHO</source>
      </item>
      <item>
        <title>There Came an ECHO</title>
        <dc:creator><![CDATA[Cplus]]></dc:creator>
        <description><![CDATA[
            <p>Ah well, no matter.</p>
<p>It is perhaps an inevitable consequence of the increase in complexity from rebol-2 that simple debugging techniques are no longer viable.</p>
          <p><a href="https://forum.rebol.info/t/there-came-an-echo/1722/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/there-came-an-echo/1722/7</link>
        <pubDate>Sun, 03 Oct 2021 07:35:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1722-7</guid>
        <source url="https://forum.rebol.info/t/there-came-an-echo/1722.rss">There Came an ECHO</source>
      </item>
      <item>
        <title>There Came an ECHO</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="Cplus" data-post="5" data-topic="1722">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/letter_avatar_proxy/v4/letter/c/0ea827/40.png" class="avatar"> Cplus:</div>
<blockquote>
<p>commenting out one of the two lines below acts to turn debug printing on or off:</p>
</blockquote>
</aside>
<p>If what you pass to PFD is not a literal block or text, but an expression that calculates a block or text...that expression will be evaluated.  It might just be wasteful calculation that gets discarded, or maybe it has side effects.  Maybe you want those side effects when debugging is enabled or perhaps not, but it's dicey.</p>
<p>If inline debug printing interest you, the development of invisibles and <strong><code>--</code></strong> for dumping might be worth looking at.  The idea is years old now and could use some updating, but completely vanishing expressions are still very versatile:</p>
<aside class="quote quote-modified" data-post="1" data-topic="909">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar">
    <a href="https://forum.rebol.info/t/taking-a-thrilling-tour-through-the-dump/909">Taking a Thrilling Tour Through the DUMP</a> <a class="badge-wrapper  bullet" href="/c/usage/feature-discover/24"><span class="badge-category-parent-bg" style="background-color: #3AB54A;"></span><span class="badge-category-bg" style="background-color: #3AB54A;"></span><span style="" data-drop-close="true" class="badge-category clear-badge" title="Rebol and Red have quite a few cool features - this is PR for them.">Feature Discover</span></a>
  </div>
  <blockquote>
    DUMP is a vastly enhanced variation of the ?? operator in R3-Alpha.  If you weren't familiar with that, it was a simple spin on PROBE that quoted its argument and would GET it.  Like PROBE, it would return that same result for chaining.  <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/mezz/base-debug.r#L27" rel="nofollow noopener">There's not much to it</a>, and its only "power user" feature was the ability to take a BLOCK!, and for some reason return that block unevaluated: 
r3-alpha&gt;&gt; x: 10 y: 20

r3-alpha&gt;&gt; ?? x
x: 10
== 10

r3-alpha&gt;&gt; ?? [x y] 
x: 10  y: 20  
== [x y]

Now before you keepâ€¦
  </blockquote>
</aside>

          <p><a href="https://forum.rebol.info/t/there-came-an-echo/1722/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/there-came-an-echo/1722/6</link>
        <pubDate>Sat, 02 Oct 2021 16:36:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1722-6</guid>
        <source url="https://forum.rebol.info/t/there-came-an-echo/1722.rss">There Came an ECHO</source>
      </item>
      <item>
        <title>There Came an ECHO</title>
        <dc:creator><![CDATA[Cplus]]></dc:creator>
        <description><![CDATA[
            <p>Ah well, With Print, commenting out one of the two lines below acts to turn debug printing on or off:</p>
<pre><code>pfd: :print ; print for debug on
pfd: :none  ; print for debug off
</code></pre>
<p>In use:</p>
<pre><code>pfd "routine entered"
pfd ["counter is" c-count]
</code></pre>
<p>Echo would appear harder to incorporate in a debugging repertoire.</p>
          <p><a href="https://forum.rebol.info/t/there-came-an-echo/1722/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/there-came-an-echo/1722/5</link>
        <pubDate>Sat, 02 Oct 2021 16:25:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1722-5</guid>
        <source url="https://forum.rebol.info/t/there-came-an-echo/1722.rss">There Came an ECHO</source>
      </item>
      <item>
        <title>There Came an ECHO</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Hello, <a class="mention" href="/u/cplus">@Cplus</a>.  Welcome... and please do feel free to introduce your background and interests on <strong><a href="https://forum.rebol.info/c/introductions/46">the Introductions Category</a></strong>...</p>
<blockquote>
<p>How does ECHO work when debugging is complete and the line is added at the start:</p>
<pre><code>echo: :none ; disable debugging print lines
</code></pre>
</blockquote>
<p>You can't really replace a function with NONE in the general case in order to make it a no-op, and if it evaluated its arguments you can't make that a no-op in the general case.  <em>(Weird attempts to calculate how much to skip over run afoul of cases where the evaluations being skipped would affect the arity of subsequent things you're skipping.)</em></p>
<p>So if you wish to leave a callsite untouched but change the definition, you need something that will mirror the interface of the thing you're replacing.  That will always involve some attention to what the old parameters were.  But it's a good point that variadic interfaces are harder to clone.</p>
<p>For a function like ECHO, one avenue of attack could be to say that ECHO is actually a specialization of something like ECHO* which takes a destination to write to:</p>
<pre><code>echo: specialize :echo* [where: system.ports.stdout]
</code></pre>
<p>So then, when you get in this situation where you want to "redirect to /dev/null" you'd have some way of saying that:</p>
<pre><code>echo: specialize :echo [where: #]
</code></pre>
<p>The reason I chose # there is due to precedent for "opting in" to things but throwing them out:</p>
<pre><code>&gt;&gt; var: #

&gt;&gt; set var 10
== 10  ; doesn't error, but doesn't actually set anything
</code></pre>
<p>Being a representation of ASCII's NUL (0) it's a bit of a pun on "/dev/null":</p>
<pre><code>&gt;&gt; append #{ABCD} #
== #{ABCD00}
</code></pre>
<p>But there are other reasons why it makes a good choice for this purpose...specifically in how it relates to <a href="https://forum.rebol.info/t/sending-values-into-a-blackhole/1347">multiple return values</a>.</p>
<p>Maybe that's all interesting--or maybe it makes you sorry you asked.  Hopefully the former. <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://forum.rebol.info/t/there-came-an-echo/1722/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/there-came-an-echo/1722/4</link>
        <pubDate>Sat, 02 Oct 2021 11:27:59 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1722-4</guid>
        <source url="https://forum.rebol.info/t/there-came-an-echo/1722.rss">There Came an ECHO</source>
      </item>
      <item>
        <title>There Came an ECHO</title>
        <dc:creator><![CDATA[Cplus]]></dc:creator>
        <description><![CDATA[
            <p>How does ECHO work when debugging is complete and the line is added at the start:</p>
<pre><code>echo: :none ; disable debugging print lines
</code></pre>
<p>....</p>
<pre><code>echo It's this feature, which I've described in the past.  ; should now have no effects or side-effects</code></pre>
          <p><a href="https://forum.rebol.info/t/there-came-an-echo/1722/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/there-came-an-echo/1722/3</link>
        <pubDate>Sat, 02 Oct 2021 09:51:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1722-3</guid>
        <source url="https://forum.rebol.info/t/there-came-an-echo/1722.rss">There Came an ECHO</source>
      </item>
      <item>
        <title>There Came an ECHO</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>Only downside is for use in oneliners that will need a newline after what is to be echoed. For every other use it looks perfectly fine!</p>
          <p><a href="https://forum.rebol.info/t/there-came-an-echo/1722/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/there-came-an-echo/1722/2</link>
        <pubDate>Sun, 19 Sep 2021 20:36:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1722-2</guid>
        <source url="https://forum.rebol.info/t/there-came-an-echo/1722.rss">There Came an ECHO</source>
      </item>
      <item>
        <title>There Came an ECHO</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I just fixed a bug in Sea of Words...which hopefully means it's a little more trustworthy.</p>
<p>It seemed like a good time to add the ECHO feature I've talked about.</p>
<pre><code>&gt;&gt; echo It's this feature, which I've described in the past.
It's this feature, which I've described in the past.
</code></pre>
<p>ECHO is a variadic function which processes what you pass it to the end of line.  If you prefer, you can also use a BLOCK!.</p>
<pre><code>&gt;&gt; echo [A block allows
    you to put an arbitrary number
    of newlines]
A block allows you to put an arbitrary number of newlines

&gt;&gt; echo [Or two echos] echo [on the same line]
Or two echos
on the same line
</code></pre>
<p>There is a variable substitution mechanism so you can use @ to point out variables or expressions.</p>
<pre><code>&gt;&gt; x: 10
&gt;&gt; echo The value is @x
The value is 10

&gt;&gt; echo The doubled value is @(x * 2)
The doubled value is 20
</code></pre>
<h2>It's Shorter!</h2>
<p>Can't argue against that.</p>
<pre><code>print ["You have written" num-lines "lines of code."]

echo [You have written @num-lines lines of code.]

echo You have written @num-lines of code.
</code></pre>
<h2>The API Benefits</h2>
<p>Not needing quotes helps API calls:</p>
<pre><code>rebElide("print [{You have written}", num_lines, "{lines of code.}]");

rebElide("echo [You have written", num_lines, "lines of code.]");

rebElide("echo You have written", num_lines, "lines of code.");
</code></pre>
<p>It's the kind of change that opens up the choose-your-own-adventure of syntax to let you build a system more like bash, or less like bash.  It's an important decoupling of the use of words from the creation of variables.  So, onward.</p>
          <p><a href="https://forum.rebol.info/t/there-came-an-echo/1722/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/there-came-an-echo/1722/1</link>
        <pubDate>Sun, 19 Sep 2021 17:05:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1722-1</guid>
        <source url="https://forum.rebol.info/t/there-came-an-echo/1722.rss">There Came an ECHO</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Thought that Won&#39;t Go Away: @ acting as LIT-WORD! acts?</title>
    <link>https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908</link>
    <description>&gt; **UPDATE:** We do now have a datatype for @WORD, @PA/TH, @(GR O UP), and @[BL O CK].  It&#39;s being [applied in creative ways as an *irreducible* type](https://forum.rebol.info/t/word-some-path-some-group-and-some-block/1125), but it is not the means for *quoting*, which remains the historical tick mark...which has been [generalized to any number of levels](https://forum.rebol.info/t/quoted-arrives-formerly-known-as-lit-bit/995) in a relatively efficient fashion.  It may--however--take the *name* LIT-WORD!, LIT-PATH!, LIT-GROUP!, and LIT-BLOCK! away from the QUOTED! types...just not the behavior.

---

Today it&#39;s not legal to write `@foo` or `@foo/bar` in code.  But people want it, and it&#39;s legal in Red.  This brings us to the question of what the evaluator behavior of such a thing will be in Ren-C.

Something I haven&#39;t been able to shake since the beginning of seeing the usage of apostrophe for LIT-WORD! is that it is *too slight* for something as important as it is.  There&#39;s a big difference between `foo` and `&#39;foo` but it&#39;s rather hard to see.

The rise of the idea of using apostrophes purposefully in names also throws in a wrench.  Not only is there `isn&#39;t` coming very soon to wide use, but I do kind of like the mathematical convention of ticking apostrophes on the tail of things to make &quot;derived&quot; versions of them (`f`, `f&#39;`, `f&#39;&#39;`)

    block: [isn&#39;t &quot;Hello&quot;]
    switch first block [
        &#39;isn&#39;t [print &quot;This runs&quot;]
    ]

    foo&#39;: specialize &#39;f [arg1: 10]
    foo&#39;&#39;: specialize &#39;f&#39; [arg2: 20]
    action: get &#39;f&#39;&#39;

What if the evaluator treated @ like it treats apostrophes today?

    block: [isn&#39;t &quot;Hello&quot;]
    switch first block [
        @isn&#39;t [print &quot;This runs&quot;]
    ]

    f&#39;: specialize @f [arg1: 10]
    f&#39;&#39;: specialize @f&#39; [arg2: 20]
    action: get @f&#39;&#39;

While it is &quot;blocky&quot;, I feel there&#39;s something more &quot;solid&quot; about it.

## @foo has to be &quot;wordlike&quot; anyway, for FAIL

The idea of &quot;follow this link, to a word&quot; being the meaning of @ is something I am eager to use with `&lt;skip&gt;`-able parameters for FAIL, to say where an error should be reported.  (so indicate the callsite, instead of where the fail is).

Today:

    foo: function [number] [
        if number &gt; 1020 [fail/where &quot;Value is too large&quot; &#39;number]
    ]

Soon:

    foo: function [number] [
        if number &gt; 1020 [fail @number &quot;Value is too large&quot;]
    ]

## This would rule out EMAIL! unification

The evaluator goes by type, so the quirky-and-not-completely-figured out [unified handle! proposal](https://forum.rebol.info/t/handle-cdata-c-data-and-cfunction-c-function/683) would have to be scrapped.  @foo would be a LIT-WORD!, @foo/bar would be a LIT-PATH!.

## It would also help with things like LIT-GROUP!s

If you look at something like:

    code: &#39;(
        #foo [baz bar]
        whole bunch of stuff ...
    )

That super-lightweight apostrophe is easy to miss.  Compare with:

    code: @(
        #foo [baz bar]
        whole bunch of stuff ...
    )

## It is slightly more labor to enter on most keyboards

I&#39;m not sure how much of a concern it is, in the sense of I don&#39;t know how many LIT-WORD!s people have to enter (compared to `+`, or `{` or other shifted characters in various hard to reach places).  They&#39;re used often, but not that often.

## Leading apostrophe compatibility would be needed for redbol

I&#39;m fairly aware there&#39;s going to need to be some kind of runtime switches to enable wider redbol compatibility. Continuing to treat leading apostrophes as LIT-WORD!s would be a part of that.

But in the near term, there&#39;d not be any specific pressure to retake &#39;foo and &#39;foo/bar.  I&#39;m not sure exactly what they&#39;d be used for once degrading to a normal word character:

    &#39;foo: chain [foo | function [x] [x + 1]]
    &#39;&#39;foo: specialize @&#39;foo [arg2: 20]

But whatever they&#39;re used for &quot;meatier&quot; at symbol makes it viable, and helps differentiate from `&#39;&#39;foo` being a lit-word whose spelling is `&#39;foo` :-/

## My other idea variant was *FAR* more radical

The other thought I had when first questioning `&#39;`  was what if double quotes weren&#39;t used for strings, but for quoting arbitrary material literally:

    block: [isn&#39;t {Hello}]

    switch first block [
        &quot;isn&#39;t&quot; [print {This runs}]
    ]

It would look better when quoting SET-WORD!s as `&quot;foo:&quot;`, and provide clearer and more visible delimiting on GROUP!s:

    code: &quot;(
        #foo [baz bar]
        whole bunch of stuff ...
    )&quot;

Because it would be part of a paired delimiter, you wouldn&#39;t have to worry about nested quoted material.

While this is sort of &quot;interesting&quot; it&#39;s *completely* incompatible.  It makes you type two delimiters when a common case only required one.  And from my experiments trying using only braced-strings to see if quotes could be freed up for something else, I found the braces were far too heavy when used for *every* string. 
 Plus the presence of two styles letting you conveniently have things like a string with a single brace `&quot;{&quot;`.

So I dropped that one, but have kept the `@` idea consistently in mind.  I&#39;m feeling pretty serious about trying it.  Any thoughts?</description>
    
    <lastBuildDate>Fri, 10 Jul 2020 00:16:12 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Thought that Won&#39;t Go Away: @ acting as LIT-WORD! acts?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="3" data-topic="908">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Whatever comes of @, I am eager to see it used for "pointing at":</p>
<pre><code class="lang-auto"> func [param] [fail "An error which indicates this line"]
 func [param] [fail @param "An error which indicates the callsite"]
</code></pre>
</blockquote>
</aside>
<p>With the existence of <a href="https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187">modal parameters</a>, and the likelihood of @ becoming interpreted as <a href="https://forum.rebol.info/t/the-typeset-representation-problem/1300">datatypes and "type functions"</a>, not to mention coming shorthands like <strong>if condition <span class="mention">@var</span></strong>... I think the "pointing at" meaning is too overloaded.  Although the data type itself is inert in the evaluator, you start thinking it's going to <em>do something</em>.</p>
<p>So I've <a href="https://github.com/metaeducation/ren-c/commit/0a70284f41aa5dff4f936615c8491bbd0893b311" rel="nofollow noopener">backed this out</a>, and gone back to using plain WORD! for the skippable "blame" parameter.</p>
<pre><code>func [param] [fail "An error which indicates this line"]
func [param] [fail 'param "An error which indicates the callsite"]
func [param] [fail 'param]  ; just blame the parameter as being bad at callsite
func [param] [fail]  ; just fail.  (blame is &lt;skip&gt;pable, reason is &lt;end&gt;able)</code></pre>
          <p><a href="https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908/10</link>
        <pubDate>Fri, 10 Jul 2020 00:10:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-908-10</guid>
        <source url="https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908.rss">The Thought that Won&#39;t Go Away: @ acting as LIT-WORD! acts?</source>
      </item>
      <item>
        <title>The Thought that Won&#39;t Go Away: @ acting as LIT-WORD! acts?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've buried the hatchet, and apostrophe has been finally accepted, for the purpose it was originally intended.</p>
<p>The acceptance is based on three premises.  First, to accept apostrophe's slight appearance as a benefit.  In <a href="https://chat.stackoverflow.com/transcript/message/44949299#44949299" rel="nofollow noopener">@rgchris's words</a>:</p>
<blockquote>
<p><em>"I am a member of the apostrophe fan club--I think its inherent discretion is part of what makes Rebol a more elegant language."</em></p>
</blockquote>
<p>Secondly, to get a shorter way to make a literal value in source.  We now use LIT instead of QUOTE.</p>
<pre><code> if word = lit isn't [...]
</code></pre>
<p>It may be that even the quoted values could find an alternate rendering...like how <strong>"^""</strong> will be picked to render as <strong>{"}</strong> by molding.  So perhaps <strong><code>'isn't</code></strong> or <strong><code>''double-quoted-double-primed''</code></strong> could have some options too.</p>
<p>Thirdly, stop using WORD! for enumerations.  If you used something weightier like an ISSUE!, the fact that apostrophe is so skinny wouldn't come up.</p>
<pre><code> switch mode [
     'read [print "too skinny!"]
     #read [print "better..."]
     &lt;read&gt; [print "also better..."]
     %read [print "fine too."]
     @read [print "coming someday..."]
 ]
</code></pre>
<p>If you only use words when you need evaluation, you'll need escaping less.  And you'll be doing yourself a favor in COMPOSE situations where you won't constantly have to be worrying about the word getting its quote knocked off and then evaluating in some other situation.</p>
<hr>
<p>The full post announcing the "finalized" (cough) generic quoting mechanism is here:</p>
<aside class="quote quote-modified" data-post="1" data-topic="995">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar">
    <a href="https://forum.rebol.info/t/quoted-arrives-formerly-known-as-lit-bit/995">QUOTED! arrives (formerly known as "lit bit")</a> <a class="badge-wrapper  bullet" href="/c/usage/feature-discover"><span class="badge-category-parent-bg" style="background-color: #3AB54A;"></span><span class="badge-category-bg" style="background-color: #3AB54A;"></span><span style="" data-drop-close="true" class="badge-category clear-badge" title="Rebol and Red have quite a few cool features - this is PR for them.">Feature Discover</span></a>
  </div>
  <blockquote>
    I'm pleased to say that the day has come that you can use apostrophe (sigh, apostrophe) to escape any value...not just WORD! and PATH!.  And since I said any value, that means you can also quote quoted values...as deeply as you like! 
&gt;&gt; '(1 + 2)
== (1 + 2)

&gt;&gt; ''(1 + 2)
== '(1 + 2)

&gt;&gt; quoted? first [''{double quoted text!}]
== #[true]

&gt;&gt; quotes of first ['''''''''''''''''&lt;whoa!&gt;]
== 17

It opens up a whole new box of parts for dialecting, and makes your every day code shorter and clearer (whe…
  </blockquote>
</aside>

          <p><a href="https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908/9</link>
        <pubDate>Sat, 05 Jan 2019 06:04:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-908-9</guid>
        <source url="https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908.rss">The Thought that Won&#39;t Go Away: @ acting as LIT-WORD! acts?</source>
      </item>
      <item>
        <title>The Thought that Won&#39;t Go Away: @ acting as LIT-WORD! acts?</title>
        <dc:creator><![CDATA[Mark-hi]]></dc:creator>
        <description><![CDATA[
            <p>Final line of the four-examples code block should be "C:\Projects\foo\baz\bar.txt", no?</p>
          <p><a href="https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908/8</link>
        <pubDate>Sun, 30 Dec 2018 02:32:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-908-8</guid>
        <source url="https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908.rss">The Thought that Won&#39;t Go Away: @ acting as LIT-WORD! acts?</source>
      </item>
      <item>
        <title>The Thought that Won&#39;t Go Away: @ acting as LIT-WORD! acts?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="6" data-topic="908" data-full="true">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/giuliolunati/40/203_2.png" class="avatar"> giuliolunati:</div>
<blockquote>
<p>Yum, sounds good! +1</p>
</blockquote>
</aside>
<p>I've churned through and pulled off a <em>quite clever</em> implementation of arbitrary-escaping.  It can put up to 3 levels of escaping in the cell without needing to "pop out" and make another cell.  But after that, it makes a cell off to the side, and is pretty smart about sharing that cell between varying quoted levels of that same entity when it can.</p>
<p>It may sound trivial to "put a couple of bits in a cell indicating the escaping".  <a href="https://github.com/metaeducation/ren-c/commit/b939a138e2c76ad4bed8e77b8818233c3fe6296d" rel="nofollow noopener">It was NOT trivial <img src="//forum.rebol.info/images/emoji/twitter/japanese_ogre.png?v=7" title=":japanese_ogre:" class="emoji" alt=":japanese_ogre:"></a> for many reasons.</p>
<hr>
<p><em>One major angle of non-triviality is having a situation where the same bit pattern for a whole cell must be seen through multiple lenses.  Most high-level code wants it to be a LITERAL! and a distinct type...it doesn't want to ask what type <code>\\x</code> is and get back REB_WORD and treat it the same as a word.  But other code wants to be able to operate on the cell in place without the overhead of copying it into a new cell where the type bits have been adjusted to what it expects.  Think of molding code that gets the cell, sees it's an escaped word, but then wants to pass it to the word molding routine...which needs to understand it's a word and what kind it is, vs. thinking it's a REB_LITERAL and erroring.</em></p>
<p><em>Being able to enforce those views safely is a testimonial to the awesome powers that C++ validation has given the C codebase.  The type system can have subclasses viewing the same bits that say "you can't ask me what my type is in a way where I might answer LITERAL!", you have to use a different accessor that does a calculation of what kind of literalized alias I am".  It's the power to enforce layers and protocols at compile-time, with no run-time added cost for the service.  Without it I could NOT pull off these features so quickly and trust in their accuracy.</em></p>
<hr>
<p>There's comments in the code for those interested, but I hope to write up an essay on <a href="http://hostilefork.com" rel="nofollow noopener">hostilefork.com</a> about it and the techniques.</p>
<p>But I think backslash might not be the right choice.  I had an extended discussion of that here, but <a href="https://forum.rebol.info/t/i-love-arbitrary-escaping-but-backslash-may-not-be-the-one/986">I've moved it to a new thread</a>, as we're now long gone from <code>@</code> being discussed.</p>
          <p><a href="https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908/7</link>
        <pubDate>Sun, 30 Dec 2018 01:04:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-908-7</guid>
        <source url="https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908.rss">The Thought that Won&#39;t Go Away: @ acting as LIT-WORD! acts?</source>
      </item>
      <item>
        <title>The Thought that Won&#39;t Go Away: @ acting as LIT-WORD! acts?</title>
        <dc:creator><![CDATA[giuliolunati]]></dc:creator>
        <description><![CDATA[
            <p>Yum, sounds good! +1</p>
          <p><a href="https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908/6</link>
        <pubDate>Wed, 26 Dec 2018 19:18:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-908-6</guid>
        <source url="https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908.rss">The Thought that Won&#39;t Go Away: @ acting as LIT-WORD! acts?</source>
      </item>
      <item>
        <title>The Thought that Won&#39;t Go Away: @ acting as LIT-WORD! acts?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="/u/giuliolunati">@giuliolunati</a> brought up an old issue that had been talked about a while ago, under the topic name "lit bit".  It was the idea that all values should be able to have literal forms.  So, LIT-INTEGER!, LIT-BLOCK!, whatever.</p>
<p>More ambitious versions of the proposal suggested any number of these bits <em>(although it wasn't clear where in the value cell you'd be putting all these bits)</em>.</p>
<p>This revived some of the old complaints I've had about how much I hate apostrophe for this purpose.  A LIT-STRING! doesn't look good as <code>'"foo"</code>.  And a LIT-LIT-STRING! doesn't look good as <code>''"foo"</code></p>
<p>So back to the symbol drawing board, with <strong><code>@"foo"</code></strong> or <strong><code>^"foo"</code></strong> or even the instantly unpopular idea of <strong><code>*"foo"</code></strong>.</p>
<h2>But What About... the Neglected Backslash?</h2>
<p>Backslash is currently unused.  We've thrown around ideas for backslash from time to time.  It was the original expression barrier concept, before <strong>|</strong> took that over.</p>
<p>Despite its common uses for escaping in other languages and mediums, it's never come up as the idea for being the generic literal escape.  But, it actually seems pretty well-suited to it.</p>
<pre><code>if word = \isn't [...]
if word = 'isn't [...]
if word = ^isn't [...]
if word = @isn't [...]

if string = \"something" [...]
if string = '"something" [...]
if string = ^"something" [...]
if string = @"something" [...]

&gt;&gt; compose [(1 + 2) \(1 + 2) \\(1 + 2)]
== [3 (1 + 2) \(1 + 2)]

block: [a b c]
switch block [
    \[a b c] [print "literal match!"]
    ...
]
</code></pre>
<p>Benefits:</p>
<ul>
<li>Doubled-up usage can't be visually confused with another symbol (like how two apostrophes look like quotes, or an apostrophe and quotes can look like quotes and an apostrophe)</li>
<li>It doesn't require shift to type on most keyboards (though a little bit of a pinky-reach)</li>
<li>Known usage for escaping in other languages</li>
</ul>
<p><em>(Note: The benefit of it being used for escaping in other mediums also makes it a bit of a drawback, as when you're typing in code in some text or markdown environment and use a backslash it can trip it up...because it thinks you're trying to escape.  Of course you run into that problem with any code... like typing <code>*</code> and having it think you're trying to bold something, etc.  Still, backslashes can be one of the trickiest things to get these mediums to <em>actually</em> display how you want.)</em></p>
<p>Caret isn't bad-looking either.  But the big problem with caret is that you don't want the escaping method used for weird characters in strings to interact with commonly-used characters in code.  Because code is often carried in strings (or molded to it, etc.)  It's best if caret occurrences are few and far-between, but literals would be a lot of places.  You've got to diversify your escaping mechanisms, otherwise you have to escape your escapes more often.</p>
<h2>This seems promising...</h2>
<p>So if any development on the modern form of "lit-bit" is tried, it might go with this.  Anyone want to throw in any extra thoughts?  Sadness over the loss of their favorite potential application of backslash they were hoping for?</p>
          <p><a href="https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908/5</link>
        <pubDate>Wed, 26 Dec 2018 17:50:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-908-5</guid>
        <source url="https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908.rss">The Thought that Won&#39;t Go Away: @ acting as LIT-WORD! acts?</source>
      </item>
      <item>
        <title>The Thought that Won&#39;t Go Away: @ acting as LIT-WORD! acts?</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="/u/hostilefork">@hostilefork</a> +1 on your second post.</p>
          <p><a href="https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908/4</link>
        <pubDate>Sun, 18 Nov 2018 22:22:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-908-4</guid>
        <source url="https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908.rss">The Thought that Won&#39;t Go Away: @ acting as LIT-WORD! acts?</source>
      </item>
      <item>
        <title>The Thought that Won&#39;t Go Away: @ acting as LIT-WORD! acts?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="2" data-topic="908">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>I usually pronounce the @ symbol in my head as “at”, so I’m not in love with the idea of using it to represent a lit-word. It’s not a big deal, I’d get over it.</p>
</blockquote>
</aside>
<p>I brought it up just because it's an idea that I have whenever I get frustrated with <code>'</code> and look at a particular case where it falls down.  The recent frustration triggering the thought was having a variable <code>d'</code> and then quoting it and getting <code>'d'</code> and thinking how bad that looked, as if it were a string or character literal.  This then ties into the fears of letting apostrophe-words become common, like <code>isn't</code>, and how that's going to play.</p>
<p>But when you look at a lot of average-case code, the near-equivalence of <code>'foo</code> and <code>foo</code> becomes a feature instead of a bug:</p>
<pre><code>parse [apple banana banana] ['apple some 'banana]
parse [apple banana banana] [@apple some @banana]
</code></pre>
<p>Maybe so long as you make sure QUOTE is always available as an option to fall back on, it's not so bad.  <code>'d'</code> is terrible, but <code>quote d'</code> is legible.  Escaping is a hard general problem, that pops up everywhere...you can write <code>http://http.http//http.http</code>.</p>
<p>Anyway, reason I bring it up is mostly that when you give some of these ideas a try you notice things that lead to thinking that creates the "real" better answer.  Or at least you find the disproof that makes you settle on holding your peace.</p>
<p>Whatever comes of @, I am eager to see it used for "pointing at":</p>
<pre><code> func [param] [fail "An error which indicates this line"]
 func [param] [fail @param "An error which indicates the callsite"]
</code></pre>
<p>So it needs to have a binding.</p>
<blockquote>
<p>could the # symbol be used to denote a lit-word? It’s very eye-grabbing.</p>
</blockquote>
<p>I've become a big fan of using <span class="hashtag">#issues</span> in places that do not intend to look up places, because the fact that they don't decay in the evaluator increases their usability for that purpose.</p>
<p>Consider something like in ZeroMQ, where <a href="https://github.com/metaeducation/ren-c/blob/8b8b9a53ed1b767b933388663d6bb5c428b2c59c/src/extensions/zeromq/mod-zeromq.c#L372" rel="nofollow noopener">a <code>type</code> constant is passed by WORD!</a>.  The consequence of that is that when you splice it into code, you have to take pains to unevaluate it (done there with <code>rebUneval()</code>, which is a fancier-shaped tool than <code>quote</code> for API use).  But if it had been an ISSUE!, you wouldn't have to worry as it would be completely reduced.</p>
<p>Similarly, I feel TAG! should be picked up in a lot of places people casually use LIT-WORD!s today.  It puts more diversity in the source and helps hint that you aren't dereferencing.</p>
<p>If <span class="mention">@foo</span> is in the same family as foo@bar, then it would be inert, and give another one of these categories.  It's probably the right thing to do.  But I had to get the thought of using it for quoting out in the open, even if just to shoot it down.</p>
          <p><a href="https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908/3</link>
        <pubDate>Fri, 16 Nov 2018 22:33:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-908-3</guid>
        <source url="https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908.rss">The Thought that Won&#39;t Go Away: @ acting as LIT-WORD! acts?</source>
      </item>
      <item>
        <title>The Thought that Won&#39;t Go Away: @ acting as LIT-WORD! acts?</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>This may be an unhelpful, half-baked reply. I usually pronounce the @ symbol in my head as "at", so I'm not in love with the idea of using it to represent a lit-word. It's not a big deal, I'd get over it. <img src="//forum.rebol.info/images/emoji/twitter/slight_smile.png?v=7" title=":slight_smile:" class="emoji" alt=":slight_smile:"><br>
I've sometimes thought that the @ symbol could be used as a glyph for anything that can be addressed, including the location of source-data. The @ could be at the beginning of a URL, email, port, etc.</p>
<p>I don't have much reasoning behind this, but could the # symbol be used to denote a lit-word? It's very eye-grabbing.</p>
          <p><a href="https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908/2</link>
        <pubDate>Fri, 16 Nov 2018 16:21:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-908-2</guid>
        <source url="https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908.rss">The Thought that Won&#39;t Go Away: @ acting as LIT-WORD! acts?</source>
      </item>
      <item>
        <title>The Thought that Won&#39;t Go Away: @ acting as LIT-WORD! acts?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p><strong>UPDATE:</strong> We do now have a datatype for <span class="mention">@WORD</span>, <span class="mention">@PA</span>/TH, @(GR O UP), and @[BL O CK].  It's being <a href="https://forum.rebol.info/t/word-some-path-some-group-and-some-block/1125">applied in creative ways as an <em>irreducible</em> type</a>, but it is not the means for <em>quoting</em>, which remains the historical tick mark...which has been <a href="https://forum.rebol.info/t/quoted-arrives-formerly-known-as-lit-bit/995">generalized to any number of levels</a> in a relatively efficient fashion.  It may--however--take the <em>name</em> LIT-WORD!, LIT-PATH!, LIT-GROUP!, and LIT-BLOCK! away from the QUOTED! types...just not the behavior.</p>
</blockquote>
<hr>
<p>Today it's not legal to write <code>@foo</code> or <code>@foo/bar</code> in code.  But people want it, and it's legal in Red.  This brings us to the question of what the evaluator behavior of such a thing will be in Ren-C.</p>
<p>Something I haven't been able to shake since the beginning of seeing the usage of apostrophe for LIT-WORD! is that it is <em>too slight</em> for something as important as it is.  There's a big difference between <code>foo</code> and <code>'foo</code> but it's rather hard to see.</p>
<p>The rise of the idea of using apostrophes purposefully in names also throws in a wrench.  Not only is there <code>isn't</code> coming very soon to wide use, but I do kind of like the mathematical convention of ticking apostrophes on the tail of things to make "derived" versions of them (<code>f</code>, <code>f'</code>, <code>f''</code>)</p>
<pre><code>block: [isn't "Hello"]
switch first block [
    'isn't [print "This runs"]
]

foo': specialize 'f [arg1: 10]
foo'': specialize 'f' [arg2: 20]
action: get 'f''
</code></pre>
<p>What if the evaluator treated @ like it treats apostrophes today?</p>
<pre><code>block: [isn't "Hello"]
switch first block [
    @isn't [print "This runs"]
]

f': specialize @f [arg1: 10]
f'': specialize @f' [arg2: 20]
action: get @f''
</code></pre>
<p>While it is "blocky", I feel there's something more "solid" about it.</p>
<h2>
<span class="mention">@foo</span> has to be "wordlike" anyway, for FAIL</h2>
<p>The idea of "follow this link, to a word" being the meaning of @ is something I am eager to use with <code>&lt;skip&gt;</code>-able parameters for FAIL, to say where an error should be reported.  (so indicate the callsite, instead of where the fail is).</p>
<p>Today:</p>
<pre><code>foo: function [number] [
    if number &gt; 1020 [fail/where "Value is too large" 'number]
]
</code></pre>
<p>Soon:</p>
<pre><code>foo: function [number] [
    if number &gt; 1020 [fail @number "Value is too large"]
]
</code></pre>
<h2>This would rule out EMAIL! unification</h2>
<p>The evaluator goes by type, so the quirky-and-not-completely-figured out <a href="https://forum.rebol.info/t/handle-cdata-c-data-and-cfunction-c-function/683">unified handle! proposal</a> would have to be scrapped.  <span class="mention">@foo</span> would be a LIT-WORD!, <span class="mention">@foo</span>/bar would be a LIT-PATH!.</p>
<h2>It would also help with things like LIT-GROUP!s</h2>
<p>If you look at something like:</p>
<pre><code>code: '(
    #foo [baz bar]
    whole bunch of stuff ...
)
</code></pre>
<p>That super-lightweight apostrophe is easy to miss.  Compare with:</p>
<pre><code>code: @(
    #foo [baz bar]
    whole bunch of stuff ...
)
</code></pre>
<h2>It is slightly more labor to enter on most keyboards</h2>
<p>I'm not sure how much of a concern it is, in the sense of I don't know how many LIT-WORD!s people have to enter (compared to <code>+</code>, or <code>{</code> or other shifted characters in various hard to reach places).  They're used often, but not that often.</p>
<h2>Leading apostrophe compatibility would be needed for redbol</h2>
<p>I'm fairly aware there's going to need to be some kind of runtime switches to enable wider redbol compatibility. Continuing to treat leading apostrophes as LIT-WORD!s would be a part of that.</p>
<p>But in the near term, there'd not be any specific pressure to retake 'foo and 'foo/bar.  I'm not sure exactly what they'd be used for once degrading to a normal word character:</p>
<pre><code>'foo: chain [foo | function [x] [x + 1]]
''foo: specialize @'foo [arg2: 20]
</code></pre>
<p>But whatever they're used for "meatier" at symbol makes it viable, and helps differentiate from <code>''foo</code> being a lit-word whose spelling is <code>'foo</code> :-/</p>
<h2>My other idea variant was <em>FAR</em> more radical</h2>
<p>The other thought I had when first questioning <code>'</code>  was what if double quotes weren't used for strings, but for quoting arbitrary material literally:</p>
<pre><code>block: [isn't {Hello}]

switch first block [
    "isn't" [print {This runs}]
]
</code></pre>
<p>It would look better when quoting SET-WORD!s as <code>"foo:"</code>, and provide clearer and more visible delimiting on GROUP!s:</p>
<pre><code>code: "(
    #foo [baz bar]
    whole bunch of stuff ...
)"
</code></pre>
<p>Because it would be part of a paired delimiter, you wouldn't have to worry about nested quoted material.</p>
<p>While this is sort of "interesting" it's <em>completely</em> incompatible.  It makes you type two delimiters when a common case only required one.  And from my experiments trying using only braced-strings to see if quotes could be freed up for something else, I found the braces were far too heavy when used for <em>every</em> string.<br>
Plus the presence of two styles letting you conveniently have things like a string with a single brace <code>"{"</code>.</p>
<p>So I dropped that one, but have kept the <code>@</code> idea consistently in mind.  I'm feeling pretty serious about trying it.  Any thoughts?</p>
          <p><a href="https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908/1</link>
        <pubDate>Fri, 16 Nov 2018 08:26:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-908-1</guid>
        <source url="https://forum.rebol.info/t/the-thought-that-wont-go-away-acting-as-lit-word-acts/908.rss">The Thought that Won&#39;t Go Away: @ acting as LIT-WORD! acts?</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Idea: Agreed Upon Symbol Number for Extensions</title>
    <link>https://forum.rebol.info/t/idea-agreed-upon-symbol-number-for-extensions/1188</link>
    <description>A concept in the R3-Alpha codebase is that there are a certain number of built-in words...which come from a file called %words.r

[https://github.com/rebol/rebol/blob/master/src/boot/words.r](https://github.com/rebol/rebol/blob/master/src/boot/words.r)

This is done so you can switch on a numeric code for these words, and not bother with needing to do a string comparison in C.  Some words (like PARSE keywords) are strategically chosen to be in a sequential range, to make testing for them faster.

If you write an extension in C that operates at the internal level API and want the performance of a native, you might want to talk about a word that&#39;s not in that list.  You can get a bit close to the performance for a single test by caching a pointer to the canonized version of that word, and comparing to that canon pointer.  But it won&#39;t be quite as fast, and since that won&#39;t be a constant...C can&#39;t use it in switch statements.

To be more concrete, imagine you have some words not in %words.r like OVERLOAD, MULTIPLE, INHERITANCE.  You couldn&#39;t write:

     switch (VAL_WORD_SYM(some_word)) {  ; small 16-bit # can be cached in word
         case SYM_OVERLOAD: ...  ; ...but these weren&#39;t in %words.r!
         case SYM_MULTIPLE: ...
         case SYM_INHERITANCE: ...
         default: ...
    }

Can&#39;t do that for those new terms.  You&#39;d have to do case-insensitive string comparisons, or something like this pseudocode:

     REBSTR *canon_overload;
     REBSTR *canon_multiple;
     REBSTR *canon_inheritance;

     void On_Module_Load() {
          canon_overload = Register_Word(&quot;overload&quot;);
          canon_multiple = Register_Word(&quot;multiple&quot;);
          canon_inheritance = Register_Word(&quot;inheritance&quot;);
     }

     void On_Module_Shutdown() {
         Unregister_Word(canon_overload);
         Unregister_Word(canon_multiple);
         Unregister_Word(canon_inheritance);
     }

So imagine this gives you word series pointers that are guarded from GC for as long as your module is loaded.  Then you could say:

     REBSTR *canon = VAL_WORD_CANON(some_word);
     if (canon == canon_overload) { ... }
     else if (canon == canon_multiple) { ... }
     else if (canon == canon_inheritance) { ... }
     else { ... }

It&#39;s less elegant than the switch(), and since the numbers are runtime pointers and not fixed at compile-time, there&#39;s no way to optimize as in a switch() by repeatedly bisecting the range of values...if you have N words, you will do N comparisons.

## Weird idea: Agree on a list of words and numbers, commit on Internet

It would be pretty heinous to make a much bigger %words.r and ship it in every executable...inflating the size of Rebol to include a dictionary.

But there&#39;s a possibility that doesn&#39;t go that far yet still gets the benefit.  Make the word list and commit it somewhere on the internet that developers can look.  Give every common word a number.  Then, the extension ships with just the spellings and numbers it needs.  All extensions agree to use the same numbers:

     #define SYM_OVERLOAD 15092
     #define SYM_MULTIPLE 32091
     #define SYM_INHERITANCE 63029

     void On_Module_Load() {
          Register_Word(&quot;overload&quot;, SYM_OVERLOAD);
          Register_Word(&quot;multiple&quot;, SYM_MULTIPLE);
          Register_Word(&quot;inheritance&quot;, SYM_INHERITANCE);
     }

     void On_Module_Shutdown() {
         Unregister_Word(SYM_OVERLOAD);
         Unregister_Word(SYM_MULTIPLE);
         Unregister_Word(SYM_INHERITANCE);
     }

Your switch() statements can work just fine, and you&#39;re only out of luck if you use a sequence of characters that wasn&#39;t committed to in the database.  But the database can grow, so long as it grows centrally and not inconsistently.  (In fact, it&#39;s probably better to do it that way, where extension authors ask for the words they want and get them approved before shipping the extension.)

The worst that can happen is you load two extensions that disagree, and it refuses to load them.  It could print out the disagreeing numbers and you could consult the internet to decide who was the culprit using the wrong number.

It&#39;s a weird idea but kind of interesting--not in particular because of the performance aspect, but because of enabling the C switch()es.  Since there&#39;s only 16 bits of space in the word available for the symbol trick, it&#39;s an exhaustible resource.  But maybe still worth doing.  This really isn&#39;t difficult, outside of the administrative headache of deciding the policy on giving out #s</description>
    
    <lastBuildDate>Thu, 25 Jul 2019 22:46:06 +0000</lastBuildDate>
    <category>Modules</category>
    <atom:link href="https://forum.rebol.info/t/idea-agreed-upon-symbol-number-for-extensions/1188.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Idea: Agreed Upon Symbol Number for Extensions</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A concept in the R3-Alpha codebase is that there are a certain number of built-in words...which come from a file called %words.r</p>
<p><a href="https://github.com/rebol/rebol/blob/master/src/boot/words.r" rel="nofollow noopener">https://github.com/rebol/rebol/blob/master/src/boot/words.r</a></p>
<p>This is done so you can switch on a numeric code for these words, and not bother with needing to do a string comparison in C.  Some words (like PARSE keywords) are strategically chosen to be in a sequential range, to make testing for them faster.</p>
<p>If you write an extension in C that operates at the internal level API and want the performance of a native, you might want to talk about a word that's not in that list.  You can get a bit close to the performance for a single test by caching a pointer to the canonized version of that word, and comparing to that canon pointer.  But it won't be quite as fast, and since that won't be a constant...C can't use it in switch statements.</p>
<p>To be more concrete, imagine you have some words not in %words.r like OVERLOAD, MULTIPLE, INHERITANCE.  You couldn't write:</p>
<pre><code> switch (VAL_WORD_SYM(some_word)) {  ; small 16-bit # can be cached in word
     case SYM_OVERLOAD: ...  ; ...but these weren't in %words.r!
     case SYM_MULTIPLE: ...
     case SYM_INHERITANCE: ...
     default: ...
}
</code></pre>
<p>Can't do that for those new terms.  You'd have to do case-insensitive string comparisons, or something like this pseudocode:</p>
<pre><code> REBSTR *canon_overload;
 REBSTR *canon_multiple;
 REBSTR *canon_inheritance;

 void On_Module_Load() {
      canon_overload = Register_Word("overload");
      canon_multiple = Register_Word("multiple");
      canon_inheritance = Register_Word("inheritance");
 }

 void On_Module_Shutdown() {
     Unregister_Word(canon_overload);
     Unregister_Word(canon_multiple);
     Unregister_Word(canon_inheritance);
 }
</code></pre>
<p>So imagine this gives you word series pointers that are guarded from GC for as long as your module is loaded.  Then you could say:</p>
<pre><code> REBSTR *canon = VAL_WORD_CANON(some_word);
 if (canon == canon_overload) { ... }
 else if (canon == canon_multiple) { ... }
 else if (canon == canon_inheritance) { ... }
 else { ... }
</code></pre>
<p>It's less elegant than the switch(), and since the numbers are runtime pointers and not fixed at compile-time, there's no way to optimize as in a switch() by repeatedly bisecting the range of values...if you have N words, you will do N comparisons.</p>
<h2>Weird idea: Agree on a list of words and numbers, commit on Internet</h2>
<p>It would be pretty heinous to make a much bigger %words.r and ship it in every executable...inflating the size of Rebol to include a dictionary.</p>
<p>But there's a possibility that doesn't go that far yet still gets the benefit.  Make the word list and commit it somewhere on the internet that developers can look.  Give every common word a number.  Then, the extension ships with just the spellings and numbers it needs.  All extensions agree to use the same numbers:</p>
<pre><code> #define SYM_OVERLOAD 15092
 #define SYM_MULTIPLE 32091
 #define SYM_INHERITANCE 63029

 void On_Module_Load() {
      Register_Word("overload", SYM_OVERLOAD);
      Register_Word("multiple", SYM_MULTIPLE);
      Register_Word("inheritance", SYM_INHERITANCE);
 }

 void On_Module_Shutdown() {
     Unregister_Word(SYM_OVERLOAD);
     Unregister_Word(SYM_MULTIPLE);
     Unregister_Word(SYM_INHERITANCE);
 }
</code></pre>
<p>Your switch() statements can work just fine, and you're only out of luck if you use a sequence of characters that wasn't committed to in the database.  But the database can grow, so long as it grows centrally and not inconsistently.  (In fact, it's probably better to do it that way, where extension authors ask for the words they want and get them approved before shipping the extension.)</p>
<p>The worst that can happen is you load two extensions that disagree, and it refuses to load them.  It could print out the disagreeing numbers and you could consult the internet to decide who was the culprit using the wrong number.</p>
<p>It's a weird idea but kind of interesting--not in particular because of the performance aspect, but because of enabling the C switch()es.  Since there's only 16 bits of space in the word available for the symbol trick, it's an exhaustible resource.  But maybe still worth doing.  This really isn't difficult, outside of the administrative headache of deciding the policy on giving out <span class="hashtag">#s</span></p>
          <p><a href="https://forum.rebol.info/t/idea-agreed-upon-symbol-number-for-extensions/1188/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/idea-agreed-upon-symbol-number-for-extensions/1188/1</link>
        <pubDate>Thu, 25 Jul 2019 18:44:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1188-1</guid>
        <source url="https://forum.rebol.info/t/idea-agreed-upon-symbol-number-for-extensions/1188.rss">Idea: Agreed Upon Symbol Number for Extensions</source>
      </item>
  </channel>
</rss>

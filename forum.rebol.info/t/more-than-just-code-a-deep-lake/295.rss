<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>More Than Just Code - A Deep Lake</title>
    <link>https://forum.rebol.info/t/more-than-just-code-a-deep-lake/295</link>
    <description>&gt; An oft-cited post by Carl on Rebol is this one: [More Than Just Code - A Deep Lake](http://www.rebol.com/article/0103.html).
&gt;
&gt; Contents reprinted here for mirroring purposes and discussion.  *(I actually find it quite strange that there are no comments on the post on Carl&#39;s blog.  Because when you take the [grumpy old man rants](http://www.rebol.com/cgi-bin/blog.r?view=0497) about executable size and dependencies out of the equation...this is where we come to the central differentiating idea of the &quot;language&quot;.)*

---

**REBOL is like a lake**: Although we like to make REBOL look a lot like other programming languages, it is much deeper than it looks. I&#39;ve said before that REBOL is like a lake. You see the surface and think that is all there is to it. But, once you step into it, you discover there is another dimension. This 2D view of a 3D concept helps beginners get started, but the 3D reality is what gives REBOL its true power.

In reply to [my prior blog about coding style](http://www.rebol.net/blogs/0102.html), some folks have asked the question: can&#39;t you create a tool to reformat REBOL code into whatever style the user desires?

Sure, you can write a tool to output REBOL in any format you want. You can output the entire program as a single line or put every word on a separate line. However, **only you the writer** can give meaningful &quot;hints&quot; within the written form. A tool cannot do that.

Here is a good example. Suppose I write:

    if time &gt; 10:00 [
        wakeup user
    ]

which some users may choose to rewrite it this way:

    if time &gt; 10:00
    [
        wakeup user
        alert &quot;Time to work&quot;
    ]

But, what if the &quot;then block&quot; is a variable itself, defined as:

    action: [
        wakeup user
        alert &quot;Time to work&quot;
    ]

Would you write this:

    if time &gt; 10:00
    action

or this:

    if time &gt; 10:00 action

I would guess that you would prefer to write this last line because the action block is part of the full expression.

Now, what if I wrote a line you were less familiar with:

     run script except on conditions

This is a valid REBOL line, but you do not immediately know the relationship of the words within this expression. Suppose the word &#39;conditions is itself a block. The expanded expression is:

    run script except on [
        sundays at noon
        mondays after 10:00
        fridays before 9:30
    ]

This style helps clarify what&#39;s going on, but some of you may say &quot;sure, but the word &#39;on also clarifies that the block follows&quot;. That is true, *but you are relying on the relationship between the English language and your script to know that fact*. What if instead of &#39;on the designer used the word &#39;expedite.

    run script except expedite conditions

Now if you saw:

    run script except expedite

would you know that a block might follow it? Do you want to rely only on the English interpretation of words, or do you want to provide additional hints?

Of course, **how you write code is ultimately your choice alone**. REBOL, as a context dependent language, is perhaps the most freeform computing language ever invented. But therein lies the importance of good coding style. You can write actual working programs using an alien dialect ([as shown here on REBOL.org](http://www.rebol.org/cgi-bin/cgiwrap/rebol/view-script.r?script=alien.r) by the legendary Jeff Kreis, see note) or you can write them to be as clear as possible. It&#39;s your choice.

After all, when you create REBOL programs you are ultimately writing them for two readers. One is the REBOL interpreter that executes your code. The other is the human who wants to understand your code. And, perhaps that human reader is you... a few months or years after you&#39;ve written the code.

**Every little comment and every little hint helps.**

*Note: Jeff also provided [this more humanly readable version](http://www.rebol.org/cgi-bin/cgiwrap/rebol/view-script.r?script=alienexp.r) of his alien script.*

---

&gt; Updated 9-Sep-2017 - Copyright Carl Sassenrath</description>
    
    <lastBuildDate>Mon, 11 Sep 2017 08:15:06 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/more-than-just-code-a-deep-lake/295.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>More Than Just Code - A Deep Lake</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>An oft-cited post by Carl on Rebol is this one: <a href="http://www.rebol.com/article/0103.html" rel="nofollow noopener">More Than Just Code - A Deep Lake</a>.</p>
<p>Contents reprinted here for mirroring purposes and discussion.  <em>(I actually find it quite strange that there are no comments on the post on Carl's blog.  Because when you take the <a href="http://www.rebol.com/cgi-bin/blog.r?view=0497" rel="nofollow noopener">grumpy old man rants</a> about executable size and dependencies out of the equation...this is where we come to the central differentiating idea of the "language".)</em></p>
</blockquote>
<hr>
<p><strong>REBOL is like a lake</strong>: Although we like to make REBOL look a lot like other programming languages, it is much deeper than it looks. I've said before that REBOL is like a lake. You see the surface and think that is all there is to it. But, once you step into it, you discover there is another dimension. This 2D view of a 3D concept helps beginners get started, but the 3D reality is what gives REBOL its true power.</p>
<p>In reply to <a href="http://www.rebol.net/blogs/0102.html" rel="nofollow noopener">my prior blog about coding style</a>, some folks have asked the question: can't you create a tool to reformat REBOL code into whatever style the user desires?</p>
<p>Sure, you can write a tool to output REBOL in any format you want. You can output the entire program as a single line or put every word on a separate line. However, <strong>only you the writer</strong> can give meaningful "hints" within the written form. A tool cannot do that.</p>
<p>Here is a good example. Suppose I write:</p>
<pre><code>if time &gt; 10:00 [
    wakeup user
]
</code></pre>
<p>which some users may choose to rewrite it this way:</p>
<pre><code>if time &gt; 10:00
[
    wakeup user
    alert "Time to work"
]
</code></pre>
<p>But, what if the "then block" is a variable itself, defined as:</p>
<pre><code>action: [
    wakeup user
    alert "Time to work"
]
</code></pre>
<p>Would you write this:</p>
<pre><code>if time &gt; 10:00
action
</code></pre>
<p>or this:</p>
<pre><code>if time &gt; 10:00 action
</code></pre>
<p>I would guess that you would prefer to write this last line because the action block is part of the full expression.</p>
<p>Now, what if I wrote a line you were less familiar with:</p>
<pre><code> run script except on conditions
</code></pre>
<p>This is a valid REBOL line, but you do not immediately know the relationship of the words within this expression. Suppose the word 'conditions is itself a block. The expanded expression is:</p>
<pre><code>run script except on [
    sundays at noon
    mondays after 10:00
    fridays before 9:30
]
</code></pre>
<p>This style helps clarify what's going on, but some of you may say "sure, but the word 'on also clarifies that the block follows". That is true, <em>but you are relying on the relationship between the English language and your script to know that fact</em>. What if instead of 'on the designer used the word 'expedite.</p>
<pre><code>run script except expedite conditions
</code></pre>
<p>Now if you saw:</p>
<pre><code>run script except expedite
</code></pre>
<p>would you know that a block might follow it? Do you want to rely only on the English interpretation of words, or do you want to provide additional hints?</p>
<p>Of course, <strong>how you write code is ultimately your choice alone</strong>. REBOL, as a context dependent language, is perhaps the most freeform computing language ever invented. But therein lies the importance of good coding style. You can write actual working programs using an alien dialect (<a href="http://www.rebol.org/cgi-bin/cgiwrap/rebol/view-script.r?script=alien.r" rel="nofollow noopener">as shown here on REBOL.org</a> by the legendary Jeff Kreis, see note) or you can write them to be as clear as possible. It's your choice.</p>
<p>After all, when you create REBOL programs you are ultimately writing them for two readers. One is the REBOL interpreter that executes your code. The other is the human who wants to understand your code. And, perhaps that human reader is you... a few months or years after you've written the code.</p>
<p><strong>Every little comment and every little hint helps.</strong></p>
<p><em>Note: Jeff also provided <a href="http://www.rebol.org/cgi-bin/cgiwrap/rebol/view-script.r?script=alienexp.r" rel="nofollow noopener">this more humanly readable version</a> of his alien script.</em></p>
<hr>
<blockquote>
<p>Updated 9-Sep-2017 - Copyright Carl Sassenrath</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/more-than-just-code-a-deep-lake/295/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/more-than-just-code-a-deep-lake/295/1</link>
        <pubDate>Mon, 11 Sep 2017 07:48:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-295-1</guid>
        <source url="https://forum.rebol.info/t/more-than-just-code-a-deep-lake/295.rss">More Than Just Code - A Deep Lake</source>
      </item>
  </channel>
</rss>

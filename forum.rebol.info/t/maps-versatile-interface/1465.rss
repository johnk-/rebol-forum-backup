<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Maps: Versatile Interface</title>
    <link>https://forum.rebol.info/t/maps-versatile-interface/1465</link>
    <description>In another episode of &#39;Where should you use maps vs. ...?&#39;, was reflecting on [this post](https://forum.rebol.info/t/mold-and-load-parity/1429/4):

[quote=&quot;hostilefork, post:4, topic:1429&quot;]
But even if /ALL goes away, there&#39;s always going to be parameterization settings to the underlying &quot;codec&quot; that powers generic loading. Does the code-loading &quot;codec&quot; have options? I think it should...policies like allowing or disallowing CR/LF or tabs, etc.
[/quote]

I don&#39;t know if maps are the most suitable choice here, but they would certainly be the least awkward expression of such options were they a little more versatile:

```text
load/options %some-resource.reb #(
    tabs: no
    CRLF: yes
)
```

I&#39;m not a fan of Red&#39;s specific literal notation for this, but running with it for the purposes of this thought. If a function were to receive such a map, could you REDUCE or COMPOSE it so as not to have to qualify each word?

``` text
reduce options 123
=&gt; #(
    tabs: #[false]
    CRLF: #[true]
)
``` 

Would a literal map be bound to its containing context?

```text
reduce use [bar][
    bar: &quot;Bar&quot;

    #(foo: bar)
]
=&gt; #(foo: &quot;Bar&quot;)
```

Red does not support this, but seems a reasonable expectation to me.

Permitting REDUCE which would presumably only reduce values and not keys and most likely creating a copy would have a distinct advantage over the awkward composition of objects in the cases where they have been used in these cases:

```text
do-this-way: func [
    content
    /option1
    /option2
][
    do-this/options content reduce #(
        option1: option1
        option2: option2
    )
]
```</description>
    
    <lastBuildDate>Wed, 10 Feb 2021 17:05:16 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/maps-versatile-interface/1465.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Maps: Versatile Interface</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>Practically speaking, having observed this particular discussion for as much or as long as there's been any volume of Rebol development, there has been near since the outset a desire for a separate block type that conforms to the key/value pattern in ways that blocks cannot without a significant amount of care, corraling and pretense. There's just no amount of functions, modified path behaviour that can scratch that itch, even if it's wrongheaded. That JSON stepped in and became wildly popular with a tiny subset of types—but crucially this one that Rebol does not, with stringed keys no less—just heightened the sense that this is a glaring omission.</p>
<p>It comes down to representation—yes, you can represent the key/value pattern in blocks, though just because you have values arranged in a key/value order, it can't be assumed. Yes, the key/value pattern can be abused and part of Rebol's strength in types is that you can leverage a certain amount of <a href="http://www.rebol.com/article/0108.html">implied semantics</a>, but that only gets you so far. I believe analyzing the way JSON is deployed—the good and the bad, it's still the broadest demonstration of the Rebol concept—can be illustrative on where maps work and don't with the exchange (data, data-is-code and code-is-data) medium.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1465">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>store for maps and objects and runtime representations of functions</p>
</blockquote>
</aside>
<p>Could add ports and other items to that. I'd say MAP stands apart—it doesn't have any more or less context than a block and the implementation is a means to fit the format than some special internal type looking for representation. Actually, I'd say the same about functions to a degree—you could view a function as a block (behaves more group-like) with additional params metadata</p>
<p>Differences lie here, I guess:</p>
<pre><code class="lang-nohighlight">&gt;&gt; blk: reduce ['group quote (pi) 'func func [][pi]]      
== [group (pi) func make action! [[return:] [...]]]

&gt;&gt; blk/group
== (pi)

&gt;&gt; blk/func  
== 3.141592653589793
</code></pre>
          <p><a href="https://forum.rebol.info/t/maps-versatile-interface/1465/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/maps-versatile-interface/1465/5</link>
        <pubDate>Wed, 10 Feb 2021 16:44:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1465-5</guid>
        <source url="https://forum.rebol.info/t/maps-versatile-interface/1465.rss">Maps: Versatile Interface</source>
      </item>
      <item>
        <title>Maps: Versatile Interface</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="1" data-topic="1465">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I'm not a fan of Red's specific literal notation for this</p>
</blockquote>
</aside>
<p>Over time I just keep getting more convinced that it is a mistake to try to introduce non-BLOCK! source notations for internally complex data structures.</p>
<p>A guy I know wrote a book called <a href="https://joelgrus.github.io/thinking-spreadsheet/"><strong>"Thinking Spreadsheet"</strong></a> <sub><a href="https://joelgrus.github.io/thinking-spreadsheet/ts.html#acknowledgements">(that I offered early feedback on)</a></sub>, where he tries to motivate techniques of working with spreadsheets that embrace the medium.  He talks about how people use spreadsheets as databases:</p>
<blockquote>
<p><em>"On a small scale, you can use spreadsheets as databases. Many people do, and several of our examples will. This is especially convenient when your data fits neatly into a small table and when you intend to interact with your data only through the spreadsheet itself. If your state has issued only 100 license plates, then a spreadsheet might be a good way to store that information."</em></p>
</blockquote>
<p>Rebol notation is like the spreadsheet; it is supposed to be light and easy.  Yet the idea of turning such a medium--a <em>textual</em> one--into something that is a generalized store for maps and objects and runtime representations of functions...and a whole menagerie of as-yet-untold user-defined-types...just doesn't hold water.</p>
<p>So the attempt in Rebol to turn all datatypes into renderable forms that might be LOAD-ed back...as part of a serialization...is I think a dead-end.  The BLOCK! format makes sense as something that's a little bit better than TEXT! for serializing... but it's only a <em>little</em> bit.</p>
<p>I pointed out <a href="https://forum.rebol.info/t/action-mold-shows-cached-name-if-available/1460">how I'd moved away from this with actions</a>, and cited this counter-example carried forward from Red:</p>
<pre><code>red&gt;&gt; append [1 2] :help-string
== [1 2 func [{Returns information about functions, values, objects, and datatypes.} 
    'word [any-type!] 
    /local ref-given? value
][
    clear output-buffer 
    case [
 ...
</code></pre>
<p>To me, MAP! is another one of these instances where the strengths of the substrate are being undermined by trying to make it part of the source notation.</p>
<p>I think putting things in a MAP! (or OBJECT! for that matter) should box it up to where you can query it and get BLOCK!s back for serializing them...but you don't expect to mold them and paste them back.</p>
          <p><a href="https://forum.rebol.info/t/maps-versatile-interface/1465/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/maps-versatile-interface/1465/4</link>
        <pubDate>Wed, 10 Feb 2021 09:01:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1465-4</guid>
        <source url="https://forum.rebol.info/t/maps-versatile-interface/1465.rss">Maps: Versatile Interface</source>
      </item>
      <item>
        <title>Maps: Versatile Interface</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I appreciate the versatility and possibility in your suggestion and trying to gain leverage from the language. However there is the inherent complexity in this even if you bring it to a core level. If all you're looking for is a list of yes/no/this-here/that-there, then maps and the handling thereof seemingly offer an immediate path with some potential perks</p>
          <p><a href="https://forum.rebol.info/t/maps-versatile-interface/1465/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/maps-versatile-interface/1465/3</link>
        <pubDate>Mon, 11 Jan 2021 18:41:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1465-3</guid>
        <source url="https://forum.rebol.info/t/maps-versatile-interface/1465.rss">Maps: Versatile Interface</source>
      </item>
      <item>
        <title>Maps: Versatile Interface</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <pre><code>load/options %some-resource.reb #(
    tabs: no
    cr-lf: yes
)
</code></pre>
<blockquote>
<p>I'm not a fan of Red's specific literal notation for this</p>
</blockquote>
<p>I'm still skeptical on whether investing and spreading the MAP! concept in the core plays to the language strengths at all.  It's like we're just going for JSON, but worse.</p>
<p>Besides BLOCK!s looking better, they afford you more options in representation:</p>
<pre><code>[
   numbers: 1 2 3
   thing: (*) specially-marked
   [1]: "maybe SET-BLOCKS are the gateway to having generic keys?"
]
</code></pre>
<p>Cracking open the toolset of what it would take to give you "powers" for such blocks would help in dialecting.  So focusing here has benefit across the board.</p>
<p>If it's performance people are concerned about, we can make the system speed up lookups when it notices access patterns it thinks it can speed up (e.g. a behind-the-scenes-HASH!)...and you could give it hints.  But it would all still be the currency of BLOCK!.</p>
          <p><a href="https://forum.rebol.info/t/maps-versatile-interface/1465/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/maps-versatile-interface/1465/2</link>
        <pubDate>Mon, 11 Jan 2021 18:33:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1465-2</guid>
        <source url="https://forum.rebol.info/t/maps-versatile-interface/1465.rss">Maps: Versatile Interface</source>
      </item>
      <item>
        <title>Maps: Versatile Interface</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>In another episode of 'Where should you use maps vs. ...?', was reflecting on <a href="https://forum.rebol.info/t/mold-and-load-parity/1429/4">this post</a>:</p>
<aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1429">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/mold-and-load-parity/1429/4">MOLD and LOAD parity</a>
</div>
<blockquote>
<p>But even if /ALL goes away, there's always going to be parameterization settings to the underlying "codec" that powers generic loading. Does the code-loading "codec" have options? I think it should...policies like allowing or disallowing CR/LF or tabs, etc.</p>
</blockquote>
</aside>
<p>I don't know if maps are the most suitable choice here, but they would certainly be the least awkward expression of such options were they a little more versatile:</p>
<pre><code class="lang-nohighlight">load/options %some-resource.reb #(
    tabs: no
    CRLF: yes
)
</code></pre>
<p>I'm not a fan of Red's specific literal notation for this, but running with it for the purposes of this thought. If a function were to receive such a map, could you REDUCE or COMPOSE it so as not to have to qualify each word?</p>
<pre><code class="lang-nohighlight">reduce options 123
=&gt; #(
    tabs: #[false]
    CRLF: #[true]
)
</code></pre>
<p>Would a literal map be bound to its containing context?</p>
<pre><code class="lang-nohighlight">reduce use [bar][
    bar: "Bar"

    #(foo: bar)
]
=&gt; #(foo: "Bar")
</code></pre>
<p>Red does not support this, but seems a reasonable expectation to me.</p>
<p>Permitting REDUCE which would presumably only reduce values and not keys and most likely creating a copy would have a distinct advantage over the awkward composition of objects in the cases where they have been used in these cases:</p>
<pre><code class="lang-nohighlight">do-this-way: func [
    content
    /option1
    /option2
][
    do-this/options content reduce #(
        option1: option1
        option2: option2
    )
]
</code></pre>
          <p><a href="https://forum.rebol.info/t/maps-versatile-interface/1465/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/maps-versatile-interface/1465/1</link>
        <pubDate>Mon, 11 Jan 2021 18:02:59 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1465-1</guid>
        <source url="https://forum.rebol.info/t/maps-versatile-interface/1465.rss">Maps: Versatile Interface</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Boris&#39;s &quot;NEW-EACH&quot; Loop Dialecting Proposals</title>
    <link>https://forum.rebol.info/t/boriss-new-each-loop-dialecting-proposals/1682</link>
    <description>Here are some ideas for what kinds of things you might put in a FOR-EACH variable block besides just words, and some other ideas:

  https://gitlab.com/hiiamboris/red-mezz-warehouse/-/blob/master/foreach-design.md

It&#39;s definitely worth thinking about how to ask for the iteration counter automatically while iterating.  Or getting the position *and* the value somehow at once, instead of being forced to iterate by position and remember to say `pos.1` to get the value.  We&#39;ve had some hare-brained schemes for that come down the pipe.

The simple idea of just asking for it in the vars spec feels pretty solid.  I&#39;m not thrilled about the **/var** notation, but it&#39;s a desirable feature and certainly in reach:

    &gt;&gt; for-each [/i x y] [#a &lt;b&gt; #c &lt;d&gt; #e] [
           print [i x y]
       ]
    1 #a &lt;b&gt;
    2 #c &lt;d&gt;
    3 #e

But some of the other proposals are a bit heavy, like a type constraint and then skipping out of iterations where the type doesn&#39;t match:

    &gt;&gt; for-each [/i x [text! group!] y] [&quot;a&quot; &lt;b&gt; #c &lt;d&gt; (e)] [
           print [i x y]
       ]
    1 &quot;a&quot; &lt;b&gt;
    3 (e)

The semantic combinatorics start to add up.  He says that the index keeps counting regardless of whether the iteration was skipped or not... but, is that obvious?

And isn&#39;t the following kind of clearer:

    &gt;&gt; for-each [/i x y] [&quot;a&quot; &lt;b&gt; #c &lt;d&gt; &quot;e&quot;] [
           match [text! group!] x else [continue]   
           print [index x y]
       ]
    1 &quot;a&quot; &lt;b&gt;
    3 (e)

## Things to Avoid: Overdesign, &quot;Parts of Speech&quot; Abuse

I think we should be cautious about overdesigning such  core constructs.  (But certainly these things--whether you think they are monstrosities or not--are exactly the kind of thing that people are supposed to be empowered to make if it pleases them.  It&#39;s supposed to be a *personal* language, and you personalize it to the extent of your tastes.)

As we want to know the loop iteration you&#39;re on, maybe the better angle isn&#39;t to be abusing word decorations in such weird ways...but to use refinements as labels and then name the variable after it.  I wouldn&#39;t call the loop counter the &quot;index&quot; because the index is in the series position... so, /COUNTER or   /COUNT maybe?

    &gt;&gt; for-each [/count i x y] [#a &lt;b&gt; #c &lt;d&gt; #e] [
           print [i x y]
       ]

Commas would probably make it clearer, so good we have them:

    &gt;&gt; for-each [/count i, x y] [#a &lt;b&gt; #c &lt;d&gt; #e] [
           print [i x y]
       ]

You could get the series position with **/here**.  And @BlackATTR and @gchiu and I have talked about things like wanting to know if you were on the first or last iteration.  Well, why not **/first?** and **/last?**

    &gt;&gt; for-each [/first? f, /last? l, x y] [#a &lt;b&gt; #c &lt;d&gt; #e] [
           print [f l x y]
       ]
    true false #a &lt;b&gt;
    false false #c &lt;d&gt;
    false true #e

Some of these could apply to other loop forms like COUNT-UP I guess...

    &gt;&gt; count-up [/first? f, /last? l, x] 3 [print [f l x]]
    true false 1
    false false 2
    false true 3

People who really want shorthands to say that &quot;just a refinement means /count&quot; could put a little preprocessor adapting the spec to the more verbose form.  But I&#39;d rather use the verbose version.

## Generalized Generators Throw A Thorn in This

In moving to a generalized FOR that runs over a generator, the values are being provided by something that gets called N times and returns answers.  The underlying pattern can be shown by the rewrite:

    &gt;&gt; for [/first? f, /last? l, x y] (each [#a &lt;b&gt; #c &lt;d&gt; #e]) [
           print [f l x y]
       ]

EACH is a generator.  And FOR is something that calls that generator N times.

But not all generators operate on series, some fabricate data out of thin air.  So they&#39;d have no series position to answer /HERE with.  And while we can universally answer the &quot;is this the first iteration&quot; in the iteration construct itself, not all generators know if they&#39;re on the last time you&#39;re calling them...they provide data for each call until they return NULL.

So I guess the mechanics would have to be to try and request these as output parameters from the generator, and it either has them or it doesn&#39;t.  Yay for multi-returns, amiright?  :-)

But since the answers are coming from the generator you&#39;d probably have to put your questions for it in front of the variable for the iteration # you are asking:

    &gt;&gt; for [/first? f, x, /last? l, y] (each [#a &lt;b&gt; #c &lt;d&gt; #e]) [
           print [f l x y]
       ]

This moves the LAST? question so it would ostensibly be grouped with the request for Y.

## Weird Thought... &quot;FOR specs&quot;, like &quot;FUNC specs&quot;?

It occurred to me like we might actually want to think about documenting these like specs.

    &gt;&gt; data: [#a &lt;b&gt; #c &lt;d&gt; #e]

    &gt;&gt; for-each [
           /first? f [logic!]
           x [tag!] &quot;Maybe document what this is for with a TEXT!?&quot;
           /last? l [logic!]
           y [issue!] &quot;Same here...&quot;
       ] data [
           print [f l x y]
       ]

It could introduce concepts like `&lt;skip&gt;` able parameters.

Of course you wouldn&#39;t have to use such wacky things if you didn&#39;t want to, I&#39;m just saying you could.  :-)</description>
    
    <lastBuildDate>Tue, 24 Aug 2021 04:53:47 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/boriss-new-each-loop-dialecting-proposals/1682.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Boris&#39;s &quot;NEW-EACH&quot; Loop Dialecting Proposals</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Here are some ideas for what kinds of things you might put in a FOR-EACH variable block besides just words, and some other ideas:</p>
<p><a href="https://gitlab.com/hiiamboris/red-mezz-warehouse/-/blob/master/foreach-design.md" class="inline-onebox">foreach-design.md · master · hi i am boris / Red mezz warehouse · GitLab</a></p>
<p>It's definitely worth thinking about how to ask for the iteration counter automatically while iterating.  Or getting the position <em>and</em> the value somehow at once, instead of being forced to iterate by position and remember to say <code>pos.1</code> to get the value.  We've had some hare-brained schemes for that come down the pipe.</p>
<p>The simple idea of just asking for it in the vars spec feels pretty solid.  I'm not thrilled about the <strong>/var</strong> notation, but it's a desirable feature and certainly in reach:</p>
<pre><code>&gt;&gt; for-each [/i x y] [#a &lt;b&gt; #c &lt;d&gt; #e] [
       print [i x y]
   ]
1 #a &lt;b&gt;
2 #c &lt;d&gt;
3 #e
</code></pre>
<p>But some of the other proposals are a bit heavy, like a type constraint and then skipping out of iterations where the type doesn't match:</p>
<pre><code>&gt;&gt; for-each [/i x [text! group!] y] ["a" &lt;b&gt; #c &lt;d&gt; (e)] [
       print [i x y]
   ]
1 "a" &lt;b&gt;
3 (e)
</code></pre>
<p>The semantic combinatorics start to add up.  He says that the index keeps counting regardless of whether the iteration was skipped or not... but, is that obvious?</p>
<p>And isn't the following kind of clearer:</p>
<pre><code>&gt;&gt; for-each [/i x y] ["a" &lt;b&gt; #c &lt;d&gt; "e"] [
       match [text! group!] x else [continue]   
       print [index x y]
   ]
1 "a" &lt;b&gt;
3 (e)
</code></pre>
<h2>Things to Avoid: Overdesign, "Parts of Speech" Abuse</h2>
<p>I think we should be cautious about overdesigning such  core constructs.  (But certainly these things--whether you think they are monstrosities or not--are exactly the kind of thing that people are supposed to be empowered to make if it pleases them.  It's supposed to be a <em>personal</em> language, and you personalize it to the extent of your tastes.)</p>
<p>As we want to know the loop iteration you're on, maybe the better angle isn't to be abusing word decorations in such weird ways...but to use refinements as labels and then name the variable after it.  I wouldn't call the loop counter the "index" because the index is in the series position... so, /COUNTER or   /COUNT maybe?</p>
<pre><code>&gt;&gt; for-each [/count i x y] [#a &lt;b&gt; #c &lt;d&gt; #e] [
       print [i x y]
   ]
</code></pre>
<p>Commas would probably make it clearer, so good we have them:</p>
<pre><code>&gt;&gt; for-each [/count i, x y] [#a &lt;b&gt; #c &lt;d&gt; #e] [
       print [i x y]
   ]
</code></pre>
<p>You could get the series position with <strong>/here</strong>.  And <a class="mention" href="/u/blackattr">@BlackATTR</a> and <a class="mention" href="/u/gchiu">@gchiu</a> and I have talked about things like wanting to know if you were on the first or last iteration.  Well, why not <strong>/first?</strong> and <strong>/last?</strong></p>
<pre><code>&gt;&gt; for-each [/first? f, /last? l, x y] [#a &lt;b&gt; #c &lt;d&gt; #e] [
       print [f l x y]
   ]
true false #a &lt;b&gt;
false false #c &lt;d&gt;
false true #e
</code></pre>
<p>Some of these could apply to other loop forms like COUNT-UP I guess...</p>
<pre><code>&gt;&gt; count-up [/first? f, /last? l, x] 3 [print [f l x]]
true false 1
false false 2
false true 3
</code></pre>
<p>People who really want shorthands to say that "just a refinement means /count" could put a little preprocessor adapting the spec to the more verbose form.  But I'd rather use the verbose version.</p>
<h2>Generalized Generators Throw A Thorn in This</h2>
<p>In moving to a generalized FOR that runs over a generator, the values are being provided by something that gets called N times and returns answers.  The underlying pattern can be shown by the rewrite:</p>
<pre><code>&gt;&gt; for [/first? f, /last? l, x y] (each [#a &lt;b&gt; #c &lt;d&gt; #e]) [
       print [f l x y]
   ]
</code></pre>
<p>EACH is a generator.  And FOR is something that calls that generator N times.</p>
<p>But not all generators operate on series, some fabricate data out of thin air.  So they'd have no series position to answer /HERE with.  And while we can universally answer the "is this the first iteration" in the iteration construct itself, not all generators know if they're on the last time you're calling them...they provide data for each call until they return NULL.</p>
<p>So I guess the mechanics would have to be to try and request these as output parameters from the generator, and it either has them or it doesn't.  Yay for multi-returns, amiright?  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>But since the answers are coming from the generator you'd probably have to put your questions for it in front of the variable for the iteration # you are asking:</p>
<pre><code>&gt;&gt; for [/first? f, x, /last? l, y] (each [#a &lt;b&gt; #c &lt;d&gt; #e]) [
       print [f l x y]
   ]
</code></pre>
<p>This moves the LAST? question so it would ostensibly be grouped with the request for Y.</p>
<h2>Weird Thought... "FOR specs", like "FUNC specs"?</h2>
<p>It occurred to me like we might actually want to think about documenting these like specs.</p>
<pre><code>&gt;&gt; data: [#a &lt;b&gt; #c &lt;d&gt; #e]

&gt;&gt; for-each [
       /first? f [logic!]
       x [tag!] "Maybe document what this is for with a TEXT!?"
       /last? l [logic!]
       y [issue!] "Same here..."
   ] data [
       print [f l x y]
   ]
</code></pre>
<p>It could introduce concepts like <code>&lt;skip&gt;</code> able parameters.</p>
<p>Of course you wouldn't have to use such wacky things if you didn't want to, I'm just saying you could.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://forum.rebol.info/t/boriss-new-each-loop-dialecting-proposals/1682/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/boriss-new-each-loop-dialecting-proposals/1682/1</link>
        <pubDate>Tue, 24 Aug 2021 04:53:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1682-1</guid>
        <source url="https://forum.rebol.info/t/boriss-new-each-loop-dialecting-proposals/1682.rss">Boris&#39;s &quot;NEW-EACH&quot; Loop Dialecting Proposals</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Replacing IFs with ALLs and IF-NOTs with ANYs</title>
    <link>https://forum.rebol.info/t/replacing-ifs-with-alls-and-if-nots-with-anys/925</link>
    <description>I&#39;ve known that there were cases where people used ALL to run a chain of code without using the result.  So where other languages might write:

    if (condition1 and (cond = ition2) and con(dit, ion3)))
        break;

Rebol programmers might say:

    all [
        condition1
        cond = ition2
        con dit ion3
        break
    ]

With conditional AND in Ren-C, you get a choice.  It seems to me that whether it&#39;s clearer or not is on a case by case basis.

I saw something in some Red code that was the other way around.  Imagine a negated if, which you can write in Ren-C like this if you like:

     if not condition1 and [cond != ition2] and [not con dit ion3] [
         break
    ]

But you could also use an ANY for this, with no IF:

     any [
         condition1
         cond = ition2
         con dit ion3
         break
     ]

Maybe I&#39;m late to the game in thinking of using ANY in this way, to test things when you&#39;re really not intending to use the result, just to conditionally avoid running some code in later any cases.  But it brings up the cognitive question of whether you think of your code like this or not.  It&#39;s hard to say with a fake example like this.

In historical Rebol, if you wanted to put multiple lines in the last case of an any you could do that with a GROUP!, e.g.

     any [
         condition1
         cond = ition2
         con dit ion3
         (
             line one
             line two
         )
     ]

This lets you stop worrying about whether the lines of code at the end are able to affect the ANY&#39;s result  Ren-C gives you ELSE and THEN, so for the ANY case:

     any [
         condition1
         cond = ition2
         con dit ion3
     ] else [
         line one
         line two
     ]

But you can use THEN or ELSE with either construct, as appropriate (or you can use both).  I&#39;ve found that:

    all [...] then [...]

...is particularly pleasing and comes up often, and is better than `if all [...] [...]` for keeping your place in the source when the ALL block is long.  It scans better.</description>
    
    <lastBuildDate>Sat, 24 Nov 2018 21:27:43 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://forum.rebol.info/t/replacing-ifs-with-alls-and-if-nots-with-anys/925.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Replacing IFs with ALLs and IF-NOTs with ANYs</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've known that there were cases where people used ALL to run a chain of code without using the result.  So where other languages might write:</p>
<pre><code>if (condition1 and (cond = ition2) and con(dit, ion3)))
    break;
</code></pre>
<p>Rebol programmers might say:</p>
<pre><code>all [
    condition1
    cond = ition2
    con dit ion3
    break
]
</code></pre>
<p>With conditional AND in Ren-C, you get a choice.  It seems to me that whether it's clearer or not is on a case by case basis.</p>
<p>I saw something in some Red code that was the other way around.  Imagine a negated if, which you can write in Ren-C like this if you like:</p>
<pre><code> if not condition1 and [cond != ition2] and [not con dit ion3] [
     break
]
</code></pre>
<p>But you could also use an ANY for this, with no IF:</p>
<pre><code> any [
     condition1
     cond = ition2
     con dit ion3
     break
 ]
</code></pre>
<p>Maybe I'm late to the game in thinking of using ANY in this way, to test things when you're really not intending to use the result, just to conditionally avoid running some code in later any cases.  But it brings up the cognitive question of whether you think of your code like this or not.  It's hard to say with a fake example like this.</p>
<p>In historical Rebol, if you wanted to put multiple lines in the last case of an any you could do that with a GROUP!, e.g.</p>
<pre><code> any [
     condition1
     cond = ition2
     con dit ion3
     (
         line one
         line two
     )
 ]
</code></pre>
<p>This lets you stop worrying about whether the lines of code at the end are able to affect the ANY's result  Ren-C gives you ELSE and THEN, so for the ANY case:</p>
<pre><code> any [
     condition1
     cond = ition2
     con dit ion3
 ] else [
     line one
     line two
 ]
</code></pre>
<p>But you can use THEN or ELSE with either construct, as appropriate (or you can use both).  I've found that:</p>
<pre><code>all [...] then [...]
</code></pre>
<p>...is particularly pleasing and comes up often, and is better than <code>if all [...] [...]</code> for keeping your place in the source when the ALL block is long.  It scans better.</p>
          <p><a href="https://forum.rebol.info/t/replacing-ifs-with-alls-and-if-nots-with-anys/925/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/replacing-ifs-with-alls-and-if-nots-with-anys/925/1</link>
        <pubDate>Sat, 24 Nov 2018 19:50:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-925-1</guid>
        <source url="https://forum.rebol.info/t/replacing-ifs-with-alls-and-if-nots-with-anys/925.rss">Replacing IFs with ALLs and IF-NOTs with ANYs</source>
      </item>
  </channel>
</rss>

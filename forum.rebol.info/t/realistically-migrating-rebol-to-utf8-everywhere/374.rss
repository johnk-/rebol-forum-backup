<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Realistically Migrating Rebol to &quot;UTF8 Everywhere&quot;</title>
    <link>https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374</link>
    <description>### History of Rebol Unicode

Rebol2 lacked unicode support, and one of the agenda items for Rebol3 was to support unicode.  This was an era that predated emoji--where codepoints that would take up more than two bytes were rare.  And as a cross-platform program that had to run on Windows (where Unicode support meant UCS-2 or UTF-16 or whatever people think Windows supports), the lowest denominator of 16-bit characters probably seemed fine to Carl.

The byte-sized string standard of Rebol2 had no particular prescription of what the bytes meant.  As in the DOS days, the low 127 characters were assumed to be ASCII, with 128-255 being whatever was relevant in your country--or box drawing characters--or what-not.  R3-Alpha adapted this by having two string formats:

* **byte-sized strings** where basically the bytes encoded the first 255 codepoints of Unicode, which are ASCII plus the [Latin-1 supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block))

* **wide strings** where the codepoints can be 0-65535, in an interpretation basically as [UCS-2](http://www.differencebetween.net/technology/software-technology/difference-between-ucs-2-and-utf-16/)

Which kind of string you have was simply detected by looking at the element width of the series the TEXT! cell points at.  If the series node says its elements are size 1, you have a byte-size string.  If the series node says its elements are size 2, then it&#39;s a wide string.

Hence byte-size strings aren&#39;t UTF-8 encoded.  You *might* have to re-encode a byte-size string to get UTF-8, if it contains any characters in the 128-255 range.  *(Clearly all wide strings must be re-encoded to get UTF-8.)*

Inserting a character into a byte-sized string must thusly look at the width of the string and the codepoint, and potentially perform a &quot;widening&quot;.  The same goes for inserting any string into another--depending on how &quot;optimal&quot; one is trying to be, not all insertions of wide strings into byte-size strings need cause an expansion, only those which are inserting a substring that actually contains codepoints over 255.

On the subject of &quot;trying to be optimal&quot;, there&#39;s a question of removing substrings.  Once a wide string has removals, you could scan the remaining codepoints to decide if it could be compacted back to a byte-sized string again.  But as it happens the code doesn&#39;t try to do this--once a string is widened, it stays wide.

Then there is an additional problem: codepoint use above 65535 has actually become commonplace, with emojis.

### Is there a better way?

The kneejerk reaction to solve the lack of support for high codepoints might be to continue the widening process.  That would mean 1, 2, and 4 byte string variants, with progressive widening as the need arises...and presumably little-if-any thinning.  This is [what Python did](https://www.python.org/dev/peps/pep-0393/), and also what Red does (or at least was the plan):

[Red&#39;s Plan For Unicode Support (2012)](http://www.red-lang.org/2012/09/plan-for-unicode-support.html)

However, I&#39;ve felt uneasy about going down this road.  If Rebol&#39;s goal is to eliminate unnecessary complexity and get real leverage, and UTF-8 support is a given anyway, what if UTF-8 were the only representation used?  

I was leaning that way despite some technical hurdles.  Then I was further emboldened by the UTF-8 Everywhere Manifesto, which articulated good arguments for why what I&#39;d been feeling wasn&#39;t crazy.  It&#39;s a good read, for anyone who hasn&#39;t read it:

**[The UTF-8 Everywhere Manifesto](http://utf8everywhere.org/)**

If Rebol switched to using UTF-8 as the sole internal representation for strings, there would be tremendous advantages:

* It would (obviously) give the missing support for high codepoints--which has been a sticking point for @IngoHohmann and others.

* Storage would stay efficient because there&#39;d be no &quot;widening&quot; of strings to undo.

* PARSE could reuse the UTF-8 based scanner on any strings, so `parse &quot;&lt;&lt; 1020 {Vidlice je úžasné} &gt;&gt;&quot; [thru &quot;&lt;&lt;&quot; set i integer! set s string! thru &quot;&gt;&gt;&quot;]` could expose the scanner .

* Unification of ANY-STRING! types and ANY-WORD! types would come even closer.  Ren-C converted WORD!s from using their own strange static tables into UTF-8 based series, which gave them the ability to be GC&#39;d...and now that would match what strings used.

* Comparisons and conversions (`to string! word | string = spelling-of word`) would speed up across the board.  With only one format, there&#39;s only one format to compare.

* It&#39;s already the case that **rebDo(&quot;print reverse&quot;, block, END)** takes advantage of the assumption that C string literals are valid UTF-8, to distinguish them from other Rebol-headered-types and instructions.  But even though the default ANY-STRING! REBVAL in the API containing &quot;print reverse&quot; would be spliced as a string literal in the values, with it being UTF-8 a modifier could allow **rebDo(rebCode(strPrintReverse), block, END)** to treat the STRING! as code just like it had come from a C literal.

* Since UTF-8 support is a sunk cost already for scanning and conversions, it would definitely mean more code would be deleted than added.

### If it&#39;s so great, why hasn&#39;t this been done already?

One of the main problems that the UTF-8 manifesto cites, Rebol doesn&#39;t actually have...which is quickly determining of the length of a string.  The length in codepoints can be cached in the series node, and since STRING! values contain their offset in codepoints, a length calculation is simply a matter of subtraction *(as it is today for an ANY-SERIES! at any position)*

But picking out of strings would be relatively slow.  If you want the 100th character of an ANY-STRING! today, as in `i: 100 | string/:i`, that merely does array access into the string data...a simple addition.  With UTF-8 only, in the worst case with no optimization, each index access must scan from the head of the data for the string.  (Due to UTF-8&#39;s design, it&#39;s actually relatively easy to skim forwards and backwards by character over an encoded sequence, but it&#39;s still work and has to read a lot of bytes along the way to its position).

This might not seem that much of a killer in Rebol, as people use the iterative **next** and **back** anyway...which we might imagine could cache the real byte offset of the character position in the value cell.  Yet the real problem is that **next** and **back** can&#39;t presume safety in navigation of the byte stream if it&#39;s mutated out from under it.  For a given ANY-STRING! there may be many potentially mutating values referencing into the same bytes, and if any one of them changed the bytes then it would mean that they could corrupt that cache...leading to incorrect or corrupt positions in the byte stream.

So the Achilles Heel of the idea is: **even if we&#39;re fine letting `string/:i` be relatively inefficient**, it would be **intolerable if the following code were O(N^2) with respect to the length of the string**:

     pos: string
     while [not tail? pos] [
         print first pos
         pos: next pos
     ]

But I think there&#39;s a way to finesse this.  Basically, build in a mutation generation counter to each ANY-STRING! series.  Then use the currently unused extra platform-pointer-sized chunk in mutable string values (which are at least 32-bits) to store some information about that stamp along with the byte offset of the character index when that stamp was taken.

So imagine if 16 bits were used for the mutation stamp, and 16 bits were used for the real byte offset.  The real byte offset could be compressed as a *delta* from the character offset, because if character 1000 is as byte offset 2000 then storing the difference as 1000 is using fewer bits.  There are also header bits which could be borrowed to further modify interpretation of the offset (bits to signal you should &quot;multiply it by 2 and add 1&quot;, for example).

Now the problem of false-positives when the mutation counter rolls over.  Well, basically you have to visit all the value cells that might have outdated mutation stamps and update the cell to say it has to re-seek.  But that&#39;s basically visiting all the nodes a GC would visit, so you might as well GC while you&#39;re doing it.  For that matter, each GC (or occasional GCs) could be going around and resetting these counters on strings with mutations anyway, making the need to trigger a synchronous GC on string mutation less likely.

This isn&#39;t foolproof, and there are going to be some pathological situations.  I&#39;m imagining some string algorithm that wants to insert data through one STRING! reference at one position, then write it through another STRING! reference at another position, and keep swapping back and forth.  You&#39;ll wind up re-seeking every time, and these mutation checks will add overhead even to that.

Two thoughts:

* It seems obviously useful to have a bit on strings that are known as having only ASCII codepoints, so that you can just do the byte-offset without worrying.  The mutation stamp can remain unmodified until it transitions to containing at least one non-ASCII codepoint.  It would be worth it to try and keep this bit fresh by any operation that incidentally has to go through all the bytes of a string for some other reason.  Then those strings won&#39;t have this kind of problem.

* If someone really does have a crazy string algorithm, Rebol&#39;s efficiency and cost curve is such that it&#39;s not *that* egregious to make a BLOCK! of CHAR! and do your algorithm on that.  Not only does the uniform cell size of a block mean O(1) access to the elements, but the algorithm can make use of all kinds of tricks that might make it more efficient than bookkeeping a bunch of string pointers.  (You could put BLANK!s in cells you plan to clear out at the end, for instance, without worrying about the problems of corrupting embedded nulls if you tried that on a raw ANY-STRING!)

I&#39;d thought of the signature idea before and felt like it was probably workable, but it&#39;s these two last ideas that give me the final boost of *&quot;yes, this is the right plan&quot;*.  I&#39;m anticipating wild success.  :-)</description>
    
    <lastBuildDate>Thu, 21 Mar 2019 18:07:03 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Realistically Migrating Rebol to &quot;UTF8 Everywhere&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="4" data-topic="374">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>As promising as that looks, I’d say it would be an optimistic to call it “half done”.</p>
</blockquote>
</aside>
<p>Coming back to it to try and get this out the door, I think "half done" was about right.  It took a week or two more work...and it's going to take a bit more work before it's "done"...it's a bit on the slow side right at the moment.</p>
<p>Nevertheless, <strong>I've gone ahead and committed it....UTF-8 Everywhere Lives!</strong></p>
<p>There's a whole new set of interesting angles to how BINARY! and TEXT! can intermix in PARSE:</p>
<aside class="onebox githubblob">
  <header class="source">
      <a href="https://github.com/metaeducation/ren-c/blob/64c12765c29cf1efde739bbd7b6272745a063b5f/tests/parse-tests.r#L432-L470" target="_blank" rel="nofollow noopener">github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://github.com/metaeducation/ren-c/blob/64c12765c29cf1efde739bbd7b6272745a063b5f/tests/parse-tests.r#L432-L470" target="_blank" rel="nofollow noopener">metaeducation/ren-c/blob/64c12765c29cf1efde739bbd7b6272745a063b5f/tests/parse-tests.r#L432-L470</a></h4>
<pre class="onebox"><code class="lang-r"><ol class="start lines" start="432" style="counter-reset: li-counter 431 ;">
<li>; Multi-byte characters and strings present a lot of challenges.  There should</li>
<li>; be many more tests and philosophies written up of what the semantics are,</li>
<li>; especially when it comes to BINARY! and ANY-STRING! mixtures.  These tests</li>
<li>; are better than nothing...</li>
<li>(</li>
<li>    catchar: #"🐱"</li>
<li>    did parse #{F09F90B1} [catchar end]</li>
<li>)(</li>
<li>    cattext: "🐱"</li>
<li>    did parse #{F09F90B1} [cattext end]</li>
<li>)(</li>
<li>    catbin: #{F09F90B1}</li>
<li>    did parse "🐱" [catbin end]</li>
<li>)(</li>
<li>    catchar: #"🐱"</li>
<li>    did parse "🐱" [catchar end]</li>
<li>)</li>
<li>
</li>
<li>[</li>
<li>    (</li>
</ol></code></pre>

  This file has been truncated. <a href="https://github.com/metaeducation/ren-c/blob/64c12765c29cf1efde739bbd7b6272745a063b5f/tests/parse-tests.r#L432-L470" target="_blank" rel="nofollow noopener">show original</a>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>I also imported a <a href="https://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html" rel="nofollow noopener">file from the W3C</a> to the tests, and got things started on how more purposeful tests might be written:</p>
<aside class="onebox githubblob">
  <header class="source">
      <a href="https://github.com/metaeducation/ren-c/blob/master/tests/string/utf8.test.reb#L7-L14" target="_blank" rel="nofollow noopener">github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://github.com/metaeducation/ren-c/blob/master/tests/string/utf8.test.reb#L7-L14" target="_blank" rel="nofollow noopener">metaeducation/ren-c/blob/master/tests/string/utf8.test.reb#L7-L14</a></h4>
<pre class="onebox"><code class="lang-reb"><ol class="start lines" start="7" style="counter-reset: li-counter 6 ;">
<li>;     import codecs
</li>
<li>;     with codecs.open('utf8-plain-text.txt', encoding='utf-8') as myfile:
</li>
<li>;         data = myfile.read()
</li>
<li>;         print(len(data))
</li>
<li>(
</li>
<li>    t: to text! read %fixtures/utf8-plain-text.txt
</li>
<li>    tlen: length of t
</li>
<li>    assert [tlen = 7086]
</li>
</ol></code></pre>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<aside class="quote no-group" data-post="1" data-topic="374">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But I think there’s a way to finesse this. Basically, build in a mutation generation counter to each ANY-STRING! series. Then use the currently unused extra platform-pointer-sized chunk in mutable string values (which are at least 32-bits) to store some information about that stamp along with the byte offset of the character index when that stamp was taken.</p>
</blockquote>
</aside>
<p>This approach isn't impossible...but it hinges on having a value cell in your hand at the moment of doing the lookup.  A lot of places have series nodes that aren't paired with any value, so there'd be no caching.</p>
<p>For the moment, the main caching is just done on the series itself.  Small series don't bother with a cache, larger ones could have several.  It leads to orders of magnitude in speedup, and a collection of large parses (like source analysis) is reduced to the scale of "minutes" instead of the scale of "a day".</p>
<aside class="quote no-group quote-modified" data-post="4" data-topic="374">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>One of the main villains here is the GET_ANY_CHAR() and SET_ANY_CHAR(), which <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/include/sys-value.h#L540" rel="nofollow noopener">originated in R3-Alpha</a>. (...)</p>
<p>But as long as PARSE code tries to use that generality, it’s going to be N^2 while iterating. And since PARSE frequently has to iterate its searches repeatedly, that quickly becomes N^3. It’s unacceptably slow for day to day use.</p>
<p>So that code must be converted to use iterators, and that iteration has to also be smart about mutation. (...)</p>
</blockquote>
</aside>
<p>This is where the big speedup is going to come from, but I figured it would be better to phase it.  Not only will the extra processing in parse help give this a test for a while, but also people can adapt to the first set of necessary changes before being hit with needing to rewrite any parse rules that expected to modify the iterated series without using parse keywords.</p>
          <p><a href="https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374/5</link>
        <pubDate>Thu, 21 Mar 2019 17:40:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-374-5</guid>
        <source url="https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374.rss">Realistically Migrating Rebol to &quot;UTF8 Everywhere&quot;</source>
      </item>
      <item>
        <title>Realistically Migrating Rebol to &quot;UTF8 Everywhere&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I wanted to write up some notes about progress on UTF-8 Everywhere, since a couple of weeks ago it was showing the first signs of life for codepoints which would <a href="https://github.com/metaeducation/ren-c/issues/271" rel="nofollow noopener">previously cause errors</a>:</p>
<p><div class="lightbox-wrapper"><a class="lightbox" href="https://forum.rebol.info/uploads/default/original/1X/1d1ac4b157c148d17b57421f7611e0ce1fedceab.png" data-download-href="https://forum.rebol.info/uploads/default/1d1ac4b157c148d17b57421f7611e0ce1fedceab" title="utf8-everywhere-starts.png"><img src="https://forum.rebol.info/uploads/default/optimized/1X/1d1ac4b157c148d17b57421f7611e0ce1fedceab_2_400x240.png" width="400" height="240" srcset="https://forum.rebol.info/uploads/default/optimized/1X/1d1ac4b157c148d17b57421f7611e0ce1fedceab_2_400x240.png, https://forum.rebol.info/uploads/default/optimized/1X/1d1ac4b157c148d17b57421f7611e0ce1fedceab_2_600x360.png 1.5x, https://forum.rebol.info/uploads/default/optimized/1X/1d1ac4b157c148d17b57421f7611e0ce1fedceab_2_800x480.png 2x" data-small-upload="https://forum.rebol.info/uploads/default/optimized/1X/1d1ac4b157c148d17b57421f7611e0ce1fedceab_2_10x10.png"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">utf8-everywhere-starts.png</span><span class="informations">1430×923 182 KB</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p>
<p>And it's not just booting--it's able to do a reasonable amount.  It could do this, too.</p>
<pre><code>&gt;&gt; bincat: to-binary {C😺T}
== #{43F09F98BA54}

&gt;&gt; parse bincat [{C😺T}]
== true

&gt;&gt; parse bincat [{c😺t}]
== true

&gt;&gt; parse/case bincat [{c😺t}]
== false

&gt;&gt; test: to-binary {The C😺T Test}
== #{5468652043F09F98BA542054657374}

&gt;&gt; parse test [to {c😺t} copy x to space to end]
== true

&gt;&gt; x
== #{43F09F98BA54}

&gt;&gt; to-string x
== "C😺T"
</code></pre>
<p>As promising as that looks, I'd say it would be an optimistic to call it "half done".  :-/  What needs to be done next is the optimizations avoiding needing to scan strings from the beginning every time you want to translate an index into a character position.</p>
<p>One of the main villains here is the GET_ANY_CHAR() and SET_ANY_CHAR(), which <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/include/sys-value.h#L540" rel="nofollow noopener">originated in R3-Alpha</a>. They were intended to abstract across BINARY!, Latin1-STRING!, and wide character STRING!.  So for instance, PARSE could operate generically on BINARY! and STRING! by using these macros and indexing with them.</p>
<p>But as long as PARSE code tries to use that generality, it's going to be N^2 while iterating.  And since PARSE frequently has to iterate its searches repeatedly, that quickly becomes N^3.  It's unacceptably slow for day to day use.</p>
<p>So that code must be converted to use iterators, and that iteration has to also be smart about mutation.  It's going to take some time, and working on the API and emscripten is higher priority for the moment.  But the two tasks kind of tie together, and I've had to rebase parts out of UTF-8 Everywhere a bit at a time...which kind of makes me wish I had more discipline of breaking down commits to being single changes.  :-/</p>
<hr>
<p>In looking around at languages, most are hinged on 2-bytes-per-codepoint, because that's what Windows and Java did.  The only one I could find so far that's gone the UTF-8 Everywhere route is Rust.  Here's a bit about their <em>"UTF-8 encoded, growable string."</em></p>
<p><a href="https://doc.rust-lang.org/std/string/struct.String.html" class="onebox" target="_blank" rel="nofollow noopener">https://doc.rust-lang.org/std/string/struct.String.html</a></p>
<p>UCS-2 certainly seems an artificial and awkward liability in systems which are trying to handle emojis and such, in systems that only <em>need</em> to support UTF-8.  So I was curious if JavaScript implementations were going toward the idea of UTF-8 internally.  I found this essay on why when confronted with the need for optimization, they added Latin1 (similar to what R3-Alpha did) instead of just switching to UTF-8:</p>
<p><a href="https://blog.mozilla.org/javascript/2014/07/21/slimmer-and-faster-javascript-strings-in-firefox/" class="onebox" target="_blank" rel="nofollow noopener">https://blog.mozilla.org/javascript/2014/07/21/slimmer-and-faster-javascript-strings-in-firefox/</a></p>
<blockquote>
<p>At this point you may ask: wait, it’s 2014, why use Latin1 and not UTF8? It’s a good question and I did consider UTF8, but it has a number of disadvantages for us, most importantly:</p>
<ul>
<li>Gecko is huge and it uses TwoByte strings in most places. Converting all of Gecko to use UTF8 strings is a much bigger project and has its own risks.  As described below, we currently inflate Latin1 strings to TwoByte Gecko strings and that was also a potential performance risk, but inflating Latin1 is much faster than inflating UTF8.</li>
<li>Linear-time indexing: operations like charAt require character indexing to be fast. We discussed solving this by adding a special flag to indicate all characters in the string are ASCII, so that we can still use O(1) indexing in this case. This scheme will only work for ASCII strings, though, so it’s a potential performance risk. An alternative is to have such operations inflate the string from UTF8 to TwoByte, but that’s also not ideal.</li>
<li>Converting SpiderMonkey’s own string algorithms to work on UTF8 would require a lot more work. This includes changing the irregexp regular expression engine we imported from V8 a few months ago (it already had code to handle Latin1 strings).</li>
</ul>
<p>So although UTF8 has advantages, with Latin1 I was able to get significant wins in a much shorter time, without the potential performance risks. Also, with all the refactoring I did we’re now in a much better place to add UTF8 in the future, if Gecko ever decides to switch.</p>
</blockquote>
<p>So it's interesting to see how tied their hands are, and to consider the benefit of being agile enough to do this change now, before its too late.</p>
          <p><a href="https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374/4</link>
        <pubDate>Wed, 28 Feb 2018 19:47:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-374-4</guid>
        <source url="https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374.rss">Realistically Migrating Rebol to &quot;UTF8 Everywhere&quot;</source>
      </item>
      <item>
        <title>Realistically Migrating Rebol to &quot;UTF8 Everywhere&quot;</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>I agree when you really do need to perform some extensive algorithm on your string, perhaps a string is not the correct structure for your data.</p>
<p>The benefits of UTF-8 support outway the downsides imho, and if in time other formats need to be supported, those can and will be added later.</p>
          <p><a href="https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374/3</link>
        <pubDate>Mon, 13 Nov 2017 10:38:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-374-3</guid>
        <source url="https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374.rss">Realistically Migrating Rebol to &quot;UTF8 Everywhere&quot;</source>
      </item>
      <item>
        <title>Realistically Migrating Rebol to &quot;UTF8 Everywhere&quot;</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Cool! Can't wait to see how this unfolds in practice. Looks promising.</p>
          <p><a href="https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374/2</link>
        <pubDate>Sat, 11 Nov 2017 20:20:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-374-2</guid>
        <source url="https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374.rss">Realistically Migrating Rebol to &quot;UTF8 Everywhere&quot;</source>
      </item>
      <item>
        <title>Realistically Migrating Rebol to &quot;UTF8 Everywhere&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h3>History of Rebol Unicode</h3>
<p>Rebol2 lacked unicode support, and one of the agenda items for Rebol3 was to support unicode.  This was an era that predated emoji--where codepoints that would take up more than two bytes were rare.  And as a cross-platform program that had to run on Windows (where Unicode support meant UCS-2 or UTF-16 or whatever people think Windows supports), the lowest denominator of 16-bit characters probably seemed fine to Carl.</p>
<p>The byte-sized string standard of Rebol2 had no particular prescription of what the bytes meant.  As in the DOS days, the low 127 characters were assumed to be ASCII, with 128-255 being whatever was relevant in your country--or box drawing characters--or what-not.  R3-Alpha adapted this by having two string formats:</p>
<ul>
<li>
<p><strong>byte-sized strings</strong> where basically the bytes encoded the first 255 codepoints of Unicode, which are ASCII plus the <a href="https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)" rel="nofollow noopener">Latin-1 supplement</a></p>
</li>
<li>
<p><strong>wide strings</strong> where the codepoints can be 0-65535, in an interpretation basically as <a href="http://www.differencebetween.net/technology/software-technology/difference-between-ucs-2-and-utf-16/" rel="nofollow noopener">UCS-2</a></p>
</li>
</ul>
<p>Which kind of string you have was simply detected by looking at the element width of the series the TEXT! cell points at.  If the series node says its elements are size 1, you have a byte-size string.  If the series node says its elements are size 2, then it's a wide string.</p>
<p>Hence byte-size strings aren't UTF-8 encoded.  You <em>might</em> have to re-encode a byte-size string to get UTF-8, if it contains any characters in the 128-255 range.  <em>(Clearly all wide strings must be re-encoded to get UTF-8.)</em></p>
<p>Inserting a character into a byte-sized string must thusly look at the width of the string and the codepoint, and potentially perform a "widening".  The same goes for inserting any string into another--depending on how "optimal" one is trying to be, not all insertions of wide strings into byte-size strings need cause an expansion, only those which are inserting a substring that actually contains codepoints over 255.</p>
<p>On the subject of "trying to be optimal", there's a question of removing substrings.  Once a wide string has removals, you could scan the remaining codepoints to decide if it could be compacted back to a byte-sized string again.  But as it happens the code doesn't try to do this--once a string is widened, it stays wide.</p>
<p>Then there is an additional problem: codepoint use above 65535 has actually become commonplace, with emojis.</p>
<h3>Is there a better way?</h3>
<p>The kneejerk reaction to solve the lack of support for high codepoints might be to continue the widening process.  That would mean 1, 2, and 4 byte string variants, with progressive widening as the need arises...and presumably little-if-any thinning.  This is <a href="https://www.python.org/dev/peps/pep-0393/" rel="nofollow noopener">what Python did</a>, and also what Red does (or at least was the plan):</p>
<p><a href="http://www.red-lang.org/2012/09/plan-for-unicode-support.html" rel="nofollow noopener">Red's Plan For Unicode Support (2012)</a></p>
<p>However, I've felt uneasy about going down this road.  If Rebol's goal is to eliminate unnecessary complexity and get real leverage, and UTF-8 support is a given anyway, what if UTF-8 were the only representation used?</p>
<p>I was leaning that way despite some technical hurdles.  Then I was further emboldened by the UTF-8 Everywhere Manifesto, which articulated good arguments for why what I'd been feeling wasn't crazy.  It's a good read, for anyone who hasn't read it:</p>
<p><strong><a href="http://utf8everywhere.org/" rel="nofollow noopener">The UTF-8 Everywhere Manifesto</a></strong></p>
<p>If Rebol switched to using UTF-8 as the sole internal representation for strings, there would be tremendous advantages:</p>
<ul>
<li>
<p>It would (obviously) give the missing support for high codepoints--which has been a sticking point for <a class="mention" href="/u/ingohohmann">@IngoHohmann</a> and others.</p>
</li>
<li>
<p>Storage would stay efficient because there'd be no "widening" of strings to undo.</p>
</li>
<li>
<p>PARSE could reuse the UTF-8 based scanner on any strings, so <code>parse "&lt;&lt; 1020 {Vidlice je úžasné} &gt;&gt;" [thru "&lt;&lt;" set i integer! set s string! thru "&gt;&gt;"]</code> could expose the scanner .</p>
</li>
<li>
<p>Unification of ANY-STRING! types and ANY-WORD! types would come even closer.  Ren-C converted WORD!s from using their own strange static tables into UTF-8 based series, which gave them the ability to be GC'd...and now that would match what strings used.</p>
</li>
<li>
<p>Comparisons and conversions (<code>to string! word | string = spelling-of word</code>) would speed up across the board.  With only one format, there's only one format to compare.</p>
</li>
<li>
<p>It's already the case that <strong>rebDo("print reverse", block, END)</strong> takes advantage of the assumption that C string literals are valid UTF-8, to distinguish them from other Rebol-headered-types and instructions.  But even though the default ANY-STRING! REBVAL in the API containing "print reverse" would be spliced as a string literal in the values, with it being UTF-8 a modifier could allow <strong>rebDo(rebCode(strPrintReverse), block, END)</strong> to treat the STRING! as code just like it had come from a C literal.</p>
</li>
<li>
<p>Since UTF-8 support is a sunk cost already for scanning and conversions, it would definitely mean more code would be deleted than added.</p>
</li>
</ul>
<h3>If it's so great, why hasn't this been done already?</h3>
<p>One of the main problems that the UTF-8 manifesto cites, Rebol doesn't actually have...which is quickly determining of the length of a string.  The length in codepoints can be cached in the series node, and since STRING! values contain their offset in codepoints, a length calculation is simply a matter of subtraction <em>(as it is today for an ANY-SERIES! at any position)</em></p>
<p>But picking out of strings would be relatively slow.  If you want the 100th character of an ANY-STRING! today, as in <code>i: 100 | string/:i</code>, that merely does array access into the string data...a simple addition.  With UTF-8 only, in the worst case with no optimization, each index access must scan from the head of the data for the string.  (Due to UTF-8's design, it's actually relatively easy to skim forwards and backwards by character over an encoded sequence, but it's still work and has to read a lot of bytes along the way to its position).</p>
<p>This might not seem that much of a killer in Rebol, as people use the iterative <strong>next</strong> and <strong>back</strong> anyway...which we might imagine could cache the real byte offset of the character position in the value cell.  Yet the real problem is that <strong>next</strong> and <strong>back</strong> can't presume safety in navigation of the byte stream if it's mutated out from under it.  For a given ANY-STRING! there may be many potentially mutating values referencing into the same bytes, and if any one of them changed the bytes then it would mean that they could corrupt that cache...leading to incorrect or corrupt positions in the byte stream.</p>
<p>So the Achilles Heel of the idea is: <strong>even if we're fine letting <code>string/:i</code> be relatively inefficient</strong>, it would be <strong>intolerable if the following code were O(N^2) with respect to the length of the string</strong>:</p>
<pre><code> pos: string
 while [not tail? pos] [
     print first pos
     pos: next pos
 ]
</code></pre>
<p>But I think there's a way to finesse this.  Basically, build in a mutation generation counter to each ANY-STRING! series.  Then use the currently unused extra platform-pointer-sized chunk in mutable string values (which are at least 32-bits) to store some information about that stamp along with the byte offset of the character index when that stamp was taken.</p>
<p>So imagine if 16 bits were used for the mutation stamp, and 16 bits were used for the real byte offset.  The real byte offset could be compressed as a <em>delta</em> from the character offset, because if character 1000 is as byte offset 2000 then storing the difference as 1000 is using fewer bits.  There are also header bits which could be borrowed to further modify interpretation of the offset (bits to signal you should "multiply it by 2 and add 1", for example).</p>
<p>Now the problem of false-positives when the mutation counter rolls over.  Well, basically you have to visit all the value cells that might have outdated mutation stamps and update the cell to say it has to re-seek.  But that's basically visiting all the nodes a GC would visit, so you might as well GC while you're doing it.  For that matter, each GC (or occasional GCs) could be going around and resetting these counters on strings with mutations anyway, making the need to trigger a synchronous GC on string mutation less likely.</p>
<p>This isn't foolproof, and there are going to be some pathological situations.  I'm imagining some string algorithm that wants to insert data through one STRING! reference at one position, then write it through another STRING! reference at another position, and keep swapping back and forth.  You'll wind up re-seeking every time, and these mutation checks will add overhead even to that.</p>
<p>Two thoughts:</p>
<ul>
<li>
<p>It seems obviously useful to have a bit on strings that are known as having only ASCII codepoints, so that you can just do the byte-offset without worrying.  The mutation stamp can remain unmodified until it transitions to containing at least one non-ASCII codepoint.  It would be worth it to try and keep this bit fresh by any operation that incidentally has to go through all the bytes of a string for some other reason.  Then those strings won't have this kind of problem.</p>
</li>
<li>
<p>If someone really does have a crazy string algorithm, Rebol's efficiency and cost curve is such that it's not <em>that</em> egregious to make a BLOCK! of CHAR! and do your algorithm on that.  Not only does the uniform cell size of a block mean O(1) access to the elements, but the algorithm can make use of all kinds of tricks that might make it more efficient than bookkeeping a bunch of string pointers.  (You could put BLANK!s in cells you plan to clear out at the end, for instance, without worrying about the problems of corrupting embedded nulls if you tried that on a raw ANY-STRING!)</p>
</li>
</ul>
<p>I'd thought of the signature idea before and felt like it was probably workable, but it's these two last ideas that give me the final boost of <em>"yes, this is the right plan"</em>.  I'm anticipating wild success.  <img src="//forum.rebol.info/images/emoji/twitter/slight_smile.png?v=7" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374/1</link>
        <pubDate>Sat, 11 Nov 2017 03:39:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-374-1</guid>
        <source url="https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374.rss">Realistically Migrating Rebol to &quot;UTF8 Everywhere&quot;</source>
      </item>
  </channel>
</rss>

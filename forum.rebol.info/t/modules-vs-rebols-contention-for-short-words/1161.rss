<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Modules vs. Rebol&#39;s Contention for Short Words</title>
    <link>https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161</link>
    <description>There&#39;s an aversion in Rebol scripts of putting things into sub-contexts.  You see it when the math operation **tan** competes with the color **tan**.

Despite issues like this being known about since the earliest days, it&#39;s certainly telling that there wasn&#39;t some immediate backlash, where **math: make object! [tan: ...]** and **color: make object! [tan: ...]** were made.  Though Red decided to made `tanned` the color and take `tan` for the math operation, they didn&#39;t follow up by making `reddish`.  They still define `red` as 255.0.0, and `red` is not a `synonym` for the system object as `rebol` was.  *([Which is a bad idea, anyway.](https://github.com/rebol/rebol-issues/issues/2373))*

### A Fractal of Contention

If you tried to put the operations and colors under &quot;math/xxx&quot; and &quot;color/xxx&quot; as above, you have another problem.  MATH is currently purposed as a dialect using &quot;normal&quot; mathematical precedence for expressions.  COLOR sounds like it would almost certainly be a local variable name, and you can&#39;t say `color: color/tan`.

When other languages run up against this, they might attack it with case sensitivity.  If Rebol were to do that it would be `color: Color/tan`...but [that&#39;s not the game here](http://blog.hostilefork.com/making-the-case-for-caselessness/).  You can pluralize things maybe... `color: colors/tan`, but one might also have a variable like `colors: [tan red]`.

**All text-based languages have problems like this.**  BUT Rebol&#39;s desire for an English-like aesthetic puts more of a premium price on short words.  And its lexical uniformity makes it harder to suss out the &quot;parts of speech&quot; to know what the heck you are reading:

    foo/baz/bar mumble/frotz fribble  ; objects? functions? refinements? (?!)

    foo.baz(mumble.frotz, bar: fribble)  ; More conventional syntax is clearer

*(Note: I&#39;m now thinking that with @foo.bar being a likely SYM-TUPLE!, that the inertness of tuples may be less useful than considering them to be a field-selector operation... and even to let you add fields to ACTION!s, as you can in JavaScript.  So **`math [1 + 2 * 3]`** could work, but so could **`math.tangent 0.0`**.  It wouldn&#39;t be a refinement, just a member of an aggregate that also could execute in its own right.  It&#39;s a thought, anyway.)*

## What About Getting the Brevity That You Pay For?

Very little of what I write involves colors at all (more now perhaps with the HTML console).  I&#39;m also not a huge user of trigonometry or floating point math--at least not in Rebol.  The kinds of problems I&#39;m interested in for a script language almost never require math outside of integers.  I&#39;m more likely to use RED and BLACK as data structure annotations as in a [Red-Black Tree](https://en.wikipedia.org/wiki/Red%E2%80%93black_tree).  If I ever needed colors or trigonometry, it would be task-sensitive to say whether `tan` should win as `tangent` or the color.

Over the long run, if there&#39;s going to be any sort of scalability for Rebol...things like the inclusion of colors in global scope has to be something that *someone* asked for.

So perhaps modules should have a kind of dialected inclusion?  There could be a language for telling the trigonometry module &quot;give me the abbreviations&quot;.  You could ask for sets of things to be bound as the words with no qualification, or others to be bound through a local alias for the module.

If you have common sets of inclusions, you should be able to abstract that.  Even C can do this...  you can `#include` a file that includes others.

In any case, I think the core language needs to pare down implicit definitions.  Things are [moving that direction with the extensions](https://github.com/metaeducation/ren-c/tree/master/extensions), but those extensions are still poking things into the LIB context without being asked.  I give the color and math operations as good examples of things that must be asked to be put into the main binding of the module...otherwise you get them through a name.

## What About a Shortcut to a Module&#39;s &quot;Needs&quot; Space?

In C++, there is a way of getting out of your &quot;local scope&quot; and up to the global scope:

https://stackoverflow.com/questions/4269034/what-is-the-meaning-of-prepended-double-colon

Right now, getting access to the modules list requires you to do `system/modules/mod-name`.  But what if each module kept a small object for the extensions that it had included, and put it in something like `~`?

    &gt;&gt; color: ~/colors/tan
    == 222.184.135

    &gt;&gt; ~/math/tan 0.0
    == 0.0

    &gt;&gt; math [1 + 2 * 3]
    == 7

Someone who is doing a modest amount of trigonometry might prefer to import it named `trig` and access it as `trig`.  Or import them with full names, or ask the module to abbreviate the names.  I&#39;m just talking about a spectrum of options based on how much you use the thing.

Or maybe MATH itself is what binds to TAN.  So you&#39;d say **math [tan 0.0]**, and if you use TAN outside of MATH you don&#39;t get it.

Or it may be that `~` is just the module itself, where the binding the module did at load time wasn&#39;t to necessarily bind everything that was included.  e.g. there may be a module field for `math` which is the math module, but it would bind plain uses of `math` to `lib/math` despite the existence of that field. 

Further: the idea of importing things locally could be at a function or USE granularity.  If only one of your functions mentions trigonometry, why not have that one be `function [... &lt;in&gt; ~/trigonometry] [...]`   If you have multiple functions that want to do this, why not make your own variant, e.g. TFUNCTION, that adds the trigonometry dependency?

## Any Methodology Should Be Able To Do Redbol Emulation

These ideas sound like they may bring a lot of concerns and decisions to the average user.

But if you can abstract it to something like `Needs: Redbol` and have that do all the necessary work to achieve a Rebol2/Red environment, then that would be a good proof of concept.</description>
    
    <lastBuildDate>Mon, 21 Sep 2020 15:21:55 +0000</lastBuildDate>
    <category>Modules</category>
    <atom:link href="https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Modules vs. Rebol&#39;s Contention for Short Words</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="6" data-topic="1161">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/iarnold/40/226_2.png" class="avatar"> iArnold:</div>
<blockquote>
<p>If you got a module with functions and these can use functions from another module, in theory that function can reset the active module to its own ('WITH) in effect overriding the previous assignment. Your math function will call tan but because you cannot guarantee the 'WITH for math still holds it could be the color tan being used.</p>
</blockquote>
</aside>
<p>First of all, that's no different than being able to change words in LIB.</p>
<p>Second of all, we won't have changing words in LIB be so easy by default in the future.  That's the whole reason we have all the CONST and PROTECT and FREEZE functions to choose from.  The module system can take advantage of this based on your settings, just as you can use it in your normal day-to-day code.  Why do you think I belabored it so much and making sure it worked right?</p>
<pre><code> mod1: const make object! [
      api: func [x] [print ["The value of x is" x]]
 ]

 mod2: make object! [
     mean-api: func [y] [
         print ["The value of y is" y]
         print ["And I'm going to mess with mod1"]
         mod1/api: void
     ]
  ]
</code></pre>
<p>The const on MOD1 make it a "view" of the object that cannot be modified unless MUTABLE is used to get at the data.  But the internals of the module are not affected...only accesses through that mod1 variable:</p>
<pre><code>&gt;&gt; mod1/api 1020
The value of x is 1020

&gt;&gt; mod2/mean-api 304
The value of y is 304
And I'm going to mess with mod1
** Access Error: CONST or iterative value (see MUTABLE): make object! [
    api: 'make action! [[x] [...]]
]
</code></pre>
<p>There's tools for most of what you could think of.  e.g. the PROTECT here keeps the value of the variable mod1 itself from being changed.</p>
<pre><code>&gt;&gt; protect 'mod1

&gt;&gt; mod1: void
** Access Error: variable mod1 locked by PROTECT (see UNPROTECT)
</code></pre>
<p>Everything is covered in one way or another, it's just about setting the policy and picking defaults.  Whatever the syntax is for IMPORT as a keyword or something in the module header, it should give ways to specify what you want, and do a reasonable thing if you don't specify--whatever that is.</p>
<p>But again, you can use these features in your own code today.  There are a lot of problems, but these are pretty far along on being solved.</p>
          <p><a href="https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161/7</link>
        <pubDate>Mon, 21 Sep 2020 15:14:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1161-7</guid>
        <source url="https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161.rss">Modules vs. Rebol&#39;s Contention for Short Words</source>
      </item>
      <item>
        <title>Modules vs. Rebol&#39;s Contention for Short Words</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>If you got a module with functions and these can use functions from another module, in theory that function can reset the active module to its own ('WITH) in effect overriding the previous assignment. Your math function will call tan but because you cannot guarantee the 'WITH for math still holds it could be the color tan being used.</p>
<p>In a more practical way a low precision method could be chosen where a high precision one should be used.</p>
          <p><a href="https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161/6</link>
        <pubDate>Mon, 21 Sep 2020 15:06:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1161-6</guid>
        <source url="https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161.rss">Modules vs. Rebol&#39;s Contention for Short Words</source>
      </item>
      <item>
        <title>Modules vs. Rebol&#39;s Contention for Short Words</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="4" data-topic="1161">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/iarnold/40/226_2.png" class="avatar"> iArnold:</div>
<blockquote>
<p>If you make the module name change the precedence of wanted functionality, there would be a serious problem because any function before your current could have changed this theoretically, so you need to keep setting it before doing almost anything.</p>
</blockquote>
</aside>
<p>I don't understand the concern, so please write out a concrete example if you have one.</p>
          <p><a href="https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161/5</link>
        <pubDate>Mon, 21 Sep 2020 13:43:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1161-5</guid>
        <source url="https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161.rss">Modules vs. Rebol&#39;s Contention for Short Words</source>
      </item>
      <item>
        <title>Modules vs. Rebol&#39;s Contention for Short Words</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>And then you get an object in an object and here is .. a.b.c isn't that a tuple!? So that should not be allowed(?)</p>
<p>Also I see you need a wizard to make it. That makes it tempting to volunteer. Perhaps I'll have a go at it, using a branch on R3N github.</p>
<p>If you make the module name change the precedence of wanted functionality, there would be a serious problem because any function before your current could have changed this theoretically, so you need to keep setting it before doing almost anything. <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=9" title=":frowning:" class="emoji" alt=":frowning:"><br>
Thus having a short name and use math.functionx or math [themathematicsblockwithfunctionx] as a choice is good enough I guess.</p>
          <p><a href="https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161/4</link>
        <pubDate>Mon, 21 Sep 2020 08:59:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1161-4</guid>
        <source url="https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161.rss">Modules vs. Rebol&#39;s Contention for Short Words</source>
      </item>
      <item>
        <title>Modules vs. Rebol&#39;s Contention for Short Words</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The possibilities of TUPLE! as evaluative (in its <strong>word.x.y</strong> form) are pretty much obliterating the idea I floated about all tuples being inert.  So time to forget that concept.  Of course <code>1.2.3</code> will be inert, and <code>&lt;tag&gt;.foo.3</code> and all other inert-headed tuples will be too.  Your word-headed or group-headed tuples will have to pursue other other options like <code>value: [a.b.c]</code> or <code>@a.b.c</code> or <code>'a.b.c</code>.</p>
<p><em>(I'm a bit sad that I couldn't come up with an evaluative strategic value for <strong>/foo/bar</strong> that solved some grand problem related to scopes or modules or something.  But the consolation prize is that since I couldn't come up with anything...having such paths be inert gives compatibility with historical refinement inertness.  Time to sleep easier with that resolved.)</em></p>
<p>Furthermore...</p>
<aside class="quote no-group" data-post="1" data-topic="1161">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>(Note: I'm now thinking that with <span class="mention">@foo.bar</span> being a likely SYM-TUPLE!, that the inertness of tuples may be less useful than considering them to be a field-selector operation... and even to let you add fields to ACTION!s, as you can in JavaScript. So <strong><code>math [1 + 2 * 3]</code></strong> could work, but so could <strong><code>math.tangent 0.0</code></strong> . It wouldn't be a refinement, just a member of an aggregate that also could execute in its own right. It's a thought, anyway.)</p>
</blockquote>
</aside>
<p>...coming back to this, I see I already talked about this very useful possibility for something like MATH being able to act as either executable, or have sub-selection like an object.</p>
<p>My experiences dabbling lately with other languages kind of suggests this is pretty much the only idea anyone seems to have.  <em>(Outside of hashing the AST of a function and all its dependent source in a pure functional language and referencing everything with the hash code <a href="https://www.unisonweb.org/" rel="nofollow noopener">as a timeless invariant to name functions</a>...)</em>.</p>
<h2>WE NEED IT.  How to do it?</h2>
<p>Perhaps objects can have a special function in them or associated with them that can be called when you access them raw...or with slashes.  But if you don't have a definition of that function, you get a field selection...hence compatibility.</p>
<p>In fact, maybe that function could just be called ".", and operate parallel to the divide hack for making such a thing legal as a WORD! ?</p>
<pre><code>math: make object! [
    .: func [b [block!] /ref] [  ; magic makes it `-dot-1-: func [...]`
        print ["processing" mold b "in MATH dialect"]
        if ref [print "...and a refinement works too"]
    ]
    tan: func [angle [decimal!]] [
        print ["calculating tangent of" angle]
    ]
]

&gt;&gt; math [1 + 2 * 3]
processing [1 + 2 * 3] in MATH dialect

&gt;&gt; math/ref [1 + 2 * 3]
processing [1 + 2 * 3] in MATH dialect
...and a refinement works too

&gt;&gt; math.tan 90
calculating tangent of 90
</code></pre>
<p>This does raise questions of what <strong>:math</strong> should do.  On the one hand, people might expect to be able to pass it as a function parameter since they were able to call it.  On the other hand, you might want to assign it to something else and have it act like the full deal... having math.tan available/etc.</p>
<p>Hmmm.  Well maybe if you want the object you'd use a terminal dot, and if you just want the behavior as an action you would use get-word!</p>
<pre><code>&gt;&gt; math.
== make object! [...]

&gt;&gt; :math
== make action! [b [block!] /ref]
</code></pre>
<p>My notion of terminal dots was that it would guarantee you that the thing you were extracting was not a function... a concept I very much like the sound of for writing library code that is handling values from wherever and needs to protect against random executions.  It seems to dovetail nicely with this.</p>
<h2>Okay, that looks awesome.</h2>
<p>Who wants to write it?  <img src="https://forum.rebol.info/images/emoji/twitter/mage.png?v=9" title=":mage:" class="emoji" alt=":mage:">  Don't come sign up all at once, now... single file, please...</p>
          <p><a href="https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161/3</link>
        <pubDate>Mon, 21 Sep 2020 01:35:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1161-3</guid>
        <source url="https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161.rss">Modules vs. Rebol&#39;s Contention for Short Words</source>
      </item>
      <item>
        <title>Modules vs. Rebol&#39;s Contention for Short Words</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I know WITH isn't a universally popular idea, but if you have objects loaded with these words, you could say:</p>
<pre><code>my-tan: with colors [tan]
my-math-tan: with math [:tan]
</code></pre>
<p>I've been using WITH as shorthand for <code>do bind block object</code> for a while and it seems workable, and WITH/ONLY where you need, say:</p>
<pre><code>parse "foo" with/only charsets [some alpha]</code></pre>
          <p><a href="https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161/2</link>
        <pubDate>Wed, 08 May 2019 15:17:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1161-2</guid>
        <source url="https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161.rss">Modules vs. Rebol&#39;s Contention for Short Words</source>
      </item>
      <item>
        <title>Modules vs. Rebol&#39;s Contention for Short Words</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There's an aversion in Rebol scripts of putting things into sub-contexts.  You see it when the math operation <strong>tan</strong> competes with the color <strong>tan</strong>.</p>
<p>Despite issues like this being known about since the earliest days, it's certainly telling that there wasn't some immediate backlash, where <strong>math: make object! [tan: ...]</strong> and <strong>color: make object! [tan: ...]</strong> were made.  Though Red decided to made <code>tanned</code> the color and take <code>tan</code> for the math operation, they didn't follow up by making <code>reddish</code>.  They still define <code>red</code> as 255.0.0, and <code>red</code> is not a <code>synonym</code> for the system object as <code>rebol</code> was.  <em>(<a href="https://github.com/rebol/rebol-issues/issues/2373">Which is a bad idea, anyway.</a>)</em></p>
<h3>A Fractal of Contention</h3>
<p>If you tried to put the operations and colors under "math/xxx" and "color/xxx" as above, you have another problem.  MATH is currently purposed as a dialect using "normal" mathematical precedence for expressions.  COLOR sounds like it would almost certainly be a local variable name, and you can't say <code>color: color/tan</code>.</p>
<p>When other languages run up against this, they might attack it with case sensitivity.  If Rebol were to do that it would be <code>color: Color/tan</code>...but <a href="http://blog.hostilefork.com/making-the-case-for-caselessness/">that's not the game here</a>.  You can pluralize things maybe... <code>color: colors/tan</code>, but one might also have a variable like <code>colors: [tan red]</code>.</p>
<p><strong>All text-based languages have problems like this.</strong>  BUT Rebol's desire for an English-like aesthetic puts more of a premium price on short words.  And its lexical uniformity makes it harder to suss out the "parts of speech" to know what the heck you are reading:</p>
<pre><code>foo/baz/bar mumble/frotz fribble  ; objects? functions? refinements? (?!)

foo.baz(mumble.frotz, bar: fribble)  ; More conventional syntax is clearer
</code></pre>
<p><em>(Note: I'm now thinking that with <span class="mention">@foo.bar</span> being a likely SYM-TUPLE!, that the inertness of tuples may be less useful than considering them to be a field-selector operation... and even to let you add fields to ACTION!s, as you can in JavaScript.  So <strong><code>math [1 + 2 * 3]</code></strong> could work, but so could <strong><code>math.tangent 0.0</code></strong>.  It wouldn't be a refinement, just a member of an aggregate that also could execute in its own right.  It's a thought, anyway.)</em></p>
<h2>What About Getting the Brevity That You Pay For?</h2>
<p>Very little of what I write involves colors at all (more now perhaps with the HTML console).  I'm also not a huge user of trigonometry or floating point math--at least not in Rebol.  The kinds of problems I'm interested in for a script language almost never require math outside of integers.  I'm more likely to use RED and BLACK as data structure annotations as in a <a href="https://en.wikipedia.org/wiki/Red%E2%80%93black_tree">Red-Black Tree</a>.  If I ever needed colors or trigonometry, it would be task-sensitive to say whether <code>tan</code> should win as <code>tangent</code> or the color.</p>
<p>Over the long run, if there's going to be any sort of scalability for Rebol...things like the inclusion of colors in global scope has to be something that <em>someone</em> asked for.</p>
<p>So perhaps modules should have a kind of dialected inclusion?  There could be a language for telling the trigonometry module "give me the abbreviations".  You could ask for sets of things to be bound as the words with no qualification, or others to be bound through a local alias for the module.</p>
<p>If you have common sets of inclusions, you should be able to abstract that.  Even C can do this...  you can <code>#include</code> a file that includes others.</p>
<p>In any case, I think the core language needs to pare down implicit definitions.  Things are <a href="https://github.com/metaeducation/ren-c/tree/master/extensions">moving that direction with the extensions</a>, but those extensions are still poking things into the LIB context without being asked.  I give the color and math operations as good examples of things that must be asked to be put into the main binding of the module...otherwise you get them through a name.</p>
<h2>What About a Shortcut to a Module's "Needs" Space?</h2>
<p>In C++, there is a way of getting out of your "local scope" and up to the global scope:</p>
<aside class="onebox stackexchange">
  <header class="source">
      <a href="https://stackoverflow.com/questions/4269034/what-is-the-meaning-of-prepended-double-colon" target="_blank" rel="noopener">stackoverflow.com</a>
  </header>
  <article class="onebox-body">
      <a href="https://stackoverflow.com/users/320369/rmbianchi" target="_blank" rel="noopener">
    <img alt="rmbianchi" src="https://www.gravatar.com/avatar/fa36226dc6b4fc5d96c75061f39202c1?s=128&amp;d=identicon&amp;r=PG" class="thumbnail onebox-avatar" width="128" height="128">
  </a>
<h4>
  <a href="https://stackoverflow.com/questions/4269034/what-is-the-meaning-of-prepended-double-colon" target="_blank" rel="noopener">What is the meaning of prepended double colon "::"?</a>
</h4>

<div class="tags">
  <strong>c++, syntax, namespaces, scope-resolution</strong>
</div>

<div class="date">
  asked by
  
  <a href="https://stackoverflow.com/users/320369/rmbianchi" target="_blank" rel="noopener">
    rmbianchi
  </a>
  on <a href="https://stackoverflow.com/questions/4269034/what-is-the-meaning-of-prepended-double-colon" target="_blank" rel="noopener">04:24PM - 24 Nov 10 UTC</a>
</div>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>Right now, getting access to the modules list requires you to do <code>system/modules/mod-name</code>.  But what if each module kept a small object for the extensions that it had included, and put it in something like <code>~</code>?</p>
<pre><code>&gt;&gt; color: ~/colors/tan
== 222.184.135

&gt;&gt; ~/math/tan 0.0
== 0.0

&gt;&gt; math [1 + 2 * 3]
== 7
</code></pre>
<p>Someone who is doing a modest amount of trigonometry might prefer to import it named <code>trig</code> and access it as <code>trig</code>.  Or import them with full names, or ask the module to abbreviate the names.  I'm just talking about a spectrum of options based on how much you use the thing.</p>
<p>Or maybe MATH itself is what binds to TAN.  So you'd say <strong>math [tan 0.0]</strong>, and if you use TAN outside of MATH you don't get it.</p>
<p>Or it may be that <code>~</code> is just the module itself, where the binding the module did at load time wasn't to necessarily bind everything that was included.  e.g. there may be a module field for <code>math</code> which is the math module, but it would bind plain uses of <code>math</code> to <code>lib/math</code> despite the existence of that field.</p>
<p>Further: the idea of importing things locally could be at a function or USE granularity.  If only one of your functions mentions trigonometry, why not have that one be <code>function [... &lt;in&gt; ~/trigonometry] [...]</code>   If you have multiple functions that want to do this, why not make your own variant, e.g. TFUNCTION, that adds the trigonometry dependency?</p>
<h2>Any Methodology Should Be Able To Do Redbol Emulation</h2>
<p>These ideas sound like they may bring a lot of concerns and decisions to the average user.</p>
<p>But if you can abstract it to something like <code>Needs: Redbol</code> and have that do all the necessary work to achieve a Rebol2/Red environment, then that would be a good proof of concept.</p>
          <p><a href="https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161/1</link>
        <pubDate>Sun, 05 May 2019 09:07:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1161-1</guid>
        <source url="https://forum.rebol.info/t/modules-vs-rebols-contention-for-short-words/1161.rss">Modules vs. Rebol&#39;s Contention for Short Words</source>
      </item>
  </channel>
</rss>

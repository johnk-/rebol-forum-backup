<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>PARSE Bootstrap Compatibility Strategy</title>
    <link>https://forum.rebol.info/t/parse-bootstrap-compatibility-strategy/1533</link>
    <description>Working with assignments in UPARSE via SET-WORD!s has convinced me that it&#39;s the right strategy.  

I was a little hesitant before because it might make PARSE code &quot;look too much like DO code&quot;.  But the reality seems to suggest that&#39;s not so much of an issue.  At least...if you have a problem with dialects looking &quot;kind of like other Rebol code because it uses the same bricks&quot;...you are kind of out of luck, because that reuse *is* the idea of the language.

[I&#39;ve gone ahead and made the changes to PARSE for capturing positions with **POS: HERE** and for seeking positions with **SEEK POS**.](https://github.com/metaeducation/ren-c/pull/1115)

For the moment, any other usage of a &quot;lone&quot; SET-WORD! will cause an error.  It will be like that for a little while to help catch violations.

&gt; Note: HERE is more useful than just capturing with SET-WORD!.  Because a rule which evaluates to the current position can be used in places that take more than one rule.
&gt;
&gt; Imagine you wanted to use it with BETWEEN:
&gt;
&gt;      parse &quot;&lt;&lt;&lt;stuff&gt;&gt;&gt;&quot; [
&gt;          left: copy some &quot;&lt;&quot;
&gt;          (n: length of left)
&gt;          x: between here n &quot;&gt;&quot;
&gt;      ]
&gt;
&gt; So this wants to count the number of less-than signs, and then match an equal number of greater-than signs.  HERE can serve as a rule for the left side of the capture, to say &quot;just use the current position for the left rule&quot;.


## How To Deal With Bootstrap?

For most people, the change should be easy, and make code look better.  (Be sure to take the opportunity to see how much nicer COMMA! can make things.)

For bootstrap, it&#39;s trickier.  What I have hacked up so far is that anywhere there is a **:pos** in the code, change that to **seek :pos**.  Then, bootstrap code just has to define SEEK to a no-op rule.  That way it will work in both old and new executables.

Similarly, HERE can be defined to a no-op rule in bootstrap.  This way **pos: here** will behave as capturing the position under either behavior.

The bootstrap executable allows SET-WORD! to come after a SET.  So during the compatibility period, we would just allow SET FOO: to act the same as FOO:.

I do not think PARSE COLLECT is used in bootstrap, so changing it from COLLECT DATA: to DATA: COLLECT shouldn&#39;t matter.

The tricky case is COPY.  COPY X: would just have to stay a synonym for X: COPY.  It&#39;s easy enough to recognize.  The deal would be that you just have to use a SET-WORD! after copy in the bootstrap executable instead of a plain word which could be a rule in the new world.

Anyway, there&#39;s been a long uncertain period of &quot;is changing the operators a good idea or not&quot;...so once I was convinced it is a good idea, the sooner the change starts the better.</description>
    
    <lastBuildDate>Mon, 29 Nov 2021 17:43:50 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/parse-bootstrap-compatibility-strategy/1533.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>PARSE Bootstrap Compatibility Strategy</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1533">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>For bootstrap, it's trickier. What I have hacked up so far is that anywhere there is a <strong>:pos</strong> in the code, change that to <strong>seek :pos</strong>. Then, bootstrap code just has to define SEEK to a no-op rule. That way it will work in both old and new executables.</p>
<p>Similarly, HERE can be defined to a no-op rule in bootstrap. This way <strong>pos: here</strong> will behave as capturing the position under either behavior.</p>
</blockquote>
</aside>
<p>Sometimes we make mistakes and realize there's better ideas... and this is one of those cases...</p>
<p><strong>New plan: Compatibility PARSE2.</strong></p>
<p>Since UPARSE is going to have the ability to use a set of combinators that make it act like Red or R3-Alpha (so-called UPARSE2) there's no good reason to be throwing in these hacks.</p>
<p>Instead I'm saying that PARSE2 is a mode of the old native parse codebase to act like it used to.  If you want the old behavior (e.g. plain SET-WORD! marks location into a variable, no need for <code>&lt;here&gt;</code>) then use PARSE2.</p>
<p>So the bootstrap executable will just define PARSE2 as its PARSE.</p>
<p>Significantly less confusing, and this makes it easier to be aggressive in aligning the native PARSE with the superior designs that are coming out of UPARSE, as the codebases are merged.</p>
<p>But to make it easier to find these assignments and upgrading, I'm stylizing them.</p>
<pre><code>; old bootstrap code might say this
parse "aaa" [pos: some "a"]

; new bootstrap code breaks these to their own line with comment
parse2 "aaa" [
    pos:  ; &lt;here&gt;
    some "a"
]
</code></pre>
<p>Then fix them up later.</p>
          <p><a href="https://forum.rebol.info/t/parse-bootstrap-compatibility-strategy/1533/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/parse-bootstrap-compatibility-strategy/1533/2</link>
        <pubDate>Mon, 29 Nov 2021 07:21:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1533-2</guid>
        <source url="https://forum.rebol.info/t/parse-bootstrap-compatibility-strategy/1533.rss">PARSE Bootstrap Compatibility Strategy</source>
      </item>
      <item>
        <title>PARSE Bootstrap Compatibility Strategy</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Working with assignments in UPARSE via SET-WORD!s has convinced me that it's the right strategy.</p>
<p>I was a little hesitant before because it might make PARSE code "look too much like DO code".  But the reality seems to suggest that's not so much of an issue.  At least...if you have a problem with dialects looking "kind of like other Rebol code because it uses the same bricks"...you are kind of out of luck, because that reuse <em>is</em> the idea of the language.</p>
<p><a href="https://github.com/metaeducation/ren-c/pull/1115">I've gone ahead and made the changes to PARSE for capturing positions with <strong>POS: HERE</strong> and for seeking positions with <strong>SEEK POS</strong>.</a></p>
<p>For the moment, any other usage of a "lone" SET-WORD! will cause an error.  It will be like that for a little while to help catch violations.</p>
<blockquote>
<p>Note: HERE is more useful than just capturing with SET-WORD!.  Because a rule which evaluates to the current position can be used in places that take more than one rule.</p>
<p>Imagine you wanted to use it with BETWEEN:</p>
<pre><code> parse "&lt;&lt;&lt;stuff&gt;&gt;&gt;" [
     left: copy some "&lt;"
     (n: length of left)
     x: between here n "&gt;"
 ]
</code></pre>
<p>So this wants to count the number of less-than signs, and then match an equal number of greater-than signs.  HERE can serve as a rule for the left side of the capture, to say "just use the current position for the left rule".</p>
</blockquote>
<h2>How To Deal With Bootstrap?</h2>
<p>For most people, the change should be easy, and make code look better.  (Be sure to take the opportunity to see how much nicer COMMA! can make things.)</p>
<p>For bootstrap, it's trickier.  What I have hacked up so far is that anywhere there is a <strong>:pos</strong> in the code, change that to <strong>seek :pos</strong>.  Then, bootstrap code just has to define SEEK to a no-op rule.  That way it will work in both old and new executables.</p>
<p>Similarly, HERE can be defined to a no-op rule in bootstrap.  This way <strong>pos: here</strong> will behave as capturing the position under either behavior.</p>
<p>The bootstrap executable allows SET-WORD! to come after a SET.  So during the compatibility period, we would just allow SET FOO: to act the same as FOO:.</p>
<p>I do not think PARSE COLLECT is used in bootstrap, so changing it from COLLECT DATA: to DATA: COLLECT shouldn't matter.</p>
<p>The tricky case is COPY.  COPY X: would just have to stay a synonym for X: COPY.  It's easy enough to recognize.  The deal would be that you just have to use a SET-WORD! after copy in the bootstrap executable instead of a plain word which could be a rule in the new world.</p>
<p>Anyway, there's been a long uncertain period of "is changing the operators a good idea or not"...so once I was convinced it is a good idea, the sooner the change starts the better.</p>
          <p><a href="https://forum.rebol.info/t/parse-bootstrap-compatibility-strategy/1533/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/parse-bootstrap-compatibility-strategy/1533/1</link>
        <pubDate>Wed, 03 Mar 2021 03:38:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1533-1</guid>
        <source url="https://forum.rebol.info/t/parse-bootstrap-compatibility-strategy/1533.rss">PARSE Bootstrap Compatibility Strategy</source>
      </item>
  </channel>
</rss>

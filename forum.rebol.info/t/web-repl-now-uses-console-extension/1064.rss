<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Web REPL now uses CONSOLE extension!</title>
    <link>https://forum.rebol.info/t/web-repl-now-uses-console-extension/1064</link>
    <description>The CONSOLE extension was first implemented by @draegtun, who managed to be one of the few pioneers in the Rebol Universe who [actually documented what he did](https://github.com/r3n/reboldocs/wiki/User-and-Console).  :-)

I went on to take that code and get it mechanically wired up in a way that split it into a &quot;console kernel&quot; which would make deliberate transitions to calling the usermode &quot;skin&quot; code--and hence be able to gracefully recover from errors, vs. infinite loop or crash out.  For example:

    &gt;&gt; system/console/print-prompt: does [write-stdout &quot;--ok--&gt;&gt; &quot;]
    == make action! [[] [...]]

    --ok--&gt;&gt; system/console/print-prompt: does [write-stdddout &quot;--oops!--&gt; &quot;]
    ** UNSAFE ERROR ENCOUNTERED IN CONSOLE SKIN
    ** Script Error: write-stdddout has no value
    ** Where: print-prompt console
    ** Near: [write-stdddout ~~ &quot;--oops!--&gt; &quot;]
    ** Line: 1
    ** REVERTING TO DEFAULT SKIN

    &gt;&gt;

*(Note: the current error is a bit more verbose than that because it&#39;s trying to be informative for debugging of console internals, but I&#39;ll cut it down.)*

Despite running with a lot of userspace code, the console is designed so it can be phased in such a way that when you do things like a debug trace (also written in usermode) you won&#39;t wind up tracing through the console as well.  *(Unless you want to--but most people wouldn&#39;t, they want to trace their own code.)*  Because of how it&#39;s done, you also don&#39;t see a ton of implementation stacks for the console in your backtrace...the console exits its &quot;usermode kernel&quot; portion long enough to run skin or user requests through the libRebol API with no kernel on the stack, and then re-enters the kernel after it&#39;s done.

Laying the groundwork for doing this correctly is intended to make it possible to let the console be hookable for all kinds of tasks, whether that&#39;s debugging and needing to show you stack levels and bind stack frames...or anything else!  That includes a tutorial console, that checks what you typed and the result you got to see if you should go to the next step!

## And now... the web REPL uses it too!

In quite a nifty achievement for the console, [it is now live in the web demo!](http://hostilefork.com/media/shared/replpad-js/)

For the moment, that means you can even use the conventional multi-line-by-hitting-enter mode, instead of Shift-Enter.  Really it should kick you over into the web&#39;s multiline editor ability...but that should be easier to do as an aspect of the console extension, it&#39;s all usermode code!

Here&#39;s a little counting console:

    &gt;&gt; ‌count: 0
    == 0

    &gt;&gt; system/console/print-prompt: does [
    [\ count: count + 1
    [\ write-stdout unspaced [count &quot;&gt;&gt; &quot;]
    [\ ]
    == make action! [[] [...]]

    1&gt;&gt; print &quot;A counting prompt!&quot;
    A counting prompt!

    2&gt;&gt; ‌

You can imagine being able to flip your console mode around to all kinds of things... changing the bindings, being dialected.  (The debugger will have a frame it is &quot;focused&quot; on and show you the focus, but then use that frame for binding of expressions--for instance.)  Timing prompts could show you how long each command took, or just hook each command prompt to make the timing so you could ask for it retroactively if you ever cared...

It doesn&#39;t have cancellation yet (and if it did, it probably would want to be Escape vs. Ctrl-C).  Such things are actually rather complex to do--but of course, solving it is planned for and in the works.

This is really neat to see, hopefully people want to pitch in and make this better.  This isn&#39;t C code, so no excuses!  :-)</description>
    
    <lastBuildDate>Tue, 28 Jul 2020 12:55:36 +0000</lastBuildDate>
    <category>Web</category>
    <atom:link href="https://forum.rebol.info/t/web-repl-now-uses-console-extension/1064.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Web REPL now uses CONSOLE extension!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The CONSOLE extension was first implemented by <a class="mention" href="/u/draegtun">@draegtun</a>, who managed to be one of the few pioneers in the Rebol Universe who <a href="https://github.com/r3n/reboldocs/wiki/User-and-Console" rel="nofollow noopener">actually documented what he did</a>.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>I went on to take that code and get it mechanically wired up in a way that split it into a "console kernel" which would make deliberate transitions to calling the usermode "skin" code--and hence be able to gracefully recover from errors, vs. infinite loop or crash out.  For example:</p>
<pre><code>&gt;&gt; system/console/print-prompt: does [write-stdout "--ok--&gt;&gt; "]
== make action! [[] [...]]

--ok--&gt;&gt; system/console/print-prompt: does [write-stdddout "--oops!--&gt; "]
** UNSAFE ERROR ENCOUNTERED IN CONSOLE SKIN
** Script Error: write-stdddout has no value
** Where: print-prompt console
** Near: [write-stdddout ~~ "--oops!--&gt; "]
** Line: 1
** REVERTING TO DEFAULT SKIN

&gt;&gt;
</code></pre>
<p><em>(Note: the current error is a bit more verbose than that because it's trying to be informative for debugging of console internals, but I'll cut it down.)</em></p>
<p>Despite running with a lot of userspace code, the console is designed so it can be phased in such a way that when you do things like a debug trace (also written in usermode) you won't wind up tracing through the console as well.  <em>(Unless you want to--but most people wouldn't, they want to trace their own code.)</em>  Because of how it's done, you also don't see a ton of implementation stacks for the console in your backtrace...the console exits its "usermode kernel" portion long enough to run skin or user requests through the libRebol API with no kernel on the stack, and then re-enters the kernel after it's done.</p>
<p>Laying the groundwork for doing this correctly is intended to make it possible to let the console be hookable for all kinds of tasks, whether that's debugging and needing to show you stack levels and bind stack frames...or anything else!  That includes a tutorial console, that checks what you typed and the result you got to see if you should go to the next step!</p>
<h2>And now... the web REPL uses it too!</h2>
<p>In quite a nifty achievement for the console, <a href="http://hostilefork.com/media/shared/replpad-js/" rel="nofollow noopener">it is now live in the web demo!</a></p>
<p>For the moment, that means you can even use the conventional multi-line-by-hitting-enter mode, instead of Shift-Enter.  Really it should kick you over into the web's multiline editor ability...but that should be easier to do as an aspect of the console extension, it's all usermode code!</p>
<p>Here's a little counting console:</p>
<pre><code>&gt;&gt; ‌count: 0
== 0

&gt;&gt; system/console/print-prompt: does [
[\ count: count + 1
[\ write-stdout unspaced [count "&gt;&gt; "]
[\ ]
== make action! [[] [...]]

1&gt;&gt; print "A counting prompt!"
A counting prompt!

2&gt;&gt; ‌
</code></pre>
<p>You can imagine being able to flip your console mode around to all kinds of things... changing the bindings, being dialected.  (The debugger will have a frame it is "focused" on and show you the focus, but then use that frame for binding of expressions--for instance.)  Timing prompts could show you how long each command took, or just hook each command prompt to make the timing so you could ask for it retroactively if you ever cared...</p>
<p>It doesn't have cancellation yet (and if it did, it probably would want to be Escape vs. Ctrl-C).  Such things are actually rather complex to do--but of course, solving it is planned for and in the works.</p>
<p>This is really neat to see, hopefully people want to pitch in and make this better.  This isn't C code, so no excuses!  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://forum.rebol.info/t/web-repl-now-uses-console-extension/1064/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/web-repl-now-uses-console-extension/1064/1</link>
        <pubDate>Sun, 10 Feb 2019 13:32:09 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1064-1</guid>
        <source url="https://forum.rebol.info/t/web-repl-now-uses-console-extension/1064.rss">Web REPL now uses CONSOLE extension!</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>DEFAULT with PATH!...What Does It *Mean*?</title>
    <link>https://forum.rebol.info/t/default-with-path-what-does-it-mean/1770</link>
    <description>The ability to have random side-effects in paths creates all kinds of nasty potentials.

That is why I made a way to say you only allow paths to contain evaluations if you also ask for an &quot;invariant&quot; representation of the path to be returned...that you could use in place of a path for further assignments.

    &gt;&gt; var: &#39;x

    &gt;&gt; path: &#39;obj/(print &quot;side effect&quot; var)

    &gt;&gt; set path 30
    ** Error: PATH contains GROUP!s, must request /STEPS output (can use #)

    &gt;&gt; [value steps]: set path 30
    side effect
    == 30

    &gt;&gt; steps
    == @[obj x]

You can then use STEPS instead of the path.  e.g. **set @[obj x]** will act like **set &#39;obj/x**.  (The reason a BLOCK! is used is because not all datatypes would be legal in paths...a GROUP! could evaluate to anything, like an OBJECT!...which is a perfectly valid thing to set in a MAP! for instance.)

## This &quot;Invariant&quot; Form Was Intended For Things Like DEFAULT

The concept was that even if you have evaluations on the left hand side, you will be able to capture where it got the value or absence-of-value from...and then in the event you need to write it back because a default is necessary, you don&#39;t have to run the evaluation again:

    &gt;&gt; n: 5

    &gt;&gt; data.(n: n + 1): default [10]

Internally, DEFAULT can make a GET request of **data.(n: n + 1)** and get back STEPS with a fixed value for N, like **`@[data 6]`**.  If it discovers that the value is set to blank and needs defaulting, it can then use the steps instead of the path as the basis for the SET...so N is not changed twice.

## But Other Things Can Change...

All kinds of changes can happen between the GET and the SET in DEFAULT.  What about this?

    &gt;&gt; data.(n: n + 1): default [data: ~gone~, 10]

We&#39;ve prevented running imperative code and getting side effects from the path...but the side effects can come from other places.  **Anything you do between the GET and the SET can make the &quot;invariant&quot; steps not so invariant.**
    
Let&#39;s say DATA was a BLOCK! at the outset.  Should the **`@[...]`** steps have actually stored a reference to the block instead of the WORD! data, so that changes to the variable couldn&#39;t redirect the invariant reference?

That doesn&#39;t work for immediate types.  Let&#39;s say you have:

    &gt;&gt; time: 4:00

    &gt;&gt; path: &#39;time.(if true [&#39;hour])

    &gt;&gt; [# steps]: set path 12
    == 12

    &gt;&gt; steps
    == @[4:00 hour]

Now you can&#39;t use that steps to go back and change the original time, because 4:00 is an immediate value.  You need to get at the object the time lives in.  You&#39;d wind up with a 3-element steps in that case:

    &gt;&gt; steps
    == @[make object! [...] time hour]

## If Nothing Is Going To Be Perfect... Should We Shortcut It?

Let&#39;s say you have a path like:

    obj1.obj2.(if true [obj3]).obj4.date.time

We could say that the &quot;steps&quot; for this path are:

    @[obj1 obj2 obj3 obj4 date time]

But is that empirically more desirable than just noticing when we cross the line from non-immediate values into immediate values, and preserving only as much as we need?

    @[(make object! [...this is obj4...]) date time]

That&#39;s enough to write back to obj4...but it is fully disconnected from the path that was initially being represented.  **But which is more suitable for the intent of something like DEFAULT?**

## My Head Hurts :face_with_head_bandage: 

...and it&#39;s not because of a booster shot.  It&#39;s because this is crazy, and way past the point of being fun.

What started out as a nice idea for taming GROUP!s in PATH!s becomes a real headache.

**So I&#39;m going to leave well enough alone, and say that this does only that.**  If you want to prune a path to get better invariants, that&#39;s on you:

For example:

    (obj1.obj2.obj3.obj4).date.time: default [...]

When you do this, then when DEFAULT asks for steps it will get 4 items in the block:

    &gt;&gt; steps
    == @[(make object! [...]) date time]

It has latched onto the object, and so you can say inside the body of the defaulting code things like **`obj1: null`** or **obj1.obj2.obj3: []** and the assignment will apply to what it was looking at, because those names aren&#39;t in the steps.</description>
    
    <lastBuildDate>Sat, 11 Dec 2021 23:58:00 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/default-with-path-what-does-it-mean/1770.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>DEFAULT with PATH!...What Does It *Mean*?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The ability to have random side-effects in paths creates all kinds of nasty potentials.</p>
<p>That is why I made a way to say you only allow paths to contain evaluations if you also ask for an "invariant" representation of the path to be returned...that you could use in place of a path for further assignments.</p>
<pre><code>&gt;&gt; var: 'x

&gt;&gt; path: 'obj/(print "side effect" var)

&gt;&gt; set path 30
** Error: PATH contains GROUP!s, must request /STEPS output (can use #)

&gt;&gt; [value steps]: set path 30
side effect
== 30

&gt;&gt; steps
== @[obj x]
</code></pre>
<p>You can then use STEPS instead of the path.  e.g. <strong>set @[obj x]</strong> will act like <strong>set 'obj/x</strong>.  (The reason a BLOCK! is used is because not all datatypes would be legal in paths...a GROUP! could evaluate to anything, like an OBJECT!...which is a perfectly valid thing to set in a MAP! for instance.)</p>
<h2>This "Invariant" Form Was Intended For Things Like DEFAULT</h2>
<p>The concept was that even if you have evaluations on the left hand side, you will be able to capture where it got the value or absence-of-value from...and then in the event you need to write it back because a default is necessary, you don't have to run the evaluation again:</p>
<pre><code>&gt;&gt; n: 5

&gt;&gt; data.(n: n + 1): default [10]
</code></pre>
<p>Internally, DEFAULT can make a GET request of <strong>data.(n: n + 1)</strong> and get back STEPS with a fixed value for N, like <strong><code>@[data 6]</code></strong>.  If it discovers that the value is set to blank and needs defaulting, it can then use the steps instead of the path as the basis for the SET...so N is not changed twice.</p>
<h2>But Other Things Can Change...</h2>
<p>All kinds of changes can happen between the GET and the SET in DEFAULT.  What about this?</p>
<pre><code>&gt;&gt; data.(n: n + 1): default [data: ~gone~, 10]
</code></pre>
<p>We've prevented running imperative code and getting side effects from the path...but the side effects can come from other places.  <strong>Anything you do between the GET and the SET can make the "invariant" steps not so invariant.</strong></p>
<p>Let's say DATA was a BLOCK! at the outset.  Should the <strong><code>@[...]</code></strong> steps have actually stored a reference to the block instead of the WORD! data, so that changes to the variable couldn't redirect the invariant reference?</p>
<p>That doesn't work for immediate types.  Let's say you have:</p>
<pre><code>&gt;&gt; time: 4:00

&gt;&gt; path: 'time.(if true ['hour])

&gt;&gt; [# steps]: set path 12
== 12

&gt;&gt; steps
== @[4:00 hour]
</code></pre>
<p>Now you can't use that steps to go back and change the original time, because 4:00 is an immediate value.  You need to get at the object the time lives in.  You'd wind up with a 3-element steps in that case:</p>
<pre><code>&gt;&gt; steps
== @[make object! [...] time hour]
</code></pre>
<h2>If Nothing Is Going To Be Perfect... Should We Shortcut It?</h2>
<p>Let's say you have a path like:</p>
<pre><code>obj1.obj2.(if true [obj3]).obj4.date.time
</code></pre>
<p>We could say that the "steps" for this path are:</p>
<pre><code>@[obj1 obj2 obj3 obj4 date time]
</code></pre>
<p>But is that empirically more desirable than just noticing when we cross the line from non-immediate values into immediate values, and preserving only as much as we need?</p>
<pre><code>@[(make object! [...this is obj4...]) date time]
</code></pre>
<p>That's enough to write back to obj4...but it is fully disconnected from the path that was initially being represented.  <strong>But which is more suitable for the intent of something like DEFAULT?</strong></p>
<h2>My Head Hurts <img src="https://forum.rebol.info/images/emoji/twitter/face_with_head_bandage.png?v=9" title=":face_with_head_bandage:" class="emoji" alt=":face_with_head_bandage:">
</h2>
<p>...and it's not because of a booster shot.  It's because this is crazy, and way past the point of being fun.</p>
<p>What started out as a nice idea for taming GROUP!s in PATH!s becomes a real headache.</p>
<p><strong>So I'm going to leave well enough alone, and say that this does only that.</strong>  If you want to prune a path to get better invariants, that's on you:</p>
<p>For example:</p>
<pre><code>(obj1.obj2.obj3.obj4).date.time: default [...]
</code></pre>
<p>When you do this, then when DEFAULT asks for steps it will get 4 items in the block:</p>
<pre><code>&gt;&gt; steps
== @[(make object! [...]) date time]
</code></pre>
<p>It has latched onto the object, and so you can say inside the body of the defaulting code things like <strong><code>obj1: null</code></strong> or <strong>obj1.obj2.obj3: []</strong> and the assignment will apply to what it was looking at, because those names aren't in the steps.</p>
          <p><a href="https://forum.rebol.info/t/default-with-path-what-does-it-mean/1770/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/default-with-path-what-does-it-mean/1770/1</link>
        <pubDate>Sat, 11 Dec 2021 23:58:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1770-1</guid>
        <source url="https://forum.rebol.info/t/default-with-path-what-does-it-mean/1770.rss">DEFAULT with PATH!...What Does It *Mean*?</source>
      </item>
  </channel>
</rss>

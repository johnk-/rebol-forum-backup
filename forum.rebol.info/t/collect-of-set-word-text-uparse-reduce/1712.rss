<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>COLLECT of SET-WORD! + TEXT!... UPARSE REDUCE?</title>
    <link>https://forum.rebol.info/t/collect-of-set-word-text-uparse-reduce/1712</link>
    <description>I was trying to do something that came out a little awkward, and wondered if there was a better way.

Imagine you have data like:

    [foo: &quot;a&quot; bar: &quot;b&quot; | foo: &quot;c&quot; bar: &quot;d&quot;]

And you want to write a UPARSE rule with COLLECT to get:

    [[foo: &quot;a&quot; bar: &quot;b&quot;] [foo: &quot;c&quot; bar: &quot;d&quot;]]

So you&#39;re recognizing *specific* SET-WORD!s, each of which you expect to be followed by TEXT!.

What I did was a bit awkward:

    &gt;&gt; data: [foo: &quot;a&quot; bar: &quot;b&quot; | foo: &quot;c&quot; bar: &quot;d&quot;]

    &gt;&gt; uparse data [collect while further [keep ^ collect [
           [keep [^ &#39;foo:], keep text!]
           [keep [^ &#39;bar:], keep text!]
           [&#39;| | &lt;end&gt;]
       ]]]
    == [[foo: &quot;a&quot; bar: &quot;b&quot;] [foo: &quot;c&quot; bar: &quot;d&quot;]]

If you don&#39;t like the **^** then use **only**.  Here are a few points demonstrated:

    &gt;&gt; uparse data [collect while further keep only collect [
           [keep [only the foo:] keep text!]
           [keep only the bar:, keep text!]
           [&#39;| | &lt;end&gt;]
       ]]
    == [[foo: &quot;a&quot; bar: &quot;b&quot;] [foo: &quot;c&quot; bar: &quot;d&quot;]]

* You can use THE if you don&#39;t like the quote marks.

* We&#39;re in a world where **only 3** becomes **only [3]**, so it&#39;s not like &quot;KEEP ONLY&quot; is a keyword.  This means you can move things around... **keep [only the foo:]** is just as valid as having the ONLY outside the block.

* You can play around with the dynamics of BLOCK!s and COMMA!s.  Sometimes the presence of a BLOCK! makes a comma unnecessary.

    * *Sidenote: I actually think we should strongly discourage the idea of commas having semantic meaning in dialects.  The status quo should be that they just provide visual separation...and the only impact adding them should have would be an error if they&#39;re not put in an &quot;interstitial&quot; position.*

## What Would Make This Better?

Readability is helped by breaking things into parts of course.  Maybe people would like **`&lt;end&gt; stop`** better than having to think about FURTHER... like, just stop iterating when you reach the end...vs. make sure each iteration makes progress:

    foobar-rule: [collect [
        [keep only [&#39;foo:] keep text!]
        [keep only [&#39;bar:] keep text!]
    ]]

    uparse data [collect while [
        keep only foobar-rule
        [&#39;| | &lt;end&gt; stop]
    ]]

But what was actually bugging me a little bit was having to write two KEEPs in order to pick up the SET-WORD! and the accompanying TEXT!.  We know in ordinary KEEP you can just COLLECT a block:

    &gt;&gt; collect [keep [foo: &quot;a&quot;]]
    == [foo: &quot;a&quot;]

Is there any way to match the pattern **foo: &quot;a&quot;** and KEEP it in one step?

## REDUCE, but for UPARSE?

What I was wanting was something like REDUCE to resolve to all the items individually:

    &gt;&gt; uparse [1 2] [integer! integer!]  ; typical case, last result fallout
    == 2

    &gt;&gt; uparse [1 2] [reduce [integer! integer!]]  ; REDUCE keeps processed items
    == [1 2]

UPARSE has alternate meanings for WHILE, and ANY, and many other things.  Does it make sense to call this REDUCE?

Such a feature would let the FOOBAR-RULE cleanup a bit:

    foobar-rule: [collect [  ; old way
        [keep only [&#39;foo:] keep text!]
        [keep only [&#39;bar:] keep text!]
    ]]

    =&gt;

    foobar-rule: [collect [  ; new way
        keep reduce @[&#39;foo:, text!]
        keep reduce @[&#39;bar:, text!]
    ]]

**Note that the REDUCE combinator would need to take its block as an @[...] or become a &quot;quoting combinator&quot;**.  This is because if it were left as a plain BLOCK! combinator, then REDUCE would not have access to the individual pieces of the block...only the advancement and the result.

But, maybe you could do it with GET-BLOCK!:

    foobar-rule: [collect [
        keep :[&#39;foo:, text!]
        keep :[&#39;bar:, text!]
    ]]

This idea of combinators that break the rules on the meaning of BLOCK! is a heavy thing to think about.  There&#39;s some semantically tricky stuff and some technically tricky stuff involved.

But one way or another, I think we need this.  Thoughts?</description>
    
    <lastBuildDate>Sun, 12 Sep 2021 15:39:28 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/collect-of-set-word-text-uparse-reduce/1712.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>COLLECT of SET-WORD! + TEXT!... UPARSE REDUCE?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I was trying to do something that came out a little awkward, and wondered if there was a better way.</p>
<p>Imagine you have data like:</p>
<pre><code>[foo: "a" bar: "b" | foo: "c" bar: "d"]
</code></pre>
<p>And you want to write a UPARSE rule with COLLECT to get:</p>
<pre><code>[[foo: "a" bar: "b"] [foo: "c" bar: "d"]]
</code></pre>
<p>So you're recognizing <em>specific</em> SET-WORD!s, each of which you expect to be followed by TEXT!.</p>
<p>What I did was a bit awkward:</p>
<pre><code>&gt;&gt; data: [foo: "a" bar: "b" | foo: "c" bar: "d"]

&gt;&gt; uparse data [collect while further [keep ^ collect [
       [keep [^ 'foo:], keep text!]
       [keep [^ 'bar:], keep text!]
       ['| | &lt;end&gt;]
   ]]]
== [[foo: "a" bar: "b"] [foo: "c" bar: "d"]]
</code></pre>
<p>If you don't like the <strong>^</strong> then use <strong>only</strong>.  Here are a few points demonstrated:</p>
<pre><code>&gt;&gt; uparse data [collect while further keep only collect [
       [keep [only the foo:] keep text!]
       [keep only the bar:, keep text!]
       ['| | &lt;end&gt;]
   ]]
== [[foo: "a" bar: "b"] [foo: "c" bar: "d"]]
</code></pre>
<ul>
<li>
<p>You can use THE if you don't like the quote marks.</p>
</li>
<li>
<p>We're in a world where <strong>only 3</strong> becomes <strong>only [3]</strong>, so it's not like "KEEP ONLY" is a keyword.  This means you can move things around... <strong>keep [only the foo:]</strong> is just as valid as having the ONLY outside the block.</p>
</li>
<li>
<p>You can play around with the dynamics of BLOCK!s and COMMA!s.  Sometimes the presence of a BLOCK! makes a comma unnecessary.</p>
<ul>
<li><em>Sidenote: I actually think we should strongly discourage the idea of commas having semantic meaning in dialects.  The status quo should be that they just provide visual separation...and the only impact adding them should have would be an error if they're not put in an "interstitial" position.</em></li>
</ul>
</li>
</ul>
<h2>What Would Make This Better?</h2>
<p>Readability is helped by breaking things into parts of course.  Maybe people would like <strong><code>&lt;end&gt; stop</code></strong> better than having to think about FURTHER... like, just stop iterating when you reach the end...vs. make sure each iteration makes progress:</p>
<pre><code>foobar-rule: [collect [
    [keep only ['foo:] keep text!]
    [keep only ['bar:] keep text!]
]]

uparse data [collect while [
    keep only foobar-rule
    ['| | &lt;end&gt; stop]
]]
</code></pre>
<p>But what was actually bugging me a little bit was having to write two KEEPs in order to pick up the SET-WORD! and the accompanying TEXT!.  We know in ordinary KEEP you can just COLLECT a block:</p>
<pre><code>&gt;&gt; collect [keep [foo: "a"]]
== [foo: "a"]
</code></pre>
<p>Is there any way to match the pattern <strong>foo: "a"</strong> and KEEP it in one step?</p>
<h2>REDUCE, but for UPARSE?</h2>
<p>What I was wanting was something like REDUCE to resolve to all the items individually:</p>
<pre><code>&gt;&gt; uparse [1 2] [integer! integer!]  ; typical case, last result fallout
== 2

&gt;&gt; uparse [1 2] [reduce [integer! integer!]]  ; REDUCE keeps processed items
== [1 2]
</code></pre>
<p>UPARSE has alternate meanings for WHILE, and ANY, and many other things.  Does it make sense to call this REDUCE?</p>
<p>Such a feature would let the FOOBAR-RULE cleanup a bit:</p>
<pre><code>foobar-rule: [collect [  ; old way
    [keep only ['foo:] keep text!]
    [keep only ['bar:] keep text!]
]]

=&gt;

foobar-rule: [collect [  ; new way
    keep reduce @['foo:, text!]
    keep reduce @['bar:, text!]
]]
</code></pre>
<p><strong>Note that the REDUCE combinator would need to take its block as an @[...] or become a "quoting combinator"</strong>.  This is because if it were left as a plain BLOCK! combinator, then REDUCE would not have access to the individual pieces of the block...only the advancement and the result.</p>
<p>But, maybe you could do it with GET-BLOCK!:</p>
<pre><code>foobar-rule: [collect [
    keep :['foo:, text!]
    keep :['bar:, text!]
]]
</code></pre>
<p>This idea of combinators that break the rules on the meaning of BLOCK! is a heavy thing to think about.  There's some semantically tricky stuff and some technically tricky stuff involved.</p>
<p>But one way or another, I think we need this.  Thoughts?</p>
          <p><a href="https://forum.rebol.info/t/collect-of-set-word-text-uparse-reduce/1712/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/collect-of-set-word-text-uparse-reduce/1712/1</link>
        <pubDate>Sun, 12 Sep 2021 13:02:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1712-1</guid>
        <source url="https://forum.rebol.info/t/collect-of-set-word-text-uparse-reduce/1712.rss">COLLECT of SET-WORD! + TEXT!... UPARSE REDUCE?</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>COLLECT Mutation Semantics: KEEP vs. KEEP/ONLY</title>
    <link>https://forum.rebol.info/t/collect-mutation-semantics-keep-vs-keep-only/1706</link>
    <description>When reimplementing COLLECT for UPARSE on top of the &quot;pending&quot; model, [I mentioned a potential avenue for optimization](https://forum.rebol.info/t/getting-hooks-into-events-during-parse/1640/10) by not immediately splicing blocks, but keeping them in a list and then merging the whole list together if-and-when the COLLECT got to the success point:

[quote=&quot;hostilefork, post:10, topic:1640&quot;]
(Efficiency sidenote: I might should have used something like @[...] blocks for GATHER, and use BLOCK!s for KEEP to complement the QUOTED!s. This would save splicing until the very end COLLECT when you have a better idea of how big the total series will be.)
[/quote]

The idea of saving splicing until the end might sound good, but... it doesn&#39;t work if we presume mutations.

Just imagine a delaying implementation of ordinary COLLECT:

    &gt;&gt; delayed-splice-collect [
          block: [a b c]
          keep block
          clear block
          insert block [d e f]
          keep block
      ]
    == [d e f d e f]

That&#39;s not what we expect from today&#39;s COLLECT.

Though if you&#39;re *not* splicing, you expect mutations to affect what you&#39;ve already collected.  It&#39;s true in all Redbols today, since you&#39;re keeping the block by identity:

    red&gt;&gt; collect [
             block: [a b c]
             keep/only block
             clear block
             insert block [d e f]
             keep/only block
          ]
    == [[d e f] [d e f]]

## [Persistent Vector](https://hypirion.com/musings/understanding-persistent-vector-pt-1) Looks Awfully Tempting  :face_with_monocle:

Looking at things like this is always a throwback to saying *&quot;mutable state by default is garbage&quot;*.  But it depends on what example you&#39;re looking at.  Sometimes it&#39;s good, sometimes it&#39;s bad.

I guess the thing is to just explore what the good parts are.  Maybe someone will blend in some Clojure bits at some point in a derivative...but that person is not going to be me!</description>
    
    <lastBuildDate>Sun, 05 Sep 2021 11:56:38 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/collect-mutation-semantics-keep-vs-keep-only/1706.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>COLLECT Mutation Semantics: KEEP vs. KEEP/ONLY</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>When reimplementing COLLECT for UPARSE on top of the "pending" model, <a href="https://forum.rebol.info/t/getting-hooks-into-events-during-parse/1640/10">I mentioned a potential avenue for optimization</a> by not immediately splicing blocks, but keeping them in a list and then merging the whole list together if-and-when the COLLECT got to the success point:</p>
<aside class="quote no-group" data-username="hostilefork" data-post="10" data-topic="1640">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/getting-hooks-into-events-during-parse/1640/10">Getting Hooks Into "Events" during PARSE</a>
</div>
<blockquote>
<p>(Efficiency sidenote: I might should have used something like @[...] blocks for GATHER, and use BLOCK!s for KEEP to complement the QUOTED!s. This would save splicing until the very end COLLECT when you have a better idea of how big the total series will be.)</p>
</blockquote>
</aside>
<p>The idea of saving splicing until the end might sound good, but... it doesn't work if we presume mutations.</p>
<p>Just imagine a delaying implementation of ordinary COLLECT:</p>
<pre><code>&gt;&gt; delayed-splice-collect [
      block: [a b c]
      keep block
      clear block
      insert block [d e f]
      keep block
  ]
== [d e f d e f]
</code></pre>
<p>That's not what we expect from today's COLLECT.</p>
<p>Though if you're <em>not</em> splicing, you expect mutations to affect what you've already collected.  It's true in all Redbols today, since you're keeping the block by identity:</p>
<pre><code>red&gt;&gt; collect [
         block: [a b c]
         keep/only block
         clear block
         insert block [d e f]
         keep/only block
      ]
== [[d e f] [d e f]]
</code></pre>
<h2>
<a href="https://hypirion.com/musings/understanding-persistent-vector-pt-1">Persistent Vector</a> Looks Awfully Tempting  <img src="https://forum.rebol.info/images/emoji/twitter/face_with_monocle.png?v=9" title=":face_with_monocle:" class="emoji" alt=":face_with_monocle:">
</h2>
<p>Looking at things like this is always a throwback to saying <em>"mutable state by default is garbage"</em>.  But it depends on what example you're looking at.  Sometimes it's good, sometimes it's bad.</p>
<p>I guess the thing is to just explore what the good parts are.  Maybe someone will blend in some Clojure bits at some point in a derivative...but that person is not going to be me!</p>
          <p><a href="https://forum.rebol.info/t/collect-mutation-semantics-keep-vs-keep-only/1706/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/collect-mutation-semantics-keep-vs-keep-only/1706/1</link>
        <pubDate>Sun, 05 Sep 2021 11:56:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1706-1</guid>
        <source url="https://forum.rebol.info/t/collect-mutation-semantics-keep-vs-keep-only/1706.rss">COLLECT Mutation Semantics: KEEP vs. KEEP/ONLY</source>
      </item>
  </channel>
</rss>

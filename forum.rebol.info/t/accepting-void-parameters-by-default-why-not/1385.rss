<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Accepting Void Parameters By Default: Why Not?</title>
    <link>https://forum.rebol.info/t/accepting-void-parameters-by-default-why-not/1385</link>
    <description>The choice to disallow VOID! parameters to functions is due to following a historical pattern set up by Rebol2 and R3-Alpha which wanted to stress their exceptional &quot;fringe&quot; status.  I&#39;ve cited Carl&#39;s remarks about this previously, in his blog post [**&quot;UNSET! is not first class&quot;**](http://www.rebol.net/r3blogs/0318.html).

&gt; *&quot;It&#39;s important to understand the unset! datatype; otherwise, we run the risk of assuming that it is *first class*  (assignable, passable, returnable) when it&#39;s really not intended for that kind of usage!&quot;*

Of course, it was all of those things (assignable, passable, returnable)...you just had to do a bit more work.

Ren-C has redrawn the map, in particular introducing NULL to take on the places UNSET! (or NONE!) was a &quot;something&quot; being used to mean &quot;nothing&quot;.  This moved VOID!s into the *&quot;definitely something...just a mean something&quot;* category.

We&#39;ve also [undone the R3-Alpha change that permitted GET-WORD! to access unset variables](https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301).  This is important, and lets GET-WORD!s understood purpose be &quot;This is a function, I want the function value and not to execute it&quot; without getting more than you bargained for by tolerating typographical errors in the process.

Red threw out the &quot;unsets are not conditionally true or false&quot; aspect, and made them truthy.  Here you see that combining with GET-WORD!&#39;s promiscuity in a very unappealing way:

      red&gt;&gt; if :asdfaeiefiasdf [print &quot;Double-Whammy&quot;]
      Double-Whammy

But Ren-C keeps it.

**Given these protections, and the revolutionary new interesting-ness of labeled voids...does forbidding VOID! to a function parameter that has no type annotation still make sense?**

You already get basic protection by virtue of the fact that trying to access that parameter without GET/ANY will error.  And those errors are now more informative:

    &gt;&gt; print raxohatal
    ** Script Error: raxohatal is ~undefined~ (use GET/ANY to GET voids)

    &gt;&gt; x: if true [null]
    == ~branched~

    &gt;&gt; x
    ** Script Error: x is ~branched~ (use GET/ANY to GET voids)

**For that matter, does it really make sense to forbid NULL either?**

For typed parameters, I do think it makes sense to exclude NULL from the ANY-VALUE! category.

But at this point, it seems like we&#39;d be freer and more flexible if we just said an untyped parameter could take anything.

Seems like it&#39;s the right thing to do.</description>
    
    <lastBuildDate>Fri, 06 Nov 2020 00:36:26 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/accepting-void-parameters-by-default-why-not/1385.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Accepting Void Parameters By Default: Why Not?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The one issue I note is more of a problem is error locality.</p>
<p>You'd see an error at the place the void is used, not at the callsite.</p>
<p>But as a further defense:</p>
<pre><code> foo: func [x y] [
     if x &gt; 2 [print [y]]
]
</code></pre>
<p>One of the premises of VOID!s and erroring is "not yet".  If I say x is 0, and Y doesn't get used, it seems like that's a "not yet" situation.</p>
<p>Anyway, errors need improvements across the board which I hope they will get.  So I wouldn't get too stressed out about the locality, in the sense that "why should it be better for voids, but hard for everything else".</p>
<p>Just improve everything, and it's fine.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://forum.rebol.info/t/accepting-void-parameters-by-default-why-not/1385/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/accepting-void-parameters-by-default-why-not/1385/3</link>
        <pubDate>Fri, 06 Nov 2020 00:36:26 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1385-3</guid>
        <source url="https://forum.rebol.info/t/accepting-void-parameters-by-default-why-not/1385.rss">Accepting Void Parameters By Default: Why Not?</source>
      </item>
      <item>
        <title>Accepting Void Parameters By Default: Why Not?</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>I guess, that's what you get for not using type-annotations.</p>
<p>And it <em>might</em> strengthen the point, that functions without type annotations should only be used in throw-away scripts.</p>
          <p><a href="https://forum.rebol.info/t/accepting-void-parameters-by-default-why-not/1385/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/accepting-void-parameters-by-default-why-not/1385/2</link>
        <pubDate>Thu, 05 Nov 2020 20:30:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1385-2</guid>
        <source url="https://forum.rebol.info/t/accepting-void-parameters-by-default-why-not/1385.rss">Accepting Void Parameters By Default: Why Not?</source>
      </item>
      <item>
        <title>Accepting Void Parameters By Default: Why Not?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The choice to disallow VOID! parameters to functions is due to following a historical pattern set up by Rebol2 and R3-Alpha which wanted to stress their exceptional "fringe" status.  I've cited Carl's remarks about this previously, in his blog post <a href="http://www.rebol.net/r3blogs/0318.html"><strong>"UNSET! is not first class"</strong></a>.</p>
<blockquote>
<p><em>"It's important to understand the unset! datatype; otherwise, we run the risk of assuming that it is <em>first class</em>  (assignable, passable, returnable) when it's really not intended for that kind of usage!"</em></p>
</blockquote>
<p>Of course, it was all of those things (assignable, passable, returnable)...you just had to do a bit more work.</p>
<p>Ren-C has redrawn the map, in particular introducing NULL to take on the places UNSET! (or NONE!) was a "something" being used to mean "nothing".  This moved VOID!s into the <em>"definitely something...just a mean something"</em> category.</p>
<p>We've also <a href="https://forum.rebol.info/t/should-get-word-of-a-void-raise-an-error/1301">undone the R3-Alpha change that permitted GET-WORD! to access unset variables</a>.  This is important, and lets GET-WORD!s understood purpose be "This is a function, I want the function value and not to execute it" without getting more than you bargained for by tolerating typographical errors in the process.</p>
<p>Red threw out the "unsets are not conditionally true or false" aspect, and made them truthy.  Here you see that combining with GET-WORD!'s promiscuity in a very unappealing way:</p>
<pre><code>  red&gt;&gt; if :asdfaeiefiasdf [print "Double-Whammy"]
  Double-Whammy
</code></pre>
<p>But Ren-C keeps it.</p>
<p><strong>Given these protections, and the revolutionary new interesting-ness of labeled voids...does forbidding VOID! to a function parameter that has no type annotation still make sense?</strong></p>
<p>You already get basic protection by virtue of the fact that trying to access that parameter without GET/ANY will error.  And those errors are now more informative:</p>
<pre><code>&gt;&gt; print raxohatal
** Script Error: raxohatal is ~undefined~ (use GET/ANY to GET voids)

&gt;&gt; x: if true [null]
== ~branched~

&gt;&gt; x
** Script Error: x is ~branched~ (use GET/ANY to GET voids)
</code></pre>
<p><strong>For that matter, does it really make sense to forbid NULL either?</strong></p>
<p>For typed parameters, I do think it makes sense to exclude NULL from the ANY-VALUE! category.</p>
<p>But at this point, it seems like we'd be freer and more flexible if we just said an untyped parameter could take anything.</p>
<p>Seems like it's the right thing to do.</p>
          <p><a href="https://forum.rebol.info/t/accepting-void-parameters-by-default-why-not/1385/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/accepting-void-parameters-by-default-why-not/1385/1</link>
        <pubDate>Thu, 05 Nov 2020 18:15:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1385-1</guid>
        <source url="https://forum.rebol.info/t/accepting-void-parameters-by-default-why-not/1385.rss">Accepting Void Parameters By Default: Why Not?</source>
      </item>
  </channel>
</rss>

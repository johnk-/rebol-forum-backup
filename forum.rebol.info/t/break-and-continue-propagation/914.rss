<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>BREAK and CONTINUE propagation</title>
    <link>https://forum.rebol.info/t/break-and-continue-propagation/914</link>
    <description>Have you ever been inside a nested loop and wanted to BREAK or CONTINUE the outer loop...not the inner one you&#39;re presently iterating?

     for-each x data [ // outer loop
         for-each y data [ // inner loop
              if some-test [
                  break // !!! want this to break outer loop, d&#39;oh
              ]
              ...
         ]
         ...
     ]

Well you&#39;re in luck :four_leaf_clover: ...thanks to the &quot;simple magic&quot; [loop result protocol](https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609), you have an answer.

     for-each x data [
         for-each y data [
              if some-test [
                  break
              ]
              ...
         ] else [break]
         ...
     ]

If you read the details, ELSE will run *if-and-only-if* the loop breaks.  So you can feel confident putting the second BREAK in there.

What if you had wanted to CONTINUE the outer loop instead?  Well, all you need to do there is break the inner loop and use that signal to continue the outer loop.

     for-each x data [
         for-each y data [
              if some-test [
                  break // in order to continue outer loop
              ]
              ...
         ] else [continue] // ta-da!
         ...
     ]

Pretty sweet, eh?  And don&#39;t miss out on how you can use OR to test for either a BREAK -or- the loop body never running due to absence of data or iterations, which comes in handy quite often.</description>
    
    <lastBuildDate>Mon, 19 Nov 2018 16:37:44 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://forum.rebol.info/t/break-and-continue-propagation/914.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>BREAK and CONTINUE propagation</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="914">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>I write loops inside loops all the time (which is probably a code smell)</p>
</blockquote>
</aside>
<p>It's something you have to do...but this is a way of dealing with the scoping of BREAKs and CONTINUEs that doesn't require GOTO, which is pretty much what you've got in C unless you start invoking and maintaining temporary variables.</p>
<p>One thing on the horizon with virtual binding <em>(which I know seems to get deferred a lot, but I do think about it frequently)</em> is the idea that it will be cheap enough to do definitional BREAK and CONTINUE, which know which loops they break.</p>
<pre><code> for-each a outer [
     outer-break: :break
     for-each b inner [
         if some-condition [outer-break]
     ]
 ]
</code></pre>
<p>This may still come down the road, but it is still rather GOTO-like, so I think if you can avoid it you get a better "structured programming" answer sticking to the loop result protocol.</p>
          <p><a href="https://forum.rebol.info/t/break-and-continue-propagation/914/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/break-and-continue-propagation/914/3</link>
        <pubDate>Mon, 19 Nov 2018 16:37:44 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-914-3</guid>
        <source url="https://forum.rebol.info/t/break-and-continue-propagation/914.rss">BREAK and CONTINUE propagation</source>
      </item>
      <item>
        <title>BREAK and CONTINUE propagation</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Sweet! I write loops inside loops all the time (which is probably a code smell), so this should lead to some great new flexibility. Keep 'em coming, Brian!</p>
          <p><a href="https://forum.rebol.info/t/break-and-continue-propagation/914/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/break-and-continue-propagation/914/2</link>
        <pubDate>Mon, 19 Nov 2018 16:31:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-914-2</guid>
        <source url="https://forum.rebol.info/t/break-and-continue-propagation/914.rss">BREAK and CONTINUE propagation</source>
      </item>
      <item>
        <title>BREAK and CONTINUE propagation</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Have you ever been inside a nested loop and wanted to BREAK or CONTINUE the outer loop...not the inner one you're presently iterating?</p>
<pre><code> for-each x data [ // outer loop
     for-each y data [ // inner loop
          if some-test [
              break // !!! want this to break outer loop, d'oh
          ]
          ...
     ]
     ...
 ]
</code></pre>
<p>Well you're in luck <img src="//forum.rebol.info/images/emoji/twitter/four_leaf_clover.png?v=7" title=":four_leaf_clover:" class="emoji" alt=":four_leaf_clover:"> ...thanks to the "simple magic" <a href="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609">loop result protocol</a>, you have an answer.</p>
<pre><code> for-each x data [
     for-each y data [
          if some-test [
              break
          ]
          ...
     ] else [break]
     ...
 ]
</code></pre>
<p>If you read the details, ELSE will run <em>if-and-only-if</em> the loop breaks.  So you can feel confident putting the second BREAK in there.</p>
<p>What if you had wanted to CONTINUE the outer loop instead?  Well, all you need to do there is break the inner loop and use that signal to continue the outer loop.</p>
<pre><code> for-each x data [
     for-each y data [
          if some-test [
              break // in order to continue outer loop
          ]
          ...
     ] else [continue] // ta-da!
     ...
 ]
</code></pre>
<p>Pretty sweet, eh?  And don't miss out on how you can use OR to test for either a BREAK -or- the loop body never running due to absence of data or iterations, which comes in handy quite often.</p>
          <p><a href="https://forum.rebol.info/t/break-and-continue-propagation/914/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/break-and-continue-propagation/914/1</link>
        <pubDate>Mon, 19 Nov 2018 05:55:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-914-1</guid>
        <source url="https://forum.rebol.info/t/break-and-continue-propagation/914.rss">BREAK and CONTINUE propagation</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Behavior of Plain GROUP! in PARSE</title>
    <link>https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374</link>
    <description>Historically, a plain GROUP! in PARSE runs the conventional evaluator.  But it discards its result and doesn&#39;t put it into the stream of parse instructions.

That means you can&#39;t do things like this:

    parse &quot;aaa&quot; [some (either condition [&quot;a&quot;] [&quot;b&quot;])]
 
Because the &quot;discarding&quot; behavior of GROUP!s in PARSE is so pervasive, it seemed hard to challenge.  So Ren-C had adopted the GET-GROUP! as **:(...)** to be non-discarding form, which you could use to splice arbitrary arguments or instructions into the PARSE stream.

But to @rgchris&#39;s taste, having the colons may be worse than rethinking the rule...to instead one in which you have to explicitly throw away the result.  So we&#39;d presume PARSE would have an ELIDE keyword.

    parse &quot;aaa&quot; [some [&quot;a&quot; elide (print &quot;found an A&quot;)]]

In a new way of working...a failure to put the ELIDE there would mean you&#39;d be trying to splice a #[void] into the instruction stream, which we&#39;d imagine is an error.  (You&#39;d need a quoted void to match an actual void value).

The choice to elide can come from inside the group as well:

    parse &quot;aaa&quot; [some [&quot;a&quot; (elide print &quot;found an A&quot;)]]

Or use something that returned NULL...since a NULL splice is ignored by the parse stream.  This is the mechanism by which branching constructs can be used to good effect:

    parse &quot;aaa&quot; [some [&quot;a&quot; (if false [&quot;b&quot;])]]


&gt; *Note: In the early days of expression barriers, I mused this kind of approach could be done with an idiom that would look like what some languages call &quot;banana clips&quot;:*
&gt;
&gt;     parse &quot;aaa&quot; [some [&quot;a&quot; (| print &quot;found an A&quot; |)]]
&gt;
&gt; *Under that proposal you wouldn&#39;t need the barrier on both ends, but it might help.  Today&#39;s expression barriers only block evaluations and don&#39;t overwrite evaluations, though.  But it&#39;s a bit interesting, and shows the proposal is not fully &quot;new&quot;*

## A Significant Change, But... Is It More Intuitive, and Better?

Using GROUP!s to splice material into parse rules...or to act as arguments to rules...is a desirable feature.

If you imagine people being introduced to GROUP! as not discarding, if it would just seem to make more *sense* to work with them generically.  PARSE rules would be more creative with less repetition from the get-go.

And with ELIDE functioning in the evaluator, they could build on that knowledge in PARSE to know they have a way to wedge value-generating code into a place where they need that value to disappear.

The other worldview...that GET-GROUP! is a non-discarding form of GROUP!...and plain GROUP! discards the value...doesn&#39;t have a basis in anything.

&gt; Note: I&#39;m thinking that @ groups will continue to have their &quot;as-is&quot; meaning, which is to say that if you **keep @[some integer!]** then you are asking to keep the actual two words **`some integer!`**, while **keep [some integer!]** would act as a rule that would match the input for some number of integers.  Similarly, **keep @(reverse [integer! some])** would keep the two words **some integer!** as well, while **keep (reverse [integer! some])** would be a request to match input.

## Concerns To Address

I&#39;m not so much concerned about backwards compatibility, as I am about two issues:

1. *Is it actually, measurably, knowably better.*

2. *Will the machinery bend to allow emulation of the Rebol2 semantics.*

I think at first I was reluctant to think it could be better, based on thinking *&quot;there&#39;s a lot of points in parse rules that trigger code, and having to put ELIDE on all of them sounds burdensome&quot;*.

But the game has changed in some ways.  For instance, as invisibility is on the rise for you don&#39;t have to worry about injecting **(-- pos)** to dump a parse position variable, because the same invisibility that works inside something like CASE or ALL works here.

I&#39;m interested in (2) because I kind of insist on being able to implement Redbol.  So I&#39;d like there to be some kind of hook for this.  Ideally it would be the kind of hook that would have allowed a motivated individual to add something like the behavior of COLLECT and KEEP as it acts now to PARSE.  I&#39;m still trying to work that out.

**I do feel like the idea deserves a shot, because when I look at it now it seems like how PARSE probably should have been done to start with.**  And we want to show best practices to people trying to implement dialects--and build infrastructure to help with those best practices--which are now informed by things like NULL-ness and invisibility...</description>
    
    <lastBuildDate>Tue, 13 Apr 2021 20:54:32 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Behavior of Plain GROUP! in PARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was split to a new topic: <a href="/t/role-of-xxx-in-parse/1584">Role of @(xxx) in PARSE</a></p>
          <p><a href="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/10</link>
        <pubDate>Tue, 13 Apr 2021 03:11:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1374-10</guid>
        <source url="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374.rss">Behavior of Plain GROUP! in PARSE</source>
      </item>
      <item>
        <title>Behavior of Plain GROUP! in PARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="8" data-topic="1374">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>If a group's product is to be used as a rule, it should be explicit,</p>
</blockquote>
</aside>
<p>What @(...) had begun to act like in in UPARSE was not "use this DO evaluation as a rule", but "evaluate to this value".  <strong>And rules--even BLOCK! rules--are allowed to both match and evaluate to an independent "last-evaluated" value, like BLOCK!s in DO--that is something I'm pretty sure is a good idea.</strong></p>
<p>But it's starting to seem to me like there's probably not a good reason to make this not the behavior of the default GROUP!.</p>
<p>Consider for instance the code I submitted for review from rebol-server: <strong><a href="https://github.com/metaeducation/rebol-server/pull/10/commits/d0f14f1876e2ee20b57a25bf7e300234d999b073">The @(...) are ugly.  It reads better as (...)</a></strong></p>
<p>This also makes it seem like <strong>keep <span class="mention">@x</span></strong> isn't a win over <strong>keep (x)</strong>.</p>
<p>I think this indicates a good compromise with what you have been asking for, <a class="mention" href="/u/rgchris">@rgchris</a> <em>(or re-read it as "you were right all along?" <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"> )</em></p>
<p>So this brings <code>@word</code>, <code>@(gr o up)</code>, and <code>@pa/th</code> (and <code>@tu.ple</code>) handling back to what I had originally spec'd...the literal match:</p>
<pre><code>&gt;&gt; x: [some rule]

&gt;&gt; data: [[some rule] [some rule]]

&gt;&gt; did uparse data [some @x]
== #[true]
</code></pre>
<p>So this would work with code that generates the thing you're exactly matching, too:</p>
<pre><code>&gt;&gt; x: [some rule]

&gt;&gt; data: [[some rule] [some rule]]

&gt;&gt; did uparse data [some @(reverse copy [rule some])]
== #[true]
</code></pre>
<p>OTOH, plain GROUP!s are value-bearing rules, that never advance the input and always succeed.</p>
<p><strong>This does mean that ELIDE would need to be used with GROUP! in places where you don't want to mess up a BLOCK! rule's evaluative result.</strong>  But that's nothing people wouldn't be used to with dealing in BLOCK!s in DO.  It makes <em>sense</em> this way.</p>
<p>Raising the amount of parity between DO and PARSE semantics seems like a real win.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1374">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I'm interested in (2) because I kind of insist on being able to implement Redbol. So I'd like there to be some kind of hook for this. Ideally it would be the kind of hook that would have allowed a motivated individual to add something like the behavior of COLLECT and KEEP as it acts now to PARSE. I'm still trying to work that out.</p>
</blockquote>
</aside>
<p>Just a note for anyone who doesn't know...that UPARSE is coming along quite well with this.  The Redbol emulation has all the old keywords and patterns, invoke it with UPARSE2 and it changes the behavior for SET-WORD! to capture parse positions, GET-WORD! to seek, etc.</p>
<p><em>(Note: Being able to experiment so rapidly with ideas in UPARSE is fantastic, and it was truly an overdue thing to have written.)</em></p>
          <p><a href="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/11</link>
        <pubDate>Tue, 13 Apr 2021 02:42:26 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1374-11</guid>
        <source url="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374.rss">Behavior of Plain GROUP! in PARSE</source>
      </item>
      <item>
        <title>Behavior of Plain GROUP! in PARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="8" data-topic="1374">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>If a group's product is to be used as a rule, it should be explicit</p>
</blockquote>
</aside>
<p>Okay, well that would make it <em>sound</em> like we are in agreement.</p>
<p>My historical stance was that all plain GROUP!s should discard.  Hence plain groups in positions as arguments to rules should raise errors.</p>
<p>If the result of a GROUP! is to be "used" then that would require some form of decoration.</p>
<p>Right now I kind of feel like the light-and-easy-to-miss GET-GROUP! is a fit for arguments to rules, while a doubled-up group might be better when splicing a new rule when it isn't an argument.  But I don't know.</p>
<hr>
<p>For a construct like KEEP we have the distinction of whether you want to keep via matching a rule, or whether you just want to add some raw material that isn't in the input series.</p>
<p>My current plan is that <strong><code>@value</code></strong> means to match a value literally (e.g. if VALUE is a block then it doesn't use it as a rule the way plain <strong>value</strong> does).  But then <code>@value</code> is a rule, so <code>keep @value</code> should honor the idea of saying you're keeping if it matches that exact value.  Hence that eliminates the idea of saying that <code>keep @([&lt;some&gt; &lt;stuff&gt;])</code> would literally keep that data without matching.</p>
<p>GET-BLOCK! would be a possibility for that, though it would perhaps be weird to be running DO code inside PARSE in a BLOCK, vs. a group.  <strong><code>keep :[reverse [&lt;stuff&gt; &lt;some&gt;]]</code></strong></p>
<hr>
<p>Anyway, no shortage of things to think about.  Hope you're finding some free time to come help think about it.  Lots of interesting stuff afoot, which I think is validating the design path taken.</p>
          <p><a href="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/9</link>
        <pubDate>Thu, 12 Nov 2020 06:31:40 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1374-9</guid>
        <source url="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374.rss">Behavior of Plain GROUP! in PARSE</source>
      </item>
      <item>
        <title>Behavior of Plain GROUP! in PARSE</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>This example doesn't quite sit right:</p>
<aside class="quote no-group" data-username="hostilefork" data-post="7" data-topic="1374">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code class="lang-auto">parse "aa" [some (first ["a" "b"]) (x: "c")]
</code></pre>
</blockquote>
</aside>
<p>If a group's product is to be used as a rule, it should be explicit, say:</p>
<pre><code class="lang-auto">parse "aa" [some use (first ["a" "b"]) (x: "c")]
</code></pre>
<p>This could be a GET-GROUP! where this type is available, I suppose (I'm not wholly convinced of GET-GROUP!'s necessity), though my leaning would be to solve through words.</p>
          <p><a href="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/8</link>
        <pubDate>Thu, 12 Nov 2020 06:15:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1374-8</guid>
        <source url="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374.rss">Behavior of Plain GROUP! in PARSE</source>
      </item>
      <item>
        <title>Behavior of Plain GROUP! in PARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="IngoHohmann" data-post="6" data-topic="1374">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>So I would vote to keep plain groups as vanishing and get-groups as splicing.</p>
</blockquote>
</aside>
<p>One thing that I have believed all along is that groups needed to act consistently.  e.g. if a rule was going to see the result of an expression, it couldn't be in a plain group...because plain groups were discarded.</p>
<p><a class="mention" href="/u/rgchris">@rgchris</a> was less concerned about this, and didn't see a problem with the likes of:</p>
<pre><code>parse "aa" [some (first ["a" "b"]) (x: "c")]
</code></pre>
<p>...with the feeling that you should know how many arguments rules take, and so if a group is in a position that a rule expects an argument, then the value is seen.</p>
<p>That didn't feel right to me...PARSE rules are hard enough to read as it is.  So at the very least I preferred to see:</p>
<pre><code>parse "aa" [some :(first ["a" "b"]) (x: "c")]
</code></pre>
<p>This cues you to realize when an evaluation result is being actually used.</p>
<p>However...this pre-dated the idea of rule-splicing.  So when I suggested it, I was only meaning that <strong><code>:(...)</code></strong> would be "passing an argument to a rule", and it would be an error otherwise.</p>
<p>But if we're talking about it <em>always</em> splicing content, then things start to get murkier again...making me wonder if :(...) should be for slipping arguments to rules but an error in other places, ((...)) should be for splicing rules but an error in arguments, (...) should be discarding and an error in arguments too.</p>
<p>I do feel that the :(...) with the colon is a bit slight and easy to miss for something that is fundamentally putting code into the parse stream...so my mind does go back to ((...)) which was the first implementation.</p>
          <p><a href="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/7</link>
        <pubDate>Thu, 29 Oct 2020 19:07:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1374-7</guid>
        <source url="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374.rss">Behavior of Plain GROUP! in PARSE</source>
      </item>
      <item>
        <title>Behavior of Plain GROUP! in PARSE</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>I had to think this over, because I wasn't sure wether my reluctance was just because of change.</p>
<p>In my experience adjusting rules is an important usage of groups in parse, but not the most frequent usage.</p>
<p>Furthermore the number of elides just doesn't look good.</p>
<p>So I would vote to keep plain groups as vanishing and get-groups as splicing. Double groups could be used as well, but I think that might be harder when you are constructing rules programmatically.</p>
          <p><a href="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/6</link>
        <pubDate>Thu, 29 Oct 2020 18:59:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1374-6</guid>
        <source url="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374.rss">Behavior of Plain GROUP! in PARSE</source>
      </item>
      <item>
        <title>Behavior of Plain GROUP! in PARSE</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I'm all for consistency. But GET-WORD!s are commonly used to set/inject a new position into PARSE, so it doesn't seem much of a cognitive stretch to use GET-GROUP to splice results in. I don't know what the chances are for getting a notation or shorthand for ELIDE... I don't care much for the forward slash and I'd rather be able to use something like a tilde or something that provides a decent visual cue.</p>
          <p><a href="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/5</link>
        <pubDate>Thu, 29 Oct 2020 16:05:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1374-5</guid>
        <source url="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374.rss">Behavior of Plain GROUP! in PARSE</source>
      </item>
      <item>
        <title>Behavior of Plain GROUP! in PARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="BlackATTR" data-post="2" data-topic="1374">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>I like the new functionality and I'm fine with the proposed consistent GROUP! behavior.</p>
</blockquote>
</aside>
<p>Trying it out in practice, <em>I do think it is conceptually more "healthy" to see the discarding case as the behavior requiring a notation</em>.  You don't generally conceive of things in parentheses being associated with discarding the result...it "groups" things.</p>
<p>Yet it does get wordy.  Let's say you start with something like:</p>
<pre><code>        parse skip executable string-header-offset [
            (mode: 'read) pos: section-header-rule
            (
                assert [sh_offset = string-section-offset]
                sh_size: sh_size + (1 + length of encap-section-name)
            )
            (mode: 'write) :pos section-header-rule
            to end
        ]
</code></pre>
<p>Becoming:</p>
<pre><code>        parse skip executable string-header-offset [
            elide (mode: 'read) pos: section-header-rule
            elide (
                assert [sh_offset = string-section-offset]
                sh_size: sh_size + (1 + length of encap-section-name)
            )
            elide (mode: 'write) :pos section-header-rule
            to end
        ]
</code></pre>
<blockquote>
<p>Sidenote for those who don't know: ASSERT is now an invisible.</p>
</blockquote>
<p>Seeing the wordiness makes me wonder if an alternative notation should be available to mean the same thing.  I don't think <strong><code>:(...)</code></strong> makes sense, because colons don't have any assocation with discarding.</p>
<p><strong><code>/(...)</code></strong> is another option:</p>
<pre><code>        parse skip executable string-header-offset [
            /(mode: 'read) pos: section-header-rule
            /(
                assert [sh_offset = string-section-offset]
                sh_size: sh_size + (1 + length of encap-section-name)
            )
            /(mode: 'write) :pos section-header-rule
            to end
        ]
</code></pre>
<p><a class="mention" href="/u/rgchris">@rgchris</a> would hate it.  Period is more subtle:</p>
<pre><code>        parse skip executable string-header-offset [
            .(mode: 'read) pos: section-header-rule
            .(
                assert [sh_offset = string-section-offset]
                sh_size: sh_size + (1 + length of encap-section-name)
            )
            .(mode: 'write) :pos section-header-rule
            to end
        ]
</code></pre>
<p>But I'm looking at reserving <strong>.even?</strong> and such for predicates in parse, which is important:</p>
<pre><code> parse [1 2] [some .even?]
</code></pre>
<p>We could go for the doubling-up of GROUP! to force a discard:</p>
<pre><code>        parse skip executable string-header-offset [
            ((mode: 'read)) pos: section-header-rule
            ((
                assert [sh_offset = string-section-offset]
                sh_size: sh_size + (1 + length of encap-section-name)
            ))
            ((mode: 'write)) :pos section-header-rule
            to end
        ]
</code></pre>
<p>It has the quality that you can tell on both ends that the discard is happening.  It doesn't line up very well with the splice-meaning for the same notation in COMPOSE.</p>
<hr>
<p><strong>All that said, I don't think the <code>:(...)</code> for PARSE splicing is that terrible.</strong>  It does seem the rarer operation, it feels learnable, it doesn't require breaking compatibility with history.  I'd also considered that it might be done with <strong>((...))</strong> which could be seen as asking to "splice" the parse rule in...and maybe it stands out better and looks prettier and more symmetrical.</p>
          <p><a href="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/4</link>
        <pubDate>Thu, 29 Oct 2020 14:33:48 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1374-4</guid>
        <source url="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374.rss">Behavior of Plain GROUP! in PARSE</source>
      </item>
      <item>
        <title>Behavior of Plain GROUP! in PARSE</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>Try to stick to any other programming language over a longer period of time, chances are you have to make changes in your codebase to deal with the progression. Many projects in my working history have this as a common denominator.</p>
          <p><a href="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/3</link>
        <pubDate>Thu, 29 Oct 2020 11:38:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1374-3</guid>
        <source url="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374.rss">Behavior of Plain GROUP! in PARSE</source>
      </item>
      <item>
        <title>Behavior of Plain GROUP! in PARSE</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I hope we get some good community feedback here. I like the new functionality and I'm fine with the proposed consistent GROUP! behavior. OTOH I'm not tied to a legacy codebase to convert.</p>
          <p><a href="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/2</link>
        <pubDate>Wed, 28 Oct 2020 22:23:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1374-2</guid>
        <source url="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374.rss">Behavior of Plain GROUP! in PARSE</source>
      </item>
      <item>
        <title>Behavior of Plain GROUP! in PARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Historically, a plain GROUP! in PARSE runs the conventional evaluator.  But it discards its result and doesn't put it into the stream of parse instructions.</p>
<p>That means you can't do things like this:</p>
<pre><code>parse "aaa" [some (either condition ["a"] ["b"])]
</code></pre>
<p>Because the "discarding" behavior of GROUP!s in PARSE is so pervasive, it seemed hard to challenge.  So Ren-C had adopted the GET-GROUP! as <strong>:(...)</strong> to be non-discarding form, which you could use to splice arbitrary arguments or instructions into the PARSE stream.</p>
<p>But to <a class="mention" href="/u/rgchris">@rgchris</a>'s taste, having the colons may be worse than rethinking the rule...to instead one in which you have to explicitly throw away the result.  So we'd presume PARSE would have an ELIDE keyword.</p>
<pre><code>parse "aaa" [some ["a" elide (print "found an A")]]
</code></pre>
<p>In a new way of working...a failure to put the ELIDE there would mean you'd be trying to splice a #[void] into the instruction stream, which we'd imagine is an error.  (You'd need a quoted void to match an actual void value).</p>
<p>The choice to elide can come from inside the group as well:</p>
<pre><code>parse "aaa" [some ["a" (elide print "found an A")]]
</code></pre>
<p>Or use something that returned NULL...since a NULL splice is ignored by the parse stream.  This is the mechanism by which branching constructs can be used to good effect:</p>
<pre><code>parse "aaa" [some ["a" (if false ["b"])]]
</code></pre>
<blockquote>
<p><em>Note: In the early days of expression barriers, I mused this kind of approach could be done with an idiom that would look like what some languages call "banana clips":</em></p>
<pre><code>parse "aaa" [some ["a" (| print "found an A" |)]]
</code></pre>
<p><em>Under that proposal you wouldn't need the barrier on both ends, but it might help.  Today's expression barriers only block evaluations and don't overwrite evaluations, though.  But it's a bit interesting, and shows the proposal is not fully "new"</em></p>
</blockquote>
<h2>A Significant Change, But... Is It More Intuitive, and Better?</h2>
<p>Using GROUP!s to splice material into parse rules...or to act as arguments to rules...is a desirable feature.</p>
<p>If you imagine people being introduced to GROUP! as not discarding, if it would just seem to make more <em>sense</em> to work with them generically.  PARSE rules would be more creative with less repetition from the get-go.</p>
<p>And with ELIDE functioning in the evaluator, they could build on that knowledge in PARSE to know they have a way to wedge value-generating code into a place where they need that value to disappear.</p>
<p>The other worldview...that GET-GROUP! is a non-discarding form of GROUP!...and plain GROUP! discards the value...doesn't have a basis in anything.</p>
<blockquote>
<p>Note: I'm thinking that @ groups will continue to have their "as-is" meaning, which is to say that if you <strong>keep @[some integer!]</strong> then you are asking to keep the actual two words <strong><code>some integer!</code></strong>, while <strong>keep [some integer!]</strong> would act as a rule that would match the input for some number of integers.  Similarly, <strong>keep @(reverse [integer! some])</strong> would keep the two words <strong>some integer!</strong> as well, while <strong>keep (reverse [integer! some])</strong> would be a request to match input.</p>
</blockquote>
<h2>Concerns To Address</h2>
<p>I'm not so much concerned about backwards compatibility, as I am about two issues:</p>
<ol>
<li>
<p><em>Is it actually, measurably, knowably better.</em></p>
</li>
<li>
<p><em>Will the machinery bend to allow emulation of the Rebol2 semantics.</em></p>
</li>
</ol>
<p>I think at first I was reluctant to think it could be better, based on thinking <em>"there's a lot of points in parse rules that trigger code, and having to put ELIDE on all of them sounds burdensome"</em>.</p>
<p>But the game has changed in some ways.  For instance, as invisibility is on the rise for you don't have to worry about injecting <strong>(-- pos)</strong> to dump a parse position variable, because the same invisibility that works inside something like CASE or ALL works here.</p>
<p>I'm interested in (2) because I kind of insist on being able to implement Redbol.  So I'd like there to be some kind of hook for this.  Ideally it would be the kind of hook that would have allowed a motivated individual to add something like the behavior of COLLECT and KEEP as it acts now to PARSE.  I'm still trying to work that out.</p>
<p><strong>I do feel like the idea deserves a shot, because when I look at it now it seems like how PARSE probably should have been done to start with.</strong>  And we want to show best practices to people trying to implement dialects--and build infrastructure to help with those best practices--which are now informed by things like NULL-ness and invisibility...</p>
          <p><a href="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374/1</link>
        <pubDate>Wed, 28 Oct 2020 06:50:59 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1374-1</guid>
        <source url="https://forum.rebol.info/t/behavior-of-plain-group-in-parse/1374.rss">Behavior of Plain GROUP! in PARSE</source>
      </item>
  </channel>
</rss>

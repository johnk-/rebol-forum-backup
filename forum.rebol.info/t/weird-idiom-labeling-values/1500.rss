<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Weird Idiom: Labeling Values?</title>
    <link>https://forum.rebol.info/t/weird-idiom-labeling-values/1500</link>
    <description>I&#39;m going through and changing a lot of FUNCTION uses to FUNC + LET.  The long term goal will be to eliminate the locals-gathering functionality...and you either use LET/USE or you go explicit with `&lt;local&gt;` in the function spec.

I came across this:

        size-as-binary: enbin [be + 8] length of embedding
        append executable size-as-binary

This was the only use of the variable.  Changing it to a LET works, but it&#39;s kind of a waste:

        let size-as-binary: enbin [be + 8] length of embedding
        append executable size-as-binary

LET&#39;s assignment form does run the right hand side...because the LET word itself vaporizes, so it&#39;s like the bound new SET-WORD! just runs as normal:

        append executable let size-as-binary: enbin [be + 8] length of embedding

But a LET isn&#39;t really necessary here.  I had a weird thought, what if a TAG! or ISSUE! or something was used in a way that was &quot;obviously&quot; throwing it away?

        append executable (&lt;size-as-binary&gt; enbin [be + 8] length of embedding)

Maybe a little confusing.  But it saves on a variable declaration.

A comment is zero overhead, so I&#39;m doing that...

        append executable enbin [be + 8] length of embedding  ; size of binary

But I just thought the idea of a deliberately discarded leading value was kind of interesting.</description>
    
    <lastBuildDate>Fri, 30 Apr 2021 17:08:00 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://forum.rebol.info/t/weird-idiom-labeling-values/1500.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Weird Idiom: Labeling Values?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Rust has a weird convention where names that start with underscore are placeholders.  This is to help avoid warnings about unused variables.</p>
<pre><code>fn some_function(foo: String, bar: u32) {
   println("bar is {}", bar);
   // you get a warning that `foo` is unused
}

fn another_function(_foo: String, bar: u32) {
   println("bar is {}", bar);
   // no warning, because foo starts with underscore
}
</code></pre>
<p>It doesn't actually stop you from referring to the variable--it's a legal name.  It just won't warn you when you don't use it.</p>
<p>We don't have analysis that does warnings :-/ but could use the same convention  <code>_name</code>...since you can use <code>_</code> to opt out.</p>
<p>There's more possibilities of actually using a different type, to prevent the declaration of variables at all...</p>
<pre><code>let name: "Eve"
for-each [#name score] ["Bob" 1020 Alice "304"] [
    ; don't actually create a variable for NAME, just a placeholder
    print [name]  ; this would thus print "Eve"
]
</code></pre>
<p>How truly useful that would be, I don't know.</p>
          <p><a href="https://forum.rebol.info/t/weird-idiom-labeling-values/1500/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/weird-idiom-labeling-values/1500/3</link>
        <pubDate>Fri, 30 Apr 2021 17:08:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1500-3</guid>
        <source url="https://forum.rebol.info/t/weird-idiom-labeling-values/1500.rss">Weird Idiom: Labeling Values?</source>
      </item>
      <item>
        <title>Weird Idiom: Labeling Values?</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I'm curious to know what others think about this.<br>
I prefer not to chain things in long, dense expressions. Makes it harder to read and debug later (or to add error-handling). Sometimes minimizing variable use is not a viable option.</p>
<p>It's worthy of some thought. In the example...</p>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1500">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><code>append executable (&lt;size-as-binary&gt; enbin...</code></p>
</blockquote>
</aside>
<p>it seems like it would be additional complexity to distinguish/escape a &lt;tag&gt; or <span class="hashtag">#issue</span> that you want to keep in the APPEND expression.</p>
          <p><a href="https://forum.rebol.info/t/weird-idiom-labeling-values/1500/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/weird-idiom-labeling-values/1500/2</link>
        <pubDate>Wed, 10 Feb 2021 21:07:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1500-2</guid>
        <source url="https://forum.rebol.info/t/weird-idiom-labeling-values/1500.rss">Weird Idiom: Labeling Values?</source>
      </item>
      <item>
        <title>Weird Idiom: Labeling Values?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I'm going through and changing a lot of FUNCTION uses to FUNC + LET.  The long term goal will be to eliminate the locals-gathering functionality...and you either use LET/USE or you go explicit with <code>&lt;local&gt;</code> in the function spec.</p>
<p>I came across this:</p>
<pre><code>    size-as-binary: enbin [be + 8] length of embedding
    append executable size-as-binary
</code></pre>
<p>This was the only use of the variable.  Changing it to a LET works, but it's kind of a waste:</p>
<pre><code>    let size-as-binary: enbin [be + 8] length of embedding
    append executable size-as-binary
</code></pre>
<p>LET's assignment form does run the right hand side...because the LET word itself vaporizes, so it's like the bound new SET-WORD! just runs as normal:</p>
<pre><code>    append executable let size-as-binary: enbin [be + 8] length of embedding
</code></pre>
<p>But a LET isn't really necessary here.  I had a weird thought, what if a TAG! or ISSUE! or something was used in a way that was "obviously" throwing it away?</p>
<pre><code>    append executable (&lt;size-as-binary&gt; enbin [be + 8] length of embedding)
</code></pre>
<p>Maybe a little confusing.  But it saves on a variable declaration.</p>
<p>A comment is zero overhead, so I'm doing that...</p>
<pre><code>    append executable enbin [be + 8] length of embedding  ; size of binary
</code></pre>
<p>But I just thought the idea of a deliberately discarded leading value was kind of interesting.</p>
          <p><a href="https://forum.rebol.info/t/weird-idiom-labeling-values/1500/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/weird-idiom-labeling-values/1500/1</link>
        <pubDate>Wed, 10 Feb 2021 19:21:14 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1500-1</guid>
        <source url="https://forum.rebol.info/t/weird-idiom-labeling-values/1500.rss">Weird Idiom: Labeling Values?</source>
      </item>
  </channel>
</rss>

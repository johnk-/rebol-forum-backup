<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Expression Barriers Redux: PARSE 2020 Edition</title>
    <link>https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376</link>
    <description>Due to Rebol&#39;s run-on-sentence aesthetic, I&#39;ve always thought it needed some way to punctuate that was both *visually lighter* than grouping, and that by not using groups *wouldn&#39;t interfere with COMPOSE*.

Some people would be content to just use spaces:

    any [even? x  match [block! group!] y  foo baz bar]

On the downsides of that, it doesn&#39;t have any &quot;teeth&quot;, e.g y might take `foo` as an argument.  It&#39;s also lost in any MOLD operation as the specifics of spacing is not preserved.

The vertical bar has been in place for a while, which I liked for its barrier-ness and even looking weight:

    any [even? x | match [block! group!] y | foo baz bar]

But PARSE was immovably attached to its usage for alternates.  Looking at PARSE lately and trying to make sense of it, I really feel like it needs this just as much as ordinary code.

Period was another option that was looked at:

    any [even? x . match [block! group!] y . foo baz bar]

And by now everything has been considered...backslashes:

    any [even? x \ match [block! group!] y \ foo baz bar]

Two periods:

    any [even? x .. match [block! group!] y .. foo baz bar]

Having BLANK! itself act as a barrier as opposed to something that can be taken directly as an argument to a function:

    any [even? x _ match [block! group!] y _ foo baz bar]

Strange ideas like a COMMA! type that renders glued to the thing to its left, even though it&#39;s an independent element:

    any [even? x, match [block! group!] y, foo baz bar]

&gt; In a parallel universe where semicolons weren&#39;t taken for comments, perhaps they&#39;d be considered:
&gt;
&gt;      any [even? x; match [block! group!] y; foo baz bar]
&gt;
&gt; ...although that looks a bit too much like SET-WORD!s, there.  Which is yet another argument for why **abc;** is now rightfully illegal as a WORD!.

## Should We Lower the BAR?

There&#39;s a lot of mechanism to support barriers and invisibility, and it&#39;s something you can use generically...so the facilities that started out as a distinct &quot;BAR!&quot; datatype have grown into a whole lot of power that you can apply to any function.

**But I have to admit I don&#39;t feel as attached to the vertical bar for separating expressions as I did some years ago.**

* Can&#39;t use it in PARSE because | is pretty much set as rule alternate
* It seems too heavy for what it&#39;s doing.
* Might be useful for a pipe operator or other ideas in plain dialecting (noticed &quot;Arturo&quot; used it for that)

While I might have rejected a simple dot as &quot;too slight&quot; in the past, I may now feel that the subtlety is favorable.  And the COMMA! idea is actually looking pretty good--if you just imagine that being a datatype that behaves exactly as expression barriers do today:

     &gt;&gt; length of [1,]
     == 2

     &gt;&gt; type of second [1,]
     == @[comma]

     &gt;&gt; 1 + 2,
     == 3

     &gt;&gt; 1 +, 2
     ** Script Error: comma encountered while fulfilling argument
     ** Near: [1 +, ~~ 2]

## You Could Still Make BAR! or Whatever You Want

The current mechanisms would work, and I think I&#39;m going to make sure they work for **.** too.

(I&#39;ll need to figure out how to let you make any UTF-8 symbol you want act like an expression barrier in PARSE.  But let&#39;s say I figure out how.)

Is COMMA! worth a shot?  Does period look better or worse to your tastes?

Important to bear in mind is that on the table is now the idea that accessing things which you want to say aren&#39;t calling functions would be done with a terminal period.  This could risk creating things like:

    any [even? x., match [block! group!] y., foo baz bar]

Compared to letting lone periods act as barriers:

    any [even? x. . match [block! group!] y. . foo baz bar]

Compared to status quo of today&#39;s barriers:

    any [even? x. | match [block! group!] y. | foo baz bar]

Compared to selective grouping:

    any [(even? x.) (match [block! group!] y.) foo baz bar]

*(Note that in PARSE, the &quot;grouping&quot; is actually &quot;blocking&quot;...which looks even heavier)*

Oddly enough, I don&#39;t think the commas do all that badly even in this pathological case.  And as I show with the groups, it&#39;s not like you have to use the comma if you don&#39;t feel the code &quot;looks right&quot;.

Anyway--remember that the goal is that you can twist up the language even for the span of a function.  So while running that function if you decide you want **|** to be a barrier but not for the rest of your program, you can do that!</description>
    
    <lastBuildDate>Thu, 19 Nov 2020 19:45:28 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Expression Barriers Redux: PARSE 2020 Edition</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So it's turning out I'm really digging COMMA!, and it looks and feels more natural than I thought it would.</p>
<aside class="quote no-group" data-username="IngoHohmann" data-post="3" data-topic="1376" data-full="true">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>How about comma with space on either side?</p>
<pre><code>any [even? x. , match [block! group!] y. , foo baz bar]
</code></pre>
</blockquote>
</aside>
<p>I've really come to think the non-spacing is what makes comma turn out so appealingly.  So most of the time I <em>definitely</em> don't want the space.  If it comes right after a period, <em>hmmm</em></p>
<p>Right now I put it so that spacing is used when they are sequential (e.g. you can build a BLOCK! of three commas, so you need to be able to render them in a way that would LOAD, and I'm saying <code>,,,</code> is illegal in the scanner)</p>
<pre><code>[, , ,]
</code></pre>
<p>Should we go into automatic space mode after a period, and make it illegal in the scanner to have a period and comma sequentially?  Hrrrm.  Is it really <em>that</em> bad if it doesn't?</p>
<pre><code>any [even? x., match [block! group!] y., foo baz bar]
</code></pre>
<p>I feel like preferences would definitely be split on whether that warrants the space.  I'm leaning to saying it doesn't, and if it's hard to see use a font that makes them more clearly different.  :-/</p>
<p>Just how I'm looking at it right now.</p>
          <p><a href="https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376/8</link>
        <pubDate>Thu, 19 Nov 2020 19:45:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1376-8</guid>
        <source url="https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376.rss">Expression Barriers Redux: PARSE 2020 Edition</source>
      </item>
      <item>
        <title>Expression Barriers Redux: PARSE 2020 Edition</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="iArnold" data-post="6" data-topic="1376">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/iarnold/40/226_2.png" class="avatar"> iArnold:</div>
<blockquote>
<p>We can have only a very limited number of datatypes?</p>
</blockquote>
</aside>
<p>There's a bit of a relevance of the number "64" in terms of how cells are designed, in terms of fundamental types.  However one of these fundamental types is "custom/extension type" which indicates that part of the cell is sacrificed for a pointer to information about the extension types.</p>
<p><a href="https://forum.rebol.info/t/user-defined-datatype-discussion/1203">More explanation here</a>, or you can review what I talk about in terms of the cell format <a href="https://youtu.be/6nsKTpArTCE?t=339">in the video</a></p>
<p>The issue is not so much not having the types, but not having a notion of <em>typeset</em> which covers extension types.</p>
<p>What we want to avoid is answers like "represent typesets as a BLOCK! of DATATYPE! values"...because once you have an infinite number of types, how do you represent ANY-TYPE! ?</p>
<p>This was just something completely missing from R3-Alpha, so there's no design for it.  The best idea I've had is to shift from thinking of type sets as data and instead see them as type constraint functions.</p>
<p>Anyway, I talk about all that as well:</p>
<p><strong><a href="https://forum.rebol.info/t/the-typeset-representation-problem/1300">The Typeset Representation Problem</a></strong></p>
<p>So the upshot is:</p>
<ul>
<li>
<p>It will always be the case that some types are cheaper than others, and the cheap types are limited.  This isn't to say the non-cheap types are <em>stupidly</em> expensive, but just have some various aspects that make them cost a bit more than the fundamental types.  With things like COMMA! I have the feeling it should probably be one of the cheaper types, so positioning it is complex in terms of bumping the other limited things around.</p>
</li>
<li>
<p>Regardless of that, there's no implementation of generalized typesets or type constraints yet...because no grand design for them has been handed down from the heavens yet.  So making the non-cheap type form means having to hack together some kind of solution for type checking when you pass that type to a function, and I'd rather not write those hacks before figuring out what the real answer is.</p>
</li>
</ul>
          <p><a href="https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376/7</link>
        <pubDate>Sun, 01 Nov 2020 11:15:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1376-7</guid>
        <source url="https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376.rss">Expression Barriers Redux: PARSE 2020 Edition</source>
      </item>
      <item>
        <title>Expression Barriers Redux: PARSE 2020 Edition</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="1376">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Unfortunately, until how typesets work is reformed...we are out of datatypes and I'm a bit stuck on it.</p>
</blockquote>
</aside>
<p>We can have only a very limited number of datatypes?</p>
          <p><a href="https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376/6</link>
        <pubDate>Sun, 01 Nov 2020 09:56:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1376-6</guid>
        <source url="https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376.rss">Expression Barriers Redux: PARSE 2020 Edition</source>
      </item>
      <item>
        <title>Expression Barriers Redux: PARSE 2020 Edition</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1376">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><code>any [even? x., match [block! group!] y., foo baz bar]</code></p>
</blockquote>
</aside>
<p>I'll point out this is slightly redundant as a protection against functions, because comma alone protects against <em>argument-taking</em> functions.</p>
<pre><code>any [even? x, match [block! group!] y, foo baz bar]
</code></pre>
<p>If x is <strong>x: does [print "formatting hard drive"]</strong>, that would still run.  But as I tried to express in <a href="https://forum.rebol.info/t/from-liability-to-asset-word-and-path-always-running-code/1354">"From Liability to Asset: WORD! and PATH! always running code"</a> then that may be the rightful common case for the language model.</p>
<aside class="quote no-group" data-username="BlackATTR" data-post="2" data-topic="1376">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>Out of the options I prefer the comma and then our standard pipe character.</p>
</blockquote>
</aside>
<p>Sounds like we could use some experience with COMMA! to know the realities of how it feels.</p>
<p>Unfortunately, until how typesets work is reformed...we are out of datatypes and I'm a bit stuck on it.  We could recover one if PAIR! and TUPLE! unified...the block there is that I'm not so sure how I feel about the path picking of X and Y work generically as meaning "first item" or "second item" of tuples and paths.  It makes me feel like there's something missing like a light alias over fundamental types that can skin them (like an <code>enum class</code> in C++ giving typechecking-unique integers without costing more than an integer per instance).  Still thinking to do.</p>
          <p><a href="https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376/5</link>
        <pubDate>Sat, 31 Oct 2020 03:48:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1376-5</guid>
        <source url="https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376.rss">Expression Barriers Redux: PARSE 2020 Edition</source>
      </item>
      <item>
        <title>Expression Barriers Redux: PARSE 2020 Edition</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="IngoHohmann" data-post="3" data-topic="1376">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>How about comma with space on either side?</p>
</blockquote>
</aside>
<p>One wacky idea could be possible would be to say that commas never start newlines, but instead use their newline bit to say whether there was a space before them.  Then they become up-to-one-space preserving.</p>
<p>So if you wrote <strong>[x, y]</strong> then that's what you'd get back, and if you wrote <strong>[x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, y]</strong> then you'd get <strong>[x , y]</strong></p>
<p>Which would break pretty much every "do this thing until you hit a newline" tool.  So it's probably not a great idea.</p>
<p>But commas have a full cell worth of bits.  They could have some formatting data.</p>
          <p><a href="https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376/4</link>
        <pubDate>Fri, 30 Oct 2020 19:05:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1376-4</guid>
        <source url="https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376.rss">Expression Barriers Redux: PARSE 2020 Edition</source>
      </item>
      <item>
        <title>Expression Barriers Redux: PARSE 2020 Edition</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>How about comma with space on either side?</p>
<pre><code class="lang-auto">any [even? x. , match [block! group!] y. , foo baz bar]
</code></pre>
          <p><a href="https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376/3</link>
        <pubDate>Fri, 30 Oct 2020 19:00:55 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1376-3</guid>
        <source url="https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376.rss">Expression Barriers Redux: PARSE 2020 Edition</source>
      </item>
      <item>
        <title>Expression Barriers Redux: PARSE 2020 Edition</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I don't like the dots/periods-- they remind me of regular expressions. Out of the options I prefer the comma and then our standard pipe character.</p>
          <p><a href="https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376/2</link>
        <pubDate>Fri, 30 Oct 2020 18:49:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1376-2</guid>
        <source url="https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376.rss">Expression Barriers Redux: PARSE 2020 Edition</source>
      </item>
      <item>
        <title>Expression Barriers Redux: PARSE 2020 Edition</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Due to Rebol's run-on-sentence aesthetic, I've always thought it needed some way to punctuate that was both <em>visually lighter</em> than grouping, and that by not using groups <em>wouldn't interfere with COMPOSE</em>.</p>
<p>Some people would be content to just use spaces:</p>
<pre><code>any [even? x  match [block! group!] y  foo baz bar]
</code></pre>
<p>On the downsides of that, it doesn't have any "teeth", e.g y might take <code>foo</code> as an argument.  It's also lost in any MOLD operation as the specifics of spacing is not preserved.</p>
<p>The vertical bar has been in place for a while, which I liked for its barrier-ness and even looking weight:</p>
<pre><code>any [even? x | match [block! group!] y | foo baz bar]
</code></pre>
<p>But PARSE was immovably attached to its usage for alternates.  Looking at PARSE lately and trying to make sense of it, I really feel like it needs this just as much as ordinary code.</p>
<p>Period was another option that was looked at:</p>
<pre><code>any [even? x . match [block! group!] y . foo baz bar]
</code></pre>
<p>And by now everything has been considered...backslashes:</p>
<pre><code>any [even? x \ match [block! group!] y \ foo baz bar]
</code></pre>
<p>Two periods:</p>
<pre><code>any [even? x .. match [block! group!] y .. foo baz bar]
</code></pre>
<p>Having BLANK! itself act as a barrier as opposed to something that can be taken directly as an argument to a function:</p>
<pre><code>any [even? x _ match [block! group!] y _ foo baz bar]
</code></pre>
<p>Strange ideas like a COMMA! type that renders glued to the thing to its left, even though it's an independent element:</p>
<pre><code>any [even? x, match [block! group!] y, foo baz bar]
</code></pre>
<blockquote>
<p>In a parallel universe where semicolons weren't taken for comments, perhaps they'd be considered:</p>
<pre><code> any [even? x; match [block! group!] y; foo baz bar]
</code></pre>
<p>...although that looks a bit too much like SET-WORD!s, there.  Which is yet another argument for why <strong>abc;</strong> is now rightfully illegal as a WORD!.</p>
</blockquote>
<h2>Should We Lower the BAR?</h2>
<p>There's a lot of mechanism to support barriers and invisibility, and it's something you can use generically...so the facilities that started out as a distinct "BAR!" datatype have grown into a whole lot of power that you can apply to any function.</p>
<p><strong>But I have to admit I don't feel as attached to the vertical bar for separating expressions as I did some years ago.</strong></p>
<ul>
<li>Can't use it in PARSE because | is pretty much set as rule alternate</li>
<li>It seems too heavy for what it's doing.</li>
<li>Might be useful for a pipe operator or other ideas in plain dialecting (noticed "Arturo" used it for that)</li>
</ul>
<p>While I might have rejected a simple dot as "too slight" in the past, I may now feel that the subtlety is favorable.  And the COMMA! idea is actually looking pretty good--if you just imagine that being a datatype that behaves exactly as expression barriers do today:</p>
<pre><code> &gt;&gt; length of [1,]
 == 2

 &gt;&gt; type of second [1,]
 == @[comma]

 &gt;&gt; 1 + 2,
 == 3

 &gt;&gt; 1 +, 2
 ** Script Error: comma encountered while fulfilling argument
 ** Near: [1 +, ~~ 2]
</code></pre>
<h2>You Could Still Make BAR! or Whatever You Want</h2>
<p>The current mechanisms would work, and I think I'm going to make sure they work for <strong>.</strong> too.</p>
<p>(I'll need to figure out how to let you make any UTF-8 symbol you want act like an expression barrier in PARSE.  But let's say I figure out how.)</p>
<p>Is COMMA! worth a shot?  Does period look better or worse to your tastes?</p>
<p>Important to bear in mind is that on the table is now the idea that accessing things which you want to say aren't calling functions would be done with a terminal period.  This could risk creating things like:</p>
<pre><code>any [even? x., match [block! group!] y., foo baz bar]
</code></pre>
<p>Compared to letting lone periods act as barriers:</p>
<pre><code>any [even? x. . match [block! group!] y. . foo baz bar]
</code></pre>
<p>Compared to status quo of today's barriers:</p>
<pre><code>any [even? x. | match [block! group!] y. | foo baz bar]
</code></pre>
<p>Compared to selective grouping:</p>
<pre><code>any [(even? x.) (match [block! group!] y.) foo baz bar]
</code></pre>
<p><em>(Note that in PARSE, the "grouping" is actually "blocking"...which looks even heavier)</em></p>
<p>Oddly enough, I don't think the commas do all that badly even in this pathological case.  And as I show with the groups, it's not like you have to use the comma if you don't feel the code "looks right".</p>
<p>Anyway--remember that the goal is that you can twist up the language even for the span of a function.  So while running that function if you decide you want <strong>|</strong> to be a barrier but not for the rest of your program, you can do that!</p>
          <p><a href="https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376/1</link>
        <pubDate>Fri, 30 Oct 2020 18:26:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1376-1</guid>
        <source url="https://forum.rebol.info/t/expression-barriers-redux-parse-2020-edition/1376.rss">Expression Barriers Redux: PARSE 2020 Edition</source>
      </item>
  </channel>
</rss>

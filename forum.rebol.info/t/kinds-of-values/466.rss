<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Kinds of values?</title>
    <link>https://forum.rebol.info/t/kinds-of-values/466</link>
    <description>Rebol series and values lack a built in way to add meta data.

For example, imagine two blocks each in a different dialect. Without interpreting their content, how can they be distinguished?

Another example is parsing a foreign format into a sequence of strings but not having a way to distinguish the different kinds of strings.  One wants the linear sequence, without having to try to shoe-horn these strings into standard rebol types nor maintain and synchronise some separate attribute system.

For me, these examples point to a missing feature. While suffering some jetlagged induced insomnia I thought of the following idea.

Values could have a user defined property of KIND or CLASS, I&#39;ll call it Kind here.  Mindful of the above examples, I thought series could have an attribute of Kind, this would be useful for strings and blocks. They would have supporting syntax.

For demonstration I thought Kind could be a word followed by a #, followed by the existing syntax.  E.g:

    vid#[button &quot;push me&quot;] ; A block of VID dialect.
    vector#[1 2 3]
    kind of markdown#{*This* could be interesting.} ; Would yield MARKDOWN

Kind would be optional so existing forms would be unaffected:

    kind of {simple string} ; would return _
    kind of [simple block] ; would return _

An obvious concern is that it would uglify Rebol syntax. I have no answer to that, I&#39;m just at the moment excited by what benefits could be derived.

In a sense Kind is just tagging values and would be orthogonal to the rebol types.  But it could allow functions to check the Kind of their arguments, and possibly have some operations choosen by Kind. As such it may be answer to user types - if you want a custom type, define a dialect to represent the type (which can identified by Kind). No need for some developer designed custom syntax.

Matching by Kind in PARSE would be really really useful.

PARSE could have a mode to emit matched sequences with a Kind that comes from rules invoked by words. Giving a basic parse tree output for little effort - highly useful for data extraction.

Pathing by kind could perhaps enable some sophisticated extraction from recursive structured formats (XML?).

Presumably other ideas would be forthcoming if Kind was available.

Kind could probably be applicable to all rebol types:

    column#3 ; An integer whose kind is Column.

I don&#39;t know if this idea is good or terrible, but it is interesting at least. Wondering what people think and if there are better ideas?</description>
    
    <lastBuildDate>Fri, 26 Jan 2018 17:19:30 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/kinds-of-values/466.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Kinds of values?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Some thinking from a wiki submitted by a Red user, on this theme...just bookmarking it:</p>
<p><a href="https://github.com/red/red/wiki/Proposal:-user-defined-types-(UDT)---dependent-types" rel="nofollow noopener">UDT (User-defined types)</a></p>
          <p><a href="https://forum.rebol.info/t/kinds-of-values/466/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/kinds-of-values/466/5</link>
        <pubDate>Fri, 26 Jan 2018 17:19:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-466-5</guid>
        <source url="https://forum.rebol.info/t/kinds-of-values/466.rss">Kinds of values?</source>
      </item>
      <item>
        <title>Kinds of values?</title>
        <dc:creator><![CDATA[Brett]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="3" data-topic="466">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>So it wouldn't be that primitives (like blocks) would be packing in additional properties.  There's simply not enough room, without changing the rules of the cells and REBSER nodes in ways that would expand and complicate them</p>
</blockquote>
</aside>
<p>Ok, so the idea appears to be impractical implementation-wise.</p>
<aside class="quote no-group" data-post="3" data-topic="466">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I'd file this under the generic missing feature of a user-defined type system</p>
</blockquote>
</aside>
<p>Hopefully such a system will be lightweight enough that it can represent the tokenisation of foreign syntaxes <a href="https://github.com/metaeducation/ren-c/blob/master/src/tools/c-lexicals.r#L34-L57" rel="nofollow noopener">such as C</a> for example <img src="//forum.rebol.info/images/emoji/twitter/wink.png?v=7" title=":wink:" class="emoji" alt=":wink:"></p>
<aside class="quote no-group" data-post="3" data-topic="466">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>and we do have questions about round-tripping objects as-is when they are molded</p>
</blockquote>
</aside>
<p>Breaking homoiconicity is one. I find this annoying enough to avoid using objects in my data structures where I can.  Block structures without objects are nice for saving out as text intermediate data steps, visualising and modifying them in editors, etc.  I like my data to speak to me, not be cluttered with noise.</p>
<aside class="quote no-group quote-modified" data-post="3" data-topic="466">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Rebol's attempt to standardize a format for information interchange...</p>
<p>...I think this is going to be the hard balance to strike with user-defined types...searching for some syntactic sweet spot.</p>
</blockquote>
</aside>
<p>I'm unsure about the question of syntax...I did propose new syntax, which we wouldn't want to happen much - perhaps it would be good to have a survey of what are the possible syntax forms that might be considered primitive.</p>
<p>Many important points raised here, but perhaps the discussion is too early, so I'll not take further time away from other progress by going into further discussion right now.</p>
          <p><a href="https://forum.rebol.info/t/kinds-of-values/466/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/kinds-of-values/466/4</link>
        <pubDate>Tue, 16 Jan 2018 01:31:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-466-4</guid>
        <source url="https://forum.rebol.info/t/kinds-of-values/466.rss">Kinds of values?</source>
      </item>
      <item>
        <title>Kinds of values?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="1" data-topic="466">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/brett/40/177_2.png" class="avatar"> Brett:</div>
<blockquote>
<p>For me, these examples point to a missing feature.</p>
</blockquote>
</aside>
<p>I'd file this under the generic missing feature of a user-defined type system.  So it wouldn't be that primitives (like blocks) would be packing in additional properties.  There's simply not enough room, without changing the rules of the cells and REBSER nodes in ways that would expand and complicate them.  Mechanically they would be similar to objects, but have extension/usermode code giving them behaviors.</p>
<p>Already I see this being the right direction to take things like IMAGE!.  Instead of trying to pack data into Rebol's fundamental REBSER nodes (like the size in some extended bits) that it would be composed of a PAIR! and a BINARY!.  But perhaps have a form that could serialize in the way you describe.</p>
<p>Note you can currently add "meta" information to FUNCTION!s or ANY-CONTEXT!s (objects, frames, errors).  This is just an ANY-CONTEXT!.  There is no rendering of it, and we do have questions about round-tripping objects as-is when they are molded...but to get the behaviors you describe we're probably talking about a syntax by which this meta information would serialize itself.  I see these features as an outgrowth of that mechanism.</p>
<aside class="quote no-group" data-post="1" data-topic="466">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/brett/40/177_2.png" class="avatar"> Brett:</div>
<blockquote>
<p>Values could have a user defined property of KIND or CLASS, I'll call it Kind here</p>
</blockquote>
</aside>
<p>When I've spoken of this I had been calling what we say is "type" today is KIND, and what you are calling "class" I would call TYPE.  Something like <code>vid#[button "push me"]</code> would report back its KIND as OBJECT!, its TYPE as VID!...and the object wrapped only a BLOCK! it would have to forward requests to the block to answer all the operations like PICK etc.</p>
<p>I hadn't thought of being able to offer the illusion that it could report itself as a BLOCK! but add on some extra information.  Perhaps I'm a little too much thinking-in-the-box of the implementation, because I know that tagging blocks and strings that way would create costs which "break the rules".</p>
<aside class="quote no-group" data-post="1" data-topic="466">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/brett/40/177_2.png" class="avatar"> Brett:</div>
<blockquote>
<p>Wondering what people think and if there are better ideas?</p>
</blockquote>
</aside>
<p>Rebol's attempt to standardize a format for information interchange--so that it could be a reasonable exchange medium like JSON--is not very compatible with things like user-defined molding methods.  You wind up with things that put themselves out in a way that may be readable or unreadable based on what user defined types are loaded.  Or where different versions of the extension can create incompatible serializations.</p>
<p>I think this is going to be the hard balance to strike with user-defined types...searching for some syntactic sweet spot.  But maybe it means there's a methodized form of LOAD and an unmethodized form, and you have to pick which to use based on what you're aiming for.</p>
          <p><a href="https://forum.rebol.info/t/kinds-of-values/466/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/kinds-of-values/466/3</link>
        <pubDate>Sun, 14 Jan 2018 04:47:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-466-3</guid>
        <source url="https://forum.rebol.info/t/kinds-of-values/466.rss">Kinds of values?</source>
      </item>
      <item>
        <title>Kinds of values?</title>
        <dc:creator><![CDATA[asampal]]></dc:creator>
        <description><![CDATA[
            <p>I also like the idea of metadata, <a class="mention" href="/u/brett">@Brett</a>, and I'm pretty sure I suggested this to <a class="mention" href="/u/hostilefork">@hostilefork</a> some time ago. I was thinking of a mechanism similar to <a href="https://clojure.org/reference/metadata" rel="nofollow noopener">Clojure's</a> for adding metadata to collections and symbols. That seems pretty flexible to me, somewhat more so than what you described above, IMO, but even your idea would be better than not having the possibility to annotate things at all.</p>
          <p><a href="https://forum.rebol.info/t/kinds-of-values/466/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/kinds-of-values/466/2</link>
        <pubDate>Sun, 14 Jan 2018 03:19:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-466-2</guid>
        <source url="https://forum.rebol.info/t/kinds-of-values/466.rss">Kinds of values?</source>
      </item>
      <item>
        <title>Kinds of values?</title>
        <dc:creator><![CDATA[Brett]]></dc:creator>
        <description><![CDATA[
            <p>Rebol series and values lack a built in way to add meta data.</p>
<p>For example, imagine two blocks each in a different dialect. Without interpreting their content, how can they be distinguished?</p>
<p>Another example is parsing a foreign format into a sequence of strings but not having a way to distinguish the different kinds of strings.  One wants the linear sequence, without having to try to shoe-horn these strings into standard rebol types nor maintain and synchronise some separate attribute system.</p>
<p>For me, these examples point to a missing feature. While suffering some jetlagged induced insomnia I thought of the following idea.</p>
<p>Values could have a user defined property of KIND or CLASS, I'll call it Kind here.  Mindful of the above examples, I thought series could have an attribute of Kind, this would be useful for strings and blocks. They would have supporting syntax.</p>
<p>For demonstration I thought Kind could be a word followed by a #, followed by the existing syntax.  E.g:</p>
<pre><code>vid#[button "push me"] ; A block of VID dialect.
vector#[1 2 3]
kind of markdown#{*This* could be interesting.} ; Would yield MARKDOWN
</code></pre>
<p>Kind would be optional so existing forms would be unaffected:</p>
<pre><code>kind of {simple string} ; would return _
kind of [simple block] ; would return _
</code></pre>
<p>An obvious concern is that it would uglify Rebol syntax. I have no answer to that, I'm just at the moment excited by what benefits could be derived.</p>
<p>In a sense Kind is just tagging values and would be orthogonal to the rebol types.  But it could allow functions to check the Kind of their arguments, and possibly have some operations choosen by Kind. As such it may be answer to user types - if you want a custom type, define a dialect to represent the type (which can identified by Kind). No need for some developer designed custom syntax.</p>
<p>Matching by Kind in PARSE would be really really useful.</p>
<p>PARSE could have a mode to emit matched sequences with a Kind that comes from rules invoked by words. Giving a basic parse tree output for little effort - highly useful for data extraction.</p>
<p>Pathing by kind could perhaps enable some sophisticated extraction from recursive structured formats (XML?).</p>
<p>Presumably other ideas would be forthcoming if Kind was available.</p>
<p>Kind could probably be applicable to all rebol types:</p>
<pre><code>column#3 ; An integer whose kind is Column.
</code></pre>
<p>I don't know if this idea is good or terrible, but it is interesting at least. Wondering what people think and if there are better ideas?</p>
          <p><a href="https://forum.rebol.info/t/kinds-of-values/466/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/kinds-of-values/466/1</link>
        <pubDate>Sun, 14 Jan 2018 00:58:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-466-1</guid>
        <source url="https://forum.rebol.info/t/kinds-of-values/466.rss">Kinds of values?</source>
      </item>
  </channel>
</rss>

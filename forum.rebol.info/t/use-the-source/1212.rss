<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Use the Source ...</title>
    <link>https://forum.rebol.info/t/use-the-source/1212</link>
    <description>I&#39;ve had a discussion with @hostilefork about this topic a while ago in chat, but I think it is better if it is in a more permanent medium.

# So the questions are: 
- should it be possible to get the source of functions from within Rebol?
- what should be displayed, when viewed?

# Possible answer:
You should be able to get the source as it was written.
## Pros:
- this is the best way to learn and understand the language.
## Cons:
- if taken out of context, you will never know what it really does, because of binding, etc. 
(But, the same is true when you copy/paste source-code, and textual representation is still how humans and computers understand source code. I&#39;m pretty sure there is C-code out there where it depends on the version of the compiler, what it does.)

# Examples
## Rebol 2
    ; function
    &gt;&gt; f: func [a][a * 2]

    &gt;&gt; source f
    f: func [a][a * 2]

    ; object
    &gt;&gt; o: make object! [a: 1 f: func[][a * 2]]

    &gt;&gt; mold o
    == {make object! [
        a: 1
        f: func [][a * 2]
    ]}

## Ren-C
    ; function
    &gt;&gt; f: func [a][a * 2]

    &gt;&gt; source f 
    f: make action! [ [
        a
    ][
        return: make action! [
            [&quot;Returns a value from an action&quot; value [&lt;opt&gt; &lt;end&gt; any-value!]]
            [unwind/with (binding of &#39;return) either end? &#39;value [] [:value]]
        ] (a * 2)
    ] ]

    ; object
    &gt;&gt; o: make object! [a: 1 f: func[][a * 2]]

    &gt;&gt; mold o
    == {make object! [
        a: 1
        f: &#39;make action! [[] [...]]
    ]}

I, personally, like the Rebol 2 way better. (Well, that&#39;s the only thing where I like the Rebol 2 way better).</description>
    
    <lastBuildDate>Fri, 20 Sep 2019 13:01:20 +0000</lastBuildDate>
    <category>Help System</category>
    <atom:link href="https://forum.rebol.info/t/use-the-source/1212.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Use the Source ...</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I'm fairly sure that this post holds some answers to what should be done in the large:</p>
<aside class="quote quote-modified" data-post="1" data-topic="1002">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar">
    <a href="https://forum.rebol.info/t/seeing-all-action-s-as-variadic-frame-makers/1002">Seeing all ACTION!s as variadic FRAME!-makers</a> <a class="badge-wrapper  bullet" href="/c/development/internals"><span class="badge-category-parent-bg" style="background-color: #25AAE2;"></span><span class="badge-category-bg" style="background-color: #25AAE2;"></span><span style="" data-drop-close="true" class="badge-category clear-badge" title="Internals of the Rebol language">Internals</span></a>
  </div>
  <blockquote>
    There was an uncomfortable period of MAKE OBJECT! where the idea of a "spec" was introduced, and the concept was that the low level object creation would be non-evaluative.  This plugged some holes of how to make sure you didn't lose anything by representing null states in a block, etc. 
&gt;&gt; make object! [[x y z] [x: 'foo z: (1 + 2)]]
== make object! [[x y z] [x: 'foo z: (1 + 2)]]

It was clunky--but pretty much no one used MAKE FUNCTION! either.  The thought was that it would match that...as jus…
  </blockquote>
</aside>

          <p><a href="https://forum.rebol.info/t/use-the-source/1212/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/use-the-source/1212/4</link>
        <pubDate>Fri, 20 Sep 2019 13:01:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1212-4</guid>
        <source url="https://forum.rebol.info/t/use-the-source/1212.rss">Use the Source ...</source>
      </item>
      <item>
        <title>Use the Source ...</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I wonder if the basic function generator (whether that be FUNC or FUNCTION) should not define RETURN and thus only reflect the body block as supplied. Undoubtedly some people use RETURN—I generally don't—and as needed could specify it on generation thus the appearance of extra code would not be a surprise.</p>
          <p><a href="https://forum.rebol.info/t/use-the-source/1212/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/use-the-source/1212/3</link>
        <pubDate>Thu, 19 Sep 2019 21:02:55 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1212-3</guid>
        <source url="https://forum.rebol.info/t/use-the-source/1212.rss">Use the Source ...</source>
      </item>
      <item>
        <title>Use the Source ...</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="IngoHohmann" data-post="1" data-topic="1212">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>I, personally, like the Rebol 2 way better. (Well, that's the only thing where I like the Rebol 2 way better).</p>
</blockquote>
</aside>
<p>Open up your text editor and make <code>demo.reb</code>:</p>
<pre><code>Rebol [
    Title: {Lemme show ya somethin'}
]

data: [a b c]
print [line of data]
print [file of data]
</code></pre>
<p>There are tools in the making for connecting dynamic structure back to its source.  And they're being accounted for.  But, there's a really hard problem here.</p>
<p>Almost every programming language which involves abstractions (e.g. macros) gets screwed in terms of connecting what the runtime processes and can understand (the expanded macro) vs. what was written (the instantiation, e.g. "source").</p>
<p>Mapping backwards from a projection is a challenge.  This may be amusing:</p>
<aside class="onebox stackexchange">
  <header class="source">
      <a href="https://codegolf.stackexchange.com/questions/1956/generate-the-longest-error-message-in-c" target="_blank" rel="noopener">codegolf.stackexchange.com</a>
  </header>
  <article class="onebox-body">
      <a href="https://codegolf.stackexchange.com/users/1202/elazar-leibovich" target="_blank" rel="noopener">
    <img alt="Elazar Leibovich" src="https://www.gravatar.com/avatar/88122adf04e76df968866fc8424478e0?s=128&amp;d=identicon&amp;r=PG" class="thumbnail onebox-avatar" width="128" height="128">
  </a>
<h4>
  <a href="https://codegolf.stackexchange.com/questions/1956/generate-the-longest-error-message-in-c" target="_blank" rel="noopener">Generate the longest error message in C++</a>
</h4>

<div class="tags">
  <strong>code-challenge, c++, error-message</strong>
</div>

<div class="date">
  asked by
  
  <a href="https://codegolf.stackexchange.com/users/1202/elazar-leibovich" target="_blank" rel="noopener">
    Elazar Leibovich
  </a>
  on <a href="https://codegolf.stackexchange.com/questions/1956/generate-the-longest-error-message-in-c" target="_blank" rel="noopener">04:13PM - 04 Apr 11 UTC</a>
</div>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>I'm open to ideas here, but... the thing is, this is non-trivial.</p>
<p>See: <a href="https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/">The Law of Leaky Abstractions</a> (Spolsky)</p>
          <p><a href="https://forum.rebol.info/t/use-the-source/1212/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/use-the-source/1212/2</link>
        <pubDate>Thu, 19 Sep 2019 18:51:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1212-2</guid>
        <source url="https://forum.rebol.info/t/use-the-source/1212.rss">Use the Source ...</source>
      </item>
      <item>
        <title>Use the Source ...</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>I've had a discussion with <a class="mention" href="/u/hostilefork">@hostilefork</a> about this topic a while ago in chat, but I think it is better if it is in a more permanent medium.</p>
<h1>So the questions are:</h1>
<ul>
<li>should it be possible to get the source of functions from within Rebol?</li>
<li>what should be displayed, when viewed?</li>
</ul>
<h1>Possible answer:</h1>
<p>You should be able to get the source as it was written.</p>
<h2>Pros:</h2>
<ul>
<li>this is the best way to learn and understand the language.</li>
</ul>
<h2>Cons:</h2>
<ul>
<li>if taken out of context, you will never know what it really does, because of binding, etc.<br>
(But, the same is true when you copy/paste source-code, and textual representation is still how humans and computers understand source code. I'm pretty sure there is C-code out there where it depends on the version of the compiler, what it does.)</li>
</ul>
<h1>Examples</h1>
<h2>Rebol 2</h2>
<pre><code>; function
&gt;&gt; f: func [a][a * 2]

&gt;&gt; source f
f: func [a][a * 2]

; object
&gt;&gt; o: make object! [a: 1 f: func[][a * 2]]

&gt;&gt; mold o
== {make object! [
    a: 1
    f: func [][a * 2]
]}
</code></pre>
<h2>Ren-C</h2>
<pre><code>; function
&gt;&gt; f: func [a][a * 2]

&gt;&gt; source f 
f: make action! [ [
    a
][
    return: make action! [
        ["Returns a value from an action" value [&lt;opt&gt; &lt;end&gt; any-value!]]
        [unwind/with (binding of 'return) either end? 'value [] [:value]]
    ] (a * 2)
] ]

; object
&gt;&gt; o: make object! [a: 1 f: func[][a * 2]]

&gt;&gt; mold o
== {make object! [
    a: 1
    f: 'make action! [[] [...]]
]}
</code></pre>
<p>I, personally, like the Rebol 2 way better. (Well, that's the only thing where I like the Rebol 2 way better).</p>
          <p><a href="https://forum.rebol.info/t/use-the-source/1212/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/use-the-source/1212/1</link>
        <pubDate>Thu, 19 Sep 2019 18:00:10 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1212-1</guid>
        <source url="https://forum.rebol.info/t/use-the-source/1212.rss">Use the Source ...</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Variant of ALSO that does not disrupt the non-NULL result</title>
    <link>https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681</link>
    <description>The ALSO construct is the &quot;anti-ELSE&quot;.  Instead of running and providing a result if the left hand side missed (e.g. was NULL), it runs when the left hand side was *not* NULL.

    &gt;&gt; case [
           1 &lt; 2 [&lt;foo&gt;]
       ] also [
           print &quot;this runs&quot;
           &lt;bar&gt;
       ]
    == &lt;bar&gt;

So the ALSO is triggered by that non-NULL `&lt;foo&gt;`, but then runs and gives `&lt;bar&gt;`.  What if we just wanted to run some code but not mess with the result, e.g. some kind of check?  We&#39;d have to use a lambda to get passed the result:

    &gt;&gt; case [
           1 &lt; 2 [&lt;foo&gt;]
       ] also x =&gt; [
           print &quot;this runs&quot;
           &lt;bar&gt;
           :x
       ]
    == &lt;foo&gt; 

Can we come up with a good name for a construct that just does that?  Run extra code if the left is not null, but pass through the result?

**pass** doesn&#39;t really carry the full connotation (and even might sound like &quot;ignore&quot; vs. &quot;pass-value-thru&quot;).  **thus** is weird, but a possibility...and it&#39;s 4-letters like ELSE and ALSO and THEN.  Though perhaps **so** could be used as a more abrupt/light version of **also**?

    &gt;&gt; case [
           1 &lt; 2 [&lt;foo&gt;]
       ] so [
           print &quot;this runs&quot;
           &lt;bar&gt;
       ]
    == &lt;foo&gt;

A shorter, but related word.  (?)  Comments, critiques, better suggestions?</description>
    
    <lastBuildDate>Wed, 11 Jul 2018 07:46:46 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Variant of ALSO that does not disrupt the non-NULL result</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>....maybe <em>otherwise</em> ?</p>
          <p><a href="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/11</link>
        <pubDate>Wed, 11 Jul 2018 07:19:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-681-11</guid>
        <source url="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681.rss">Variant of ALSO that does not disrupt the non-NULL result</source>
      </item>
      <item>
        <title>Variant of ALSO that does not disrupt the non-NULL result</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="1" data-topic="681">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Comments, critiques, better suggestions?</p>
</blockquote>
</aside>
<p>Pursuant to <a href="https://forum.rebol.info/t/taking-then-back-as-the-rightful-complement-to-else/731">"Taking THEN back as the rightful complement to ELSE"</a>, this is resolved by giving ALSO's functionality back to THEN, and giving this "SO" construct the ALSO.</p>
<p>For this kind of operator that means we have:</p>
<ul>
<li>
<strong>THEN [branch]</strong> - If left hand side is null, evaluate to null.  If the left hand side is non-null, evaluate branch and give its result.</li>
<li>
<strong>ELSE [branch]</strong> - If left hand side is non-null, evaluate to that value.  Otherwise, evaluate the branch and give its result.</li>
<li>
<strong>ALSO [branch]</strong> - If left hand side is non-null, evaluate the branch and discard the result.  Return the non-null original value from the left hand side.</li>
<li>
<strong>ELIDE (code)</strong> - Non-branching construct that will just run its code when it's reached, passing through the result.  Doesn't appear to be infix, but the mechanics work that way, so it can be used in these chains.</li>
</ul>
<p>What's missing from the list is the "anti-ALSO"... a.k.a. "passthru ELSE".  It would only run its branch if the left hand side is null, but discard the result and pass through the null-or-non-null value.  So <em>"registering an interest that something didn't happen, and wanting to do something, but really just wanting to propagate whether it happened or not down the chain"</em></p>
<p>But given these definitions, you can implement that with <strong>else [... null]</strong>.  Because if the left hand side was non-null, the else wouldn't have run.  The only thing the branch needs to worry about passing through--if that's what it wants to do--is the null.</p>
<p>So... I think (hope?)... that this looks all squared away.</p>
          <p><a href="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/10</link>
        <pubDate>Tue, 10 Jul 2018 23:00:40 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-681-10</guid>
        <source url="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681.rss">Variant of ALSO that does not disrupt the non-NULL result</source>
      </item>
      <item>
        <title>Variant of ALSO that does not disrupt the non-NULL result</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="8" data-topic="681">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Because the new ALSO will likely be used and beloved by everyone, I think that lends strength to SO as the “lesser ALSO” which runs code without disrupting the result.</p>
</blockquote>
</aside>
<p>I have committed SO as the "Lesser ALSO".  The key argument for the name is that it is <em>learnable</em>...while I can understand someone seeing it for the first time might think "SO?  What does that mean?"  It is rather clear I think when its relationship to ALSO is understood:</p>
<pre><code>&gt;&gt; 1 + 2 so [print "It's not null!..." 10 * 10]
It's not null!...
== 3

&gt;&gt; () so [print "It is null...won't branch" 10 * 10]
;-- null

&gt;&gt; 1 + 2 also [print "It's not null!..." 10 * 10]
It's not null!...
== 100

&gt;&gt; () also [print "It is null...won't branch" 10 * 10]
;-- null
</code></pre>
<p>It's a nice way to do a little bit of code while not interrupting the result a conditional made.</p>
<pre><code>typenum: switch type of data [
    integer! [10]
    string! [20]
] so [
    ... run a bunch of code here ...
    log "successful typenum calculation"
] else [
    fail "No match for typenum"
]
</code></pre>
<p>You can "telegraph" the result across some code you run, but only run that code in the "success" (non-null result) case.  I think it comes together quite nicely.</p>
<p>I also think that if people look at the code for implementing this stuff, it's getting nice and clean and relatively accessible.</p>
<aside class="onebox githubblob">
  <header class="source">
      <a href="https://github.com/metaeducation/ren-c/blob/b774df465f2f84a30d44d67c76d0b18c363b0fc9/src/core/n-control.c#L372" target="_blank" rel="nofollow noopener">github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://github.com/metaeducation/ren-c/blob/b774df465f2f84a30d44d67c76d0b18c363b0fc9/src/core/n-control.c#L372" target="_blank" rel="nofollow noopener">metaeducation/ren-c/blob/b774df465f2f84a30d44d67c76d0b18c363b0fc9/src/core/n-control.c#L372</a></h4>
<pre class="onebox"><code class="lang-c"><ol class="start lines" start="362" style="counter-reset: li-counter 361 ;">
<li>    // e.g. the ALSO and the SWITCH are linked to the "group of things that</li>
<li>    // are associated with success".  Hence the outcome of the ALSO shouldn't</li>
<li>    // be able to accidentally "un-success" it by evaluating to NULL.</li>
<li>    //</li>
<li>    Voidify_If_Nulled(D_OUT);</li>
<li>    return R_OUT;</li>
<li>}</li>
<li>
</li>
<li>
</li>
<li>//</li>
<li class="selected">//  so: enfix native [</li>
<li>//</li>
<li>//  {"The Lesser ALSO": For non-null input, evaluate and discard branch}</li>
<li>//</li>
<li>//      return: "The same value as input, regardless of if branch runs"</li>
<li>//          [&lt;opt&gt; any-value!]</li>
<li>//      optional "Run branch if this is not null (note a VOID! is not null)"</li>
<li>//          [&lt;opt&gt; any-value!]</li>
<li>//      branch "If arity-1 ACTION!, receives value that triggered branch"</li>
<li>//          [block! action!]</li>
<li>//  ]</li>
</ol></code></pre>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          <p><a href="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/9</link>
        <pubDate>Fri, 22 Jun 2018 08:04:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-681-9</guid>
        <source url="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681.rss">Variant of ALSO that does not disrupt the non-NULL result</source>
      </item>
      <item>
        <title>Variant of ALSO that does not disrupt the non-NULL result</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="7" data-topic="681">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/gchiu/40/22_2.png" class="avatar"> gchiu:</div>
<blockquote>
<p><em>(In Rebol2)</em></p>
<pre><code>if 1 &lt; 2 [also (print "if" &lt;if&gt;) (print "so" &lt;so&gt;)] else [print "else" &lt;else&gt;]
</code></pre>
</blockquote>
</aside>
<p>Yes, that is how ALSO used to be, and it was unpopular for a reason.  All such usages can be <a href="https://trello.com/c/snnG8xwW" rel="nofollow noopener">replaced with ELIDE</a>, and the <a href="https://trello.com/c/Y03HJTY4" rel="nofollow noopener">new functionality of ALSO</a> has much wider application...as a way of running code after a match in any control construct.</p>
<p>Because the new ALSO will likely be used and beloved by everyone, I think that lends strength to SO as the "lesser ALSO" which runs code without disrupting the result.</p>
          <p><a href="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/8</link>
        <pubDate>Mon, 11 Jun 2018 14:34:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-681-8</guid>
        <source url="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681.rss">Variant of ALSO that does not disrupt the non-NULL result</source>
      </item>
      <item>
        <title>Variant of ALSO that does not disrupt the non-NULL result</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>Of course in Rebol2 that's how <strong>Also</strong> worked</p>
<pre><code>also (value1) (value2)
</code></pre>
<p>which returned the result of value1 but also evaluated value2</p>
<pre><code>&gt;&gt; also (1 + 1) (2 + 2)
== 2
</code></pre>
<p>So, we could in R2</p>
<pre><code>if 1 &lt; 2 [also (print "if" &lt;if&gt;) (print "so" &lt;so&gt;)] else [print "else" &lt;else&gt;]</code></pre>
          <p><a href="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/7</link>
        <pubDate>Mon, 11 Jun 2018 07:47:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-681-7</guid>
        <source url="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681.rss">Variant of ALSO that does not disrupt the non-NULL result</source>
      </item>
      <item>
        <title>Variant of ALSO that does not disrupt the non-NULL result</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>We could use ASCII 26. That's not being used!</p>
          <p><a href="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/6</link>
        <pubDate>Mon, 11 Jun 2018 06:36:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-681-6</guid>
        <source url="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681.rss">Variant of ALSO that does not disrupt the non-NULL result</source>
      </item>
      <item>
        <title>Variant of ALSO that does not disrupt the non-NULL result</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="4" data-topic="681">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/gchiu/40/22_2.png" class="avatar"> gchiu:</div>
<blockquote>
<p>So, you might as well use a symbol.</p>
</blockquote>
</aside>
<p>Since we're trying to stick to ASCII, and Rebol has taken a lot of symbols already, there aren't a lot of options...and we want to be careful about symbol use.</p>
<p>I'm probably happy with SO (which I came up while writing the post) unless someone has a noticeably better suggestion.</p>
<pre><code>&gt;&gt; if 1 &lt; 2 [print "if" &lt;if&gt;] so [print "so" &lt;so&gt;] else [print "else" &lt;else&gt;]
if
so
== &lt;if&gt;

&gt;&gt; if 1 &gt; 2 [print "if" &lt;if&gt;] so [print "so" &lt;so&gt;] else [print "else" &lt;else&gt;]
else
== &lt;else&gt;

&gt;&gt; if 1 &lt; 2 [print "if" &lt;if&gt;] also [print "also" &lt;also&gt;] else [print "else" &lt;else&gt;]
if
also
== &lt;also&gt; 

&gt;&gt; if 1 &gt; 2 [print "if" &lt;if&gt;] also [print "also" &lt;also&gt;] else [print "else" &lt;else&gt;]
else
== &lt;else&gt;
</code></pre>
<p>Looks pretty solid to me.  I hadn't thought about using it with a plain IF, but I can see how it would be useful as an alternative to ELIDE.  So instead of:</p>
<pre><code> if condition [some stuff elide (extra code)]
</code></pre>
<p>You could say:</p>
<pre><code> if condition [some stuff] so [extra code]
</code></pre>
<p>That's a neat option.</p>
          <p><a href="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/5</link>
        <pubDate>Mon, 11 Jun 2018 06:10:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-681-5</guid>
        <source url="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681.rss">Variant of ALSO that does not disrupt the non-NULL result</source>
      </item>
      <item>
        <title>Variant of ALSO that does not disrupt the non-NULL result</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>I don't think there's any word which really conveys the meaning for where there is no existing english word. So, you might as well use a symbol.</p>
          <p><a href="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/4</link>
        <pubDate>Mon, 11 Jun 2018 06:03:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-681-4</guid>
        <source url="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681.rss">Variant of ALSO that does not disrupt the non-NULL result</source>
      </item>
      <item>
        <title>Variant of ALSO that does not disrupt the non-NULL result</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="681" data-full="true">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/gchiu/40/22_2.png" class="avatar"> gchiu:</div>
<blockquote>
<p>Perhaps sub meaning subsidary to the main block</p>
</blockquote>
</aside>
<p>Too close to subtract.  (<strong>plus</strong> would be bad for similar reasons, and PLUS may become the prefix form of + for those needing a non-mutating word for ADD.)</p>
<p>I think I like <strong>so</strong>, because of its <em>learnability</em>.  If someone has gone around and gotten used to ALSO, and then sees a SO, they would be drawn to the relationship between the two words as doing almost the same thing...but with SO being somehow "lesser".</p>
          <p><a href="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/3</link>
        <pubDate>Mon, 11 Jun 2018 06:00:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-681-3</guid>
        <source url="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681.rss">Variant of ALSO that does not disrupt the non-NULL result</source>
      </item>
      <item>
        <title>Variant of ALSO that does not disrupt the non-NULL result</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>Perhaps <strong>sub</strong> meaning subsidary to the main block</p>
          <p><a href="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/2</link>
        <pubDate>Mon, 11 Jun 2018 05:47:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-681-2</guid>
        <source url="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681.rss">Variant of ALSO that does not disrupt the non-NULL result</source>
      </item>
      <item>
        <title>Variant of ALSO that does not disrupt the non-NULL result</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The ALSO construct is the "anti-ELSE".  Instead of running and providing a result if the left hand side missed (e.g. was NULL), it runs when the left hand side was <em>not</em> NULL.</p>
<pre><code>&gt;&gt; case [
       1 &lt; 2 [&lt;foo&gt;]
   ] also [
       print "this runs"
       &lt;bar&gt;
   ]
== &lt;bar&gt;
</code></pre>
<p>So the ALSO is triggered by that non-NULL <code>&lt;foo&gt;</code>, but then runs and gives <code>&lt;bar&gt;</code>.  What if we just wanted to run some code but not mess with the result, e.g. some kind of check?  We'd have to use a lambda to get passed the result:</p>
<pre><code>&gt;&gt; case [
       1 &lt; 2 [&lt;foo&gt;]
   ] also x =&gt; [
       print "this runs"
       &lt;bar&gt;
       :x
   ]
== &lt;foo&gt; 
</code></pre>
<p>Can we come up with a good name for a construct that just does that?  Run extra code if the left is not null, but pass through the result?</p>
<p><strong>pass</strong> doesn't really carry the full connotation (and even might sound like "ignore" vs. "pass-value-thru").  <strong>thus</strong> is weird, but a possibility...and it's 4-letters like ELSE and ALSO and THEN.  Though perhaps <strong>so</strong> could be used as a more abrupt/light version of <strong>also</strong>?</p>
<pre><code>&gt;&gt; case [
       1 &lt; 2 [&lt;foo&gt;]
   ] so [
       print "this runs"
       &lt;bar&gt;
   ]
== &lt;foo&gt;
</code></pre>
<p>A shorter, but related word.  (?)  Comments, critiques, better suggestions?</p>
          <p><a href="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681/1</link>
        <pubDate>Sun, 10 Jun 2018 22:25:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-681-1</guid>
        <source url="https://forum.rebol.info/t/variant-of-also-that-does-not-disrupt-the-non-null-result/681.rss">Variant of ALSO that does not disrupt the non-NULL result</source>
      </item>
  </channel>
</rss>

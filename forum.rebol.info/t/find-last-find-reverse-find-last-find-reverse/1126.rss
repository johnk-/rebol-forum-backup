<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Find/last, find/reverse =&gt; find-last, find-reverse</title>
    <link>https://forum.rebol.info/t/find-last-find-reverse-find-last-find-reverse/1126</link>
    <description>R3-Alpha&#39;s FIND function had a whole slew of refinements:

        /part -- Limits the search to a given length or position
                length (number! series! pair!)
        /only -- Treats a series value as only a single value
        /case -- Characters are case-sensitive
        /any -- Enables the * and ? wildcards  ; !!! Note: this didn&#39;t work
        /with -- Allows custom wildcards  ; !!! neither did this
                wild -- Specifies alternates for * and ? (string!)
        /skip -- Treat the series as records of fixed size
                size (integer!)
        /last -- Backwards from end of series
        /reverse -- Backwards from the current position
        /tail -- Returns the end of the series
        /match -- Performs comparison and returns the tail of the match

Whenever you see that many options on a function, a good question to ask is what happens when you combine them?  There&#39;s a working philosophy that you shouldn&#39;t have refinements that can&#39;t be used together.  Does it know how to FIND/SKIP/MATCH/REVERSE? with a SKIP of -7?

When you&#39;re trying to rewrite the code to support something like--say--arbitrary UTF-8 encoded strings, you have to pare down the combinatorics if you&#39;re going to hope things will work.  To try and make a bit of headway on this problem, I defined FIND-LAST and FIND-REVERSE like this:

    find-reverse: redescribe [
        {Variant of FIND that uses a /SKIP of -1}
    ](
        specialize &#39;find/skip [size: -1]
    )

    find-last: redescribe [
        {Variant of FIND that uses a /SKIP of -1 and seeks the TAIL of a series}
    ](
        adapt &#39;find-reverse [
            if not any-series? series [
                fail &#39;series &quot;Can only use FIND-LAST on ANY-SERIES!&quot;
            ]
            series: tail of series    ; can&#39;t use plain TAIL, there&#39;s a /TAIL
       ]
    )

That knocks off two refinements, and it keeps you from specifying something like FIND-REVERSE with /SKIP of a positive number.

This may not be perfect, and suggestions are welcome.  But the only way to make the implementation tractable (in a way that gives correct answers) is to formalize the definitions in this vein.</description>
    
    <lastBuildDate>Thu, 21 Mar 2019 14:26:31 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/find-last-find-reverse-find-last-find-reverse/1126.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Find/last, find/reverse =&gt; find-last, find-reverse</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>R3-Alpha's FIND function had a whole slew of refinements:</p>
<pre><code>    /part -- Limits the search to a given length or position
            length (number! series! pair!)
    /only -- Treats a series value as only a single value
    /case -- Characters are case-sensitive
    /any -- Enables the * and ? wildcards  ; !!! Note: this didn't work
    /with -- Allows custom wildcards  ; !!! neither did this
            wild -- Specifies alternates for * and ? (string!)
    /skip -- Treat the series as records of fixed size
            size (integer!)
    /last -- Backwards from end of series
    /reverse -- Backwards from the current position
    /tail -- Returns the end of the series
    /match -- Performs comparison and returns the tail of the match
</code></pre>
<p>Whenever you see that many options on a function, a good question to ask is what happens when you combine them?  There's a working philosophy that you shouldn't have refinements that can't be used together.  Does it know how to FIND/SKIP/MATCH/REVERSE? with a SKIP of -7?</p>
<p>When you're trying to rewrite the code to support something like--say--arbitrary UTF-8 encoded strings, you have to pare down the combinatorics if you're going to hope things will work.  To try and make a bit of headway on this problem, I defined FIND-LAST and FIND-REVERSE like this:</p>
<pre><code>find-reverse: redescribe [
    {Variant of FIND that uses a /SKIP of -1}
](
    specialize 'find/skip [size: -1]
)

find-last: redescribe [
    {Variant of FIND that uses a /SKIP of -1 and seeks the TAIL of a series}
](
    adapt 'find-reverse [
        if not any-series? series [
            fail 'series "Can only use FIND-LAST on ANY-SERIES!"
        ]
        series: tail of series    ; can't use plain TAIL, there's a /TAIL
   ]
)
</code></pre>
<p>That knocks off two refinements, and it keeps you from specifying something like FIND-REVERSE with /SKIP of a positive number.</p>
<p>This may not be perfect, and suggestions are welcome.  But the only way to make the implementation tractable (in a way that gives correct answers) is to formalize the definitions in this vein.</p>
          <p><a href="https://forum.rebol.info/t/find-last-find-reverse-find-last-find-reverse/1126/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/find-last-find-reverse-find-last-find-reverse/1126/1</link>
        <pubDate>Thu, 21 Mar 2019 14:13:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1126-1</guid>
        <source url="https://forum.rebol.info/t/find-last-find-reverse-find-last-find-reverse/1126.rss">Find/last, find/reverse =&gt; find-last, find-reverse</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Embedding ren-c into c program - for newbs</title>
    <link>https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435</link>
    <description>I am not experienced in c ... I know or knew the language but compiling, linking, makefiles ... :(  

Is there any &quot;getting started&quot; page for this sort of thing? I feel really dumb by not knowing this stuff. So far I have downloaded ren-c source and compiled it. Made a simple c file, included the header ... but I guess I need the library now. Which I don&#39;t know if is already built by make (and I can&#39;t find it), or do I have to call make specifically to build it, or this should all be done in different way altogether.

    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;endian.h&gt;
    #include &lt;reb-host.h&gt;

    int main()
    {
      printf(&quot;Hello World!!\n&quot;);
      char *output = rebDo(&quot;1 + 1&quot;);
      int result = atoi(output); // &quot;ascii to integer&quot;                                                                                                                                                                                                                     
      printf(&quot;The result of the addition was %d\n&quot;, result);
      free(output);
      return 0;
    }

I call and get 

    gcc -I /home/jimny/Work/ren-c-master/src/include/ main.c -o test2
    /tmp/ccDfnqns.o: In function `main&#39;:
    main.c:(.text+0x1d): undefined reference to `RL_rebDo&#39;

Which means (if I understand) that it finds the header, but not the library / code?</description>
    
    <lastBuildDate>Wed, 13 Mar 2019 01:47:50 +0000</lastBuildDate>
    <category>Language Bridging</category>
    <atom:link href="https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Embedding ren-c into c program - for newbs</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There are two APIs.  Let's call one the "internal" API, and the other we will call "libRebol"...as more akin to Red's <a href="https://doc.red-lang.org/en/libred.html" rel="nofollow noopener">libRed</a> (though I can easily say it is has a <em>very significantly</em> better design).</p>
<aside class="quote no-group" data-post="6" data-topic="435">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/letter_avatar_proxy/v3/letter/m/f14d63/40.png" class="avatar"> middayc:</div>
<blockquote>
<p>hum .. what was the reason to wipe extensions?</p>
</blockquote>
</aside>
<p>We still have extensions, you just choose whether to use the lighter or heavier API.  The heavier API is really just the core itself...picking apart the memory of value cells and having to interact with the GC...it's twiddly and hard to use.  And because it pulls in all the definitions in the core, you have more likelihood of name collisions with other C libraries you're using.  The lighter API doesn't carry that baggage... you just have handles to black box cells.</p>
<p>The problem with the old way of working from "hostkit"--RXIARG and such--is it was the worst of both worlds.  It exposed to userspace the memory of the cells, with no actual mechanics to manage interaction with the GC.  It was also <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/core/a-lib.c#L336" rel="nofollow noopener">missing major pieces of functionality</a>.</p>
<p>We're in the midst of a shift to where the "libRebol" API is finding some footing, to the point where the console itself can be built just on that without going underneath.  And yes, you're right, just replacing that main() is kind of how you'd do it for the moment.  But please realize this is very formative work, it's just getting started... so if you want to "use" it, you'll really have to be helping develop it.</p>
          <p><a href="https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435/8</link>
        <pubDate>Wed, 27 Dec 2017 01:28:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-435-8</guid>
        <source url="https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435.rss">Embedding ren-c into c program - for newbs</source>
      </item>
      <item>
        <title>Embedding ren-c into c program - for newbs</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>The host kit (by which extensions were implemented) was a way of hiding the r3 source and since it's now open source, it can be removed.</p>
<p>Yes, FFI works.</p>
          <p><a href="https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435/7</link>
        <pubDate>Tue, 26 Dec 2017 21:21:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-435-7</guid>
        <source url="https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435.rss">Embedding ren-c into c program - for newbs</source>
      </item>
      <item>
        <title>Embedding ren-c into c program - for newbs</title>
        <dc:creator><![CDATA[middayc]]></dc:creator>
        <description><![CDATA[
            <p>hum .. what was the reason to wipe extensions?</p>
<p>does FFI work?</p>
          <p><a href="https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435/6</link>
        <pubDate>Tue, 26 Dec 2017 21:20:10 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-435-6</guid>
        <source url="https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435.rss">Embedding ren-c into c program - for newbs</source>
      </item>
      <item>
        <title>Embedding ren-c into c program - for newbs</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>My understanding is that ren-c was a library, but currently isn't, and work is being done to bring it back to that state.</p>
<p>The host kit has been wiped, and so are extensions.  Now, I believe if you want something like that you compile it into the ren-c binary like FFI and ODBC which are compile options.</p>
          <p><a href="https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435/5</link>
        <pubDate>Tue, 26 Dec 2017 20:43:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-435-5</guid>
        <source url="https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435.rss">Embedding ren-c into c program - for newbs</source>
      </item>
      <item>
        <title>Embedding ren-c into c program - for newbs</title>
        <dc:creator><![CDATA[middayc]]></dc:creator>
        <description><![CDATA[
            <p>I was trying to make a simple Extension, but I can't find macros like RXA_INT64? I couldn't find what substitutes "access macros" in old reb-ext.h</p>
<p>Is there any example of what to use to currently do extensions or where to look? Please don't say extensions aren't possible any more ...</p>
          <p><a href="https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435/4</link>
        <pubDate>Tue, 26 Dec 2017 20:02:12 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-435-4</guid>
        <source url="https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435.rss">Embedding ren-c into c program - for newbs</source>
      </item>
      <item>
        <title>Embedding ren-c into c program - for newbs</title>
        <dc:creator><![CDATA[middayc]]></dc:creator>
        <description><![CDATA[
            <p>Thanks for swift reply. If I understand, you are saying the ability to compile ren-c as a library (or dynamic library) is not yet there? I assume some kind of c api must of course be there since console must use it?</p>
<p>If this is true ... then for now only way would be to compile whole ren/r3 to executable and replace main function to not behave as a console but as what I want?</p>
<p>(I apologize if this is stupid question ... but my lack of solid understanding of stuff around libraries/compiling/linking ...)</p>
<p>--</p>
<p>Or, maybe I should then first explore the reverse route. Making c bindings that I cal from ren/r3. I've seen few examples of that. Like abolka's ZMQ binding. Is there any nice examples or documentation on that maybe?</p>
          <p><a href="https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435/3</link>
        <pubDate>Tue, 26 Dec 2017 13:36:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-435-3</guid>
        <source url="https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435.rss">Embedding ren-c into c program - for newbs</source>
      </item>
      <item>
        <title>Embedding ren-c into c program - for newbs</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Oh no.  It's...a person.  Asking... questions...  :-/</p>
<p>You're very much on the right track, I'm just not ready for you yet!</p>
<p>The first design of the API was C++ based, you can see a bit here:</p>
<div class="lazyYT" data-youtube-id="0exDvv5WEv4" data-youtube-title="RenCpp + Ren Garden (Rebol/Red GUI Console)" data-width="480" data-height="270" data-parameters="feature=oembed&amp;wmode=opaque"></div>
<p>What has happened is a bit of redesign, to try and back off C++ and really start doing weird-o things, like sniff the bytes:</p>
<aside class="onebox githubblob">
  <header class="source">
      <a href="https://github.com/metaeducation/ren-c/blob/fa96060342ee320d0e25019545a57ff1a7b523cf/src/include/reb-c.h#L902" target="_blank" rel="nofollow noopener">github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://github.com/metaeducation/ren-c/blob/fa96060342ee320d0e25019545a57ff1a7b523cf/src/include/reb-c.h#L902" target="_blank" rel="nofollow noopener">metaeducation/ren-c/blob/fa96060342ee320d0e25019545a57ff1a7b523cf/src/include/reb-c.h#L902</a></h4>
<pre class="onebox"><code class="lang-h"><ol class="start lines" start="892" style="counter-reset: li-counter 891 ;">
<li>        &gt;::type* = nullptr</li>
<li>    &gt;</li>
<li>    void UNUSED(T &amp;&amp; v) {</li>
<li>        memset(&amp;v, 123, sizeof(TRR));</li>
<li>    }</li>
<li>#endif</li>
<li>
</li>
<li>
</li>
<li>//=////////////////////////////////////////////////////////////////////////=//</li>
<li>//</li>
<li class="selected">// BYTE-ORDER SENSITIVE BIT FLAGS &amp; MASKING</li>
<li>//</li>
<li>//=////////////////////////////////////////////////////////////////////////=//</li>
<li>//</li>
<li>// These macros are for purposefully arranging bit flags with respect to the</li>
<li>// "leftmost" and "rightmost" bytes of the underlying platform, when encoding</li>
<li>// them into an unsigned integer the size of a platform pointer:</li>
<li>//</li>
<li>//     uintptr_t flags = FLAGIT_LEFT(0);</li>
<li>//     unsigned char *ch = (unsigned char*)&amp;flags;</li>
<li>//</li>
</ol></code></pre>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>So basically being able to read <code>rebDo("1", rebEval(plusFunction), "1", END)</code>, if you will.  No C++ just differentiating UTF-8 data from various other bit patterns.</p>
<p>You're just too early!  <img src="//forum.rebol.info/images/emoji/twitter/slight_smile.png?v=7" title=":slight_smile:" class="emoji" alt=":slight_smile:">  I'm making this stuff up as I go along.</p>
<p>Please join us in chat.  <a href="https://chat.stackoverflow.com/rooms/291/rebol" rel="nofollow noopener">https://chat.stackoverflow.com/rooms/291/rebol</a></p>
          <p><a href="https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435/2</link>
        <pubDate>Tue, 26 Dec 2017 11:41:36 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-435-2</guid>
        <source url="https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435.rss">Embedding ren-c into c program - for newbs</source>
      </item>
      <item>
        <title>Embedding ren-c into c program - for newbs</title>
        <dc:creator><![CDATA[middayc]]></dc:creator>
        <description><![CDATA[
            <p>I am not experienced in c ... I know or knew the language but compiling, linking, makefiles ... <img src="//forum.rebol.info/images/emoji/twitter/frowning.png?v=7" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p>Is there any "getting started" page for this sort of thing? I feel really dumb by not knowing this stuff. So far I have downloaded ren-c source and compiled it. Made a simple c file, included the header ... but I guess I need the library now. Which I don't know if is already built by make (and I can't find it), or do I have to call make specifically to build it, or this should all be done in different way altogether.</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;endian.h&gt;
#include &lt;reb-host.h&gt;

int main()
{
  printf("Hello World!!\n");
  char *output = rebDo("1 + 1");
  int result = atoi(output); // "ascii to integer"                                                                                                                                                                                                                     
  printf("The result of the addition was %d\n", result);
  free(output);
  return 0;
}
</code></pre>
<p>I call and get</p>
<pre><code>gcc -I /home/jimny/Work/ren-c-master/src/include/ main.c -o test2
/tmp/ccDfnqns.o: In function `main':
main.c:(.text+0x1d): undefined reference to `RL_rebDo'
</code></pre>
<p>Which means (if I understand) that it finds the header, but not the library / code?</p>
          <p><a href="https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435/1</link>
        <pubDate>Tue, 26 Dec 2017 11:28:36 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-435-1</guid>
        <source url="https://forum.rebol.info/t/embedding-ren-c-into-c-program-for-newbs/435.rss">Embedding ren-c into c program - for newbs</source>
      </item>
  </channel>
</rss>

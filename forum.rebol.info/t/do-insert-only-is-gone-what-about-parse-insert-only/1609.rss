<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>DO [INSERT/ONLY ...] is Gone. What About PARSE [INSERT ONLY ...]</title>
    <link>https://forum.rebol.info/t/do-insert-only-is-gone-what-about-parse-insert-only/1609</link>
    <description>For reasons that I imagine were performance-oriented, the original design of PARSE did not use PATH!s.  So instead of INSERT/ONLY the sequence of INSERT ONLY was two keywords.  This resulted in a kind of variadic behavior *(which is more awkward for the UPARSE combinators, because of the consistency of their patterns in argument gathering)*.

With UPARSE, I didn&#39;t see any real reason why a combinator couldn&#39;t have refinements.  So I went ahead and threw an /ONLY on.

    &gt;&gt; uparse [[a b] [c d]] [
          collect [some [
              keep/only ([keeping a block])
              keep/only block!
          ]]
       ]
    == [[keeping a block] [a b] [keeping a block] [c d]]

But [/ONLY is on its way out](https://forum.rebol.info/t/the-long-awaited-death-of-only/1607).  The concept is you quote things, using a new &quot;arsenal of quoting mechanics&quot;.

So what can you do?

I&#39;d already had it so that **^[rule]** would act just like **[rule]** but literalize the result.

    &gt;&gt; uparse [a] [^[word!]]
    == &#39;a

But I was using ^word, ^pa/th, ^tu.p.le, and ^(gr o up) to mean &quot;match the literal thing&quot;.

     &gt;&gt; pattern: [some integer!]

     &gt;&gt; did uparse [[some integer!] [some integer!]] [some &#39;[some integer!]]
     == #[true]

     &gt;&gt; did uparse [[some integer!] [some integer!]] [some ^pattern]
     == #[true]

If you squint, it sort of lines up.  There&#39;s quoting involved; but it adds a level to the rule, not the synthesized result.

But it would be a waste to have the careted **^[a block]** mean literally match [a block], since that&#39;s already what the quoted **&#39;[a block]** means.  So I&#39;d gone with this other meaning.

Going back to our example, it forces us to use blocks around the rules in order to get the caret benefit:

    &gt;&gt; uparse [[a b] [c d]] [
          collect [some [
              keep ^[([keeping a block])]
              keep ^[block!]
          ]]
       ]
    == [[keeping a block] [a b] [keeping a block] [c d]]

That&#39;s obnoxious.  **So I changed it to where ^ always means to quote the synthesized rule product.**

    &gt;&gt; uparse [[a b] [c d]] [
          collect [some [
              keep ^([keeping a block])
              keep ^block!
          ]]
       ]
    == [[keeping a block] [a b] [keeping a block] [c d]]

Due to the ability to [use plain ACTION!s as combinators by ending in /](https://forum.rebol.info/t/if-action-combinators-dont-impress-i-dont-know-what-will/1608), you have that option...as well as to put your quotes inside a GROUP! if you&#39;re running code:

    &gt;&gt; uparse [[a b] [c d]] [
          collect [some [
              keep (quote [keeping a block])
              keep quote/ block!
          ]]
       ]
    == [[keeping a block] [a b] [keeping a block] [c d]]

And we can always make QUOTE a combinator so the / isn&#39;t needed, if we think that&#39;s worthwhile.

(While we&#39;re on the subject, doesn&#39;t it really seem like **keep quote block!** makes more sense than **keep only block!**?  It&#39;s like it means what it says, and the mechanics all tie it together.)

## We&#39;ll Need Something Else for Lookup and Match Exactly

I still think the @ variants seem palatable for the purpose:

     &gt;&gt; pattern: [some integer!]

     &gt;&gt; did uparse [[some integer!] [some integer!]] [some @pattern]
     == #[true]

It could be a named combinator like EXACT, but the issue there is it would need to either quote its argument or it becomes inconvenient:

     &gt;&gt; did uparse [[some integer!] [some integer!]] [some exact (pattern)]
     == #[true]

This is one of the nice things about using the datatype as a combinator, in that it can break outside the rhythm of what plain expressions do and seem to justify it.  It&#39;s not that we *can&#39;t* take the arguments literally and fetch a variable without a GROUP!, but explaining that **some exact pattern** and **some exact [pattern]** aren&#39;t identical becomes a tax.  :-/

What makes me nervous about this is if @[...] is used for datatypes, and I wouldn&#39;t like the overlap there.  It may be that datatypes really just use something else, not yet designed.  I dunno.

## Seems Like Clearly the Right Adjustment

Having all of the ^ family of operators act consistently and give the quoting really makes it nice for living in a post-ONLY world.

The way I&#39;ve done it is neat because it&#39;s dynamic and inherits whatever the base is.  So if you change the combinator for BLOCK! or WORD!, the ^[...] and ^xxx combinators will change to quote whatever they do.  But you can also override these combinators if you want as well.</description>
    
    <lastBuildDate>Tue, 18 May 2021 04:09:28 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/do-insert-only-is-gone-what-about-parse-insert-only/1609.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>DO [INSERT/ONLY ...] is Gone. What About PARSE [INSERT ONLY ...]</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>For reasons that I imagine were performance-oriented, the original design of PARSE did not use PATH!s.  So instead of INSERT/ONLY the sequence of INSERT ONLY was two keywords.  This resulted in a kind of variadic behavior <em>(which is more awkward for the UPARSE combinators, because of the consistency of their patterns in argument gathering)</em>.</p>
<p>With UPARSE, I didn't see any real reason why a combinator couldn't have refinements.  So I went ahead and threw an /ONLY on.</p>
<pre><code>&gt;&gt; uparse [[a b] [c d]] [
      collect [some [
          keep/only ([keeping a block])
          keep/only block!
      ]]
   ]
== [[keeping a block] [a b] [keeping a block] [c d]]
</code></pre>
<p>But <a href="https://forum.rebol.info/t/the-long-awaited-death-of-only/1607">/ONLY is on its way out</a>.  The concept is you quote things, using a new "arsenal of quoting mechanics".</p>
<p>So what can you do?</p>
<p>I'd already had it so that <strong>^[rule]</strong> would act just like <strong>[rule]</strong> but literalize the result.</p>
<pre><code>&gt;&gt; uparse [a] [^[word!]]
== 'a
</code></pre>
<p>But I was using ^word, ^pa/th, ^tu.p.le, and ^(gr o up) to mean "match the literal thing".</p>
<pre><code> &gt;&gt; pattern: [some integer!]

 &gt;&gt; did uparse [[some integer!] [some integer!]] [some '[some integer!]]
 == #[true]

 &gt;&gt; did uparse [[some integer!] [some integer!]] [some ^pattern]
 == #[true]
</code></pre>
<p>If you squint, it sort of lines up.  There's quoting involved; but it adds a level to the rule, not the synthesized result.</p>
<p>But it would be a waste to have the careted <strong>^[a block]</strong> mean literally match [a block], since that's already what the quoted <strong>'[a block]</strong> means.  So I'd gone with this other meaning.</p>
<p>Going back to our example, it forces us to use blocks around the rules in order to get the caret benefit:</p>
<pre><code>&gt;&gt; uparse [[a b] [c d]] [
      collect [some [
          keep ^[([keeping a block])]
          keep ^[block!]
      ]]
   ]
== [[keeping a block] [a b] [keeping a block] [c d]]
</code></pre>
<p>That's obnoxious.  <strong>So I changed it to where ^ always means to quote the synthesized rule product.</strong></p>
<pre><code>&gt;&gt; uparse [[a b] [c d]] [
      collect [some [
          keep ^([keeping a block])
          keep ^block!
      ]]
   ]
== [[keeping a block] [a b] [keeping a block] [c d]]
</code></pre>
<p>Due to the ability to <a href="https://forum.rebol.info/t/if-action-combinators-dont-impress-i-dont-know-what-will/1608">use plain ACTION!s as combinators by ending in /</a>, you have that option...as well as to put your quotes inside a GROUP! if you're running code:</p>
<pre><code>&gt;&gt; uparse [[a b] [c d]] [
      collect [some [
          keep (quote [keeping a block])
          keep quote/ block!
      ]]
   ]
== [[keeping a block] [a b] [keeping a block] [c d]]
</code></pre>
<p>And we can always make QUOTE a combinator so the / isn't needed, if we think that's worthwhile.</p>
<p>(While we're on the subject, doesn't it really seem like <strong>keep quote block!</strong> makes more sense than <strong>keep only block!</strong>?  It's like it means what it says, and the mechanics all tie it together.)</p>
<h2>We'll Need Something Else for Lookup and Match Exactly</h2>
<p>I still think the @ variants seem palatable for the purpose:</p>
<pre><code> &gt;&gt; pattern: [some integer!]

 &gt;&gt; did uparse [[some integer!] [some integer!]] [some @pattern]
 == #[true]
</code></pre>
<p>It could be a named combinator like EXACT, but the issue there is it would need to either quote its argument or it becomes inconvenient:</p>
<pre><code> &gt;&gt; did uparse [[some integer!] [some integer!]] [some exact (pattern)]
 == #[true]
</code></pre>
<p>This is one of the nice things about using the datatype as a combinator, in that it can break outside the rhythm of what plain expressions do and seem to justify it.  It's not that we <em>can't</em> take the arguments literally and fetch a variable without a GROUP!, but explaining that <strong>some exact pattern</strong> and <strong>some exact [pattern]</strong> aren't identical becomes a tax.  :-/</p>
<p>What makes me nervous about this is if @[...] is used for datatypes, and I wouldn't like the overlap there.  It may be that datatypes really just use something else, not yet designed.  I dunno.</p>
<h2>Seems Like Clearly the Right Adjustment</h2>
<p>Having all of the ^ family of operators act consistently and give the quoting really makes it nice for living in a post-ONLY world.</p>
<p>The way I've done it is neat because it's dynamic and inherits whatever the base is.  So if you change the combinator for BLOCK! or WORD!, the ^[...] and ^xxx combinators will change to quote whatever they do.  But you can also override these combinators if you want as well.</p>
          <p><a href="https://forum.rebol.info/t/do-insert-only-is-gone-what-about-parse-insert-only/1609/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/do-insert-only-is-gone-what-about-parse-insert-only/1609/1</link>
        <pubDate>Tue, 18 May 2021 04:09:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1609-1</guid>
        <source url="https://forum.rebol.info/t/do-insert-only-is-gone-what-about-parse-insert-only/1609.rss">DO [INSERT/ONLY ...] is Gone. What About PARSE [INSERT ONLY ...]</source>
      </item>
  </channel>
</rss>

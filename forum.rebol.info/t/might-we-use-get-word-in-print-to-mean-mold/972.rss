<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Might we use GET-WORD! in PRINT to mean &quot;MOLD&quot;?</title>
    <link>https://forum.rebol.info/t/might-we-use-get-word-in-print-to-mean-mold/972</link>
    <description>I&#39;ve talked in the past about how I think PRINT of a BLOCK! is a pretty limited dialect, in that its hands are kind of tied because it allows just any evaluation, not required to be in a GROUP!.  Compare this with PARSE, which strictly controls evaluations.

One thing that occurs to me that could be done without really making that much of a ripple in SPACED/UNSPACED/DELIMIT would be if GET-WORD! could mean &quot;mold this&quot;:

     &gt;&gt; value: [a b c]

     &gt;&gt; print [&quot;Value is:&quot; value]
     Value is a b c

     &gt;&gt; print [&quot;Value is:&quot; :value]
     Value is [a b c]

One reason it doesn&#39;t make much of a ripple is because in the case of an unset variable, there wouldn&#39;t be any difference...nulls can&#39;t mold anyway.

Note this is a suggestion for the direct dialect behavior, not of a GET-WORD! that gets generated:

     &gt;&gt; print [&quot;Value is:&quot; quote :value]
     Value is :value

The idea that every stringy type that isn&#39;t a TEXT! form with their delimiters is something I&#39;ve been assuming for a bit, in a &quot;WYSIWYG&quot; kind of mentality.

One technical question interfering in the evaluation raises is what to do about infix, such as something that is looking to pick up the GET-WORD! on the left.

    &gt;&gt; :value left-quote
    == :value

    &gt;&gt; print [&quot;Value is&quot; :value left-quote]
    Value is :value // this is presumably what the output should be

This would mean that while SPACED was looking at the pending evaluations, it would have to do something along the lines of notice it was a GET-WORD!, do the evaluation, and then ask if the evaluation moved by only one unit.  There&#39;s actually more to worry about than that, because pure invisible comments would be evaluated as well...

Such interactions are complex, and raise a lot of questions about just how dialect-y you can get when you let people write any evaluative material in a block like that.  But requiring GROUP! would be rather heavy-handed, and if literal inspections were done then at least if that&#39;s not what you wanted, you could use a group.

## If this isn&#39;t good, is *any* PRINT (SPACED, DELIMIT) dialecting good?

People certainly want to use literal TAG! in unspaced:

    unspaced [&lt;b&gt; &quot;bolded text&quot; &lt;/b&gt;]

So the idea of using tags for control codes or saying how many digits of precision to print integers with would probably be unpopular.  Is PRINT never going to aspire to more, and is that the job of a higher level **print format** routine?

If that&#39;s the mindset, then this GET-WORD! proposal is probably the only change that might be considered for squeaking by, but if it&#39;s the only irregularity it&#39;s probably not worth it.  (?)</description>
    
    <lastBuildDate>Sat, 22 Dec 2018 08:25:52 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/might-we-use-get-word-in-print-to-mean-mold/972.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Might we use GET-WORD! in PRINT to mean &quot;MOLD&quot;?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've talked in the past about how I think PRINT of a BLOCK! is a pretty limited dialect, in that its hands are kind of tied because it allows just any evaluation, not required to be in a GROUP!.  Compare this with PARSE, which strictly controls evaluations.</p>
<p>One thing that occurs to me that could be done without really making that much of a ripple in SPACED/UNSPACED/DELIMIT would be if GET-WORD! could mean "mold this":</p>
<pre><code> &gt;&gt; value: [a b c]

 &gt;&gt; print ["Value is:" value]
 Value is a b c

 &gt;&gt; print ["Value is:" :value]
 Value is [a b c]
</code></pre>
<p>One reason it doesn't make much of a ripple is because in the case of an unset variable, there wouldn't be any difference...nulls can't mold anyway.</p>
<p>Note this is a suggestion for the direct dialect behavior, not of a GET-WORD! that gets generated:</p>
<pre><code> &gt;&gt; print ["Value is:" quote :value]
 Value is :value
</code></pre>
<p>The idea that every stringy type that isn't a TEXT! form with their delimiters is something I've been assuming for a bit, in a "WYSIWYG" kind of mentality.</p>
<p>One technical question interfering in the evaluation raises is what to do about infix, such as something that is looking to pick up the GET-WORD! on the left.</p>
<pre><code>&gt;&gt; :value left-quote
== :value

&gt;&gt; print ["Value is" :value left-quote]
Value is :value // this is presumably what the output should be
</code></pre>
<p>This would mean that while SPACED was looking at the pending evaluations, it would have to do something along the lines of notice it was a GET-WORD!, do the evaluation, and then ask if the evaluation moved by only one unit.  There's actually more to worry about than that, because pure invisible comments would be evaluated as well...</p>
<p>Such interactions are complex, and raise a lot of questions about just how dialect-y you can get when you let people write any evaluative material in a block like that.  But requiring GROUP! would be rather heavy-handed, and if literal inspections were done then at least if that's not what you wanted, you could use a group.</p>
<h2>If this isn't good, is <em>any</em> PRINT (SPACED, DELIMIT) dialecting good?</h2>
<p>People certainly want to use literal TAG! in unspaced:</p>
<pre><code>unspaced [&lt;b&gt; "bolded text" &lt;/b&gt;]
</code></pre>
<p>So the idea of using tags for control codes or saying how many digits of precision to print integers with would probably be unpopular.  Is PRINT never going to aspire to more, and is that the job of a higher level <strong>print format</strong> routine?</p>
<p>If that's the mindset, then this GET-WORD! proposal is probably the only change that might be considered for squeaking by, but if it's the only irregularity it's probably not worth it.  (?)</p>
          <p><a href="https://forum.rebol.info/t/might-we-use-get-word-in-print-to-mean-mold/972/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/might-we-use-get-word-in-print-to-mean-mold/972/1</link>
        <pubDate>Sat, 22 Dec 2018 08:25:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-972-1</guid>
        <source url="https://forum.rebol.info/t/might-we-use-get-word-in-print-to-mean-mold/972.rss">Might we use GET-WORD! in PRINT to mean &quot;MOLD&quot;?</source>
      </item>
  </channel>
</rss>

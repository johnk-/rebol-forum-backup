<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Weird WORD!s - Allow, But Backtick Escape Them?</title>
    <link>https://forum.rebol.info/t/weird-word-s-allow-but-backtick-escape-them/1560</link>
    <description>I suggested the idea of using **`&lt;.&gt;`** as a weird TAG! in PARSE... then I remembered... that&#39;s a TUPLE!.

My feeling is you should be able to build paths and tuples out of anything that&#39;s a valid WORD!.  But is it time we had an escaping mode for &quot;weird words&quot;?  If you want to make the above TUPLE!, what if you had to write:

    `&lt;`.`&gt;`

Otherwise, `&lt;.&gt;` would be a TAG!

Having an escaping mode for words would open up more lexical space.  For instance,  I like the idea of allowing $FOO, $(FOO), $FOO/BAR, $[FOO BAR] etc. as another type...

But this would seem to kill off the idea of being able to have `$` and `$$` etc. as WORD!s, because you get into ambiguous situations... is $/foo a PATH! with the $ word in the first slot, or an ENV-PATH! with an empty first slot?

These ambiguities create problems for other things that might stand alone all right, because we don&#39;t want to have &quot;second-class-citizen&quot; WORD!s that can&#39;t appear in paths.

But what if we used backticks if they wind up in paths?

    `$`/foo   ; PATH! with $ in the first slot
    $/foo  ; ENV-PATH! with blank in the first slot

This could give us the likes of `:` and `::` as operators...

    &gt;&gt; `:`: does [print &quot;I am colon!&quot;]

    &gt;&gt; :
    I am colon!

    &gt;&gt; type of :`:`
    == #[datatype! action!]

It could work for other standalone characters, like **`@`** and perhaps **`&amp;`**.  **%** could be the same (with %&quot;&quot; or %{} used for empty file)

I feel like # and / may not be good candidates for this treatment, it would need more thought.

**The point wouldn&#39;t be that you&#39;d likely be going crazy with paths involving these characters, but rather that you might want to do interesting things with them standalone.**  It&#39;s just to put them on the map as legitimate words.</description>
    
    <lastBuildDate>Mon, 15 Mar 2021 14:18:47 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/weird-word-s-allow-but-backtick-escape-them/1560.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Weird WORD!s - Allow, But Backtick Escape Them?</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>I definitely think there should be a way to escape weird words.<br>
I'm not yet a big fan of this specific proposal, but can't think of anything better.</p>
          <p><a href="https://forum.rebol.info/t/weird-word-s-allow-but-backtick-escape-them/1560/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/weird-word-s-allow-but-backtick-escape-them/1560/2</link>
        <pubDate>Mon, 15 Mar 2021 14:18:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1560-2</guid>
        <source url="https://forum.rebol.info/t/weird-word-s-allow-but-backtick-escape-them/1560.rss">Weird WORD!s - Allow, But Backtick Escape Them?</source>
      </item>
      <item>
        <title>Weird WORD!s - Allow, But Backtick Escape Them?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I suggested the idea of using <strong><code>&lt;.&gt;</code></strong> as a weird TAG! in PARSE... then I remembered... that's a TUPLE!.</p>
<p>My feeling is you should be able to build paths and tuples out of anything that's a valid WORD!.  But is it time we had an escaping mode for "weird words"?  If you want to make the above TUPLE!, what if you had to write:</p>
<pre><code>`&lt;`.`&gt;`
</code></pre>
<p>Otherwise, <code>&lt;.&gt;</code> would be a TAG!</p>
<p>Having an escaping mode for words would open up more lexical space.  For instance,  I like the idea of allowing $FOO, $(FOO), $FOO/BAR, $[FOO BAR] etc. as another type...</p>
<p>But this would seem to kill off the idea of being able to have <code>$</code> and <code>$$</code> etc. as WORD!s, because you get into ambiguous situations... is $/foo a PATH! with the $ word in the first slot, or an ENV-PATH! with an empty first slot?</p>
<p>These ambiguities create problems for other things that might stand alone all right, because we don't want to have "second-class-citizen" WORD!s that can't appear in paths.</p>
<p>But what if we used backticks if they wind up in paths?</p>
<pre><code>`$`/foo   ; PATH! with $ in the first slot
$/foo  ; ENV-PATH! with blank in the first slot
</code></pre>
<p>This could give us the likes of <code>:</code> and <code>::</code> as operators...</p>
<pre><code>&gt;&gt; `:`: does [print "I am colon!"]

&gt;&gt; :
I am colon!

&gt;&gt; type of :`:`
== #[datatype! action!]
</code></pre>
<p>It could work for other standalone characters, like <strong><code>@</code></strong> and perhaps <strong><code>&amp;</code></strong>.  <strong>%</strong> could be the same (with %"" or %{} used for empty file)</p>
<p>I feel like # and / may not be good candidates for this treatment, it would need more thought.</p>
<p><strong>The point wouldn't be that you'd likely be going crazy with paths involving these characters, but rather that you might want to do interesting things with them standalone.</strong>  It's just to put them on the map as legitimate words.</p>
          <p><a href="https://forum.rebol.info/t/weird-word-s-allow-but-backtick-escape-them/1560/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/weird-word-s-allow-but-backtick-escape-them/1560/1</link>
        <pubDate>Mon, 15 Mar 2021 03:30:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1560-1</guid>
        <source url="https://forum.rebol.info/t/weird-word-s-allow-but-backtick-escape-them/1560.rss">Weird WORD!s - Allow, But Backtick Escape Them?</source>
      </item>
  </channel>
</rss>

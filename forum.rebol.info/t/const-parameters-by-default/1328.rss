<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Const Parameters By Default?</title>
    <link>https://forum.rebol.info/t/const-parameters-by-default/1328</link>
    <description>I&#39;ve been tinkering around with Rust this past week.  It&#39;s an interesting language that tries to blend together best practices of C++ as things that are compiler-enforced...and inherits some Haskell for good measure.

It&#39;s gotten me back to thinking about how basic choices make a big difference.  And I feel like `const` parameters may make a good logical default.  As it stands, people have to annotate functions to say `(modifies)` in a  comment.  Wouldn&#39;t it be better if you didn&#39;t get mutability unless you asked for it?

There could be a compromise for quick-and-dirty functions that if you don&#39;t annotate a parameter, then you get things mutable:

     data: [a b c]

     quick: func [blk] [append blk #quick]
     
     &gt;&gt; quick data
     == [a b c #quick]

     not-quick: func [blk [block!]] [
         append blk {You had time to write BLOCK!, why not &lt;mutable&gt; BLOCK!}
     ]

    &gt;&gt; not-quick data
    ** Error: blk is `const`, mark parameters `&lt;mutable&gt;` or see MUTABLE

    modifier: func [blk [&lt;mutable&gt; block!]] [
        append blk {Would &lt;mut&gt; be better?}
    ]

    &gt;&gt; modifier data
    == [a b c #quick {Would &lt;mut&gt; be better?}]

    &gt;&gt; modifier const data
    ** Error: modifier wants its blk parameter to be mutable

*(I have a little bit of a feeling of deja-vu writing this, so I&#39;ve probably suggested it before.)*

Anyway, it seems to me that looking around the language landscape, these kinds of small gestures of control are the least we can do.  It would be better in the HELP to see when something modifies, and having it enforced from the beginning would be nice.  Note that with BigNum, INTEGER! will be a type that can end up mutable...and it seems like stopping people from writing to integers you pass to routines by default is desirable.

**of course, questions come up**, e.g. for mixed needs of parameters.  If you take a TEXT! or a BLOCK!, but only the BLOCK! is handled as mutable, what option should you use?  Someone might have a read-only text and want to call your routine.

A cop-out would be to have some kind of `&lt;mixed&gt;` or `&lt;as-is&gt;` annotation that basically doesn&#39;t do checks for mutability or constness, and leaves it up to the routine.  Not a great answer, but I don&#39;t know how often such a circumstance would come up.  This could be a near-term option that would evolve into a better solution at some point.</description>
    
    <lastBuildDate>Tue, 15 Sep 2020 19:26:40 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/const-parameters-by-default/1328.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Const Parameters By Default?</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I think I'd prefer the shorter &lt;mut&gt; as well.</p>
          <p><a href="https://forum.rebol.info/t/const-parameters-by-default/1328/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/const-parameters-by-default/1328/3</link>
        <pubDate>Tue, 15 Sep 2020 14:25:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1328-3</guid>
        <source url="https://forum.rebol.info/t/const-parameters-by-default/1328.rss">Const Parameters By Default?</source>
      </item>
      <item>
        <title>Const Parameters By Default?</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>How about<br>
[Text! &lt;mut&gt; block!]<br>
So only after the &lt;mut&gt; things get mutable, or add &lt;nonmut&gt;  as well.<br>
I'm unsure how much this would complicate the implementation.<br>
Another idea: it's ok to use the immutable text! as long as the function doesn't write to it.</p>
          <p><a href="https://forum.rebol.info/t/const-parameters-by-default/1328/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/const-parameters-by-default/1328/2</link>
        <pubDate>Tue, 15 Sep 2020 08:18:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1328-2</guid>
        <source url="https://forum.rebol.info/t/const-parameters-by-default/1328.rss">Const Parameters By Default?</source>
      </item>
      <item>
        <title>Const Parameters By Default?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've been tinkering around with Rust this past week.  It's an interesting language that tries to blend together best practices of C++ as things that are compiler-enforced...and inherits some Haskell for good measure.</p>
<p>It's gotten me back to thinking about how basic choices make a big difference.  And I feel like <code>const</code> parameters may make a good logical default.  As it stands, people have to annotate functions to say <code>(modifies)</code> in a  comment.  Wouldn't it be better if you didn't get mutability unless you asked for it?</p>
<p>There could be a compromise for quick-and-dirty functions that if you don't annotate a parameter, then you get things mutable:</p>
<pre><code> data: [a b c]

 quick: func [blk] [append blk #quick]
 
 &gt;&gt; quick data
 == [a b c #quick]

 not-quick: func [blk [block!]] [
     append blk {You had time to write BLOCK!, why not &lt;mutable&gt; BLOCK!}
 ]

&gt;&gt; not-quick data
** Error: blk is `const`, mark parameters `&lt;mutable&gt;` or see MUTABLE

modifier: func [blk [&lt;mutable&gt; block!]] [
    append blk {Would &lt;mut&gt; be better?}
]

&gt;&gt; modifier data
== [a b c #quick {Would &lt;mut&gt; be better?}]

&gt;&gt; modifier const data
** Error: modifier wants its blk parameter to be mutable
</code></pre>
<p><em>(I have a little bit of a feeling of deja-vu writing this, so I've probably suggested it before.)</em></p>
<p>Anyway, it seems to me that looking around the language landscape, these kinds of small gestures of control are the least we can do.  It would be better in the HELP to see when something modifies, and having it enforced from the beginning would be nice.  Note that with BigNum, INTEGER! will be a type that can end up mutable...and it seems like stopping people from writing to integers you pass to routines by default is desirable.</p>
<p><strong>of course, questions come up</strong>, e.g. for mixed needs of parameters.  If you take a TEXT! or a BLOCK!, but only the BLOCK! is handled as mutable, what option should you use?  Someone might have a read-only text and want to call your routine.</p>
<p>A cop-out would be to have some kind of <code>&lt;mixed&gt;</code> or <code>&lt;as-is&gt;</code> annotation that basically doesn't do checks for mutability or constness, and leaves it up to the routine.  Not a great answer, but I don't know how often such a circumstance would come up.  This could be a near-term option that would evolve into a better solution at some point.</p>
          <p><a href="https://forum.rebol.info/t/const-parameters-by-default/1328/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/const-parameters-by-default/1328/1</link>
        <pubDate>Tue, 15 Sep 2020 04:09:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1328-1</guid>
        <source url="https://forum.rebol.info/t/const-parameters-by-default/1328.rss">Const Parameters By Default?</source>
      </item>
  </channel>
</rss>

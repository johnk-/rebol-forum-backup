<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Circling Multi-Returns: Choose Which Is Expression Result</title>
    <link>https://forum.rebol.info/t/circling-multi-returns-choose-which-is-expression-result/1587</link>
    <description>I&#39;m still evaluating how well the idea behind multiple-returns works...but by and large, they seem to be working pretty well.

So I&#39;ve gone ahead and moved them from the &quot;usermode prototype&quot; to natively implementing them as part of the evaluator, which speeds them up by a factor of... a lot.

While doing so, I added a new feature of being able to &quot;circle&quot; which result will be the value of the overall expression.  Previously this was always the &quot;main&quot; return value, but now you can pick another via a SYM-WORD!.

Here&#39;s a function with a secondary return value to demonstrate with:

    multi: func [
        return: &quot;Main return value&quot;
            [integer!]
        secondary: &quot;Secondary return value&quot;
            [integer!]
    ][
        if secondary [  ; NULL if not asked for via multi-return (or refinement)
            set secondary 20  ; reminder: `set # ...` is a no-op
        ]
        return 10
    ]

Traditionally you could ask for both results, and the overall result would be the first return:

    &gt;&gt; [a b]: multi
    == 10  ; defaults to same value as first result, e.g. a
 
    &gt;&gt; a
    == 10

    &gt;&gt; b
    == 20

But now you can use a SYM-WORD! instead to ask for a different result, e.g. the second:

    &gt;&gt; [a @b]: multi
    == 20  ; same value as b
 
    &gt;&gt; a
    == 10

    &gt;&gt; b
    == 20

You can combine this with things like GROUP!s to calculate the variable name, or even omit the variable name and use `#`:

    &gt;&gt; [a @(#)]: multi
    == 20  
 
    &gt;&gt; a
    == 10

There are some places where this comes in handy, although you generally want to pick the main return to be the thing people are most interested in responding to (e.g. determining success or failure of an operation).</description>
    
    <lastBuildDate>Sat, 17 Apr 2021 06:53:00 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/circling-multi-returns-choose-which-is-expression-result/1587.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Circling Multi-Returns: Choose Which Is Expression Result</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I'm still evaluating how well the idea behind multiple-returns works...but by and large, they seem to be working pretty well.</p>
<p>So I've gone ahead and moved them from the "usermode prototype" to natively implementing them as part of the evaluator, which speeds them up by a factor of... a lot.</p>
<p>While doing so, I added a new feature of being able to "circle" which result will be the value of the overall expression.  Previously this was always the "main" return value, but now you can pick another via a SYM-WORD!.</p>
<p>Here's a function with a secondary return value to demonstrate with:</p>
<pre><code>multi: func [
    return: "Main return value"
        [integer!]
    secondary: "Secondary return value"
        [integer!]
][
    if secondary [  ; NULL if not asked for via multi-return (or refinement)
        set secondary 20  ; reminder: `set # ...` is a no-op
    ]
    return 10
]
</code></pre>
<p>Traditionally you could ask for both results, and the overall result would be the first return:</p>
<pre><code>&gt;&gt; [a b]: multi
== 10  ; defaults to same value as first result, e.g. a

&gt;&gt; a
== 10

&gt;&gt; b
== 20
</code></pre>
<p>But now you can use a SYM-WORD! instead to ask for a different result, e.g. the second:</p>
<pre><code>&gt;&gt; [a @b]: multi
== 20  ; same value as b

&gt;&gt; a
== 10

&gt;&gt; b
== 20
</code></pre>
<p>You can combine this with things like GROUP!s to calculate the variable name, or even omit the variable name and use <code>#</code>:</p>
<pre><code>&gt;&gt; [a @(#)]: multi
== 20  

&gt;&gt; a
== 10
</code></pre>
<p>There are some places where this comes in handy, although you generally want to pick the main return to be the thing people are most interested in responding to (e.g. determining success or failure of an operation).</p>
          <p><a href="https://forum.rebol.info/t/circling-multi-returns-choose-which-is-expression-result/1587/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/circling-multi-returns-choose-which-is-expression-result/1587/1</link>
        <pubDate>Sat, 17 Apr 2021 06:07:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1587-1</guid>
        <source url="https://forum.rebol.info/t/circling-multi-returns-choose-which-is-expression-result/1587.rss">Circling Multi-Returns: Choose Which Is Expression Result</source>
      </item>
  </channel>
</rss>

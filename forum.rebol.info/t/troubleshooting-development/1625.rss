<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Troubleshooting development</title>
    <link>https://forum.rebol.info/t/troubleshooting-development/1625</link>
    <description>My function now needs to return a result but either 

    return rebInteger(result);

where result is my resulting unsigned long value and

    return rebVoid();

both make the console exit and not responsive.

What could cause this behaviour? Could it be I forgot to rebRelease a value that ought to be rebReleased?

Because this 

        rebElide(&quot;print [{Returning the integer result.}&quot;, rebI(result), &quot;{}]&quot;);

        rebElide(&quot;print {ok!}&quot;);

        return rebInteger(result);
    }

Resulting in ending like

    &gt;&gt; g-signal-connect-data button1 &quot;clicked&quot; get-handle :f null null 0
    Returning the integer result. 52  
    ok!
    arnold@Ubuntu:/r3n-c/build$ 

where input typed will no longer appear on the terminal screen..

So indeed I removed a couple of my assignments that were meant to display information about the passed arguments and now the function at least is returning its correct value again:

    &gt;&gt; g-signal-connect-data button1 &quot;clicked&quot; get-handle :f null null 0
    Returning the integer result. 52 
    ok!
    == 52

So this does make a difference.</description>
    
    <lastBuildDate>Fri, 25 Jun 2021 21:55:24 +0000</lastBuildDate>
    <category>Testing</category>
    <atom:link href="https://forum.rebol.info/t/troubleshooting-development/1625.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Troubleshooting development</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>Brilliant!</p>
<p>I had no clue that was even possible within the rebUnboxXXX functions!</p>
<p>Thanks!</p>
          <p><a href="https://forum.rebol.info/t/troubleshooting-development/1625/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/troubleshooting-development/1625/10</link>
        <pubDate>Fri, 25 Jun 2021 21:55:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1625-10</guid>
        <source url="https://forum.rebol.info/t/troubleshooting-development/1625.rss">Troubleshooting development</source>
      </item>
      <item>
        <title>Troubleshooting development</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>You can produce an integer and then switch on the integer.</p>
<pre><code>int which = rebUnboxInteger("switch type of ", mydata, "[",
    "text! [1]",
    "action! [2]",
    "block! [3]",
    "handle! [4]",
    "integer! [5]",
"] else [0]");

switch (which) {
    case 0:  // unknown
    case 1:  // text
    case 2:  // action
    ...
}
</code></pre>
<p>Though I find it can be clearer if you use a character instead.</p>
<pre><code> char which = rebUnboxChar("switch type of ", mydata, "[",
    "text! [#T]",
    "action! [#A]",
    "block! [#B]",
    "handle! [#H]",
    "integer! [#I]",
"] else [#]");

switch (which) {
    case '\0':  // unknown
    case 'T': // text
    case 'A':  // action
        ...
}
</code></pre>
<p>There are some more creative options possible with C++ lambdas but I haven't gotten into that yet.</p>
          <p><a href="https://forum.rebol.info/t/troubleshooting-development/1625/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/troubleshooting-development/1625/9</link>
        <pubDate>Fri, 25 Jun 2021 21:41:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1625-9</guid>
        <source url="https://forum.rebol.info/t/troubleshooting-development/1625.rss">Troubleshooting development</source>
      </item>
      <item>
        <title>Troubleshooting development</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>I would like to use the type of input data to help me decide which C function I should call next.</p>
<pre><code>REBVAL *mydata = ARG(data);

rebElide("switch type of ", mydata, "[",
    "text! [print {data type is text!}]",
    "action! [print {data type is action!}]",
    "block! [print {data type is block!}]",
    "handle! [print {data type is handle!}]",
    "integer! [print {data type is integer!}]",
    "]"); 
</code></pre>
<p>so instead of the <code>print {data type is type!}</code> there would be an assignment of some sort so I could proceed within the C code with a switch to go and call the appropriate C function that handles that type of data.</p>
<p>While your example is very clear(!!) I still do not see how to accomplish this.</p>
          <p><a href="https://forum.rebol.info/t/troubleshooting-development/1625/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/troubleshooting-development/1625/8</link>
        <pubDate>Fri, 25 Jun 2021 14:16:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1625-8</guid>
        <source url="https://forum.rebol.info/t/troubleshooting-development/1625.rss">Troubleshooting development</source>
      </item>
      <item>
        <title>Troubleshooting development</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>You do not change values.  You always make new ones.</p>
<p>So all you do is build and unpack values.  You don't fiddle the value of a REBVAL* itself.</p>
<pre><code>REBVAL *reb_value = rebValue("1020");
int c_value = rebUnboxInteger(reb_value);
rebRelease(reb_value);
</code></pre>
<p>Or</p>
<pre><code> REBVAL *reb_value = rebValue("1020");
 int c_value = rebUnboxInteger(rebR(reb_value));
</code></pre>
<p>rebR is not the same thing as rebRelease, it's something you use that signals a delayed release done by the extraction functions.  You must use it as an argument like that, or it won't work.</p>
<p>And the smart thing about the API is that these functions are not one trick ponies, you can always add code.</p>
<pre><code> REBVAL *reb_value = rebValue("1020");
 int c_value = rebUnboxInteger("304 +", rebR(reb_value));</code></pre>
          <p><a href="https://forum.rebol.info/t/troubleshooting-development/1625/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/troubleshooting-development/1625/7</link>
        <pubDate>Fri, 25 Jun 2021 13:43:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1625-7</guid>
        <source url="https://forum.rebol.info/t/troubleshooting-development/1625.rss">Troubleshooting development</source>
      </item>
      <item>
        <title>Troubleshooting development</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>How to manipulate a C variable from inside the rebAPI?</p>
<p>Given a <code>REBVAL *value</code> how can I set the value of a C integer <code>int c_value</code> ?</p>
          <p><a href="https://forum.rebol.info/t/troubleshooting-development/1625/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/troubleshooting-development/1625/6</link>
        <pubDate>Thu, 24 Jun 2021 19:02:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1625-6</guid>
        <source url="https://forum.rebol.info/t/troubleshooting-development/1625.rss">Troubleshooting development</source>
      </item>
      <item>
        <title>Troubleshooting development</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>gpointer is the pointer type of GTK. It is just a pointer but with the GTK guard to be the same across platforms.</p>
<p>While I had my code working, hence the printout I could show, in some way or the other I cannot reproduce it. (yeah sucks!) So that is the reason I ask, so I can see more of what the box is doing before breaking.</p>
          <p><a href="https://forum.rebol.info/t/troubleshooting-development/1625/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/troubleshooting-development/1625/5</link>
        <pubDate>Sun, 13 Jun 2021 17:26:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1625-5</guid>
        <source url="https://forum.rebol.info/t/troubleshooting-development/1625.rss">Troubleshooting development</source>
      </item>
      <item>
        <title>Troubleshooting development</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="iArnold" data-post="2" data-topic="1625">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/iarnold/40/226_2.png" class="avatar"> iArnold:</div>
<blockquote>
<p>how can I check the value of user_data that I pass in this C function</p>
</blockquote>
</aside>
<p>Do you mean how do you printf a pointer value (e.g. 0x14EBACD2) or how do you print what the data points to?  Use <code>%p</code> in a printf.</p>
<p>Presumably "gpointer" is an alias for void* of some sort?</p>
<p>If you want to print what it points <em>to</em> you'd have to cast it to the type of information it is, and that depends on what type the pointer is.</p>
          <p><a href="https://forum.rebol.info/t/troubleshooting-development/1625/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/troubleshooting-development/1625/4</link>
        <pubDate>Sun, 13 Jun 2021 16:45:32 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1625-4</guid>
        <source url="https://forum.rebol.info/t/troubleshooting-development/1625.rss">Troubleshooting development</source>
      </item>
      <item>
        <title>Troubleshooting development</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="iArnold" data-post="1" data-topic="1625">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/iarnold/40/226_2.png" class="avatar"> iArnold:</div>
<blockquote>
<p>What could cause this behaviour? Could it be I forgot to rebRelease a value that ought to be rebReleased?</p>
</blockquote>
</aside>
<p>Are you running a debug build?</p>
<p>e.g. if you say <code>assert(false)</code> in your code does it terminate the program?</p>
<p>If you are not running a debug build, then it can frequently crash without telling you what is wrong.</p>
<p>But if you are running a debug build and seeing something like this, that is uncommon.  I'd want to reproduce it myself and look at it.</p>
          <p><a href="https://forum.rebol.info/t/troubleshooting-development/1625/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/troubleshooting-development/1625/3</link>
        <pubDate>Sun, 13 Jun 2021 16:42:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1625-3</guid>
        <source url="https://forum.rebol.info/t/troubleshooting-development/1625.rss">Troubleshooting development</source>
      </item>
      <item>
        <title>Troubleshooting development</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>Now how can I check the value of user_data that I pass in this C function?</p>
<pre><code>static void self_signal_connect_helper(GtkWidget *widget,
                                       gpointer  user_data){
</code></pre>
<p>I know it is not null from this test:</p>
<pre><code>if (user_data){
    rebElide("print {user_data not null}");
}</code></pre>
          <p><a href="https://forum.rebol.info/t/troubleshooting-development/1625/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/troubleshooting-development/1625/2</link>
        <pubDate>Sun, 13 Jun 2021 06:47:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1625-2</guid>
        <source url="https://forum.rebol.info/t/troubleshooting-development/1625.rss">Troubleshooting development</source>
      </item>
      <item>
        <title>Troubleshooting development</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>My function now needs to return a result but either</p>
<pre><code>return rebInteger(result);
</code></pre>
<p>where result is my resulting unsigned long value and</p>
<pre><code>return rebVoid();
</code></pre>
<p>both make the console exit and not responsive.</p>
<p>What could cause this behaviour? Could it be I forgot to rebRelease a value that ought to be rebReleased?</p>
<p>Because this</p>
<pre><code>    rebElide("print [{Returning the integer result.}", rebI(result), "{}]");

    rebElide("print {ok!}");

    return rebInteger(result);
}
</code></pre>
<p>Resulting in ending like</p>
<pre><code>&gt;&gt; g-signal-connect-data button1 "clicked" get-handle :f null null 0
Returning the integer result. 52  
ok!
arnold@Ubuntu:/r3n-c/build$ 
</code></pre>
<p>where input typed will no longer appear on the terminal screen..</p>
<p>So indeed I removed a couple of my assignments that were meant to display information about the passed arguments and now the function at least is returning its correct value again:</p>
<pre><code>&gt;&gt; g-signal-connect-data button1 "clicked" get-handle :f null null 0
Returning the integer result. 52 
ok!
== 52
</code></pre>
<p>So this does make a difference.</p>
          <p><a href="https://forum.rebol.info/t/troubleshooting-development/1625/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/troubleshooting-development/1625/1</link>
        <pubDate>Sat, 12 Jun 2021 11:37:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1625-1</guid>
        <source url="https://forum.rebol.info/t/troubleshooting-development/1625.rss">Troubleshooting development</source>
      </item>
  </channel>
</rss>

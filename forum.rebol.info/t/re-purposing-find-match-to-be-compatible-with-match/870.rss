<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Re-purposing FIND/MATCH to be compatible with MATCH</title>
    <link>https://forum.rebol.info/t/re-purposing-find-match-to-be-compatible-with-match/870</link>
    <description>The historical /MATCH refinement to FIND is somewhat confusing.  It basically requires the find to either occur specifically at the current position or not, and then returns the tail.

    r3-alpha&gt; find/match &quot;abcd&quot; &quot;ab&quot;
    == &quot;cd&quot;

    r3-alpha&gt; find/match &quot;abcd&quot; &quot;bc&quot;
    == none

Meanwhile, there is now a [MATCH native](https://trello.com/c/LR9PzUS3/125-match-filters-values-based-on-type-tests-or-arbitrary-function-filters) which is used to do some type and typeset checking, not to mention running arbitrary functions as tests:

    ren-c&gt; match [integer! string!] &quot;hello&quot;
    == &quot;hello&quot;

    ren-c&gt; match [integer! string!] &lt;some-tag&gt;
    ;-- null

    ren-c&gt; match :even? 10
    == 10

    ren-c&gt; match :even? 13
    ;-- null

This makes one wonder if it might be more useful if /MATCH was the way of telling FIND not to use the argument as a literal thing to search for, but rather use as the same kind of rule that MATCH would use:

    &gt;&gt; find/match [10 20 13 40] :odd?
    == [13 40]

    &gt;&gt; find/match [10 20 &quot;hello&quot; 40] [string! tag!]
    == [&quot;hello&quot; 40]

This would help address an ambiguity that today&#39;s FIND has, where if you pass it a datatype or typeset it very ambiguously will search either for the datatype, or for an instance of that datatype:

    r3-alpha&gt; find reduce [integer! string! tag!] string!
    == [string! tag!]

    r3-alpha&gt; find reduce [&quot;hello&quot; integer! string! tag!] string!     
    == [&quot;hello&quot; integer! string! tag!]

Putting the second behavior under /MATCH would clean that up, as well as bring more functionality to the table.

## /MATCH sounds good, so what should the old behavior be called?

FIND has too many refinements as it is, some of which need to be done as specializations.  The old behavior  of FIND/MATCH is really just FIND/PART/TAIL, where the /PART limit only considers the very head to be a candidate.

You can actually make such a function by ADAPTting FIND such that it fills in the /PART to be exactly one past the input range.  Then take the resulting function and specialize out the /PART refinement so it isn&#39;t shown on the interface (e.g. doesn&#39;t appear in HELP), and add in /TAIL as being used.

    find-xxx: specialize (adapt &#39;find [
        part: true
        limit: next series
    ])[
        part: false
        tail: true
    ]

 *(Note: this should work today, except there&#39;s a [bug right now](https://github.com/metaeducation/ren-c/issues/874) in Ren-C&#39;s /PART I found as a result of trying this out.  The specializing and adapting are fine, though!)*

So really the question is just what you&#39;d call FIND-XXX.  FIND-AT ?  FIND-START ?</description>
    
    <lastBuildDate>Sat, 20 Oct 2018 19:10:01 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/re-purposing-find-match-to-be-compatible-with-match/870.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Re-purposing FIND/MATCH to be compatible with MATCH</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The historical /MATCH refinement to FIND is somewhat confusing.  It basically requires the find to either occur specifically at the current position or not, and then returns the tail.</p>
<pre><code>r3-alpha&gt; find/match "abcd" "ab"
== "cd"

r3-alpha&gt; find/match "abcd" "bc"
== none
</code></pre>
<p>Meanwhile, there is now a <a href="https://trello.com/c/LR9PzUS3/125-match-filters-values-based-on-type-tests-or-arbitrary-function-filters" rel="nofollow noopener">MATCH native</a> which is used to do some type and typeset checking, not to mention running arbitrary functions as tests:</p>
<pre><code>ren-c&gt; match [integer! string!] "hello"
== "hello"

ren-c&gt; match [integer! string!] &lt;some-tag&gt;
;-- null

ren-c&gt; match :even? 10
== 10

ren-c&gt; match :even? 13
;-- null
</code></pre>
<p>This makes one wonder if it might be more useful if /MATCH was the way of telling FIND not to use the argument as a literal thing to search for, but rather use as the same kind of rule that MATCH would use:</p>
<pre><code>&gt;&gt; find/match [10 20 13 40] :odd?
== [13 40]

&gt;&gt; find/match [10 20 "hello" 40] [string! tag!]
== ["hello" 40]
</code></pre>
<p>This would help address an ambiguity that today's FIND has, where if you pass it a datatype or typeset it very ambiguously will search either for the datatype, or for an instance of that datatype:</p>
<pre><code>r3-alpha&gt; find reduce [integer! string! tag!] string!
== [string! tag!]

r3-alpha&gt; find reduce ["hello" integer! string! tag!] string!     
== ["hello" integer! string! tag!]
</code></pre>
<p>Putting the second behavior under /MATCH would clean that up, as well as bring more functionality to the table.</p>
<h2>/MATCH sounds good, so what should the old behavior be called?</h2>
<p>FIND has too many refinements as it is, some of which need to be done as specializations.  The old behavior  of FIND/MATCH is really just FIND/PART/TAIL, where the /PART limit only considers the very head to be a candidate.</p>
<p>You can actually make such a function by ADAPTting FIND such that it fills in the /PART to be exactly one past the input range.  Then take the resulting function and specialize out the /PART refinement so it isn't shown on the interface (e.g. doesn't appear in HELP), and add in /TAIL as being used.</p>
<pre><code>find-xxx: specialize (adapt 'find [
    part: true
    limit: next series
])[
    part: false
    tail: true
]
</code></pre>
<p><em>(Note: this should work today, except there's a <a href="https://github.com/metaeducation/ren-c/issues/874" rel="nofollow noopener">bug right now</a> in Ren-C's /PART I found as a result of trying this out.  The specializing and adapting are fine, though!)</em></p>
<p>So really the question is just what you'd call FIND-XXX.  FIND-AT ?  FIND-START ?</p>
          <p><a href="https://forum.rebol.info/t/re-purposing-find-match-to-be-compatible-with-match/870/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/re-purposing-find-match-to-be-compatible-with-match/870/1</link>
        <pubDate>Sat, 20 Oct 2018 19:10:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-870-1</guid>
        <source url="https://forum.rebol.info/t/re-purposing-find-match-to-be-compatible-with-match/870.rss">Re-purposing FIND/MATCH to be compatible with MATCH</source>
      </item>
  </channel>
</rss>

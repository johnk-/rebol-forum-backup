<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The PARSE of /PROGRESS</title>
    <link>https://forum.rebol.info/t/the-parse-of-progress/1349</link>
    <description>&gt; **May 2021 UPDATE:** This issue is now believed to be resolved in a much neater way, without needing to resort to multiple returns.  **[See the PARSE vs. PARSE* vs PARSE? strategy.](https://forum.rebol.info/t/uparse-return-subtleties/1589/2)**  This post is for historical reference.

There has been a lot of fiddling over time with PARSE&#39;s return value.  :violin: 

In order to make it play nicely with ELSE and THEN, a failed parse should return NULL.  But a successful parse could return many things.

1. Just returning #[true] makes the output of PARSE easier to read in tutorials.  This isn&#39;t overwhelmingly important, given the pervasiveness of DID as the programming analogue to NOT.

2. Returning the input value makes it easy to use PARSE as a validator for data.

       if parse data [integer! integer! end] [  ; exactly two integers
          call-routine data
       ] else [fail]

       call-routine (parse data [integer! integer! end] else [fail])  ; nicer

       call-routine non null parse data [integer! integer! end]  ; even nicer :-)

3. Returning how far a successful parse got is strictly more informative, as the information on a partial process is difficult to reconstruct otherwise.

It seemed that #3 had won out, due to its flexibility.  But that required a change to the semantics of PARSE to not automatically fail on partial inputs.  This made it necessary to stick an END on every set of parse rules to get legacy compatibility.

But the need to tack on the END made some things seem less concise and elegant.  (Consider the &quot;END&quot; in the above example on matching two integers.)  And surveying how other languages do &quot;destructuring&quot; made me feel that PARSE was the best answer in the Redbol world.  When you&#39;re matching a structure against `[tag! tag!]` it feels somewhat wrong for `[&lt;x&gt; &lt;y&gt; &lt;z&gt;]` to &quot;match&quot; when it seems &quot;over the limit&quot;.

## Best of All Worlds: /PROGRESS Multi-Return Output

Why choose?  We have a very concise way of asking for the parse position now, and the very act of *requesting* a parse position could be enough to remove the requirement of reaching END.

    &gt;&gt; parse &quot;abc&quot; [&quot;ab&quot;]
    ; null

    &gt;&gt; [original progress]: parse &quot;abc&quot; [&quot;ab&quot;]
    == &quot;abc&quot;

    &gt;&gt; progress
    == &quot;c&quot;

You don&#39;t need to name a variable for the original value if you don&#39;t want to.  **`[_ progress]: ...`** and I&#39;m going to make it so that multi-returns let you pick what the overall evaluation result is if you don&#39;t want it to be the main one.  Maybe you circle it, e.g. **`[_ (pos)]: ...`**?

You&#39;ll be able to avoid naming a result...[I&#39;m still working through it](https://forum.rebol.info/t/sending-values-into-space/1347), but you could get a shorthand like:

    &gt;&gt; [_ (#)]: parse &quot;abc&quot; [&quot;ab&quot;]
    == &quot;c&quot;

Circling might not be the best plan, **but the overall idea is pretty slick.**  The real &quot;a ha&quot; of this is the idea that PARSE can implicitly switch into a mode that doesn&#39;t require reaching the end by the mere act of requesting a result for how much progress it made.</description>
    
    <lastBuildDate>Sun, 02 May 2021 23:46:36 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/the-parse-of-progress/1349.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The PARSE of /PROGRESS</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p><strong>May 2021 UPDATE:</strong> This issue is now believed to be resolved in a much neater way, without needing to resort to multiple returns.  <strong><a href="https://forum.rebol.info/t/uparse-return-subtleties/1589/2">See the PARSE vs. PARSE* vs PARSE? strategy.</a></strong>  This post is for historical reference.</p>
</blockquote>
<p>There has been a lot of fiddling over time with PARSE's return value.  <img src="https://forum.rebol.info/images/emoji/twitter/violin.png?v=9" title=":violin:" class="emoji" alt=":violin:"></p>
<p>In order to make it play nicely with ELSE and THEN, a failed parse should return NULL.  But a successful parse could return many things.</p>
<ol>
<li>
<p>Just returning #[true] makes the output of PARSE easier to read in tutorials.  This isn't overwhelmingly important, given the pervasiveness of DID as the programming analogue to NOT.</p>
</li>
<li>
<p>Returning the input value makes it easy to use PARSE as a validator for data.</p>
<pre><code>if parse data [integer! integer! end] [  ; exactly two integers
   call-routine data
] else [fail]

call-routine (parse data [integer! integer! end] else [fail])  ; nicer

call-routine non null parse data [integer! integer! end]  ; even nicer :-)
</code></pre>
</li>
<li>
<p>Returning how far a successful parse got is strictly more informative, as the information on a partial process is difficult to reconstruct otherwise.</p>
</li>
</ol>
<p>It seemed that <span class="hashtag">#3</span> had won out, due to its flexibility.  But that required a change to the semantics of PARSE to not automatically fail on partial inputs.  This made it necessary to stick an END on every set of parse rules to get legacy compatibility.</p>
<p>But the need to tack on the END made some things seem less concise and elegant.  (Consider the "END" in the above example on matching two integers.)  And surveying how other languages do "destructuring" made me feel that PARSE was the best answer in the Redbol world.  When you're matching a structure against <code>[tag! tag!]</code> it feels somewhat wrong for <code>[&lt;x&gt; &lt;y&gt; &lt;z&gt;]</code> to "match" when it seems "over the limit".</p>
<h2>Best of All Worlds: /PROGRESS Multi-Return Output</h2>
<p>Why choose?  We have a very concise way of asking for the parse position now, and the very act of <em>requesting</em> a parse position could be enough to remove the requirement of reaching END.</p>
<pre><code>&gt;&gt; parse "abc" ["ab"]
; null

&gt;&gt; [original progress]: parse "abc" ["ab"]
== "abc"

&gt;&gt; progress
== "c"
</code></pre>
<p>You don't need to name a variable for the original value if you don't want to.  <strong><code>[_ progress]: ...</code></strong> and I'm going to make it so that multi-returns let you pick what the overall evaluation result is if you don't want it to be the main one.  Maybe you circle it, e.g. <strong><code>[_ (pos)]: ...</code></strong>?</p>
<p>You'll be able to avoid naming a result...<a href="https://forum.rebol.info/t/sending-values-into-space/1347">I'm still working through it</a>, but you could get a shorthand like:</p>
<pre><code>&gt;&gt; [_ (#)]: parse "abc" ["ab"]
== "c"
</code></pre>
<p>Circling might not be the best plan, <strong>but the overall idea is pretty slick.</strong>  The real "a ha" of this is the idea that PARSE can implicitly switch into a mode that doesn't require reaching the end by the mere act of requesting a result for how much progress it made.</p>
          <p><a href="https://forum.rebol.info/t/the-parse-of-progress/1349/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-parse-of-progress/1349/1</link>
        <pubDate>Mon, 28 Sep 2020 17:02:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1349-1</guid>
        <source url="https://forum.rebol.info/t/the-parse-of-progress/1349.rss">The PARSE of /PROGRESS</source>
      </item>
  </channel>
</rss>

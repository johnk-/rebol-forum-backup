<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Generalizing Unwinding in UPARSE</title>
    <link>https://forum.rebol.info/t/generalizing-unwinding-in-uparse/1637</link>
    <description>So the COLLECT keyword in Red is--in @rgchris&#39;s opinion (and mine) basically useless.  Because backtracking does not undo the things you&#39;ve collected.

    red&gt;&gt; parse &quot;ac&quot; [collect [
        &quot;a&quot; keep (&lt;a1&gt;) &quot;b&quot; keep (&lt;b&gt;)
        | &quot;a&quot; keep (&lt;a2&gt;) &quot;c&quot; keep (&lt;c&gt;)
    ]]
    == [&lt;a1&gt; &lt;a2&gt; &lt;c&gt;]

It got half way through the first sequence...matching an &quot;a&quot; and doing a keep, then realized it didn&#39;t match the &quot;b&quot;.  So it rolled back to the start and again matched an &quot;a&quot; and did another keep, then a &quot;c&quot; and did a keep.

It&#39;s far more useful if bookkeeping is done to backtrack what&#39;s being collected, as Ren-C does.

    ren-c&gt;&gt; parse &quot;ac&quot; [collect [
        &quot;a&quot; keep (&lt;a1&gt;) &quot;b&quot; keep (&lt;b&gt;)
        | &quot;a&quot; keep (&lt;a2&gt;) &quot;c&quot; keep (&lt;c&gt;)
    ]]
    == [&lt;a2&gt; &lt;c&gt;]

## How Does Red Justify The Non-Rollback Behavior?

Maybe @rgchris can chime in here to say more precisely or find some direct quotes.  But I believe the general justification is that they think of rollback as a &quot;new&quot; behavior that swims upstream from the fact that &quot;code with side effects isn&#39;t unwound in general&quot;.

    all-redbols&gt;&gt; parse &quot;ac&quot; [collect [
        &quot;a&quot; (print &quot;a1&quot;) &quot;b&quot; (print &quot;b&quot;)
       | &quot;a&quot; (print &quot;a2&quot;) &quot;c&quot; (print &quot;c&quot;)
    ]]
    a1
    a2
    c

Nothing rolls back arbitrary code in groups...and Ren-C is not planning on being any different.

In this point of view, they would say that in the implementation of KEEP they are running an APPEND.  They conclude it&#39;s thus reasonable to say that the user experience should correspond to not wanting there to be too much of a gap from the implementation.  If there is, it would mean adding more code/design...

**I call that the tail wagging the dog.**

Anyway, this introduction aside... let&#39;s get on to the main part of what I wanted to write about.

## The Mechanics Behind Rollback are Non-Trivial

One thing about adding something like COLLECT into the UPARSE combinator model is that it&#39;s the sort of thing that winds up having to know about what happens with the relationship of every other parser.

Imagine you have something like an EITHER combinator that will succeed if either of two rules succeed.  This would be the ideal behavior.

    &gt;&gt; uparse &quot;aaa&quot; [collect [either 2 keep [&quot;a&quot; &quot;a&quot;] 3 keep [&quot;a&quot;]]]
    == [&quot;a&quot; &quot;a&quot; &quot;a&quot;]

Remember that a BLOCK! rule evaluates to its last result, and TEXT! rules against strings evaluate to the rule itself, so this is the expected answer.

I wrote this example above the way I did instead of putting the two arguments to this hypothetical EITHER in BLOCK!s:

    &gt;&gt; uparse &quot;aaa&quot; [collect [either [2 keep [&quot;a&quot; &quot;a&quot;]] 3 [keep [&quot;a&quot;]]]]
    == [&quot;a&quot; &quot;a&quot; &quot;a&quot;]

Because if I did it that way, then you might argue that the only place COLLECT needs to get its hooks in would be BLOCK! combinators.  But we are saying part of the interesting natural-language property of PARSE is to (correctly) manage the implicit grammar...it&#39;s foundational to Rebol philosophy to not require the blocks (though to offer the option if the grouping makes it more clear).

So when I wrote it without the blocks it was to demonstrate a point.  Accomplishing the rollback conceptually needs to have &quot;hooks into the EITHER&quot;.  It needs to know that although the overall EITHER succeeded it failed in part of its implementation.  One of the 2 attempted keeps from the first rule succeeded but that turned out not be enough.

**COLLECT must somehow thus get a notice on every combinator&#39;s call...effectively before to record the high water mark of the collection... and then after to know if it failed, to roll back.**

## This Might Sound Familiar...like an ENCLOSE

If you recall how ENCLOSE works.

    hooked-append: enclose :append func [f [frame!]] [
        print [&quot;Hey, I know you&#39;re trying to append a&quot; f.value]
        print [&quot;That append only happens if I DO this frame...&quot;]
        let result: do f
        print [&quot;I did the frame and got back&quot; mold result]
        print [&quot;But I&#39;m returning something else!&quot;]
        return &lt;you got hooked!&gt;
    ]

It&#39;s pretty nifty:

    &gt;&gt; data: [a b c]
    == [a b c]

    &gt;&gt; hooked-append data 10
    Hey, I know you&#39;re trying to append a 10
    That append only happens if I DO this frame...
    I did the frame and got back [a b c 10]
    But I&#39;m returning something else!
    == &lt;you got hooked!&gt;

    &gt;&gt; data
    == [a b c 10]

**This rather directly corresponds to what COLLECT needs, as a service.**  Except instead of enclosing one function it&#39;s adding some code to a hook in every combinator.

I&#39;m going to have a bit more to say about this as I go.  But I had noticed that in my first crack at thinking about where to put the rollback I&#39;d made the mistake of putting it in the BLOCK! combinator.  So I was motivated to write up a good example like the EITHER to show why that wasn&#39;t correct.

Also any chance to talk about Red as being (intellectually) lazy and anti-intelligent-design is fun.  :-P</description>
    
    <lastBuildDate>Thu, 29 Jul 2021 06:41:24 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/generalizing-unwinding-in-uparse/1637.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Generalizing Unwinding in UPARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>4 posts were split to a new topic: <a href="/t/getting-hooks-into-events-during-parse/1640">Getting Hooks Into "Events" during PARSE</a></p>
          <p><a href="https://forum.rebol.info/t/generalizing-unwinding-in-uparse/1637/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/generalizing-unwinding-in-uparse/1637/4</link>
        <pubDate>Thu, 29 Jul 2021 06:39:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1637-4</guid>
        <source url="https://forum.rebol.info/t/generalizing-unwinding-in-uparse/1637.rss">Generalizing Unwinding in UPARSE</source>
      </item>
      <item>
        <title>Generalizing Unwinding in UPARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So I thought I might play a little bit of a devil's advocate on what I say below:</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1637">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>&gt;&gt; uparse "aaa" [collect [either 2 keep ["a" "a"] 3 keep ["a"]]]
== ["a" "a" "a"]
</code></pre>
<p>Remember that a BLOCK! rule evaluates to its last result, and TEXT! rules against strings evaluate to the rule itself, so this is the expected answer.</p>
<p>I wrote this example above the way I did instead of putting the two arguments to this hypothetical EITHER in BLOCK!s:</p>
<pre><code>&gt;&gt; uparse "aaa" [collect [either [2 keep ["a" "a"]] 3 [keep ["a"]]]]
== ["a" "a" "a"]
</code></pre>
<p>Because if I did it that way, then you might argue that the only place COLLECT needs to get its hooks in would be BLOCK! combinators. But we are saying part of the interesting natural-language property of PARSE is to (correctly) manage the implicit grammar...it's foundational to Rebol philosophy to not require the blocks (though to offer the option if the grouping makes it more clear).</p>
</blockquote>
</aside>
<p>If we make an analogy with a plain EITHER in historical Rebol, the absence or presence of blocks <em>does</em> make a difference.</p>
<p>Without blocks:</p>
<pre><code>rebol2&gt;&gt; truebranch: func [] [print "running truebranch" [&lt;true&gt;]]

rebol2&gt;&gt; falsebranch: func [] [print "running falsebranch" [&lt;false&gt;]]

rebol2&gt;&gt; either false truebranch falsebranch
running truebranch
running falsebranch
== &lt;false&gt;
</code></pre>
<p>With blocks:</p>
<pre><code>rebol2&gt;&gt; either false [truebranch] [falsebranch]
running falsebranch
== [&lt;false&gt;]
</code></pre>
<p>Though that changes the result.  Hence perhaps blocks aren't the best analogy though, as really it's GROUP!s in plain Rebol that line up with how PARSE thinks of BLOCK!:</p>
<pre><code>rebol2&gt;&gt; either false (truebranch) (falsebranch)
running truebranch
running falsebranch
== &lt;false&gt;
</code></pre>
<p>Either way, weird early-morning not-quite up-yet thought is: <strong>might it be not entirely un-Rebol-like to say that you only get the rollback from BLOCK! when alternates fail?</strong></p>
<p>This would give you the power to introduce rollback whenever you found you weren't getting it where you needed it.  Maybe in the search for overall reduction of systemic complexity, maybe I was right when I wrote it the first time?  :-/</p>
          <p><a href="https://forum.rebol.info/t/generalizing-unwinding-in-uparse/1637/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/generalizing-unwinding-in-uparse/1637/5</link>
        <pubDate>Wed, 28 Jul 2021 10:01:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1637-5</guid>
        <source url="https://forum.rebol.info/t/generalizing-unwinding-in-uparse/1637.rss">Generalizing Unwinding in UPARSE</source>
      </item>
      <item>
        <title>Generalizing Unwinding in UPARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="2" data-topic="1637">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It's always helpful to pick simple examples,</p>
<p><em>Neither parser failed, but only one was deemed the choice for ultimate success.</em></p>
</blockquote>
</aside>
<p>I could have mentioned an even simpler case than BLOCK! or my fictional MAXMATCH.  What about plain old AHEAD?</p>
<pre><code>&gt;&gt; uparse "aaa" [collect [ahead ["a" keep (&lt;1&gt;)] 3 "a" keep (&lt;2&gt;)]]
== [&lt;1&gt; &lt;2&gt;]  ; or just [&lt;1&gt;] ?
</code></pre>
<ul>
<li>The AHEAD matched the <code>["a" keep (&lt;1&gt;)]</code> rule, and made a note that it succeeded.</li>
<li>That rule's advancement was not used to advance...the parse position was "unwound" back to the position before the AHEAD.</li>
<li>All 3 "a" were consumed by the ensuing rule of <code>3 "a" keep (&lt;2&gt;)</code>
</li>
</ul>
<p>Philosophical question: if the positional advancement was unwound, why wouldn't the KEEPs be unwound too?</p>
<p>Again, it seems tempting to just say <em>"all rules that succeed don't rewind their KEEPs"</em>, but BLOCK! rules show that doesn't work.  They roll back on successful rules whose entire alternate clause did not succeed.</p>
<h2>What About a "virtual" Sub-Sequence Combinator?</h2>
<p>We <em>could</em> say that how BLOCK! combinators avoid the problem is to delegate to sub-combinators.</p>
<p>So if your input is <strong>"aa"</strong> and the BLOCK! combinator looks like:</p>
<pre><code> [keep "a" keep "a" | keep "a" keep "b"]
</code></pre>
<p>If we say BLOCK! calls 4 KEEP combinators... and the combinator hook is the only rollback, there's not enough information to roll back.  The first keep "a" succeeds and the combinator system can't realize that was part of an ultimate failure, because the overall expression succeded in the end.</p>
<p>-or- BLOCK! could break itself down to call 2 SUBSEQUENCE combinators that it synthesizes.  Each of which takes a rule BLOCK! and keeps going until it hits a | or end of BLOCK".</p>
<p>This way, the generalized hook for rollback could still be at the combinator level.  But it would restrict rollback to a simple sequence of ordered success and failure.</p>
<p><strong>This would address the issue of the BLOCK! combinator; because it makes its decisions on success from left to right only.  But it would not permit the theoretical MAXMATCH that does "rollback".</strong></p>
<h2>This Is Why Pure FP People Call Redbols Fundamentally  Broken</h2>
<p>Haskell people would cite this as the problem with shortcuts that come from implicit parameterization and side-effects <em>(why Python, Ruby, JavaScript etc. are dead-ends too...none of them would bother to remark much on Redbols because they would feel them disproven from seeing any single point of them which seem "nothing new under the sun")</em></p>
<p>When I say "shortcut" I mean at the moment a combinator returns two things: the synthesized value and the remaining amount of input.  And COLLECT is trying to sneak past this by not making what a rule collected a third return result.  If every combinator had to "pipe" which parts of the collected results of the parsers it had called up to its own return of what it collected...then (for instance) either decision for MAXMATCH would be feasible.</p>
<ul>
<li>
<p><strong>I think this third result is the only way to go, but what bothers me is having it so specific to the COLLECT feature.</strong></p>
</li>
<li>
<p><strong>I don't want simple combinators to get any harder to write than they are now, so if the third return result is not requested then maybe there's something we can do automatically.</strong></p>
</li>
</ul>
<p>Tough to think about.  Let's think about WHILE (simplified slightly, as my point is "I want things to be simple"):</p>
<pre><code>while: combinator [
    {Any number of matches (including 0)}
    return: "Result of last successful match, or NULL if no matches"
        [&lt;opt&gt; any-value!]
    parser [action!]
    &lt;local&gt; last-result result pos
][
    last-result: '~void~
    cycle [
        [result pos]: ^(parser input) else [
            set remainder input  ; overall WHILE never fails
            return unmeta last-result
        ]
        last-result: result
        input: pos
    ]
]
</code></pre>
<p>That doesn't look so bad.</p>
<p>But can we exempt it from having to explicitly say that its collect products are going to come from its parsers as called in sequence?  Should we?  If not, we wind up with:</p>
<pre><code>while: combinator [
    {Any number of matches (including 0)}
    return: "Result of last successful match, or NULL if no matches"
        [&lt;opt&gt; any-value!]
    parser [action!]
    &lt;local&gt; last-result result pos total-collected parser-collected
][
    last-result: '~void~
    total-collected: copy []
    cycle [
        [result pos parser-collected]: ^(parser input) else [
            set remainder input  ; overall WHILE never fails
            set collected total-collected
            return unmeta last-result
        ]
        last-result: result
        append total-collected parser-collected
        input: pos
    ]
]
</code></pre>
<p>This seems a slippery slope.  <strong>It felt like WHILE said everything it had to say in the first version, this junks it up.</strong>  And there's also GATHER and EMIT.</p>
<p>How might WHILE say <em>"I'm not like the BLOCK! combinator, every failing parser I call I want to drop their aggregate results"</em>?  One way is to show a lack of interest in the collection results of parsers.  <em>If you don't ask, you don't care, which means you want collection to be a pure by-product of success or failure.</em></p>
<pre><code>[result pos]: ^(parser input)  ; I don't care

[result pos parser-collected]: ^(parser input)  ; I care
</code></pre>
<p>It would certainly be possible to notice if a combinator never asked for a collection result...and if it did not, assume all failing parsers it called contributed nothing...and all successful parsers it called would keep their collection results in the order they were called.  I didn't say easy, just possible.</p>
<h2>Tempting to Make the BLOCK! Combinator Special</h2>
<p>My guilty thought is to say that BLOCK! isn't actually a combinator, BLOCK! is an immutable part of UPARSE and it is paired with the COMBINATOR abstraction itself.</p>
<p><strong>This would mean the only place successful parsers were rolled back would be if they were part of the sequencing operation implicit in BLOCK!</strong></p>
<p>Offhand I'm not thrilled with the idea.  I like generalizing BLOCK! as "just another combinator".</p>
<p>I've been in vacation mode for a while but intend to get back to development mode, so, hope to have an answer to this soon.</p>
          <p><a href="https://forum.rebol.info/t/generalizing-unwinding-in-uparse/1637/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/generalizing-unwinding-in-uparse/1637/3</link>
        <pubDate>Tue, 27 Jul 2021 05:59:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1637-3</guid>
        <source url="https://forum.rebol.info/t/generalizing-unwinding-in-uparse/1637.rss">Generalizing Unwinding in UPARSE</source>
      </item>
      <item>
        <title>Generalizing Unwinding in UPARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1637">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I had noticed that in my first crack at thinking about where to put the rollback I'd made the mistake of putting it in the BLOCK! combinator. So I was motivated to write up a good example like the EITHER to show why that wasn't correct.</p>
</blockquote>
</aside>
<p>I made the change I discussed to put the rollback mechanics in the combinator hook.  And that is good for the reasons I mention...they have to be there.</p>
<p>But when I took the code out of the BLOCK! combinator I noticed a problem.</p>
<pre><code>&gt;&gt; uparse "ab" [collect [keep "a" keep "a" | keep "a" keep "b"]]
== ["a" "a" "b"]
</code></pre>
<p>The bad behavior I was complaining about appeared when individual parser success/failure was used to drive the unwinding.</p>
<p>Looking into why...this made me realize a problem with what I said above.</p>
<p><strong>What do you do when some parsers called by a combinator succeed...but those particular successful parses aren't deemed to contribute to what the calling combinator <em>ultimately</em> considered success?</strong></p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/thinking.png?v=9" title=":thinking:" class="emoji only-emoji" alt=":thinking:"></p>
<p>It's always helpful to pick simple examples, so let's say we wanted a parser MAXMATCH which will run two parsers and return the synthesized value of whichever rule got the furthest.</p>
<pre><code>&gt;&gt; uparse "abab" [collect [
     maxmatch ["aba" keep (3)] [some "ab" keep (4)]
     to end
]]
</code></pre>
<p>We can tell that <code>some "ab"</code> will match all 4 characters, while <code>"aba"</code> will only match 3 of them.  So the second rule "wins".</p>
<p><strong>But should that return [4] or [3 4]?</strong>  <em>Neither parser failed, but only one was deemed the choice for ultimate success.</em></p>
<p>You might suggest there's not a precise "right answer" to this question.  MAXMATCH could be done one way or the other.</p>
<p>In the implementation--however--not all things are equal.  e.g. if you are collecting in a straight buffer--appending to a block as you go--then unwinding the <em>last</em> thing is easier than unwinding an arbitrary thing.</p>
<p><strong>In other words, if the COLLECT process picks up [3] then goes to [3 4] it's easier to drop back to [3] than it is to drop to [4].</strong></p>
<p>This isn't to say it's not possible to have a general mechanism in which a combinator could receive back some "token" from a combinator, and then "reject" the token if it wanted to say that even though the component combinator itself succeeded that any contributions it made to COLLECT would be inapplicable.  It just means you can't do this with a simple stack-based collection implementation.</p>
<p>If BLOCK! itself is a combinator, though, none of this is academic.  It's a real question of a combinator needing to issue decisions that even successful parsers might need to have their contributions rolled back based on something else that happens.</p>
<p>Semantically it's something to chew on, and as <a class="mention" href="/u/blackattr">@BlackATTR</a> can attest it took me a bit down the other day.  <em>(I'm at his house, watching his dogs.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">  <img src="https://forum.rebol.info/images/emoji/twitter/dog.png?v=9" title=":dog:" class="emoji" alt=":dog:"> <img src="https://forum.rebol.info/images/emoji/twitter/hotdog.png?v=9" title=":hotdog:" class="emoji" alt=":hotdog:"> )</em></p>
          <p><a href="https://forum.rebol.info/t/generalizing-unwinding-in-uparse/1637/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/generalizing-unwinding-in-uparse/1637/2</link>
        <pubDate>Wed, 21 Jul 2021 10:17:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1637-2</guid>
        <source url="https://forum.rebol.info/t/generalizing-unwinding-in-uparse/1637.rss">Generalizing Unwinding in UPARSE</source>
      </item>
      <item>
        <title>Generalizing Unwinding in UPARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So the COLLECT keyword in Red is--in <a class="mention" href="/u/rgchris">@rgchris</a>'s opinion (and mine) basically useless.  Because backtracking does not undo the things you've collected.</p>
<pre><code>red&gt;&gt; parse "ac" [collect [
    "a" keep (&lt;a1&gt;) "b" keep (&lt;b&gt;)
    | "a" keep (&lt;a2&gt;) "c" keep (&lt;c&gt;)
]]
== [&lt;a1&gt; &lt;a2&gt; &lt;c&gt;]
</code></pre>
<p>It got half way through the first sequence...matching an "a" and doing a keep, then realized it didn't match the "b".  So it rolled back to the start and again matched an "a" and did another keep, then a "c" and did a keep.</p>
<p>It's far more useful if bookkeeping is done to backtrack what's being collected, as Ren-C does.</p>
<pre><code>ren-c&gt;&gt; parse "ac" [collect [
    "a" keep (&lt;a1&gt;) "b" keep (&lt;b&gt;)
    | "a" keep (&lt;a2&gt;) "c" keep (&lt;c&gt;)
]]
== [&lt;a2&gt; &lt;c&gt;]
</code></pre>
<h2>How Does Red Justify The Non-Rollback Behavior?</h2>
<p>Maybe <a class="mention" href="/u/rgchris">@rgchris</a> can chime in here to say more precisely or find some direct quotes.  But I believe the general justification is that they think of rollback as a "new" behavior that swims upstream from the fact that "code with side effects isn't unwound in general".</p>
<pre><code>all-redbols&gt;&gt; parse "ac" [collect [
    "a" (print "a1") "b" (print "b")
   | "a" (print "a2") "c" (print "c")
]]
a1
a2
c
</code></pre>
<p>Nothing rolls back arbitrary code in groups...and Ren-C is not planning on being any different.</p>
<p>In this point of view, they would say that in the implementation of KEEP they are running an APPEND.  They conclude it's thus reasonable to say that the user experience should correspond to not wanting there to be too much of a gap from the implementation.  If there is, it would mean adding more code/design...</p>
<p><strong>I call that the tail wagging the dog.</strong></p>
<p>Anyway, this introduction aside... let's get on to the main part of what I wanted to write about.</p>
<h2>The Mechanics Behind Rollback are Non-Trivial</h2>
<p>One thing about adding something like COLLECT into the UPARSE combinator model is that it's the sort of thing that winds up having to know about what happens with the relationship of every other parser.</p>
<p>Imagine you have something like an EITHER combinator that will succeed if either of two rules succeed.  This would be the ideal behavior.</p>
<pre><code>&gt;&gt; uparse "aaa" [collect [either 2 keep ["a" "a"] 3 keep ["a"]]]
== ["a" "a" "a"]
</code></pre>
<p>Remember that a BLOCK! rule evaluates to its last result, and TEXT! rules against strings evaluate to the rule itself, so this is the expected answer.</p>
<p>I wrote this example above the way I did instead of putting the two arguments to this hypothetical EITHER in BLOCK!s:</p>
<pre><code>&gt;&gt; uparse "aaa" [collect [either [2 keep ["a" "a"]] 3 [keep ["a"]]]]
== ["a" "a" "a"]
</code></pre>
<p>Because if I did it that way, then you might argue that the only place COLLECT needs to get its hooks in would be BLOCK! combinators.  But we are saying part of the interesting natural-language property of PARSE is to (correctly) manage the implicit grammar...it's foundational to Rebol philosophy to not require the blocks (though to offer the option if the grouping makes it more clear).</p>
<p>So when I wrote it without the blocks it was to demonstrate a point.  Accomplishing the rollback conceptually needs to have "hooks into the EITHER".  It needs to know that although the overall EITHER succeeded it failed in part of its implementation.  One of the 2 attempted keeps from the first rule succeeded but that turned out not be enough.</p>
<p><strong>COLLECT must somehow thus get a notice on every combinator's call...effectively before to record the high water mark of the collection... and then after to know if it failed, to roll back.</strong></p>
<h2>This Might Sound Familiar...like an ENCLOSE</h2>
<p>If you recall how ENCLOSE works.</p>
<pre><code>hooked-append: enclose :append func [f [frame!]] [
    print ["Hey, I know you're trying to append a" f.value]
    print ["That append only happens if I DO this frame..."]
    let result: do f
    print ["I did the frame and got back" mold result]
    print ["But I'm returning something else!"]
    return &lt;you got hooked!&gt;
]
</code></pre>
<p>It's pretty nifty:</p>
<pre><code>&gt;&gt; data: [a b c]
== [a b c]

&gt;&gt; hooked-append data 10
Hey, I know you're trying to append a 10
That append only happens if I DO this frame...
I did the frame and got back [a b c 10]
But I'm returning something else!
== &lt;you got hooked!&gt;

&gt;&gt; data
== [a b c 10]
</code></pre>
<p><strong>This rather directly corresponds to what COLLECT needs, as a service.</strong>  Except instead of enclosing one function it's adding some code to a hook in every combinator.</p>
<p>I'm going to have a bit more to say about this as I go.  But I had noticed that in my first crack at thinking about where to put the rollback I'd made the mistake of putting it in the BLOCK! combinator.  So I was motivated to write up a good example like the EITHER to show why that wasn't correct.</p>
<p>Also any chance to talk about Red as being (intellectually) lazy and anti-intelligent-design is fun.  <img src="https://forum.rebol.info/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          <p><a href="https://forum.rebol.info/t/generalizing-unwinding-in-uparse/1637/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/generalizing-unwinding-in-uparse/1637/1</link>
        <pubDate>Mon, 19 Jul 2021 15:09:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1637-1</guid>
        <source url="https://forum.rebol.info/t/generalizing-unwinding-in-uparse/1637.rss">Generalizing Unwinding in UPARSE</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What Should the Experience of Building Rebol Be Like?</title>
    <link>https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334</link>
    <description>When R3-Alpha was open-sourced, the make directory contained [one GNU makefile](https://github.com/rebol/rebol/tree/c99039c37d7bbff8b5f901c593f5c3e4398b84c4/make), and Carl gave these instructions:

&gt; About the Makefile:
&gt; 
&gt; You might notice that the makefile is a bit old-fashioned. That&#39;s because I still support REBOL on some very old systems that don&#39;t offer newer makefile features. So, please keep that in mind and stick with this simple format.
&gt;
&gt; Also, the makefile is built by REBOL. Typing &quot;make make&quot; will rebuild it, and you can also select a different platform target the same way by providing the REBOL platform identifiers (the last two parts of the version string).
&gt;
&gt; Build Instructions:
&gt;
&gt; Parts of REBOL are built by REBOL. So, to build it, you&#39;ll need to download a running binary into the local make directory. Call it r3-make.
&gt;
&gt; The build happens in the make directory. It will create an obj sub-dir for storing the object files. I prefer this over mixing the source and object files into the same directory.
&gt;
&gt; The biggest step is to do the &quot;make prep&quot; which will use REBOL to configure and build a number of important C header files.
&gt;
&gt; If you are building for a new platform that has no existing REBOL, you can use &quot;make prep&quot; to build all the files you need on an existing platform and copy them to the new platform.
&gt;
&gt; After the prep, just run &quot;make&quot; and the rest of the system will build.

One might ask: if the makefile is built by Rebol, *why would it be committed in the repository*?  What platform is this makefile for?  What happens if you just say `make`?

The answer is that the makefile was generated for [32-bit Linux (0.4.4)](https://github.com/rebol/rebol/blob/c99039c37d7bbff8b5f901c593f5c3e4398b84c4/make/makefile#L32), so it was produced by running the command `r3-make %../src/tools/make-make.r OS_ID=0.4.4`.  However, it contains a trick: it has a target itself called &quot;make&quot; such that once generated, running `make make OS_ID=0.X.Y` will *overwrite the makefile itself* with an updated version for that OS.

We found this annoying, because the committed `makefile` would appear dirty in version control if you are using another system.  And also, one could streamline this process a bit for the average person if instead of them having to go [look at the %systems.r table and find their platform](https://github.com/rebol/rebol/blob/c99039c37d7bbff8b5f901c593f5c3e4398b84c4/src/tools/systems.r#L21), if the `r3-make` could inspect its own `system/version` and *assume* you wanted to build that same OS_ID.

And so [%make/makefile.boot](https://github.com/metaeducation/ren-c/blob/e6cab210d6355f50b36fe6e15acc1f5859a95c30/make/makefile.boot) was born.  It was a committed file which saved you all the trouble of typing `./r3-make ../src/tools/make-make.r` followed by `make r3`.  Instead you could now type `make -f makefile.boot`.

If it sounds stupid, it kind of is.  But it wasn&#39;t rocket science to write, and you could also think of it as a kind of an interactive README file...if you didn&#39;t have something you needed, it could tell you.  And given that the build process was already dependent on you having GNU make, it could also catch you on that &quot;meta-step&quot; of needing make in the first place.

**But we live in a different world now.**  You no longer need GNU make to build Ren-C.  You can still target it, but you can also generate files for Microsoft&#39;s NMAKE, or a Visual Studio project file.  And you can even forego the idea of a makefile altogether--instead having the Rebol executable drive the build process using `CALL` on the C compiler directly.  So it&#39;s time to scrap %makefile.boot and let a Rebol script be the entry point to the process.

I&#39;m going to be talking about platforms, building, extensions in some more technical posts.  But this is more a philosophy post, or user-experience question.  Maybe any points people want to raise about building a system where it&#39;s been done right?

One thing we definitely should make easier is bootstrapping to new platforms.  The generated products of a Rebol &quot;prep&quot; process need to be in one central place to be grabbed and moved over.  Bootstrapping in this way should be part of the test process, e.g. one of the Travis instances that does a Win32 build on Linux could do the Win32 prep using the native Linux executable.  And then make sure it can just move the one folder with prep products into a completely fresh git install and still build with the cross-compiler...</description>
    
    <lastBuildDate>Mon, 23 Oct 2017 15:54:59 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What Should the Experience of Building Rebol Be Like?</title>
        <dc:creator><![CDATA[Oldes]]></dc:creator>
        <description><![CDATA[
            <p>Thank you... this was helpful... I was able to make a build using this method.</p>
          <p><a href="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/11</link>
        <pubDate>Mon, 23 Oct 2017 15:54:59 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-334-11</guid>
        <source url="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334.rss">What Should the Experience of Building Rebol Be Like?</source>
      </item>
      <item>
        <title>What Should the Experience of Building Rebol Be Like?</title>
        <dc:creator><![CDATA[kealist]]></dc:creator>
        <description><![CDATA[
            <p>These build steps were working for me as of July (and I think since then as well) using MinGW.   Not sure why you have to create obj directories, but you can see what function it's calling to create them and reason why that function isn't being called correctly.</p>
<p>First, modify a config file %myconfig.r. Mine is simply:</p>
<pre><code>REBOL []

os-id: 0.3.1
rebol-tool: %r3-make.exe
toolset: [
    gcc %mingw32-gcc
    ld %mingw32-gcc; linking is done via calling gcc, not ld
    strip %strip
]
with-ffi: no
</code></pre>
<p>Then from my console, I run:</p>
<p><code>r3-make.exe ../src/tools/make-make.r CONFIG=configs/myconfig.r TARGET=execution</code></p>
<p>I manually delete r3.exe and the objs/ folder before building. Or you can run TARGET=clean (not done automatically)</p>
          <p><a href="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/10</link>
        <pubDate>Mon, 23 Oct 2017 12:20:06 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-334-10</guid>
        <source url="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334.rss">What Should the Experience of Building Rebol Be Like?</source>
      </item>
      <item>
        <title>What Should the Experience of Building Rebol Be Like?</title>
        <dc:creator><![CDATA[Oldes]]></dc:creator>
        <description><![CDATA[
            <p>Take it easy.. I was just asking how you build Ren-C on Windows.. because I don't have success with it. And if there is question in the title of this topic: <strong>What Should the Experience of Building Rebol Be Like?</strong> I just answer that it should be friendly and successful.</p>
<p>And instead of some constructive info I got reply that I will not get any help, because I was trying also the original R3 repository. Which is also not too friendly btw.</p>
          <p><a href="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/9</link>
        <pubDate>Mon, 23 Oct 2017 11:07:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-334-9</guid>
        <source url="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334.rss">What Should the Experience of Building Rebol Be Like?</source>
      </item>
      <item>
        <title>What Should the Experience of Building Rebol Be Like?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="7" data-topic="334">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/oldes/40/236_2.png" class="avatar"> Oldes:</div>
<blockquote>
<p>was the original Carl's approache messed up</p>
</blockquote>
</aside>
<p>Hey, wow.  Well, you're right.  Guess I wasted all that time.  R3-Alpha was better all along!</p>
<p>So why don't you go develop on that branch?  You can <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/core/n-loop.c#L580" rel="nofollow noopener">add features to LOOP</a>.</p>
<p>Meanwhile, we'll be wasting time with our "complicated" <a href="https://github.com/metaeducation/ren-c/blob/master/src/tools/c-lexicals.r" rel="nofollow noopener">Rebol-powered C parser</a> <em>(a useful tool in itself, and good test code)</em> we can do little things like edit our native specs right in the C comments, and <a href="https://github.com/metaeducation/ren-c/blob/60b41ec63f52abfc06d6b036a65564ab6679cab1/src/core/n-loop.c#L1256" rel="nofollow noopener">use names to access parameters</a>...still by index.  And wasting time solving problems like all those issues <a href="https://docs.google.com/presentation/d/1k1nnAyvCQy-jJJ_oKJycMxPfAVahWRGIxRssRcEZSqw/edit" rel="nofollow noopener">that I brought up in the slides</a>.</p>
<p>And of course there's the ability to <a href="https://github.com/metaeducation/ren-c/blob/master/tests/misc/fib.r" rel="nofollow noopener">use an embedded TCC compiler to build natives from strings</a>, if the performance doesn't satisfy.</p>
<p>Well, those don't matter.  Because Carl had it all sussed out.  So go knock yourself out.  Because you're not going to get any help from me following the path you have followed.</p>
          <p><a href="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/8</link>
        <pubDate>Mon, 23 Oct 2017 11:05:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-334-8</guid>
        <source url="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334.rss">What Should the Experience of Building Rebol Be Like?</source>
      </item>
      <item>
        <title>What Should the Experience of Building Rebol Be Like?</title>
        <dc:creator><![CDATA[Oldes]]></dc:creator>
        <description><![CDATA[
            <p>I don't say that you said, that <em>it is friendly</em>... it is my opinon after trying to build the Ren-C in comparison to original R3 building... After manually making all the folder tree in the <code>objs</code> directory, I have builded r3.exe, but unfortunatelly it halts with error: <code>Bad composed integer assignment for byte-ordering macro.</code></p>
<p>Btw... I was going thru the commit history and it is very interesting how quickly (even durring the time when Carl was still active) was the original Carl's approach messed up in the Saphirion version, which was merged with Atronix later<br>
.</p>
          <p><a href="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/7</link>
        <pubDate>Mon, 23 Oct 2017 10:42:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-334-7</guid>
        <source url="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334.rss">What Should the Experience of Building Rebol Be Like?</source>
      </item>
      <item>
        <title>What Should the Experience of Building Rebol Be Like?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="3" data-topic="334">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/oldes/40/236_2.png" class="avatar"> Oldes:</div>
<blockquote>
<p>I wonder how you use it, because I don't consider it to be friendly at all.</p>
</blockquote>
</aside>
<p>I never said it currently was.  Far from it: <em>I explicitly said</em> that Shixin had kind of gotten partway through a fairly large project to overhaul the build system such that it didn't depend on GNU make or CMake.  He chose not to write the code to be compatible with R3-Alpha, and instead made it use a version of Ren-C that he had snapshotted.</p>
<p>(I'd have preferred it work in R3-Alpha, still, as we'd historically worked pretty hard to do that.  But it was somewhat validating that he considered it too annoying to have to go back in time and code for R3-Alpha...that the features and increased reliability of Ren-C were worth it.)</p>
<p>Unfortunately, other tasks called him away before even updating the README--or leaving any instructions.  I don't especially enjoy working on build systems, and ideally I would have his participation rather than being left to sift the code and reimagine it on my own.  So I have been waiting for that to happen, and it hasn't, and now you are asking questions.</p>
<p>But given that I have told you this is the situation, the ideal thing would be to come and ask in chat--say what you are doing--and ask how to go about it.  Bumping around by yourself is inadvisable, and a good way to waste your time.</p>
<p>In any case, me asking this question is specifically about how we can make the experience better and what expectations people have (realistically) or good features from building other systems.  Indicating I think it needs a top down review and tidying from its current state, or even its historical state.</p>
          <p><a href="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/6</link>
        <pubDate>Mon, 23 Oct 2017 10:33:06 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-334-6</guid>
        <source url="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334.rss">What Should the Experience of Building Rebol Be Like?</source>
      </item>
      <item>
        <title>What Should the Experience of Building Rebol Be Like?</title>
        <dc:creator><![CDATA[Oldes]]></dc:creator>
        <description><![CDATA[
            <p>Also other directories under <code>objs</code> must be created manually and there is many of them inside.</p>
          <p><a href="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/5</link>
        <pubDate>Mon, 23 Oct 2017 10:31:08 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-334-5</guid>
        <source url="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334.rss">What Should the Experience of Building Rebol Be Like?</source>
      </item>
      <item>
        <title>What Should the Experience of Building Rebol Be Like?</title>
        <dc:creator><![CDATA[Oldes]]></dc:creator>
        <description><![CDATA[
            <p>Hm... probably found the main issue.. one must create manually the <code>objs</code> directory. Now it compiles something.</p>
          <p><a href="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/4</link>
        <pubDate>Mon, 23 Oct 2017 10:28:44 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-334-4</guid>
        <source url="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334.rss">What Should the Experience of Building Rebol Be Like?</source>
      </item>
      <item>
        <title>What Should the Experience of Building Rebol Be Like?</title>
        <dc:creator><![CDATA[Oldes]]></dc:creator>
        <description><![CDATA[
            <p>I must miss something, because although I was able to build original Carl's Rebol quickly on Mac and Windows, I'm not able to do the same with the Ren-C repository. I wonder how you use it, because I don't consider it to be friendly at all.</p>
          <p><a href="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/3</link>
        <pubDate>Mon, 23 Oct 2017 10:24:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-334-3</guid>
        <source url="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334.rss">What Should the Experience of Building Rebol Be Like?</source>
      </item>
      <item>
        <title>What Should the Experience of Building Rebol Be Like?</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>Some thoughts:</p>
<p>What are the challenges of getting it included in package managers? While it's desirable to download a binary and that's all the installation you need, package managers—particularly ones as slickly marketed as Homebrew—create the impression of an even easier installation process with two tangible features: consistency and immediacy of installation (don't need to monkey around getting the binary into /usr/local/bin and chmod); and is actually a build—not a prefab binary.</p>
<pre><code>curl -O &lt;path-to-latest-binary&gt;
chmod +x &lt;latest-binary&gt;
mv &lt;latest-binary&gt; /usr/local/bin/
</code></pre>
<p>Vs.</p>
<pre><code>brew install ren-c
</code></pre>
<p>What are the downsides of using the Rebol-&gt;Call control? Red's approach to cross-compiling is appealing (if less nuanced than the platforms breakdown in <code>%systems.r</code>): <code>red -t Windows hello.red</code></p>
          <p><a href="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/2</link>
        <pubDate>Wed, 11 Oct 2017 20:58:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-334-2</guid>
        <source url="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334.rss">What Should the Experience of Building Rebol Be Like?</source>
      </item>
      <item>
        <title>What Should the Experience of Building Rebol Be Like?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>When R3-Alpha was open-sourced, the make directory contained <a href="https://github.com/rebol/rebol/tree/c99039c37d7bbff8b5f901c593f5c3e4398b84c4/make" rel="nofollow noopener">one GNU makefile</a>, and Carl gave these instructions:</p>
<blockquote>
<p>About the Makefile:</p>
<p>You might notice that the makefile is a bit old-fashioned. That's because I still support REBOL on some very old systems that don't offer newer makefile features. So, please keep that in mind and stick with this simple format.</p>
<p>Also, the makefile is built by REBOL. Typing "make make" will rebuild it, and you can also select a different platform target the same way by providing the REBOL platform identifiers (the last two parts of the version string).</p>
<p>Build Instructions:</p>
<p>Parts of REBOL are built by REBOL. So, to build it, you'll need to download a running binary into the local make directory. Call it r3-make.</p>
<p>The build happens in the make directory. It will create an obj sub-dir for storing the object files. I prefer this over mixing the source and object files into the same directory.</p>
<p>The biggest step is to do the "make prep" which will use REBOL to configure and build a number of important C header files.</p>
<p>If you are building for a new platform that has no existing REBOL, you can use "make prep" to build all the files you need on an existing platform and copy them to the new platform.</p>
<p>After the prep, just run "make" and the rest of the system will build.</p>
</blockquote>
<p>One might ask: if the makefile is built by Rebol, <em>why would it be committed in the repository</em>?  What platform is this makefile for?  What happens if you just say <code>make</code>?</p>
<p>The answer is that the makefile was generated for <a href="https://github.com/rebol/rebol/blob/c99039c37d7bbff8b5f901c593f5c3e4398b84c4/make/makefile#L32" rel="nofollow noopener">32-bit Linux (0.4.4)</a>, so it was produced by running the command <code>r3-make %../src/tools/make-make.r OS_ID=0.4.4</code>.  However, it contains a trick: it has a target itself called "make" such that once generated, running <code>make make OS_ID=0.X.Y</code> will <em>overwrite the makefile itself</em> with an updated version for that OS.</p>
<p>We found this annoying, because the committed <code>makefile</code> would appear dirty in version control if you are using another system.  And also, one could streamline this process a bit for the average person if instead of them having to go <a href="https://github.com/rebol/rebol/blob/c99039c37d7bbff8b5f901c593f5c3e4398b84c4/src/tools/systems.r#L21" rel="nofollow noopener">look at the %systems.r table and find their platform</a>, if the <code>r3-make</code> could inspect its own <code>system/version</code> and <em>assume</em> you wanted to build that same OS_ID.</p>
<p>And so <a href="https://github.com/metaeducation/ren-c/blob/e6cab210d6355f50b36fe6e15acc1f5859a95c30/make/makefile.boot" rel="nofollow noopener">%make/makefile.boot</a> was born.  It was a committed file which saved you all the trouble of typing <code>./r3-make ../src/tools/make-make.r</code> followed by <code>make r3</code>.  Instead you could now type <code>make -f makefile.boot</code>.</p>
<p>If it sounds stupid, it kind of is.  But it wasn't rocket science to write, and you could also think of it as a kind of an interactive README file...if you didn't have something you needed, it could tell you.  And given that the build process was already dependent on you having GNU make, it could also catch you on that "meta-step" of needing make in the first place.</p>
<p><strong>But we live in a different world now.</strong>  You no longer need GNU make to build Ren-C.  You can still target it, but you can also generate files for Microsoft's NMAKE, or a Visual Studio project file.  And you can even forego the idea of a makefile altogether--instead having the Rebol executable drive the build process using <code>CALL</code> on the C compiler directly.  So it's time to scrap %makefile.boot and let a Rebol script be the entry point to the process.</p>
<p>I'm going to be talking about platforms, building, extensions in some more technical posts.  But this is more a philosophy post, or user-experience question.  Maybe any points people want to raise about building a system where it's been done right?</p>
<p>One thing we definitely should make easier is bootstrapping to new platforms.  The generated products of a Rebol "prep" process need to be in one central place to be grabbed and moved over.  Bootstrapping in this way should be part of the test process, e.g. one of the Travis instances that does a Win32 build on Linux could do the Win32 prep using the native Linux executable.  And then make sure it can just move the one folder with prep products into a completely fresh git install and still build with the cross-compiler...</p>
          <p><a href="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334/1</link>
        <pubDate>Wed, 11 Oct 2017 19:16:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-334-1</guid>
        <source url="https://forum.rebol.info/t/what-should-the-experience-of-building-rebol-be-like/334.rss">What Should the Experience of Building Rebol Be Like?</source>
      </item>
  </channel>
</rss>

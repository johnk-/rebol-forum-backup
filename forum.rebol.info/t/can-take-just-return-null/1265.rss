<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Can `TAKE []` Just Return Null?</title>
    <link>https://forum.rebol.info/t/can-take-just-return-null/1265</link>
    <description>Here is the behavior of TAKE in Rebol2:

    rebol2&gt;&gt; block: compose [1020 (none)]
    == [1020 none]

    rebol2&gt;&gt; take block
    == 1020

    rebol2&gt;&gt; take block
    == none

     rebol2&gt;&gt; take block
     == none

     rebol2&gt;&gt; take block
     == none

One thing I was bothered about was the inability to notice a difference between taking from an empty block and taking from a block containing a NONE!.  Ren-C can resolve that with NULL as a unique response to taking from a block with no elements in it.

But there&#39;s another concern which BrianH expressed, about a routine that you expected to have a side effect that did not.  If you write a line simply like **take block** and it doesn&#39;t take anything away, should it be silent about that fact?

## Early Ren-C introduced `TAKE*` as distinct from `TAKE`...

Experiments at being prescriptive worried that getting back a NULL might not be enough to warn you about a misunderstanding.  So we wound up with this:

    ren-c&gt;&gt; take []
    ** Error: TAKE-ing from an empty block, use TAKE*

    ren-c&gt;&gt; take* []
    ; null

To make things simple, TAKE was just a chained function derived from the lower-level `TAKE*`.  This seemed &quot;safer&quot;...at the time, and addressed BrianH&#39;s (pre-NULL) concern...as well as my general overarching desire to use things that are &quot;more checked&quot;.

**But this may be the wrong place to get paranoid about the user&#39;s intent, and we should just be happy that the NULL offers a unique result that means nothing was taken.**

When I wrote about [&quot;Make Your Own Safety&quot;](https://forum.rebol.info/t/make-your-own-safety/1118/3) I asked what the odds were that we could guess the top pet-peeve that every programmer would have.  

How many times have you been bitten by TAKE on an empty block you didn&#39;t know was empty?  When you did, how likely was it that you blamed yourself vs. the tool?

Not only that, but what if you could get the &quot;hardened&quot; versions of `TAKE` and `TAKE*` in the files where it was bothering you as easily as:

     take*: :lib/take
     take: (=&gt; non null lib/take)

This seems the better angle, and avoids making it feel like there&#39;s any kind of bias toward the &quot;tics&quot; that bother @rgchris, which the `*` may represent.  **Give people the power to bend fast to address the specific concerns that are bothering them with the bent and personalized/customized code they are writing to solve the problem they have *right now*.**</description>
    
    <lastBuildDate>Tue, 03 Mar 2020 23:00:52 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/can-take-just-return-null/1265.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Can `TAKE []` Just Return Null?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="1265">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>For my personal preference, having TAKE return NULL from an empty block seems better than throwing an error</p>
</blockquote>
</aside>
<p>I think this is my balance priority-wise these days.  Returning NULL is enough.</p>
<p>When you think about it, <strong>append [a b c] []</strong> doesn't necessarily "append anything".  Is it important to tell people who say <strong>append [a b c] something</strong> that nothing actually happened if something was empty?  Increasingly we've said <em>no</em>, that this doesn't necessarily represent a misunderstanding on the part of the programmer.</p>
<p><a href="https://github.com/metaeducation/ren-c/commit/e88ee79d9d0fea4ea0ca3605a7c5b1f5b0602b61" rel="nofollow noopener">So the deed is done.</a></p>
<p>There's some ramifications on variadics, but we should be thinking if TAKE was ever the right function for variadics in the first place.</p>
<p><em>(Note: I will point out--as I often do--that some of these experiments were used as early exercises of things like CHAIN.  They are thus not wasted experience...just have to focus on getting the code tighter and smarter...)</em></p>
          <p><a href="https://forum.rebol.info/t/can-take-just-return-null/1265/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/can-take-just-return-null/1265/3</link>
        <pubDate>Tue, 03 Mar 2020 23:00:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1265-3</guid>
        <source url="https://forum.rebol.info/t/can-take-just-return-null/1265.rss">Can `TAKE []` Just Return Null?</source>
      </item>
      <item>
        <title>Can `TAKE []` Just Return Null?</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I don't think I have been bitten by that. For my personal preference, having TAKE return NULL from an empty block seems better than throwing an error-- the latter behavior implies that the block! cannot be-empty, which, I don't know, seems un-block-like. Using TAKE then makes a block! less block-like. I can think of all kinds of interesting variants of block! structures (constrained sizes, LIFO/FIFO) which could be convenient and safer for some TAKE scenarios.</p>
          <p><a href="https://forum.rebol.info/t/can-take-just-return-null/1265/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/can-take-just-return-null/1265/2</link>
        <pubDate>Tue, 03 Mar 2020 21:14:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1265-2</guid>
        <source url="https://forum.rebol.info/t/can-take-just-return-null/1265.rss">Can `TAKE []` Just Return Null?</source>
      </item>
      <item>
        <title>Can `TAKE []` Just Return Null?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Here is the behavior of TAKE in Rebol2:</p>
<pre><code>rebol2&gt;&gt; block: compose [1020 (none)]
== [1020 none]

rebol2&gt;&gt; take block
== 1020

rebol2&gt;&gt; take block
== none

 rebol2&gt;&gt; take block
 == none

 rebol2&gt;&gt; take block
 == none
</code></pre>
<p>One thing I was bothered about was the inability to notice a difference between taking from an empty block and taking from a block containing a NONE!.  Ren-C can resolve that with NULL as a unique response to taking from a block with no elements in it.</p>
<p>But there's another concern which BrianH expressed, about a routine that you expected to have a side effect that did not.  If you write a line simply like <strong>take block</strong> and it doesn't take anything away, should it be silent about that fact?</p>
<h2>Early Ren-C introduced <code>TAKE*</code> as distinct from <code>TAKE</code>...</h2>
<p>Experiments at being prescriptive worried that getting back a NULL might not be enough to warn you about a misunderstanding.  So we wound up with this:</p>
<pre><code>ren-c&gt;&gt; take []
** Error: TAKE-ing from an empty block, use TAKE*

ren-c&gt;&gt; take* []
; null
</code></pre>
<p>To make things simple, TAKE was just a chained function derived from the lower-level <code>TAKE*</code>.  This seemed "safer"...at the time, and addressed BrianH's (pre-NULL) concern...as well as my general overarching desire to use things that are "more checked".</p>
<p><strong>But this may be the wrong place to get paranoid about the user's intent, and we should just be happy that the NULL offers a unique result that means nothing was taken.</strong></p>
<p>When I wrote about <a href="https://forum.rebol.info/t/make-your-own-safety/1118/3">"Make Your Own Safety"</a> I asked what the odds were that we could guess the top pet-peeve that every programmer would have.</p>
<p>How many times have you been bitten by TAKE on an empty block you didn't know was empty?  When you did, how likely was it that you blamed yourself vs. the tool?</p>
<p>Not only that, but what if you could get the "hardened" versions of <code>TAKE</code> and <code>TAKE*</code> in the files where it was bothering you as easily as:</p>
<pre><code> take*: :lib/take
 take: (=&gt; non null lib/take)
</code></pre>
<p>This seems the better angle, and avoids making it feel like there's any kind of bias toward the "tics" that bother <a class="mention" href="/u/rgchris">@rgchris</a>, which the <code>*</code> may represent.  <strong>Give people the power to bend fast to address the specific concerns that are bothering them with the bent and personalized/customized code they are writing to solve the problem they have <em>right now</em>.</strong></p>
          <p><a href="https://forum.rebol.info/t/can-take-just-return-null/1265/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/can-take-just-return-null/1265/1</link>
        <pubDate>Tue, 03 Mar 2020 20:45:06 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1265-1</guid>
        <source url="https://forum.rebol.info/t/can-take-just-return-null/1265.rss">Can `TAKE []` Just Return Null?</source>
      </item>
  </channel>
</rss>

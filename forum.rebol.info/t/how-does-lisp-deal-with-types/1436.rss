<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How Does Lisp Deal With Types?</title>
    <link>https://forum.rebol.info/t/how-does-lisp-deal-with-types/1436</link>
    <description>So I thought to look at how Lisp handles types.  (You&#39;d think I&#39;d have looked earlier.)

* Overview: **[Common Lisp Cookbook: Types](https://lispcookbook.github.io/cl-cookbook/type.html)**
* Lengthier Survey: **[&quot;Typed Lisp, A Primer&quot;](https://alhassy.github.io/TypedLisp)**

## Function Argument Type Checking (not there)

First thing to note, they [don&#39;t have function argument type checking](https://www.gnu.org/software/emacs/manual/html_node/elisp/Type-Predicates.html).

&gt;  *&quot;function arguments in Lisp do not have declared data types, as they do in other programming languages. It is therefore up to the individual function to test whether each actual argument belongs to a type that the function can use.&quot;*

While Rebol does have type checking, it&#39;s extremely limited.  It&#39;s a frustrating design point...because it&#39;s so limited, and because it is poked into a strange compacted place.  When people ask *&quot;why only 64 data types?&quot;* that gets at some of the strangeness of this feature.

When you try to build reflective abilities for the built-in type checking feature, you get into questions of how to expose these 64 bits.  That&#39;s done via TYPESET!, which isn&#39;t very easy to process, and doesn&#39;t seem like the foundation of a broader answer.  See [&quot;the TYPESET! representation problem&quot;](https://forum.rebol.info/t/the-typeset-representation-problem/1300)

## Lisp Type Representation

They seem basically comfortable with the idea of using &quot;WORD!&quot; to name types, e.g. **ensure &#39;integer 1**.  *(Although their version of ENSURE is called THE, as a type annotation.  **the &#39;integer 1**  That&#39;s shorter...same length as &quot;non&quot;, and would free ENSURE for other uses.  I can&#39;t tell if it makes total sense or not.)*

&gt; *&quot;Types are not objects in Common Lisp. There is no object that corresponds to the type `integer` , for example. What we get from a function like `type-of` , and give as an argument to a function like `typep` , is not a type, but a type specifier. A type specifier is the name of a type.&quot;*

They don&#39;t use the equality operator to check the result of &quot;TYPE OF&quot; against anything, because they get back additional &quot;stuff, and I gather that &quot;stuff&quot; can vary from one implementation to another:

    * (type-of 1234)
    (INTEGER 0 4611686018427387903)

So it seems they lean toward using functions to ask if types match.  They call these &quot;predicates&quot; and end them in P.  If we were to do a similar thing, it might look like:

    &gt;&gt; type? 10 &#39;integer
    == #[true]  ; knew to disregard stuff that `&#39;integer = type of 1` wouldn&#39;t

Their notion of typeclasses is somewhat concretized.  Their ANY-VALUE! is just **`t`**.  So they do not try and express the notion of &quot;anything&quot; as an explicit union of all known types, the way that Rebol has.  It&#39;s inherently not extensible if you say **`any-value!: make typeset! [integer! text! ...]`** and then add a new datatype later.

If you scroll down a bit you get to some examples:

    ;; The universal type “t”, has everything as its value.
    (typep &#39;x &#39;t) ;; ⇒ true
    (typep 12 &#39;t) ;; ⇒ true

    ;; The empty type: nil
    (typep &#39;x &#39;nil) ;; ⇒ false; nil has no values.

    ;; The type “null” contains the one value “nil”.
    (typep nil &#39;null) ;; ⇒ true
    (typep () &#39;null)  ;; ⇒ true

    ;; “(eql x)” is the singelton type consisting of only x.
    (typep 3 &#39;(eql 3)) ;; ⇒ true
    (typep 4 &#39;(eql 3)) ;; ⇒ false

    ;; “(member x₀ … xₙ)” denotes the enumerated type consisting of only the xᵢ.
    (typep 3 &#39;(member 3 x &quot;c&quot;))  ;; ⇒ true
    (typep &#39;x &#39;(member 3 x &quot;c&quot;)) ;; ⇒ true
    (typep &#39;y &#39;(member 3 x &quot;c&quot;)) ;; ⇒ false

    ;; “(satisfies p)” is the type of values that satisfy predicate p.
    (typep 12 &#39;(satisfies (lambda (x) (oddp x)))) ;; ⇒ false
    (typep 12 &#39;(satisfies evenp) )                ;; ⇒ true

    ;; Computation rule for comprehension types.
    ;; (typep x &#39;(satisfies p)) ≈ (if (p x) t nil)

## Why Isn&#39;t Everything Just a Function?

It seems like SATISFIES is the sort of generic way to hook up any function as a type check.  Like you could do arbitrary calculation to check to see if a number was prime...or something like that.

So why isn&#39;t this the *only* kind of type check?  Maybe something to do with the limits of what can be checked at compile time.

It seems that SBCL requires you to go through a symbol to use SATISFIES.  Whether that&#39;s on purpose or not, that it forces you to name your predicate is helpful as documentation.

## Stipulating Variables Match A Type

There is a feature of saying that a word is only assigned particular types (declaim)...and though it didn&#39;t work for me in `&quot;clisp&quot;` it did in `&quot;sbcl&quot;`.

Were we to have such a feature, we&#39;d presumably give it a better name, but:

    &gt;&gt; declaim &#39;x text!

    &gt;&gt; x: 10
    ** Error: you said that x had to be TEXT!

When you think about languages arising like TypeScript, being able to annotate a variable to say that it has a certain type is a popular feature.   It&#39;s not clear how to do this inexpensively with complex type checks.

## Does This Point To Any Answers?

The main thing to notice here is that the process isn&#39;t driven by &quot;typesets&quot;, but rather by a kind of &quot;type matching dialect&quot;...that covers a few kinds of combining operations (including AND, OR), and if you can&#39;t get exactly what you want from the built-in bits, you can supply an open-ended function.

It goes in the direction I&#39;ve been thinking about, where the core function application code doesn&#39;t really know what type checking is.  So it&#39;s layers above (like FUNC/FUNCTION) that provide the type checking, and define the type checking language.

Nothing particularly new, just thought I&#39;d look.</description>
    
    <lastBuildDate>Tue, 29 Dec 2020 17:29:07 +0000</lastBuildDate>
    <category>Foreign Inspiration</category>
    <atom:link href="https://forum.rebol.info/t/how-does-lisp-deal-with-types/1436.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How Does Lisp Deal With Types?</title>
        <dc:creator><![CDATA[okram]]></dc:creator>
        <description><![CDATA[
            <p>Sorry, I have no expertise in type systems for "Lisp-inspired" languages.</p>
<p>But from my naïve perspective it seems that detailed types such as "a function taking a function of two integers returning a boolean ..." or "an object providing attributes named <code>'attr1</code>, <code>'attr2</code>, and <code>'attr3</code> each a function taking an integer to text" do not provide any benefit to the execution inside the interpreter.<br>
If that is so, then why not have such types at an earlier phase, a pre-execution source code transformation that does type checking and inference.</p>
<p>Couldn't <code>reflect [a b c] 'type</code> enter such a type inference? A question to clarify would be the relationship between the existing types and the "richer" type system. Should the richer type system be a conservative extension or should it be independent of the current types and maybe optional?</p>
          <p><a href="https://forum.rebol.info/t/how-does-lisp-deal-with-types/1436/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-does-lisp-deal-with-types/1436/5</link>
        <pubDate>Tue, 29 Dec 2020 17:29:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1436-5</guid>
        <source url="https://forum.rebol.info/t/how-does-lisp-deal-with-types/1436.rss">How Does Lisp Deal With Types?</source>
      </item>
      <item>
        <title>How Does Lisp Deal With Types?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Hello <a class="mention" href="/u/okram">@okram</a>, welcome.</p>
<p>If you have interest and knowledge in type systems in "Lisp-inspired" languages, that would be valuable if you care to offer specific feedback...</p>
<p>...but we're a pretty long way from dependent types.  :-/  Also...the language is interpreted, not compiled.  We're not particularly focused on performance, more expressivity.  <em>(Catchphrase: <a href="https://forum.rebol.info/t/mission-statement/667/22">"Minecraft of Programming"</a>)</em></p>
<hr>
<p>While there are a bunch of interesting and nuanced details in the language to talk about, the "type system" barely exists.  There's around 64 basic value types <em>(<strong>word</strong>, <strong>set-word:</strong>, <strong>pa/th</strong>, <strong>{string}</strong>, <strong><span class="hashtag">#token</span></strong>, <strong>304</strong>, <strong>$10.20</strong>, <strong>[bl 0 ck]</strong>, <strong>(gr 0 up)</strong>...)</em>, plus arbitrary quoting levels <em>(<strong>'''['a ''2 ''(a 'b ''c)]</strong>)</em>, and a NULL non-value.</p>
<p>Historical Rebol takes for granted that you can reflect the type of things.  We now do that via REFLECT:</p>
<pre><code>&gt;&gt; reflect [a b c] 'type
== block  ; (the representation of this answer is what's up for debate)
</code></pre>
<p>A version of REFLECT which quotes its left hand side is available as OF, which is neat:</p>
<pre><code>&gt;&gt; type of [a b c]
== block
</code></pre>
<p>But the question we're stuck with is that answer.  It has been assumed that whatever you get back, it would be suitable for plain equality comparison with...checked against the answer you got for something else.  It doesn't seem that Lisp goes with that idea of a kind of "canon answer", and pushes you to use a function to check for type matching.</p>
<p>In terms of our type representation...we're reluctant to re-use an existing type (such as WORD, which is what the symbol <strong>block</strong> would be).  The reason is that we'd like "datatype's type" to be able to stand on its own, such as when matching things against rules:</p>
<pre><code> &gt;&gt; parse [4 5 6] [some @integer] then [print "Matched some integers!"]
 Matched some integers!
</code></pre>
<p>We'd have to invent special keywords or signals otherwise:</p>
<pre><code> parse [4 5 6] [some typep 'integer] then [print "Not as nice"]
</code></pre>
<p>Using the <code>@symbol</code> category for types wouldn't mean it couldn't be used for other purposes, but it would make many dialects want to save it for when types were relevant.</p>
<p>But there are other questions, like is the type of all quoted things <code>@quoted</code>?</p>
<pre><code>&gt;&gt; type of first ['''a]
== @quoted

&gt;&gt; type of first [''1]
== @quoted
</code></pre>
<p>Or do the types themselves come back as quoted?</p>
<pre><code>&gt;&gt; type of first ['''a]
== '''@word

&gt;&gt; type of first [''1]
== ''@integer
</code></pre>
<p>Or...since the evaluator drops quoting levels, is it better to insulate the quotes by putting them inside an inert container like a block:</p>
<pre><code>&gt;&gt; type of first ['''a]
== @['''word]

&gt;&gt; type of first [''1]
== @[''integer]
</code></pre>
<p>There are much deeper questions to get at with user-defined types, and how they might interoperate with generics...all of which are unknowns.</p>
<p>Given the vast underdevelopment in such areas, <img src="https://forum.rebol.info/images/emoji/twitter/bug.png?v=9" title=":bug:" class="emoji" alt=":bug:"> it takes something of a commitment to learning why the medium would be interesting!  But always open to explaining that.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://forum.rebol.info/t/how-does-lisp-deal-with-types/1436/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-does-lisp-deal-with-types/1436/4</link>
        <pubDate>Mon, 28 Dec 2020 20:26:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1436-4</guid>
        <source url="https://forum.rebol.info/t/how-does-lisp-deal-with-types/1436.rss">How Does Lisp Deal With Types?</source>
      </item>
      <item>
        <title>How Does Lisp Deal With Types?</title>
        <dc:creator><![CDATA[okram]]></dc:creator>
        <description><![CDATA[
            <p>How much type information is really needed once the code executes?<br>
I think the papers on types as macros:</p>
<aside class="onebox pdf">
  <header class="source">
      <a href="https://www.ccs.neu.edu/home/stchang/pubs/ckg-popl2017.pdf" target="_blank" rel="noopener nofollow ugc">ccs.neu.edu</a>
  </header>
  <article class="onebox-body">
    <a href="https://www.ccs.neu.edu/home/stchang/pubs/ckg-popl2017.pdf" target="_blank" rel="noopener nofollow ugc"><span class="pdf-onebox-logo"></span></a>
<h3><a href="https://www.ccs.neu.edu/home/stchang/pubs/ckg-popl2017.pdf" target="_blank" rel="noopener nofollow ugc">ckg-popl2017.pdf</a></h3>



  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<aside class="onebox pdf">
  <header class="source">
      <a href="https://www.ccs.neu.edu/home/stchang/pubs/cbtb-popl2020.pdf" target="_blank" rel="noopener nofollow ugc">ccs.neu.edu</a>
  </header>
  <article class="onebox-body">
    <a href="https://www.ccs.neu.edu/home/stchang/pubs/cbtb-popl2020.pdf" target="_blank" rel="noopener nofollow ugc"><span class="pdf-onebox-logo"></span></a>
<h3><a href="https://www.ccs.neu.edu/home/stchang/pubs/cbtb-popl2020.pdf" target="_blank" rel="noopener nofollow ugc">cbtb-popl2020.pdf</a></h3>



  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>should be interesting.</p>
          <p><a href="https://forum.rebol.info/t/how-does-lisp-deal-with-types/1436/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-does-lisp-deal-with-types/1436/3</link>
        <pubDate>Mon, 28 Dec 2020 14:32:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1436-3</guid>
        <source url="https://forum.rebol.info/t/how-does-lisp-deal-with-types/1436.rss">How Does Lisp Deal With Types?</source>
      </item>
      <item>
        <title>How Does Lisp Deal With Types?</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1436">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>When people ask <em>"why only 64 data types?"</em> that gets at some of the strangeness of this feature.</p>
</blockquote>
</aside>
<p>Correct. In particular because one of the selling points of the language is that it comes with all kinds of types out of the box. Types you probably would have had to create yourself anyway.</p>
<p>And also observing the less obvious like get- set- sym- -path -word this counts up pretty quickly leaving little to no space for those other types we want to (be) put in.</p>
<p>I see in <code>https://github.com/metaeducation/ren-c/blame/master/src/boot/types.r</code></p>
<blockquote>
<p>; This table of fundamental types is intended to be limited (less than</p>
<p>; 64 entries). Yet there can be an arbitrary number of extension types.</p>
<p>; Those types use the REB_CUSTOM cell class, and give up their -&gt;extra field</p>
<p>; of their cell instances to point to their specific datatype.</p>
</blockquote>
<p>and the real limitation is in <code>make-boot.r</code></p>
<pre><code>/*
 * Current hard limit, higher types used for QUOTED!.  In code which
 * is using the 64 split to implement the literal trick, use REB_64
 * instead of just 64 to make places dependent on that trick findable.
 *
 * !!! If one were desperate for "special" types, things like 64/128/192
 * could be used, as there is no such thing as a "literal END", etc.
 */
#define REB_64 64

/*
 * While the VAL_TYPE() is a full byte, only 64 states can fit in the
 * payload of a TYPESET! at the moment.  Some rethinking would be
 * necessary if this number exceeds 64 (note some values beyond the
 * real DATATYPE! values set special signal bits in parameter typesets.)
 */
STATIC_ASSERT(REB_MAX_PLUS_MAX &lt;= REB_64);
</code></pre>
<p>Correct?</p>
          <p><a href="https://forum.rebol.info/t/how-does-lisp-deal-with-types/1436/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-does-lisp-deal-with-types/1436/2</link>
        <pubDate>Fri, 18 Dec 2020 07:15:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1436-2</guid>
        <source url="https://forum.rebol.info/t/how-does-lisp-deal-with-types/1436.rss">How Does Lisp Deal With Types?</source>
      </item>
      <item>
        <title>How Does Lisp Deal With Types?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So I thought to look at how Lisp handles types.  (You'd think I'd have looked earlier.)</p>
<ul>
<li>Overview: <strong><a href="https://lispcookbook.github.io/cl-cookbook/type.html">Common Lisp Cookbook: Types</a></strong>
</li>
<li>Lengthier Survey: <strong><a href="https://alhassy.github.io/TypedLisp">"Typed Lisp, A Primer"</a></strong>
</li>
</ul>
<h2>Function Argument Type Checking (not there)</h2>
<p>First thing to note, they <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Type-Predicates.html">don't have function argument type checking</a>.</p>
<blockquote>
<p><em>"function arguments in Lisp do not have declared data types, as they do in other programming languages. It is therefore up to the individual function to test whether each actual argument belongs to a type that the function can use."</em></p>
</blockquote>
<p>While Rebol does have type checking, it's extremely limited.  It's a frustrating design point...because it's so limited, and because it is poked into a strange compacted place.  When people ask <em>"why only 64 data types?"</em> that gets at some of the strangeness of this feature.</p>
<p>When you try to build reflective abilities for the built-in type checking feature, you get into questions of how to expose these 64 bits.  That's done via TYPESET!, which isn't very easy to process, and doesn't seem like the foundation of a broader answer.  See <a href="https://forum.rebol.info/t/the-typeset-representation-problem/1300">"the TYPESET! representation problem"</a></p>
<h2>Lisp Type Representation</h2>
<p>They seem basically comfortable with the idea of using "WORD!" to name types, e.g. <strong>ensure 'integer 1</strong>.  <em>(Although their version of ENSURE is called THE, as a type annotation.  <strong>the 'integer 1</strong>  That's shorter...same length as "non", and would free ENSURE for other uses.  I can't tell if it makes total sense or not.)</em></p>
<blockquote>
<p><em>"Types are not objects in Common Lisp. There is no object that corresponds to the type <code>integer</code> , for example. What we get from a function like <code>type-of</code> , and give as an argument to a function like <code>typep</code> , is not a type, but a type specifier. A type specifier is the name of a type."</em></p>
</blockquote>
<p>They don't use the equality operator to check the result of "TYPE OF" against anything, because they get back additional "stuff, and I gather that "stuff" can vary from one implementation to another:</p>
<pre><code>* (type-of 1234)
(INTEGER 0 4611686018427387903)
</code></pre>
<p>So it seems they lean toward using functions to ask if types match.  They call these "predicates" and end them in P.  If we were to do a similar thing, it might look like:</p>
<pre><code>&gt;&gt; type? 10 'integer
== #[true]  ; knew to disregard stuff that `'integer = type of 1` wouldn't
</code></pre>
<p>Their notion of typeclasses is somewhat concretized.  Their ANY-VALUE! is just <strong><code>t</code></strong>.  So they do not try and express the notion of "anything" as an explicit union of all known types, the way that Rebol has.  It's inherently not extensible if you say <strong><code>any-value!: make typeset! [integer! text! ...]</code></strong> and then add a new datatype later.</p>
<p>If you scroll down a bit you get to some examples:</p>
<pre><code>;; The universal type “t”, has everything as its value.
(typep 'x 't) ;; ⇒ true
(typep 12 't) ;; ⇒ true

;; The empty type: nil
(typep 'x 'nil) ;; ⇒ false; nil has no values.

;; The type “null” contains the one value “nil”.
(typep nil 'null) ;; ⇒ true
(typep () 'null)  ;; ⇒ true

;; “(eql x)” is the singelton type consisting of only x.
(typep 3 '(eql 3)) ;; ⇒ true
(typep 4 '(eql 3)) ;; ⇒ false

;; “(member x₀ … xₙ)” denotes the enumerated type consisting of only the xᵢ.
(typep 3 '(member 3 x "c"))  ;; ⇒ true
(typep 'x '(member 3 x "c")) ;; ⇒ true
(typep 'y '(member 3 x "c")) ;; ⇒ false

;; “(satisfies p)” is the type of values that satisfy predicate p.
(typep 12 '(satisfies (lambda (x) (oddp x)))) ;; ⇒ false
(typep 12 '(satisfies evenp) )                ;; ⇒ true

;; Computation rule for comprehension types.
;; (typep x '(satisfies p)) ≈ (if (p x) t nil)
</code></pre>
<h2>Why Isn't Everything Just a Function?</h2>
<p>It seems like SATISFIES is the sort of generic way to hook up any function as a type check.  Like you could do arbitrary calculation to check to see if a number was prime...or something like that.</p>
<p>So why isn't this the <em>only</em> kind of type check?  Maybe something to do with the limits of what can be checked at compile time.</p>
<p>It seems that SBCL requires you to go through a symbol to use SATISFIES.  Whether that's on purpose or not, that it forces you to name your predicate is helpful as documentation.</p>
<h2>Stipulating Variables Match A Type</h2>
<p>There is a feature of saying that a word is only assigned particular types (declaim)...and though it didn't work for me in <code>"clisp"</code> it did in <code>"sbcl"</code>.</p>
<p>Were we to have such a feature, we'd presumably give it a better name, but:</p>
<pre><code>&gt;&gt; declaim 'x text!

&gt;&gt; x: 10
** Error: you said that x had to be TEXT!
</code></pre>
<p>When you think about languages arising like TypeScript, being able to annotate a variable to say that it has a certain type is a popular feature.   It's not clear how to do this inexpensively with complex type checks.</p>
<h2>Does This Point To Any Answers?</h2>
<p>The main thing to notice here is that the process isn't driven by "typesets", but rather by a kind of "type matching dialect"...that covers a few kinds of combining operations (including AND, OR), and if you can't get exactly what you want from the built-in bits, you can supply an open-ended function.</p>
<p>It goes in the direction I've been thinking about, where the core function application code doesn't really know what type checking is.  So it's layers above (like FUNC/FUNCTION) that provide the type checking, and define the type checking language.</p>
<p>Nothing particularly new, just thought I'd look.</p>
          <p><a href="https://forum.rebol.info/t/how-does-lisp-deal-with-types/1436/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-does-lisp-deal-with-types/1436/1</link>
        <pubDate>Thu, 17 Dec 2020 03:31:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1436-1</guid>
        <source url="https://forum.rebol.info/t/how-does-lisp-deal-with-types/1436.rss">How Does Lisp Deal With Types?</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[[Variadics, and naming ...]]</title>
    <link>https://forum.rebol.info/t/variadics-and-naming/717</link>
    <description>The title is literal--I&#39;m really talking about **`...`**

My proposal, which I like and @IngoHohmann liked, is that `...` be a form of interactive breakpoint that triggers the debugger and lets you type in something.  More or less like:

    &gt;&gt; x: 10

    &gt;&gt; print [&quot;The value plus x is&quot; ... + x]
    ** Encountered `...`, use RESUME/WITH to continue with value
    ** Debug Break

    |0|&gt;&gt; x
    == 10

    &gt;&gt; resume/with 20
    The value plus x is 30

Symbolically, it stands out a bit.  And also, this would make it kind of reasonable as a sort of &quot;TBD&quot;.  If you&#39;re working on code and haven&#39;t gotten to something yet, you can indicate that pretty easily:

    solve-virtual-binding: function [
        {Avoid exponential cost from nested binds}
    ][
        ...
    ]

And when people are stubbing in examples on the internet for code snippets, it&#39;s good there too.  If you ever actually run the code, you&#39;ll get something more useful than an error.

But that brings up a question... ... ...

### What to use for variadics?

If `...` means &quot;unfinished&quot; or &quot;breakpoint&quot;, it seems bad to borrow it as we are today for variadic function arguments.  Currently those are with the tag `&lt;...&gt;`:

    foo: function [args [integer! &lt;...&gt;]] [...]

Right there, juxtaposed against the coolness of the proposed usage, it seems we should pick something better, rather than blindly following along with what C and some other languages use.

So, what are the options?  I actually initially used double brackets, when I wanted the system to be avoiding keywords to make it more skinnable:

    foo: function [args [[integer!]]] [...]

But that&#39;s not necessarily very communicative, and looks a bit more like it&#39;s some kind of composition tool, a la [composeII](https://trello.com/c/ko89tF2Y).
 
@gchiu suggests `&lt;any&gt;`, syncing up more with the PARSE sense of the word, and that might look good going before, though it might look weird doubling up with ANY-VALUE!:

    foo: function [args [&lt;any&gt; integer!]] [...]
    foo: function [args [&lt;any&gt; any-value!]] [...] ;-- too weird?

In a PARSE rule you can write **[any any-value!]**, so it&#39;s not like it&#39;s that bad.

On the one hand, it&#39;s bad to make up names when CS agrees on it.  So using the word `&lt;variadic&gt;` could be argued for over things like `&lt;multi&gt;` or somesuch.  Then again, if the goal is to be accessible and non-intimidating then variadic and VARARGS! as the name of the type might should be reconsidered.

Either way I think `&lt;...&gt;` should be avoided, so as to let the new meaning of `...` take the stage.  So, ideas/votes on the fate of variadics?</description>
    
    <lastBuildDate>Wed, 21 Nov 2018 12:08:38 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/variadics-and-naming/717.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[[Variadics, and naming ...]]</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="1" data-topic="717">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I think <code>&lt;...&gt;</code> should be avoided, so as to let the new meaning of <code>...</code> take the stage. So, ideas/votes on the fate of variadics?</p>
</blockquote>
</aside>
<p>I'm using <strong><code>...</code></strong> more and more so this needs a decision.</p>
<p><code>&lt;variadic&gt;</code> is at least not going to be taken for anything else, and is unambiguous and established.  It can be a positive force in the world by teaching someone the <em>right</em> word to be using, so when they're doing web searches they find the right material.</p>
<p>It's "long" but is it really <em>that</em> long considering?</p>
<pre><code>&lt;variadic&gt;
ANY-SERIES!
</code></pre>
<p>The other words or symbols may be trying to be too clever for a marking that doesn't get used all that often.</p>
<p>I'd been borrowing from the convention of actually naming the variadic arguments like <code>param-name...</code>, with ... on the end, but I'm going to stop doing that.  They'll just be plural.</p>
          <p><a href="https://forum.rebol.info/t/variadics-and-naming/717/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/variadics-and-naming/717/7</link>
        <pubDate>Wed, 21 Nov 2018 09:06:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-717-7</guid>
        <source url="https://forum.rebol.info/t/variadics-and-naming/717.rss">[[Variadics, and naming ...]]</source>
      </item>
      <item>
        <title>[[Variadics, and naming ...]]</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="4" data-topic="717">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>+1 for const, I was thinking about it as well these days.</p>
</blockquote>
</aside>
<p>Const series <em>values</em> by default may be better than actual immutable series by default.</p>
<p>It would take care of the bug like with routines such as <code>func [...] [switch ... [... ["foo"]]]</code>, where the caller winds up accidentally thinking they can mutate and changing the string in the body of your switch.  Today the protection for that comes from LOCK at the source level--which is somewhat heavy handed due to irreversibility, and also it doesn't have you covered when you build the function dynamically.</p>
<p>People might gripe if parameters defaulted const, but they can use their own function generators that adds mutable on everything.  I think it's better to have to mark things mutable, then you get the information in the HELP etc. to know what changes.  It's a pretty important thing.</p>
<p>But, again <code>&lt;mutable&gt;</code> is a very heavy word for a function spec.  <code>&lt;update&gt;</code> ?  <code>&lt;modify&gt;</code> (<code>&lt;modifies&gt;</code>)?  <code>&lt;write&gt;</code>?</p>
<p>As an operator that converts const to modifiable, I think <code>mutable</code> being ugly is a good thing--you should think twice about using it.  <code>mutable</code> and <code>const</code> operators might make the issues with source locking more palatable.  If you're unhappy something is const, and you didn't put it in a MAP! or do something that absolutely required it be invariantly LOCKed, you could just <code>mutable</code> it if you had to.</p>
          <p><a href="https://forum.rebol.info/t/variadics-and-naming/717/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/variadics-and-naming/717/6</link>
        <pubDate>Tue, 03 Jul 2018 08:25:48 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-717-6</guid>
        <source url="https://forum.rebol.info/t/variadics-and-naming/717.rss">[[Variadics, and naming ...]]</source>
      </item>
      <item>
        <title>[[Variadics, and naming ...]]</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>I'm actually not sure I like the symbols, but maybe I would just need time.</p>
          <p><a href="https://forum.rebol.info/t/variadics-and-naming/717/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/variadics-and-naming/717/5</link>
        <pubDate>Sat, 30 Jun 2018 22:41:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-717-5</guid>
        <source url="https://forum.rebol.info/t/variadics-and-naming/717.rss">[[Variadics, and naming ...]]</source>
      </item>
      <item>
        <title>[[Variadics, and naming ...]]</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>+1 for const, I was thinking about it as well these days. As an added benefit, ot would be great to define object fields as const, so they can only be set from the objects methods.</p>
          <p><a href="https://forum.rebol.info/t/variadics-and-naming/717/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/variadics-and-naming/717/4</link>
        <pubDate>Sat, 30 Jun 2018 22:39:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-717-4</guid>
        <source url="https://forum.rebol.info/t/variadics-and-naming/717.rss">[[Variadics, and naming ...]]</source>
      </item>
      <item>
        <title>[[Variadics, and naming ...]]</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="IngoHohmann" data-post="2" data-topic="717">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>I don’t know a better word than …</p>
</blockquote>
</aside>
<p>If we want to go with symbolic over word, maybe <code>&lt;*&gt;</code> to evoke wildcarding?  I dunno.</p>
<p><em>tangent</em> -&gt; I've been thinking about introducing "const" sooner rather than later.  Basically it would be a way of saying that although a series wasn't locked, you're passing someone a "view" of that series that they can't modify through the value you've given them.  As with C/C++ const, it doesn't mean the value won't change through other references, it just means if you only have a const reference then <em>you won't be the one who changes it</em>.</p>
<p>But one of the big classic questions is whether const or mutable should be the default:</p>
<aside class="onebox stackexchange">
  <header class="source">
      <a href="https://stackoverflow.com/questions/19478034/why-arent-c-types-const-by-default" target="_blank" rel="noopener">stackoverflow.com</a>
  </header>
  <article class="onebox-body">
      <a href="https://stackoverflow.com/users/1613983/quant" target="_blank" rel="noopener">
    <img alt="quant" src="https://i.stack.imgur.com/lAhj3.png?s=128&amp;g=1" class="thumbnail onebox-avatar" width="128" height="128">
  </a>
<h4>
  <a href="https://stackoverflow.com/questions/19478034/why-arent-c-types-const-by-default" target="_blank" rel="noopener">Why aren't C++ types const by default?</a>
</h4>

<div class="tags">
  <strong>c++</strong>
</div>

<div class="date">
  asked by
  
  <a href="https://stackoverflow.com/users/1613983/quant" target="_blank" rel="noopener">
    quant
  </a>
  on <a href="https://stackoverflow.com/questions/19478034/why-arent-c-types-const-by-default" target="_blank" rel="noopener">01:40PM - 20 Oct 13 UTC</a>
</div>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>Rebol has avoided the idea that APPEND! with the exclamation point mean mutable, but I still rather like the idea that <code>&lt;!&gt;</code> might mean mutable:</p>
<pre><code>reverse: function [
     series [&lt;!&gt; any-series!]
][
    ... 
]
</code></pre>
<p>I guess my point there being that I sort of like the look of symbols in there, maybe even <code>&lt;?&gt;</code> instead of for <code>&lt;opt&gt;</code>...</p>
<pre><code>append: function [
     series [&lt;!&gt; any-series!]
     value [&lt;?&gt; any-value!]
][
    ... 
]
</code></pre>
<p>Maybe <code>?</code> could be null.  <strong>x: ?</strong>  <em>(assuming the trick about being able to unset variables explicitly via functions that variadically left quote the left... you can't save nulls or voids in variables through ordinary set words usually)</em></p>
<p>Just thinking out loud here, wondering about the use of symbols and if <code>&lt;*&gt;</code> could make sense in a family of symbolic annotations or not.  If <code>&lt;?&gt;</code> feels uneasy compared to <code>&lt;opt&gt;</code> then maybe that's a sign that these should use short words and not symbols.</p>
          <p><a href="https://forum.rebol.info/t/variadics-and-naming/717/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/variadics-and-naming/717/3</link>
        <pubDate>Sat, 30 Jun 2018 16:20:26 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-717-3</guid>
        <source url="https://forum.rebol.info/t/variadics-and-naming/717.rss">[[Variadics, and naming ...]]</source>
      </item>
      <item>
        <title>[[Variadics, and naming ...]]</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>I don't know a better word than ... just brainstorming: take, walk, stream, multi, lookahead, any, some, eternal, get, variadic, ...</p>
<p>I actually kinda like the direction get hints at.</p>
          <p><a href="https://forum.rebol.info/t/variadics-and-naming/717/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/variadics-and-naming/717/2</link>
        <pubDate>Sat, 30 Jun 2018 14:08:14 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-717-2</guid>
        <source url="https://forum.rebol.info/t/variadics-and-naming/717.rss">[[Variadics, and naming ...]]</source>
      </item>
      <item>
        <title>[[Variadics, and naming ...]]</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The title is literal--I'm really talking about <strong><code>...</code></strong></p>
<p>My proposal, which I like and <a class="mention" href="/u/ingohohmann">@IngoHohmann</a> liked, is that <code>...</code> be a form of interactive breakpoint that triggers the debugger and lets you type in something.  More or less like:</p>
<pre><code>&gt;&gt; x: 10

&gt;&gt; print ["The value plus x is" ... + x]
** Encountered `...`, use RESUME/WITH to continue with value
** Debug Break

|0|&gt;&gt; x
== 10

&gt;&gt; resume/with 20
The value plus x is 30
</code></pre>
<p>Symbolically, it stands out a bit.  And also, this would make it kind of reasonable as a sort of "TBD".  If you're working on code and haven't gotten to something yet, you can indicate that pretty easily:</p>
<pre><code>solve-virtual-binding: function [
    {Avoid exponential cost from nested binds}
][
    ...
]
</code></pre>
<p>And when people are stubbing in examples on the internet for code snippets, it's good there too.  If you ever actually run the code, you'll get something more useful than an error.</p>
<p>But that brings up a question... ... ...</p>
<h3>What to use for variadics?</h3>
<p>If <code>...</code> means "unfinished" or "breakpoint", it seems bad to borrow it as we are today for variadic function arguments.  Currently those are with the tag <code>&lt;...&gt;</code>:</p>
<pre><code>foo: function [args [integer! &lt;...&gt;]] [...]
</code></pre>
<p>Right there, juxtaposed against the coolness of the proposed usage, it seems we should pick something better, rather than blindly following along with what C and some other languages use.</p>
<p>So, what are the options?  I actually initially used double brackets, when I wanted the system to be avoiding keywords to make it more skinnable:</p>
<pre><code>foo: function [args [[integer!]]] [...]
</code></pre>
<p>But that's not necessarily very communicative, and looks a bit more like it's some kind of composition tool, a la <a href="https://trello.com/c/ko89tF2Y" rel="nofollow noopener">composeII</a>.</p>
<p><a class="mention" href="/u/gchiu">@gchiu</a> suggests <code>&lt;any&gt;</code>, syncing up more with the PARSE sense of the word, and that might look good going before, though it might look weird doubling up with ANY-VALUE!:</p>
<pre><code>foo: function [args [&lt;any&gt; integer!]] [...]
foo: function [args [&lt;any&gt; any-value!]] [...] ;-- too weird?
</code></pre>
<p>In a PARSE rule you can write <strong>[any any-value!]</strong>, so it's not like it's that bad.</p>
<p>On the one hand, it's bad to make up names when CS agrees on it.  So using the word <code>&lt;variadic&gt;</code> could be argued for over things like <code>&lt;multi&gt;</code> or somesuch.  Then again, if the goal is to be accessible and non-intimidating then variadic and VARARGS! as the name of the type might should be reconsidered.</p>
<p>Either way I think <code>&lt;...&gt;</code> should be avoided, so as to let the new meaning of <code>...</code> take the stage.  So, ideas/votes on the fate of variadics?</p>
          <p><a href="https://forum.rebol.info/t/variadics-and-naming/717/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/variadics-and-naming/717/1</link>
        <pubDate>Fri, 29 Jun 2018 08:21:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-717-1</guid>
        <source url="https://forum.rebol.info/t/variadics-and-naming/717.rss">[[Variadics, and naming ...]]</source>
      </item>
  </channel>
</rss>

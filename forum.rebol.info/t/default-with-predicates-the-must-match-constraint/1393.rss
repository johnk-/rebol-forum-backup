<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>DEFAULT with Predicates: The Must-Match Constraint</title>
    <link>https://forum.rebol.info/t/default-with-predicates-the-must-match-constraint/1393</link>
    <description>With some sadness, [the experiment for DEFAULT inside of CASE/SWITCH is having to get the axe](https://forum.rebol.info/t/default-now-usable-in-case-switch/739/6?u=hostilefork).  I explain the reason there due to the coming influence of predicates.

&gt; Note: I will emphasize that these experiments--even if they get backed out--are frequently major contributors in the sense of the facilities they test and keep working.  In this case, skippable left enfix quoting.
&gt;
&gt; (The same is true of why COMMA! could be implemented in a day.  Its BAR!-based predecessors had stretched over years of sifting out the interactions of invisible expression barriers with all the other constructs.)

## The Predicates Taketh Away, But They Also Giveth!

So to bring in a fun new feature, I&#39;ve added a predicate to DEFAULT itself.

What the predicate means is that you can have an additional test (beyond &quot;being not NULL or VOID!&quot;) for *when a value shouldn&#39;t be overwritten*.

    &gt;&gt; value: &quot;not an integer&quot;

    &gt;&gt; value: default .integer? [10 + 20]
    &gt;&gt; value  ; wasn&#39;t an integer, changed
    == 30

    &gt;&gt; value: default .integer? [1000 + 2000]
    &gt;&gt; value
    == 30  ; was already an integer, no change.

So the behavior is *similar* to:

    if not integer? value [value: 1000 + 2000]

But you&#39;re getting more than avoiding the repeat of a variable name.  You&#39;re actually getting:

    all [
         not void? get/any &#39;value   ; or `defined? &#39;value`
         not null? :value           ; or `set? &#39;value`
         not integer? :value
     ] then [
         value: 1000 + 2000
     ]

## Question: Should The Predicate Be Backwards?

This depends on how you read it **x: default .xxx? [...]**

    X Should DEFAULT IF .XXX? is TRUE

    X Should DEFAULT UNLESS .XXX? is TRUE

Neither the word &quot;IF&quot; nor &quot;UNLESS&quot; appear in DEFAULT, so it&#39;s not like there&#39;s an obvious answer.

I picked it the UNLESS way because it seems like you&#39;d end up writing shorter code in general if you talk about what you *want* instead of what you *don&#39;t want*.  Almost every condition would need a NOT in it, otherwise.  So you save some typing.

But if people find it confusing this way, and really believe changing it would help, I&#39;d be fine with it.

## Predicates Are Game-Changers

There was a lot of agony before about whether BLANK! should count as a &quot;set&quot; variable or not.  if that&#39;s something people might want to control, you have to think of a refinement name for it (DEFAULT/ONLY ?) and it can get very hard to reason about.

This cuts through all the fog.  If you don&#39;t supply a predicate, the default is `.not.blank?`   e.g. any non-blank value counts as being already set, and isn&#39;t defaulted.  But blank values are defaulted.

Providing a custom predicate overrides it.  This is infinitely more useful.

**I think you&#39;re going to like where predicates are going, as the haphazard internal non-configurable decision making of constructs is formalized and overridable.**</description>
    
    <lastBuildDate>Sat, 07 Nov 2020 15:41:04 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/default-with-predicates-the-must-match-constraint/1393.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>DEFAULT with Predicates: The Must-Match Constraint</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Concise and powerful. Great new feature, I likes!</p>
          <p><a href="https://forum.rebol.info/t/default-with-predicates-the-must-match-constraint/1393/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/default-with-predicates-the-must-match-constraint/1393/2</link>
        <pubDate>Sat, 07 Nov 2020 15:41:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1393-2</guid>
        <source url="https://forum.rebol.info/t/default-with-predicates-the-must-match-constraint/1393.rss">DEFAULT with Predicates: The Must-Match Constraint</source>
      </item>
      <item>
        <title>DEFAULT with Predicates: The Must-Match Constraint</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>With some sadness, <a href="https://forum.rebol.info/t/default-now-usable-in-case-switch/739/6">the experiment for DEFAULT inside of CASE/SWITCH is having to get the axe</a>.  I explain the reason there due to the coming influence of predicates.</p>
<blockquote>
<p>Note: I will emphasize that these experiments--even if they get backed out--are frequently major contributors in the sense of the facilities they test and keep working.  In this case, skippable left enfix quoting.</p>
<p>(The same is true of why COMMA! could be implemented in a day.  Its BAR!-based predecessors had stretched over years of sifting out the interactions of invisible expression barriers with all the other constructs.)</p>
</blockquote>
<h2>The Predicates Taketh Away, But They Also Giveth!</h2>
<p>So to bring in a fun new feature, I've added a predicate to DEFAULT itself.</p>
<p>What the predicate means is that you can have an additional test (beyond "being not NULL or VOID!") for <em>when a value shouldn't be overwritten</em>.</p>
<pre><code>&gt;&gt; value: "not an integer"

&gt;&gt; value: default .integer? [10 + 20]
&gt;&gt; value  ; wasn't an integer, changed
== 30

&gt;&gt; value: default .integer? [1000 + 2000]
&gt;&gt; value
== 30  ; was already an integer, no change.
</code></pre>
<p>So the behavior is <em>similar</em> to:</p>
<pre><code>if not integer? value [value: 1000 + 2000]
</code></pre>
<p>But you're getting more than avoiding the repeat of a variable name.  You're actually getting:</p>
<pre><code>all [
     not void? get/any 'value   ; or `defined? 'value`
     not null? :value           ; or `set? 'value`
     not integer? :value
 ] then [
     value: 1000 + 2000
 ]
</code></pre>
<h2>Question: Should The Predicate Be Backwards?</h2>
<p>This depends on how you read it <strong>x: default .xxx? [...]</strong></p>
<pre><code>X Should DEFAULT IF .XXX? is TRUE

X Should DEFAULT UNLESS .XXX? is TRUE
</code></pre>
<p>Neither the word "IF" nor "UNLESS" appear in DEFAULT, so it's not like there's an obvious answer.</p>
<p>I picked it the UNLESS way because it seems like you'd end up writing shorter code in general if you talk about what you <em>want</em> instead of what you <em>don't want</em>.  Almost every condition would need a NOT in it, otherwise.  So you save some typing.</p>
<p>But if people find it confusing this way, and really believe changing it would help, I'd be fine with it.</p>
<h2>Predicates Are Game-Changers</h2>
<p>There was a lot of agony before about whether BLANK! should count as a "set" variable or not.  if that's something people might want to control, you have to think of a refinement name for it (DEFAULT/ONLY ?) and it can get very hard to reason about.</p>
<p>This cuts through all the fog.  If you don't supply a predicate, the default is <code>.not.blank?</code>   e.g. any non-blank value counts as being already set, and isn't defaulted.  But blank values are defaulted.</p>
<p>Providing a custom predicate overrides it.  This is infinitely more useful.</p>
<p><strong>I think you're going to like where predicates are going, as the haphazard internal non-configurable decision making of constructs is formalized and overridable.</strong></p>
          <p><a href="https://forum.rebol.info/t/default-with-predicates-the-must-match-constraint/1393/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/default-with-predicates-the-must-match-constraint/1393/1</link>
        <pubDate>Sat, 07 Nov 2020 15:09:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1393-1</guid>
        <source url="https://forum.rebol.info/t/default-with-predicates-the-must-match-constraint/1393.rss">DEFAULT with Predicates: The Must-Match Constraint</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Composition via Replacement/Substitution</title>
    <link>https://forum.rebol.info/t/composition-via-replacement-substitution/688</link>
    <description>I recently closed a Rebol issue where I was pitching COMBINE, as I feel that the main needs are now served by [SPACED, UNSPACED, and DELIMIT](https://trello.com/c/QOAJa1n1/133-delimit-with-specializations-spaced-and-unspaced).

But Ladislav linked to a wiki article which contains some stuff which might be worth discussing:

[Replacement.wiki](https://github.com/ladislav/rebol.net/blob/master/wikipedia/Replacement.wiki)

It mentions **INLINE**, **BUILD**, and **SUBSTITUTE**.  I&#39;d previously heard of BUILD, but never used it.  The link is down, but here is %build.r from the Internet Archive:

    Rebol [
        Title: &quot;Build&quot;
        Author: [&quot;Ladislav Mecir&quot; &quot;Brian Hawley&quot;]
        File: %build.r
        Date: 9-Apr-2007/23:51:01+2:00
        History: [
            7/apr/2003/19:02 {using INSERT and ONLY keywords}
            30/Oct/2004/12:55 {intermediate version - alpha}
            31/Oct/2004/9:49 {intermediate - word - insert/only, :word - insert}
            4/Nov/2004/6:55 {word - insert and evaluate, :word - insert/only}
            4/Nov/2004/15:00 {/with - refinement name}
            2-May-2006/10:51:09+2:00 {
                lit-path preservation,
                &#39;ENCL and &#39;DTTO made local
                examples added
            }
            2-May-2006/13:08:57+2:00 {one more lit-path related change by Brian}
            2-May-2006/13:36:38+2:00 {example correction by Brian}
            9-Apr-2007/23:51:01+2:00 {function description improved}
        ]
        Purpose: {Build a block comfortably}
    ]

    comment [
        ; Usage

        ; This dialect looks very human-readable, doesn&#39;t it?
        ; (I found a lot of possible usages for it).

        build/with [x (y) [z] :u v] [
            x: 1 y: 1 + 1 z: 1 + 2 u: [contents of u] v: [contents of v]
        ] ; == [1 (2) [3] [contents of u] contents of v]

        ; You can easily &quot;stack&quot; it like:

        build/with [let&#39;s see what] build/with [what: [the rise of the (y)]] [
            y: &#39;sun
        ] ; == [let&#39;s see the rise of the (sun)]
        
        ; or use the evaluation feature like:
        
        build [ins 2 + 2] ; == [4]
        build [only reduce [3 * 4 5 + 6]] ; == [[12 11]]
        
        ; you can even define and use your own functions the same way
        ; using the /WITH refinement
    ]

    use [encl dtto spc] [
        ; patch the IN function if needed
        spc: find/only third :in reduce [word!]
        if spc [change spc/1 any-word!]

        encl: func [
            {&quot;a value in a block&quot; function}
            value [any-type!]
        ] [head insert/only copy [] get/any &#39;value]

        dtto: func [
            {a &quot;pass the value over&quot; function}
            value [any-type!]
        ] [return get/any &#39;value]

        build: func [
            {
                Build a block comfortably.
                Using &#39;INS and &#39;ONLY &quot;keywords&quot; by default.
                INS inserts the following value (similar to INSERT)
                ONLY inserts a series as one item (similar to INSERT/ONLY)
            }
            block [block! paren! path! set-path! lit-path!]
            /with {use the &quot;keywords&quot; given below}
            keywords [block!]
            /local context inner
        ] [
            keywords: any [keywords [only: :encl ins: :dtto]]
            context: make object! keywords
            inner: func [block /local item item&#39; pos result] [
                result: make :block length? :block
                parse :block [
                    any [
                        pos: set item word! (
                            either all [item&#39;: in context item item &lt;&gt; &#39;self] [
                                change pos item&#39;
                                set/any [item pos] do/next pos
                                insert tail :result get/any &#39;item
                            ] [insert tail :result item pos: next pos]
                        ) :pos | set item get-word! (
                            either all [item&#39;: in context item item &lt;&gt; &#39;self] [
                                insert/only tail :result get/any item&#39;
                            ] [insert tail :result item]
                        ) | set item [
                            block! | paren! | path! | set-path! | lit-path!
                        ] (
                            insert/only tail :result inner :item
                        ) | set item skip (insert/only tail :result get/any &#39;item)
                    ]
                ]
                :result
            ]
            inner :block
        ]
    ]</description>
    
    <lastBuildDate>Mon, 10 May 2021 02:36:33 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/composition-via-replacement-substitution/688.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Composition via Replacement/Substitution</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I recently closed a Rebol issue where I was pitching COMBINE, as I feel that the main needs are now served by <a href="https://trello.com/c/QOAJa1n1/133-delimit-with-specializations-spaced-and-unspaced">SPACED, UNSPACED, and DELIMIT</a>.</p>
<p>But Ladislav linked to a wiki article which contains some stuff which might be worth discussing:</p>
<p><a href="https://github.com/ladislav/rebol.net/blob/master/wikipedia/Replacement.wiki">Replacement.wiki</a></p>
<p>It mentions <strong>INLINE</strong>, <strong>BUILD</strong>, and <strong>SUBSTITUTE</strong>.  I'd previously heard of BUILD, but never used it.  The link is down, but here is %build.r from the Internet Archive:</p>
<pre><code>Rebol [
    Title: "Build"
    Author: ["Ladislav Mecir" "Brian Hawley"]
    File: %build.r
    Date: 9-Apr-2007/23:51:01+2:00
    History: [
        7/apr/2003/19:02 {using INSERT and ONLY keywords}
        30/Oct/2004/12:55 {intermediate version - alpha}
        31/Oct/2004/9:49 {intermediate - word - insert/only, :word - insert}
        4/Nov/2004/6:55 {word - insert and evaluate, :word - insert/only}
        4/Nov/2004/15:00 {/with - refinement name}
        2-May-2006/10:51:09+2:00 {
            lit-path preservation,
            'ENCL and 'DTTO made local
            examples added
        }
        2-May-2006/13:08:57+2:00 {one more lit-path related change by Brian}
        2-May-2006/13:36:38+2:00 {example correction by Brian}
        9-Apr-2007/23:51:01+2:00 {function description improved}
    ]
    Purpose: {Build a block comfortably}
]

comment [
    ; Usage

    ; This dialect looks very human-readable, doesn't it?
    ; (I found a lot of possible usages for it).

    build/with [x (y) [z] :u v] [
        x: 1 y: 1 + 1 z: 1 + 2 u: [contents of u] v: [contents of v]
    ] ; == [1 (2) [3] [contents of u] contents of v]

    ; You can easily "stack" it like:

    build/with [let's see what] build/with [what: [the rise of the (y)]] [
        y: 'sun
    ] ; == [let's see the rise of the (sun)]
    
    ; or use the evaluation feature like:
    
    build [ins 2 + 2] ; == [4]
    build [only reduce [3 * 4 5 + 6]] ; == [[12 11]]
    
    ; you can even define and use your own functions the same way
    ; using the /WITH refinement
]

use [encl dtto spc] [
    ; patch the IN function if needed
    spc: find/only third :in reduce [word!]
    if spc [change spc/1 any-word!]

    encl: func [
        {"a value in a block" function}
        value [any-type!]
    ] [head insert/only copy [] get/any 'value]

    dtto: func [
        {a "pass the value over" function}
        value [any-type!]
    ] [return get/any 'value]

    build: func [
        {
            Build a block comfortably.
            Using 'INS and 'ONLY "keywords" by default.
            INS inserts the following value (similar to INSERT)
            ONLY inserts a series as one item (similar to INSERT/ONLY)
        }
        block [block! paren! path! set-path! lit-path!]
        /with {use the "keywords" given below}
        keywords [block!]
        /local context inner
    ] [
        keywords: any [keywords [only: :encl ins: :dtto]]
        context: make object! keywords
        inner: func [block /local item item' pos result] [
            result: make :block length? :block
            parse :block [
                any [
                    pos: set item word! (
                        either all [item': in context item item &lt;&gt; 'self] [
                            change pos item'
                            set/any [item pos] do/next pos
                            insert tail :result get/any 'item
                        ] [insert tail :result item pos: next pos]
                    ) :pos | set item get-word! (
                        either all [item': in context item item &lt;&gt; 'self] [
                            insert/only tail :result get/any item'
                        ] [insert tail :result item]
                    ) | set item [
                        block! | paren! | path! | set-path! | lit-path!
                    ] (
                        insert/only tail :result inner :item
                    ) | set item skip (insert/only tail :result get/any 'item)
                ]
            ]
            :result
        ]
        inner :block
    ]
]</code></pre>
          <p><a href="https://forum.rebol.info/t/composition-via-replacement-substitution/688/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/composition-via-replacement-substitution/688/1</link>
        <pubDate>Fri, 15 Jun 2018 03:41:59 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-688-1</guid>
        <source url="https://forum.rebol.info/t/composition-via-replacement-substitution/688.rss">Composition via Replacement/Substitution</source>
      </item>
  </channel>
</rss>

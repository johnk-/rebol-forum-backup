<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Idea: QUOTED! Data Means FOR =&gt; FOR-EACH</title>
    <link>https://forum.rebol.info/t/idea-quoted-data-means-for-for-each/1601</link>
    <description>So I had another flash-o-inspiration.

    for x [1 thru 3] [
       print [x]
    ]

Gives you:

    1
    2
    3

But...

    for x @[1 thru 3] [
       print [x]
    ]

Leads to the second parameter to FOR being **&#39;[1 thru 3]**  And that would give you:

    1
    thru
    3

And if you don&#39;t like how that looks, you could also use:

    for x each [1 thru 3] [
       print [x]
    ]

    1
    thru
    3

In that case, EACH is making a generator function, so the second argument to FOR is an ACTION! that produces values until it produces a NULL which causes it to stop the FOR.

So I think that resolves that the base level of FOR and MAP is a dialect for generating values.  Anyone have ideas for this dialect and how it works besides me?  :-/  &lt;sub&gt;No, don&#39;t worry about it, I&#39;ll solve it.&lt;/sub&gt;</description>
    
    <lastBuildDate>Wed, 12 May 2021 08:24:17 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/idea-quoted-data-means-for-for-each/1601.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Idea: QUOTED! Data Means FOR =&gt; FOR-EACH</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So I had another flash-o-inspiration.</p>
<pre><code>for x [1 thru 3] [
   print [x]
]
</code></pre>
<p>Gives you:</p>
<pre><code>1
2
3
</code></pre>
<p>But...</p>
<pre><code>for x @[1 thru 3] [
   print [x]
]
</code></pre>
<p>Leads to the second parameter to FOR being <strong>'[1 thru 3]</strong>  And that would give you:</p>
<pre><code>1
thru
3
</code></pre>
<p>And if you don't like how that looks, you could also use:</p>
<pre><code>for x each [1 thru 3] [
   print [x]
]

1
thru
3
</code></pre>
<p>In that case, EACH is making a generator function, so the second argument to FOR is an ACTION! that produces values until it produces a NULL which causes it to stop the FOR.</p>
<p>So I think that resolves that the base level of FOR and MAP is a dialect for generating values.  Anyone have ideas for this dialect and how it works besides me?  :-/  <sub>No, don't worry about it, I'll solve it.</sub></p>
          <p><a href="https://forum.rebol.info/t/idea-quoted-data-means-for-for-each/1601/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/idea-quoted-data-means-for-for-each/1601/1</link>
        <pubDate>Wed, 12 May 2021 08:24:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1601-1</guid>
        <source url="https://forum.rebol.info/t/idea-quoted-data-means-for-for-each/1601.rss">Idea: QUOTED! Data Means FOR =&gt; FOR-EACH</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Siskin-Builder (Rebol-based build tool by Oldes)</title>
    <link>https://forum.rebol.info/t/siskin-builder-rebol-based-build-tool-by-oldes/1672</link>
    <description>Oldes apparently has undertaken the task of making a [build dialect/tool for his branch of Rebol3](https://github.com/Siskin-framework/Builder).  This animated GIF makes it seem pretty slick looking in the console:

https://raw.githubusercontent.com/Oldes/media/master/screens/build-siskin.gif

The makefiles are called &quot;.nest&quot; files, and here&#39;s the one in his R3 repository:

  **https://github.com/Oldes/Rebol3/blob/master/make/rebol3.nest**

## New Ideas?

Looking past the nice colors and presentation, I don&#39;t know if any &quot;big new ideas&quot; jump out at me in terms of a dialect.

**Preprocessor Usage**

The primary thing that does jump out at me is use of a preprocessor.  He has branches for **#if Windows [...]** that let you ask for transformations and selections in the middle of lists that are data.  Less cluttered than going through and COMPOSE-ing everything, and lets you stay in the declarative domain.

Seems he&#39;s using a generic preprocessing script--not one that&#39;s specific to just this tool--and that&#39;s probably a good idea.  Though now that **#a** is used for characters this gets a bit stickier... even if you were previously willing to sacrifice ISSUE! in your file so you could do preprocessing, you now would be sacrificing your notation for characters too.

*(I should point out that with generic quoting, you do have **`&#39;#a`**, so at least in evaluative circumstances you&#39;d have a way to escape out of the preprocessor.  It might be that if you use a preprocessor on the file, all your #... that you don&#39;t want to represent preprocessing instructions are just quoted out?)*

**Requiring the % on File Paths**

He does use **%file/path.c** instead of **file/path.c** -- and that&#39;s a case where I&#39;ve pointed out that Carl chose to use the lighter notation without the %.

I think that designing a dialect that is heavily dealing with paths as data, that if you can dodge the % then it makes it nicer to look at and edit.  If you want to allow for evaluations, you would use GROUP!s or @vars or something else.

## Our Nightmare Build System Is Still Upping My Game

Oldes&#39;s makefile here, and one that Giulio made...as well as Carl&#39;s original, are all a far cry from the mind-bending behemoth that is Rebmake.

Not only is Rebmake a beast, we have a bootstrap compatibility layer for morphing a several year old interpreter into a common subset to run it.  It&#39;s a mind-bending challenge...the details of which I generally spare you from.  :exploding_head: 

It&#39;s nice to be reminded that we can do a lot smaller than that.  But oddly enough, the challenges of working with Rebmake and the %bootstrap-shim have been forcing more and more inventions in how to make the bendiest language ever.

And Rebmake isn&#39;t overtly unreasonable; its the kind of approach that someone who&#39;s thinking in OOP terms would think if they were trying to clone CMake&#39;s object model in a 1:1 fashion.  So it has been the mother of invention for complexity-taming tools...and stressing the language in areas that someone with a pure Rebol mindset wouldn&#39;t think to stress it in.

Which may explain why I&#39;m not as urgently trying to jettison Rebmake or run on a modern Ren-C as one might think.  Because forcing a new Ren-C to be able to meet an old one in the middle to run a crazy codebase is hardening the system.

But... definitely, yes, someday we&#39;re going to pitch the thing and get something lighter.

:recycle:</description>
    
    <lastBuildDate>Thu, 19 Aug 2021 06:56:38 +0000</lastBuildDate>
    <category>Build System</category>
    <atom:link href="https://forum.rebol.info/t/siskin-builder-rebol-based-build-tool-by-oldes/1672.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Siskin-Builder (Rebol-based build tool by Oldes)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Oldes apparently has undertaken the task of making a <a href="https://github.com/Siskin-framework/Builder">build dialect/tool for his branch of Rebol3</a>.  This animated GIF makes it seem pretty slick looking in the console:</p>
<p>                    <a href="https://raw.githubusercontent.com/Oldes/media/master/screens/build-siskin.gif" target="_blank" rel="noopener" class="onebox">
            <img src="https://raw.githubusercontent.com/Oldes/media/master/screens/build-siskin.gif" width="690" height="457">
          </a>

</p>
<p>The makefiles are called ".nest" files, and here's the one in his R3 repository:</p>
<p><strong><a href="https://github.com/Oldes/Rebol3/blob/master/make/rebol3.nest" class="inline-onebox">Rebol3/rebol3.nest at master · Oldes/Rebol3 · GitHub</a></strong></p>
<h2>New Ideas?</h2>
<p>Looking past the nice colors and presentation, I don't know if any "big new ideas" jump out at me in terms of a dialect.</p>
<p><strong>Preprocessor Usage</strong></p>
<p>The primary thing that does jump out at me is use of a preprocessor.  He has branches for <strong><span class="hashtag">#if</span> Windows [...]</strong> that let you ask for transformations and selections in the middle of lists that are data.  Less cluttered than going through and COMPOSE-ing everything, and lets you stay in the declarative domain.</p>
<p>Seems he's using a generic preprocessing script--not one that's specific to just this tool--and that's probably a good idea.  Though now that <strong><span class="hashtag">#a</span></strong> is used for characters this gets a bit stickier... even if you were previously willing to sacrifice ISSUE! in your file so you could do preprocessing, you now would be sacrificing your notation for characters too.</p>
<p><em>(I should point out that with generic quoting, you do have <strong><code>'#a</code></strong>, so at least in evaluative circumstances you'd have a way to escape out of the preprocessor.  It might be that if you use a preprocessor on the file, all your #... that you don't want to represent preprocessing instructions are just quoted out?)</em></p>
<p><strong>Requiring the % on File Paths</strong></p>
<p>He does use <strong>%file/path.c</strong> instead of <strong>file/path.c</strong> -- and that's a case where I've pointed out that Carl chose to use the lighter notation without the %.</p>
<p>I think that designing a dialect that is heavily dealing with paths as data, that if you can dodge the % then it makes it nicer to look at and edit.  If you want to allow for evaluations, you would use GROUP!s or <span class="mention">@vars</span> or something else.</p>
<h2>Our Nightmare Build System Is Still Upping My Game</h2>
<p>Oldes's makefile here, and one that Giulio made...as well as Carl's original, are all a far cry from the mind-bending behemoth that is Rebmake.</p>
<p>Not only is Rebmake a beast, we have a bootstrap compatibility layer for morphing a several year old interpreter into a common subset to run it.  It's a mind-bending challenge...the details of which I generally spare you from.  <img src="https://forum.rebol.info/images/emoji/twitter/exploding_head.png?v=9" title=":exploding_head:" class="emoji" alt=":exploding_head:"></p>
<p>It's nice to be reminded that we can do a lot smaller than that.  But oddly enough, the challenges of working with Rebmake and the %bootstrap-shim have been forcing more and more inventions in how to make the bendiest language ever.</p>
<p>And Rebmake isn't overtly unreasonable; its the kind of approach that someone who's thinking in OOP terms would think if they were trying to clone CMake's object model in a 1:1 fashion.  So it has been the mother of invention for complexity-taming tools...and stressing the language in areas that someone with a pure Rebol mindset wouldn't think to stress it in.</p>
<p>Which may explain why I'm not as urgently trying to jettison Rebmake or run on a modern Ren-C as one might think.  Because forcing a new Ren-C to be able to meet an old one in the middle to run a crazy codebase is hardening the system.</p>
<p>But... definitely, yes, someday we're going to pitch the thing and get something lighter.</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/recycle.png?v=9" title=":recycle:" class="emoji only-emoji" alt=":recycle:"></p>
          <p><a href="https://forum.rebol.info/t/siskin-builder-rebol-based-build-tool-by-oldes/1672/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/siskin-builder-rebol-based-build-tool-by-oldes/1672/1</link>
        <pubDate>Thu, 19 Aug 2021 06:56:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1672-1</guid>
        <source url="https://forum.rebol.info/t/siskin-builder-rebol-based-build-tool-by-oldes/1672.rss">Siskin-Builder (Rebol-based build tool by Oldes)</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The fallout from the SWITCH fallout feature</title>
    <link>https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312</link>
    <description>To try and be a little bit more clever, Ren-C added the ability of SWITCH to let the last value &quot;fall out&quot;.   So instead of writing:

    result: switch/default &quot;z&quot; [
        &quot;a&quot; [print &quot;won&#39;t run&quot; | 10]
        &quot;b&quot; [print &quot;this either&quot; | 20]
    ][
        30
    ]

You could just write:        

    result: switch &quot;z&quot; [
        &quot;a&quot; [print &quot;won&#39;t run&quot; | 10]
        &quot;b&quot; [print &quot;this either&quot; | 20]
        30
     ]

Additionally, because Ren-C&#39;s switch cases have &quot;soft-quoting&quot; semantics, you could put arbitrary code in a GROUP! and it would fall out.

     var: &quot;a&quot;
     result: switch &quot;z&quot; [
         :var [print &quot;won&#39;t run&quot; | 10]
         (first [&quot;b&quot; &quot;c&quot;]) [print &quot;this either&quot; | 20]
         (10 + 20)
     ]

&gt; **UPDATE Jun 2018:** switch now is [completely evaluative](https://trello.com/c/9ChhSWC4)...not only are GROUP! and GET-WORD! and GET-PATH! evaluated, but so is everything else.  You thus need to use LIT-WORD! where you would have used words before.  There&#39;s a compatibility shim to throw up warnings about the change, so you can&#39;t use match expressions like `x + y` directly *yet*.  But you can if you say `switch: :lib/switch` and get the real version, which will be enabled by default in the future.

It was an interesting idea that felt a bit like being able to fold defaults into a CASE statement with **true [default case code]**, rather than needing a CASE/DEFAULT.

But with ELSE and THEN and !! and ??, is this feature still interesting?

     result: switch &quot;z&quot; [
         &quot;a&quot; [print &quot;won&#39;t run&quot; | 10]
         &quot;b&quot; [print &quot;this either&quot; | 20]
     ] else [
         10 + 20
     ]

Or...

     result: switch &quot;z&quot; [
         &quot;a&quot; [print &quot;won&#39;t run&quot; | 10]
         &quot;b&quot; [print &quot;this either&quot; | 20]
     ] !! 30

The fallout feature doesn&#39;t have much cost; it&#39;s nearly free.  And for the performance-minded, it&#39;s the fastest way to have a default value.

**Does fallout make SWITCH feel like it&#39;s fancier and has good dialecting bones, taking advantage of Rebol&#39;s unconventional-ness?  Or does it make SWITCH seem weird...like you&#39;re looking at incomplete code, missing the branch for the last switch case?  What do people think looking over it in the above examples?**

&gt; **UPDATE June 2018:** [Fallout committed for both SWITCH and CASE](https://github.com/metaeducation/ren-c/pull/822)</description>
    
    <lastBuildDate>Wed, 20 Jun 2018 07:32:36 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The fallout from the SWITCH fallout feature</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>This thread went off into tangents about defaulting which were (fortunately) eventually resolved, <a href="https://trello.com/c/rmsTJueg/" rel="nofollow noopener">in a very nice way</a>.</p>
<p>That's great--but it never resolved the original question:</p>
<aside class="quote no-group quote-modified" data-post="1" data-topic="312">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Does fallout make SWITCH feel like it’s fancier and has good dialecting bones, taking advantage of Rebol’s unconventional-ness?  Or does it make SWITCH seem weird…like you’re looking at incomplete code, missing the branch for the last switch case?  What do people think looking over it in the above examples?</p>
</blockquote>
</aside>
<p>I'm going to come out <strong>in favor of the switch fallout feature</strong>.  Reasons:</p>
<ol>
<li>
<p>Performance-wise, it is the fastest defaulting mechanism...faster than ELSE or SWITCH/DEFAULT.</p>
</li>
<li>
<p>If people don't like it, they don't have to use it.</p>
</li>
<li>
<p>Due to the nature of ELSE, it completes the left hand side of an expression.  Sometimes when an expression can be completed you don't want it to...and this means you need <code>&lt;-</code>, so for instance you have to write <strong>append x &lt;- switch [...] else [code]</strong>.  But with switch fallout, you can do it as <strong>append x switch [... (code)]</strong>.</p>
</li>
</ol>
<p>Point 3 is a reason to not blindly convert EITHERs into IF...ELSE.  Or CASEs ending in true [...] to CASE...ELSE.  Sometimes it's better to duck an arrow.</p>
<p>I've also noticed that CASE ending in <strong>true [...]</strong> can be more compact than a CASE...ELSE.  That applies to the fallout switch too, it's just shorter.</p>
<p><em>(Note: As some have pointed out, writing <strong>/else [...]</strong> as your last "truthy" case is actually faster, because there's no variable lookup involved (true =&gt; #[true]), /ELSE is just "truthy" by nature.  So we should probably prefer that as an idiom.)</em></p>
<p>These arguments seem to favor the feature, so I'm going to consider it locked for Beta/One.  But /DEFAULT is going to get dropped...and only be available in legacy.</p>
<p>Now a new question...</p>
<h3>Should CASE also support fallout?</h3>
<p>There've been some increases to the strictness of CASE.  It now pretty much requires blocks for the clauses, and given that it does that, might we allow:</p>
<pre><code>&gt;&gt; case [
       1 &gt; 2 [...]
       3 &gt; 4 [...]
       10 + 20
   ]
== 30
</code></pre>
<p>It would be consistent with SWITCH, and the risks of such a construct are much lower than they used to be.  Note that since there's strict alternation, you couldn't say <strong>10 + 20 30</strong>, it would measure that exactly one expression ran and then it either ends or there's a source-level block.</p>
<p>A lot of the same arguments for why it's good for SWITCH apply here, too.  (And of course, useful for Code Golf...)  Certainly the "you don't have to use it if you don't want to" seems a pretty strong point.</p>
<blockquote>
<p><strong>Update:</strong> <a href="https://github.com/metaeducation/ren-c/pull/822" rel="nofollow noopener">Fallout from CASE committed</a></p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/8</link>
        <pubDate>Tue, 19 Jun 2018 10:02:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-312-8</guid>
        <source url="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312.rss">The fallout from the SWITCH fallout feature</source>
      </item>
      <item>
        <title>The fallout from the SWITCH fallout feature</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="5" data-topic="312">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But would BAR!-ification of BLANK! be that bad?</p>
</blockquote>
</aside>
<p>Hrm.  Well, experimenting with it, I feel like it crosses a line.</p>
<p>Here's a sample of a real-world casualty of a plain CASE <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/mezz/sys-load.r#L299" rel="nofollow noopener">wishing to intentionally return a BLANK!</a>, from BrianH's LOAD code.  <em>(I'm linking to the original R3-Alpha repository to best reflect the original intent.)</em></p>
<p>Basically, even if you supply a /TYPE to this routine, it was legal to <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/mezz/sys-load.r#L269" rel="nofollow noopener">use a BLANK! to indicate that there is no type</a>.</p>
<p>The error message you get is not too informative: <code>read-decode does not allow bar! for its type argument</code>.  At least it <em>is</em> an error message, but this almost calls for a specialized VOID-OR-BLANK-FROM-BRANCH! datatype to clue you in, rather than leave you completely in the dark.  :-/</p>
<p>The problem here is that BLANK! <em>is a value</em>, and it's a value that we are encouraging people to use instead of inventing their own way of saying "nothing" on each type.  In practice, not letting branches evaluate to it feels significantly more disruptive than not letting branches evaluate to void (especially for the reasons mentioned about how a void/unset! couldn't even be used as an assignment source previously, and now it can't be put in blocks either).</p>
<p>Still good things to try out, even if it's just to be able to explain what <em>not</em> to do when people ask "why didn't you do X".</p>
<blockquote>
<p><strong>Update 2018:</strong> ^-- that part is completely true.</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/6</link>
        <pubDate>Mon, 02 Oct 2017 04:58:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-312-6</guid>
        <source url="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312.rss">The fallout from the SWITCH fallout feature</source>
      </item>
      <item>
        <title>The fallout from the SWITCH fallout feature</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In chat I suggested that maybe logic false should be folded in and be BAR!-ified.  But there are probably a lot of SWITCH or CASE usages out there that are generating LOGIC! on purpose.</p>
<p>One of the key reasons that blankification was considered to be safe was due to the historical inability to assign voids via SET-WORD!.</p>
<pre><code>x: case [true [print "this would not work in R3-Alpha"]]
</code></pre>
<p>So thus far, if that has come up BLANK! under the new rules to facilitate THEN and ELSE, it seems all right.  But there's probably a lot of this kind of stuff:</p>
<pre><code>flag: switch text [
    "on" "yes" "true" [true]
    "off" "no" "false" [false]
]
</code></pre>
<p>BAR!-ification of LOGIC! false would break that, requiring <code>SWITCH*</code>.  That looks like too much of a sacrifice.</p>
<p>But would BAR!-ification of BLANK! be that bad?  How often is BLANK! intentionally the return result of conditional branches?  <em>Is the desirability to use ANY and ALL with THEN and ELSE high enough to push intentional-blank-return into the "expert" domain of <code>SWITCH*</code> or <code>SWITCH/ONLY</code> ("if I say void <em>or</em> blank, that's what I meant the result to be...don't BAR!-ify them for the sake of THEN and ELSE")</em></p>
<p>Offhand I'd say it is probably sufficiently desirable.</p>
<blockquote>
<p><strong>Update 2018:</strong> No, it wasn't.</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/5</link>
        <pubDate>Sun, 01 Oct 2017 21:11:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-312-5</guid>
        <source url="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312.rss">The fallout from the SWITCH fallout feature</source>
      </item>
      <item>
        <title>The fallout from the SWITCH fallout feature</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="3" data-topic="312">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/johnk/40/229_2.png" class="avatar"> johnk:</div>
<blockquote>
<p>Removing /default makes sense given the availability of else. I'll add my vote to make this change.<br>
All of these small changes reduce the size of the language hence make it easier to learn.</p>
</blockquote>
</aside>
<p>Glad you think so.  There's a lot in the balance, though.</p>
<p>One sticking point is that <strong>all [() () ()]</strong> is void, while <strong>all [() false 100]</strong> is BLANK!.  The former can be used to signal an ELSE, the latter cannot.  <a class="mention" href="/u/rgchris">@rgchris</a> has thought it would seem natural to be able to write <strong>all [...] else [...]</strong> with the ELSE clause run should any of the expressions be falsey, and I'm sure many people would expect that.  But right now it's only triggered by voids, and ALLs are not voided on failure because people like writing <strong>if all [...] [x]</strong> and not <strong>if all? [...] [x]</strong> or <strong>all [... | x]</strong>.</p>
<p>So what ELSE means with ANY and ALL winds up like <strong>all [...] otherwise-if-all-conditions-opted-out [...]</strong>.  What we might be able to do is let <em>either</em> BLANK! or void signal an ELSE, and then have taken branches do BAR!-ification instead of BLANK!-ification...</p>
<pre><code>if true [print "hi"] =&gt; a BAR!, won't trigger ELSE
if true [blank] =&gt; a BAR! won't trigger ELSE
if false [123] =&gt; void, will trigger ELSE
any [false false false] =&gt; a BLANK!, will trigger ELSE
</code></pre>
<p>This preserves the ability of ANY and ALL to safely propagate all-opt-out as void to signal another opt-out, which is important for reasons I have explained before <em>(but can explain again if anyone has forgotten)</em>.</p>
<p>I prefer BAR!-ification to truthification or falsification, because since literal BAR!s can't be used in source as arguments they create a bit of a hiccup.</p>
<p>So how about it?  BAR!-ification instead of BLANK!-ification of taken conditionals, have THEN and ELSE signaled by "nothingness" as BLANK! or void instead of voidedness?</p>
<blockquote>
<p><strong>Update 2018:</strong> No, that was a misguided idea.  BLANK! is a legitimate value.  A much better idea was to <a href="https://trello.com/c/rmsTJueg/" rel="nofollow noopener">rethink NULL</a>, and allow ANY and ALL to return it... be used safely in conditionals...and not stored in variables.</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/4</link>
        <pubDate>Sun, 01 Oct 2017 20:12:12 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-312-4</guid>
        <source url="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312.rss">The fallout from the SWITCH fallout feature</source>
      </item>
      <item>
        <title>The fallout from the SWITCH fallout feature</title>
        <dc:creator><![CDATA[johnk]]></dc:creator>
        <description><![CDATA[
            <p>Removing <code>/default</code> makes sense given the availability of <code>else</code>. I'll add my vote to make this change.<br>
All of these small changes reduce the size of the language hence make it easier to learn.<br>
Good stuff. -John</p>
          <p><a href="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/3</link>
        <pubDate>Sun, 01 Oct 2017 00:31:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-312-3</guid>
        <source url="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312.rss">The fallout from the SWITCH fallout feature</source>
      </item>
      <item>
        <title>The fallout from the SWITCH fallout feature</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I should add that I'm seriously considering getting rid of <code>SWITCH/DEFAULT</code>.  With void as the generic signal for "this action was a no-op", there's a much richer landscape of ways to deal with defaulting that apply to every operation that obeys the conventions.</p>
<p>More useful IMO would be to add <code>SWITCH/ALL</code>.  With the ability to do soft-quoted evaluations, there are actually meaningful use cases for <code>switch/all x [...] also [...] else [...]</code></p>
<p>This would be a change to the core C native--obviously a SWITCH which supported /DEFAULT could be grafted on top of that.</p>
<blockquote>
<p><strong>Update June 2018:</strong> <a href="https://github.com/metaeducation/ren-c/pull/822" rel="nofollow noopener">SWITCH/DEFAULT eliminated</a></p>
</blockquote>
<blockquote>
<p><strong>Update September 2019:</strong> <a href="https://forum.rebol.info/t/augment-add-parameters-and-refinements-after-the-fact/1216">/DEFAULT can be added back to a derivation of SWITCH for compatibility via AUGMENT</a></p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/2</link>
        <pubDate>Mon, 25 Sep 2017 21:59:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-312-2</guid>
        <source url="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312.rss">The fallout from the SWITCH fallout feature</source>
      </item>
      <item>
        <title>The fallout from the SWITCH fallout feature</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>To try and be a little bit more clever, Ren-C added the ability of SWITCH to let the last value "fall out".   So instead of writing:</p>
<pre><code>result: switch/default "z" [
    "a" [print "won't run" | 10]
    "b" [print "this either" | 20]
][
    30
]
</code></pre>
<p>You could just write:</p>
<pre><code>result: switch "z" [
    "a" [print "won't run" | 10]
    "b" [print "this either" | 20]
    30
 ]
</code></pre>
<p>Additionally, because Ren-C's switch cases have "soft-quoting" semantics, you could put arbitrary code in a GROUP! and it would fall out.</p>
<pre><code> var: "a"
 result: switch "z" [
     :var [print "won't run" | 10]
     (first ["b" "c"]) [print "this either" | 20]
     (10 + 20)
 ]
</code></pre>
<blockquote>
<p><strong>UPDATE Jun 2018:</strong> switch now is <a href="https://trello.com/c/9ChhSWC4" rel="nofollow noopener">completely evaluative</a>...not only are GROUP! and GET-WORD! and GET-PATH! evaluated, but so is everything else.  You thus need to use LIT-WORD! where you would have used words before.  There's a compatibility shim to throw up warnings about the change, so you can't use match expressions like <code>x + y</code> directly <em>yet</em>.  But you can if you say <code>switch: :lib/switch</code> and get the real version, which will be enabled by default in the future.</p>
</blockquote>
<p>It was an interesting idea that felt a bit like being able to fold defaults into a CASE statement with <strong>true [default case code]</strong>, rather than needing a CASE/DEFAULT.</p>
<p>But with ELSE and THEN and !! and ??, is this feature still interesting?</p>
<pre><code> result: switch "z" [
     "a" [print "won't run" | 10]
     "b" [print "this either" | 20]
 ] else [
     10 + 20
 ]
</code></pre>
<p>Or...</p>
<pre><code> result: switch "z" [
     "a" [print "won't run" | 10]
     "b" [print "this either" | 20]
 ] !! 30
</code></pre>
<p>The fallout feature doesn't have much cost; it's nearly free.  And for the performance-minded, it's the fastest way to have a default value.</p>
<p><strong>Does fallout make SWITCH feel like it's fancier and has good dialecting bones, taking advantage of Rebol's unconventional-ness?  Or does it make SWITCH seem weird...like you're looking at incomplete code, missing the branch for the last switch case?  What do people think looking over it in the above examples?</strong></p>
<blockquote>
<p><strong>UPDATE June 2018:</strong> <a href="https://github.com/metaeducation/ren-c/pull/822" rel="nofollow noopener">Fallout committed for both SWITCH and CASE</a></p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/1</link>
        <pubDate>Mon, 25 Sep 2017 21:42:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-312-1</guid>
        <source url="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312.rss">The fallout from the SWITCH fallout feature</source>
      </item>
  </channel>
</rss>

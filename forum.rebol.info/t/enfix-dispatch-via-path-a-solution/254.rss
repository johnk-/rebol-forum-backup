<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Enfix dispatch via Path... a solution?</title>
    <link>https://forum.rebol.info/t/enfix-dispatch-via-path-a-solution/254</link>
    <description>Historically, there were no infix dispatches via path.  In R3-Alpha:
                                                                                                                                                                           
    &gt;&gt; obj: make object! [plus: :+]
    &gt;&gt; type? :obj/plus
    == op!

    &gt;&gt; 1 obj/plus 2
    ** Script error: op! type is not allowed here

In Red, it does... uh, something?  But not what you&#39;d want:

    &gt;&gt; obj: make object! [plus: :+]
    &gt;&gt; type? :obj/plus
    == op!
    &gt;&gt; 1 obj/plus 2
    == 2

There are mechanical reasons why it is difficult to make work how the code is written in both of them.  Let&#39;s ignore those; particularly because Ren-C is under much more control and should be able to finesse the mechanics for any design--assuming they&#39;re not paradoxical.  So the bigger issue is *philosophically* why it seems it can&#39;t work...which is GROUP!s in paths.

For a path with GROUP!s in it, in order to find what that path might resolve to requires evaluation.  Evaluation runs arbitrary code.  And enfixedness relies on lookahead; to be able to know what is on your right before making a decision about how execution will proceed.  If you have to perform an arbitrary evaluation to know whether you can proceed, you might wind up running code you don&#39;t need to.

Just a simple example to make the point:

     a: make object! [b: 20]
 
     do/next [print 10 a/(print &quot;this shouldn&#39;t print&quot; | &#39;b) 30]

But if a/b were enfixed addition, &quot;you&#39;d expect&quot; to get the printout from the GROUP! and then ultimately a result of 40.  So until someone figures out a solution to that whole halting problem thing, the lack of a &quot;psychic&quot; evaluator means we&#39;re screwed.  So it seems that paths with GROUP!s in them can&#39;t be considered enfix candidates.

Yet the simplest compromise may be right in front of us, which is to have lookahead *try* to evaluate a path, but &quot;give up&quot; if it sees a GROUP!.  If it doesn&#39;t give up, and terminates by locating an enfixed key *(remember it&#39;s the binding that&#39;s enfixed, not the FUNCTION! value)*...then run the enfix semantics.  If it does give up, and that that same PATH! with a GROUP! in it is evaluated later in its proper order to find an enfixed key, give an error.

This will involve some extra processing on paths, but I *think* it can be cheap.  The way the caching for word lookup is written for lookahead should be able to be reused more-or-less for path processing, to avoid two path lookups in the common case.

So as long as we think people would rather have some enfix path lookup instead of none, it&#39;s a good tradeoff.  Agreed?</description>
    
    <lastBuildDate>Tue, 15 Aug 2017 14:40:12 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/enfix-dispatch-via-path-a-solution/254.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Enfix dispatch via Path... a solution?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Historically, there were no infix dispatches via path.  In R3-Alpha:</p>
<pre><code>&gt;&gt; obj: make object! [plus: :+]
&gt;&gt; type? :obj/plus
== op!

&gt;&gt; 1 obj/plus 2
** Script error: op! type is not allowed here
</code></pre>
<p>In Red, it does... uh, something?  But not what you'd want:</p>
<pre><code>&gt;&gt; obj: make object! [plus: :+]
&gt;&gt; type? :obj/plus
== op!
&gt;&gt; 1 obj/plus 2
== 2
</code></pre>
<p>There are mechanical reasons why it is difficult to make work how the code is written in both of them.  Let's ignore those; particularly because Ren-C is under much more control and should be able to finesse the mechanics for any design--assuming they're not paradoxical.  So the bigger issue is <em>philosophically</em> why it seems it can't work...which is GROUP!s in paths.</p>
<p>For a path with GROUP!s in it, in order to find what that path might resolve to requires evaluation.  Evaluation runs arbitrary code.  And enfixedness relies on lookahead; to be able to know what is on your right before making a decision about how execution will proceed.  If you have to perform an arbitrary evaluation to know whether you can proceed, you might wind up running code you don't need to.</p>
<p>Just a simple example to make the point:</p>
<pre><code> a: make object! [b: 20]

 do/next [print 10 a/(print "this shouldn't print" | 'b) 30]
</code></pre>
<p>But if a/b were enfixed addition, "you'd expect" to get the printout from the GROUP! and then ultimately a result of 40.  So until someone figures out a solution to that whole halting problem thing, the lack of a "psychic" evaluator means we're screwed.  So it seems that paths with GROUP!s in them can't be considered enfix candidates.</p>
<p>Yet the simplest compromise may be right in front of us, which is to have lookahead <em>try</em> to evaluate a path, but "give up" if it sees a GROUP!.  If it doesn't give up, and terminates by locating an enfixed key <em>(remember it's the binding that's enfixed, not the FUNCTION! value)</em>...then run the enfix semantics.  If it does give up, and that that same PATH! with a GROUP! in it is evaluated later in its proper order to find an enfixed key, give an error.</p>
<p>This will involve some extra processing on paths, but I <em>think</em> it can be cheap.  The way the caching for word lookup is written for lookahead should be able to be reused more-or-less for path processing, to avoid two path lookups in the common case.</p>
<p>So as long as we think people would rather have some enfix path lookup instead of none, it's a good tradeoff.  Agreed?</p>
          <p><a href="https://forum.rebol.info/t/enfix-dispatch-via-path-a-solution/254/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/enfix-dispatch-via-path-a-solution/254/1</link>
        <pubDate>Tue, 15 Aug 2017 14:40:12 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-254-1</guid>
        <source url="https://forum.rebol.info/t/enfix-dispatch-via-path-a-solution/254.rss">Enfix dispatch via Path... a solution?</source>
      </item>
  </channel>
</rss>

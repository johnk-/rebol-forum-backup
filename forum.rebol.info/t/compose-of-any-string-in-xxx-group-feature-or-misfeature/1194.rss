<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>COMPOSE of ANY-STRING! in XXX-GROUP!: feature or misfeature?</title>
    <link>https://forum.rebol.info/t/compose-of-any-string-in-xxx-group-feature-or-misfeature/1194</link>
    <description>I&#39;m rather fond of what the new fancy COMPOSE is able to do with the SET-GROUP!, GET-GROUP!, and &quot;LIT-GROUP!&quot;:

     &gt;&gt; compose [
         (second [a b c]): @(second [[a b] [c d] [e f])
     ]
     == [b: @[c d]]

This is all kinds of convenient, but I wondered if it should be necessary to convert things to WORD! if they were strings:

    &gt;&gt; n: 1
    &gt;&gt; compose [(as word! unspaced [&quot;var-&quot; n]): (n)]
    == [var-1: 1]

If the word is just going to be unbound anyway, couldn&#39;t you just say that&#39;s what happens to strings?

    &gt;&gt; n: 304
    &gt;&gt; compose [(unspaced [&quot;var-&quot; n]): (n)]
    == [var-304: 304]

It seemed cool though it made me a little uneasy.  But the thing that makes it uneasy is the asymmetry with plain GROUP!:

    &gt;&gt; n: 304
    &gt;&gt; compose [(unspaced [&quot;var-&quot; n]): (unspaced [&quot;var-&quot; n])]
    == [var-304: &quot;var-304&quot;]

This feels like a bit of a bug waiting to happen...where you&#39;re getting the automatic conversions sometimes but not others.  But a parallel problem exists if you accept GET-WORD!/etc. in these slots:

    &gt;&gt; compose [(second [:a :b :c]): (second [:a :b :c)]
    == [b: :b]

The plain groups are verbatim...there&#39;s no COMPOSE syntax for &quot;plainify this&quot;.  Which makes them break the pattern.

Yet it&#39;s a rather useful feature to do these transformations.  Do we just trust that people who use the feature will understand it, and not deprive them of the convenience?</description>
    
    <lastBuildDate>Wed, 21 Aug 2019 15:57:14 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/compose-of-any-string-in-xxx-group-feature-or-misfeature/1194.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>COMPOSE of ANY-STRING! in XXX-GROUP!: feature or misfeature?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="1194">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>You'll possibly be letting dim-bulb devs shoot themselves in the foot, but clever devs to do cool things in an impressively concise way.</p>
</blockquote>
</aside>
<p>Well as a data point, one particular dim bulb made the very mistake when editing <a href="https://github.com/metaeducation/ren-c/blob/5bec5270f88fa4a93b2b9ee12ba26396543ac50c/tests/datatypes/object.test.reb#L127" rel="nofollow noopener">this test</a>, blindly changing all the <strong>(to word! ...)</strong> to not include the conversion.  Since that dim bulb is me, I bring it up.  <img src="https://forum.rebol.info/images/emoji/twitter/bulb.png?v=9" title=":bulb:" class="emoji" alt=":bulb:"></p>
<p>In the interests of time, I feel like when we hit things like this, we should be conservative.  It's not like converting to a word manually isn't going to be backwards compatible if someday this is deemed a good idea.  I think my decision-making plan is to hold off on this kind of thing until there's more review.</p>
          <p><a href="https://forum.rebol.info/t/compose-of-any-string-in-xxx-group-feature-or-misfeature/1194/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/compose-of-any-string-in-xxx-group-feature-or-misfeature/1194/3</link>
        <pubDate>Wed, 21 Aug 2019 15:57:14 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1194-3</guid>
        <source url="https://forum.rebol.info/t/compose-of-any-string-in-xxx-group-feature-or-misfeature/1194.rss">COMPOSE of ANY-STRING! in XXX-GROUP!: feature or misfeature?</source>
      </item>
      <item>
        <title>COMPOSE of ANY-STRING! in XXX-GROUP!: feature or misfeature?</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>There's not really a way to know until this gets into the hands of more people. You'll possibly be letting dim-bulb devs shoot themselves in the foot, but clever devs to do cool things in an impressively concise way.<br>
So while it's slightly trickier to learn, with more line noise, it'll save multiple lines of code each time you use it-- which I think on net will be very gratifying.</p>
          <p><a href="https://forum.rebol.info/t/compose-of-any-string-in-xxx-group-feature-or-misfeature/1194/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/compose-of-any-string-in-xxx-group-feature-or-misfeature/1194/2</link>
        <pubDate>Thu, 15 Aug 2019 15:18:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1194-2</guid>
        <source url="https://forum.rebol.info/t/compose-of-any-string-in-xxx-group-feature-or-misfeature/1194.rss">COMPOSE of ANY-STRING! in XXX-GROUP!: feature or misfeature?</source>
      </item>
      <item>
        <title>COMPOSE of ANY-STRING! in XXX-GROUP!: feature or misfeature?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I'm rather fond of what the new fancy COMPOSE is able to do with the SET-GROUP!, GET-GROUP!, and "LIT-GROUP!":</p>
<pre><code> &gt;&gt; compose [
     (second [a b c]): @(second [[a b] [c d] [e f])
 ]
 == [b: @[c d]]
</code></pre>
<p>This is all kinds of convenient, but I wondered if it should be necessary to convert things to WORD! if they were strings:</p>
<pre><code>&gt;&gt; n: 1
&gt;&gt; compose [(as word! unspaced ["var-" n]): (n)]
== [var-1: 1]
</code></pre>
<p>If the word is just going to be unbound anyway, couldn't you just say that's what happens to strings?</p>
<pre><code>&gt;&gt; n: 304
&gt;&gt; compose [(unspaced ["var-" n]): (n)]
== [var-304: 304]
</code></pre>
<p>It seemed cool though it made me a little uneasy.  But the thing that makes it uneasy is the asymmetry with plain GROUP!:</p>
<pre><code>&gt;&gt; n: 304
&gt;&gt; compose [(unspaced ["var-" n]): (unspaced ["var-" n])]
== [var-304: "var-304"]
</code></pre>
<p>This feels like a bit of a bug waiting to happen...where you're getting the automatic conversions sometimes but not others.  But a parallel problem exists if you accept GET-WORD!/etc. in these slots:</p>
<pre><code>&gt;&gt; compose [(second [:a :b :c]): (second [:a :b :c)]
== [b: :b]
</code></pre>
<p>The plain groups are verbatim...there's no COMPOSE syntax for "plainify this".  Which makes them break the pattern.</p>
<p>Yet it's a rather useful feature to do these transformations.  Do we just trust that people who use the feature will understand it, and not deprive them of the convenience?</p>
          <p><a href="https://forum.rebol.info/t/compose-of-any-string-in-xxx-group-feature-or-misfeature/1194/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/compose-of-any-string-in-xxx-group-feature-or-misfeature/1194/1</link>
        <pubDate>Tue, 13 Aug 2019 21:19:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1194-1</guid>
        <source url="https://forum.rebol.info/t/compose-of-any-string-in-xxx-group-feature-or-misfeature/1194.rss">COMPOSE of ANY-STRING! in XXX-GROUP!: feature or misfeature?</source>
      </item>
  </channel>
</rss>

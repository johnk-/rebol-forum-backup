<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Shim Code for Modal Arguments</title>
    <link>https://forum.rebol.info/t/shim-code-for-modal-arguments/1185</link>
    <description>I&#39;ve described a [new parameter convention that I call an @arg](https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187) which could be supported by the evaluator.  But here is a bit of code to implement the trick in present-day Ren-C:

    old-append: :append

    append: function [
        series
        :nosplice [&lt;skip&gt; sym-word! sym-path! sym-block! sym-group!]
        value [&lt;...&gt; any-value!]
        /only
    ][
        switch type of :nosplice [
            null [old-append/(only) series take value]  ; no @... so act variadic
            sym-block! [old-append/only series as block! splicer]
            sym-group! [old-append/only series do as group! splicer]
            sym-word!
            sym-path! [old-append/only series get splicer]
       ]
    ]

## Consequences

This leaves splicing the default:

    &gt;&gt; append [a b c] [d e]
    == [a b c d e]

But if you use an @... at the callsite it offers alternate ways of requesting /ONLY:

    &gt;&gt; append [a b c] @[d e]
    == [a b c [d e]]

The trickery though is that it *has to be a literal @*... at the callsite.  Indirectly that doesn&#39;t apply (if it comes from a reference or expression), it will append in the typical fashion, whatever that would be:

    &gt;&gt; item: @[d e]
    == @[d e]

    &gt;&gt; append [a b c] item
    == [a b c d e]  ; or should only plain BLOCK! splice?

The callsite permits conventional expressions for the plain case (now an /ONLY behavior), written out as a full evaluation (e.g. the argument is not quoted):

    &gt;&gt; append [a b c] reverse copy [d e]
    == [a b c e d]

On the other hand, the /only cases are all going through a quoted argument...but these provide variations besides an @-block:

    &gt;&gt; append [a b c] @item
    == [a b c [d e]]

    &gt;&gt; append [a b c] @(reverse copy item)
    == [a b c [e d]]

And again, these variations are visible at the callsite; they don&#39;t accidentally sneak in to run code as /ONLY if your callsite didn&#39;t make it look that way just due to some indirect value:

    &gt;&gt; item: @(reverse copy item)
    == @(reverse copy item)

    &gt;&gt; append [a b c] item
    == [a b c reverse copy item]  ; ANY-ARRAY! splice?

If you really do want to deliberately append an @... then you can do so with quoting (which you&#39;d have to do for a WORD! or other evaluative type that you didn&#39;t mean &quot;do something evaluatory with&quot;)</description>
    
    <lastBuildDate>Wed, 05 May 2021 15:09:55 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://forum.rebol.info/t/shim-code-for-modal-arguments/1185.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Shim Code for Modal Arguments</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><strong>MODAL PARAMETERS ARE NOW DEAD!</strong></p>
<p>...as far as the core is concerned.  It was troubling code that contaminated the model, and it will be troubling no longer.</p>
<p>They led me to the solution I was looking for: <strong><a href="https://forum.rebol.info/t/emergent-behavior-of-x-x-y-x-y/1596">a uniform literalizing @-type</a></strong>.</p>
<p>Regardless, modal parameters were based on an interesting idea: to use literal pattern recognition at the callsite to control turning refinements on and off.  Above it's prototyped in usermode.</p>
<p>I'll put the former modal tests here in case they ever become interesting later:</p>
<pre><code>[
    "Basic operational test"

    (did foo: function [@x /y] [
        reduce .voidify [x y]
    ])

    ([3 ~nulled~] = foo 3)
    ([3 #] = foo @(1 + 2))
    ([@(1 + 2) ~nulled~] = foo '@(1 + 2))

    (did item: 300)

    ([304 ~nulled~] = foo item + 4)
    ([304 #] = foo @(item + 4))
    ([@(item + 4) ~nulled~] = foo '@(item + 4))

    ([300 ~nulled~] = foo item)
    ([300 #] = foo @item)
    ([@item ~nulled~] = foo '@item)

    ([[a b] ~nulled~] = foo [a b])
    ([[a b] #] = foo @[a b])
    ([@[a b] ~nulled~] = foo '@[a b])

    (did obj: make object! [field: 1020])

    ([1020 ~nulled~] = foo obj/field)
    ([1020 #] = foo @obj/field)
    ([@obj/field ~nulled~] = foo '@obj/field)
]

[
    "Basic infix operational test"

    (did bar: enfix function [@x /y] [
        reduce .voidify [x y]
    ])

    (3 bar = [3 ~nulled~])
    (@(1 + 2) bar = [3 #])

    (did item: 300)

    ((item + 4) bar = [304 ~nulled~])
    (@(item + 4) bar = [304 #])

    (item bar = [300 ~nulled~])
    (@item bar = [300 #])

    ([a b] bar = [[a b] ~nulled~])
    (@[a b] bar = [[a b] #])

    (did obj: make object! [field: 1020])

    (obj/field bar = [1020 ~nulled~])
    (@obj/field bar = [1020 #])
]

[
    "Demodalizing specialization test"

    (did foo: function [a @x /y] [
        reduce .voidify [a x y]
    ])

    ([a @x /y] = parameters of :foo)

    ([10 20 ~nulled~] = foo 10 20)
    ([10 20 #] = foo 10 @(20))

    (did fooy: :foo/y)

    ([a x] = parameters of :fooy)
    ([10 20 #] = fooy 10 20)
    (
        'bad-parameter = (trap [
            fooy/y 10 20
        ])/id
    )
    (
        'bad-parameter = (trap [
            fooy 10 @(20)
        ])/id
    )
]

; Invisibility sensitivity
;
; Modal parameters use the unevaluated flag to inform callers that an
; argument "dissolved", so they can differentiate @(comment "hi") and @(null)
; The mechanism used is much like how &lt;end&gt; and &lt;opt&gt; are distinguished.
[
    (sensor: func [@arg [&lt;opt&gt; &lt;end&gt; any-value!] /modal] [
        reduce .try [arg modal semiquoted? 'arg]
    ] true)

    ([_ # #[false]] = sensor @(null))
    ([_ # #[true]] = sensor @())
    ([_ # #[true]] = sensor @(comment "hi"))

    ; ([_ # #[true]] = sensor @nihil)  ; !!! maybe this should work?
]</code></pre>
          <p><a href="https://forum.rebol.info/t/shim-code-for-modal-arguments/1185/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/shim-code-for-modal-arguments/1185/4</link>
        <pubDate>Wed, 05 May 2021 15:09:55 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1185-4</guid>
        <source url="https://forum.rebol.info/t/shim-code-for-modal-arguments/1185.rss">Shim Code for Modal Arguments</source>
      </item>
      <item>
        <title>Shim Code for Modal Arguments</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've described a <a href="https://forum.rebol.info/t/new-parameter-convention-concept-modal-arguments-or-the-arg/1187">new parameter convention that I call an @arg</a> which could be supported by the evaluator.  But here is a bit of code to implement the trick in present-day Ren-C:</p>
<pre><code>old-append: :append

append: function [
    series
    :nosplice [&lt;skip&gt; sym-word! sym-path! sym-block! sym-group!]
    value [&lt;...&gt; any-value!]
    /only
][
    switch type of :nosplice [
        null [old-append/(only) series take value]  ; no @... so act variadic
        sym-block! [old-append/only series as block! splicer]
        sym-group! [old-append/only series do as group! splicer]
        sym-word!
        sym-path! [old-append/only series get splicer]
   ]
]
</code></pre>
<h2>Consequences</h2>
<p>This leaves splicing the default:</p>
<pre><code>&gt;&gt; append [a b c] [d e]
== [a b c d e]
</code></pre>
<p>But if you use an @... at the callsite it offers alternate ways of requesting /ONLY:</p>
<pre><code>&gt;&gt; append [a b c] @[d e]
== [a b c [d e]]
</code></pre>
<p>The trickery though is that it <em>has to be a literal @</em>... at the callsite.  Indirectly that doesn't apply (if it comes from a reference or expression), it will append in the typical fashion, whatever that would be:</p>
<pre><code>&gt;&gt; item: @[d e]
== @[d e]

&gt;&gt; append [a b c] item
== [a b c d e]  ; or should only plain BLOCK! splice?
</code></pre>
<p>The callsite permits conventional expressions for the plain case (now an /ONLY behavior), written out as a full evaluation (e.g. the argument is not quoted):</p>
<pre><code>&gt;&gt; append [a b c] reverse copy [d e]
== [a b c e d]
</code></pre>
<p>On the other hand, the /only cases are all going through a quoted argument...but these provide variations besides an @-block:</p>
<pre><code>&gt;&gt; append [a b c] @item
== [a b c [d e]]

&gt;&gt; append [a b c] @(reverse copy item)
== [a b c [e d]]
</code></pre>
<p>And again, these variations are visible at the callsite; they don't accidentally sneak in to run code as /ONLY if your callsite didn't make it look that way just due to some indirect value:</p>
<pre><code>&gt;&gt; item: @(reverse copy item)
== @(reverse copy item)

&gt;&gt; append [a b c] item
== [a b c reverse copy item]  ; ANY-ARRAY! splice?
</code></pre>
<p>If you really do want to deliberately append an @... then you can do so with quoting (which you'd have to do for a WORD! or other evaluative type that you didn't mean "do something evaluatory with")</p>
          <p><a href="https://forum.rebol.info/t/shim-code-for-modal-arguments/1185/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/shim-code-for-modal-arguments/1185/1</link>
        <pubDate>Tue, 23 Jul 2019 01:08:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1185-1</guid>
        <source url="https://forum.rebol.info/t/shim-code-for-modal-arguments/1185.rss">Shim Code for Modal Arguments</source>
      </item>
  </channel>
</rss>

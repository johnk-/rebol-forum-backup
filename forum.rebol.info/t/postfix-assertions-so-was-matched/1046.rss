<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Postfix Assertions: SO, WAS, MATCHED</title>
    <link>https://forum.rebol.info/t/postfix-assertions-so-was-matched/1046</link>
    <description>Assertions are important, but some people want to write short code and feel the assertions can clutter it up.

But what if the assertion was as brief and to the point as a comment was?  That inspired these postfix assert operators...

## SO

Takes a condition on the left and treats that as a thing to assert on.  It&#39;s variadic on the right and won&#39;t run the right to get the expression until the left has been shown as true.

    &gt;&gt; x: 0

    &gt;&gt; 1 = 2 so x: &lt;changed&gt;
    ** Script Error: assertion failure: [false so]
    ** Where: so console
    ** Near: [... = 2 so ~~ x: &lt;changed&gt;]

    &gt;&gt; x
    == 0  ; didn&#39;t change, the assignment didn&#39;t get a chance to run

    &gt;&gt; 1 = 1 so x: &lt;changed&gt;
    == &lt;changed&gt;

    &gt;&gt; x
    == &lt;changed&gt;  ; the right hand side once the left was shown true

## WAS

The WAS word has been reclaimed from a previous purpose, now to assert &quot;lax equality&quot; (or IS-ness) of the left hand side to the right.  But it passes on the value.

    &gt;&gt; 10 + 10 was 5 + 15
    == 20

    &gt;&gt; 10 + 10 was 50 + 1000
    ** Script Error: assertion failure: [20 is 1050]
    ** Where: was console
    ** Near: [... 10 was 30 ~~]

## MATCHED

Very similar to WAS, but a variant which uses the logic of [the MATCH dialect](https://forum.rebol.info/t/time-to-meet-your-match-dialect/1009), e.g. to test the datatype.

    &gt;&gt; 10 + 10 matched integer!
    == 20

    &gt;&gt; 10 + 10 matched text!    
    ** Script Error: assertion failure: [20 matches text!]
    ** Where: matched console
    ** Near: [... 10 matched text! ~~]

## Added Bonus: ASSERT is now invisible

Cool as these are, you still might want to use the plain old assert for something.  If you do, know that it is now...invisible!  So you can put it anywhere.

    &gt;&gt; all [
        x: 1 + 1 
        assert [x &gt; 1]
     ]
     == 2

    &gt;&gt; all [
        x: 1 + 1 
        assert [x &lt; 1]
     ]
    ** Script Error: assertion failure: [
        x &lt; 1 ** false
    ]
    ** Where: _ assert all console
    ** Near: [[x &lt; 1] ~~]</description>
    
    <lastBuildDate>Sun, 20 Jun 2021 04:11:08 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/postfix-assertions-so-was-matched/1046.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Postfix Assertions: SO, WAS, MATCHED</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1046">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Very similar to WAS, but a variant which uses the logic of the MATCH dialect, e.g. to test the datatype.</p>
</blockquote>
</aside>
<p>There's a bit of a glitch with how this one was being implemented, relating to how MATCH has changed...and how EITHER-MATCH was killed off.</p>
<p>Rather than fix the somewhat esoteric MATCHED function I'd rather just post the test to explain the feature and kill off supporting it for now:</p>
<pre><code>; MATCHED POSTFIX
; Checks for MATCHES of the left to the right
(
    20 = (10 + 10 matched integer!)
)(
    e: trap [10 + 10 matched text!]
    e/id = 'assertion-failure
)
</code></pre>
<p>It doesn't demonstrate anything in particular that WAS or SO don't show off...it just is entangled in parameter order manipulation and issues that need to be worked out with MATCH's test parameter, which are higher priority problems.</p>
          <p><a href="https://forum.rebol.info/t/postfix-assertions-so-was-matched/1046/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/postfix-assertions-so-was-matched/1046/4</link>
        <pubDate>Sun, 20 Jun 2021 04:11:08 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1046-4</guid>
        <source url="https://forum.rebol.info/t/postfix-assertions-so-was-matched/1046.rss">Postfix Assertions: SO, WAS, MATCHED</source>
      </item>
      <item>
        <title>Postfix Assertions: SO, WAS, MATCHED</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="1046">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>Is it possible to have ASSERT have similar throwing abilities as FAIL/WHERE ? For example—with the following function:</p>
</blockquote>
</aside>
<p>Yup!  FAIL's mechanisms are userspace and can/should probably be factored somehow:</p>
<aside class="onebox githubblob">
  <header class="source">
      <a href="https://github.com/metaeducation/ren-c/blob/5808309a6988071e44edd6f3c05338835b8a5c26/src/mezz/base-funcs.r#L1034" target="_blank" rel="nofollow noopener">github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://github.com/metaeducation/ren-c/blob/5808309a6988071e44edd6f3c05338835b8a5c26/src/mezz/base-funcs.r#L1034" target="_blank" rel="nofollow noopener">metaeducation/ren-c/blob/5808309a6988071e44edd6f3c05338835b8a5c26/src/mezz/base-funcs.r#L1034</a></h4>
<pre class="onebox"><code class="lang-r"><ol class="start lines" start="1024" style="counter-reset: li-counter 1023 ;">
<li>; That could provide an error ID, the format message, and the values to</li>
<li>; plug into the slots to make the message...which could be extracted from</li>
<li>; the error if captured (e.g. error/id and `error/key-name`.  Another</li>
<li>; option would be something like:</li>
<li>;</li>
<li>;     fail/with [{The key} :key-name {is invalid}] [key-name: key]</li>
<li>
</li>
<li>; !!! PATH! doesn't do BINDING OF, and in the general case it couldn't</li>
<li>; tell you where it resolved to without evaluating, just do WORD! for now.</li>
<li>;</li>
<li class="selected">frame: try match frame! binding of try match 'word! :blame</li>
<li>
</li>
<li>error: switch type of :reason [</li>
<li>    error! [reason]</li>
<li>    text! [make error! reason]</li>
<li>    block! [</li>
<li>        make error! (spaced reason else [</li>
<li>            Type: 'Script</li>
<li>            id: 'unknown-error</li>
<li>        ])</li>
<li>    ]</li>
</ol></code></pre>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          <p><a href="https://forum.rebol.info/t/postfix-assertions-so-was-matched/1046/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/postfix-assertions-so-was-matched/1046/3</link>
        <pubDate>Thu, 31 Jan 2019 18:22:55 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1046-3</guid>
        <source url="https://forum.rebol.info/t/postfix-assertions-so-was-matched/1046.rss">Postfix Assertions: SO, WAS, MATCHED</source>
      </item>
      <item>
        <title>Postfix Assertions: SO, WAS, MATCHED</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>Is it possible to have ASSERT have similar throwing abilities as FAIL/WHERE ? For example—with the following function:</p>
<pre><code>foo: func [number [integer!]][
    assert [number &gt; 40]
]
</code></pre>
<p>A subsequent error would be as much on the calling context (<code>foo 1</code>) as using an incompatible datatype (<code>foo "Forty"</code>).</p>
          <p><a href="https://forum.rebol.info/t/postfix-assertions-so-was-matched/1046/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/postfix-assertions-so-was-matched/1046/2</link>
        <pubDate>Thu, 31 Jan 2019 18:20:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1046-2</guid>
        <source url="https://forum.rebol.info/t/postfix-assertions-so-was-matched/1046.rss">Postfix Assertions: SO, WAS, MATCHED</source>
      </item>
      <item>
        <title>Postfix Assertions: SO, WAS, MATCHED</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Assertions are important, but some people want to write short code and feel the assertions can clutter it up.</p>
<p>But what if the assertion was as brief and to the point as a comment was?  That inspired these postfix assert operators...</p>
<h2>SO</h2>
<p>Takes a condition on the left and treats that as a thing to assert on.  It's variadic on the right and won't run the right to get the expression until the left has been shown as true.</p>
<pre><code>&gt;&gt; x: 0

&gt;&gt; 1 = 2 so x: &lt;changed&gt;
** Script Error: assertion failure: [false so]
** Where: so console
** Near: [... = 2 so ~~ x: &lt;changed&gt;]

&gt;&gt; x
== 0  ; didn't change, the assignment didn't get a chance to run

&gt;&gt; 1 = 1 so x: &lt;changed&gt;
== &lt;changed&gt;

&gt;&gt; x
== &lt;changed&gt;  ; the right hand side once the left was shown true
</code></pre>
<h2>WAS</h2>
<p>The WAS word has been reclaimed from a previous purpose, now to assert "lax equality" (or IS-ness) of the left hand side to the right.  But it passes on the value.</p>
<pre><code>&gt;&gt; 10 + 10 was 5 + 15
== 20

&gt;&gt; 10 + 10 was 50 + 1000
** Script Error: assertion failure: [20 is 1050]
** Where: was console
** Near: [... 10 was 30 ~~]
</code></pre>
<h2>MATCHED</h2>
<p>Very similar to WAS, but a variant which uses the logic of <a href="https://forum.rebol.info/t/time-to-meet-your-match-dialect/1009">the MATCH dialect</a>, e.g. to test the datatype.</p>
<pre><code>&gt;&gt; 10 + 10 matched integer!
== 20

&gt;&gt; 10 + 10 matched text!    
** Script Error: assertion failure: [20 matches text!]
** Where: matched console
** Near: [... 10 matched text! ~~]
</code></pre>
<h2>Added Bonus: ASSERT is now invisible</h2>
<p>Cool as these are, you still might want to use the plain old assert for something.  If you do, know that it is now...invisible!  So you can put it anywhere.</p>
<pre><code>&gt;&gt; all [
    x: 1 + 1 
    assert [x &gt; 1]
 ]
 == 2

&gt;&gt; all [
    x: 1 + 1 
    assert [x &lt; 1]
 ]
** Script Error: assertion failure: [
    x &lt; 1 ** false
]
** Where: _ assert all console
** Near: [[x &lt; 1] ~~]</code></pre>
          <p><a href="https://forum.rebol.info/t/postfix-assertions-so-was-matched/1046/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/postfix-assertions-so-was-matched/1046/1</link>
        <pubDate>Thu, 31 Jan 2019 17:55:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1046-1</guid>
        <source url="https://forum.rebol.info/t/postfix-assertions-so-was-matched/1046.rss">Postfix Assertions: SO, WAS, MATCHED</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Dropping the NATIVE/BODY Feature From Core</title>
    <link>https://forum.rebol.info/t/dropping-the-native-body-feature-from-core/1635</link>
    <description>Rather early on in hacking around on Rebol I had an interesting (to me) idea.

It seemed that quite often, native functions were really nothing that couldn&#39;t be done in usermode...they were just written as natives because they were supposed to be faster.  I thought it might be interesting to preserve or define the original code as part of the native spec.

A very simple example, this explains how DID might be made to force any value to its truthy status by applying NOT twice:

    //
    //  did: native/body [
    //
    //  &quot;Synonym for TO-LOGIC&quot;
    //
    //      return: &quot;true if value is NOT a LOGIC! false, BLANK!, or NULL&quot;
    //          [logic!]
    //      optional [&lt;opt&gt; any-value!]
    //  ][
    //      not not :optional
    //  ]
    //
    REBNATIVE(_did_)  // see TO-C-NAME
    {
        INCLUDE_PARAMS_OF__DID_;

        return Init_Logic(D_OUT, IS_TRUTHY(ARG(optional)));
    }

## There&#39;s A Good Idea In Here...But

Expressing what natives do as usermode code is a good way of understanding what that code does.

However it needs to be tested or it&#39;s doomed to get out of sync.  I had the idea that natives would swap out their behavior for their usermode equivalents every now and again and we&#39;d run the tests.  But if you&#39;re actually intercept calls to natives and implement them with other natives, what happens when two of them use interdependent definitions?

## This Testing And Documentation Doesn&#39;t Belong In The Core

It&#39;s nice to be able to see it there with the native spec.  But compiling these bodies into the executable just makes it unnecessarily bigger.

There&#39;s a lot of other testing and documentation enhancements that are higher priority, and the complexity incurred from this feature suggests dropping it.

It was a neat idea from a long time ago that has been superseded in importance by many other neat ideas.  :-)</description>
    
    <lastBuildDate>Sun, 18 Jul 2021 09:02:16 +0000</lastBuildDate>
    <category>Help System</category>
    <atom:link href="https://forum.rebol.info/t/dropping-the-native-body-feature-from-core/1635.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Dropping the NATIVE/BODY Feature From Core</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Rather early on in hacking around on Rebol I had an interesting (to me) idea.</p>
<p>It seemed that quite often, native functions were really nothing that couldn't be done in usermode...they were just written as natives because they were supposed to be faster.  I thought it might be interesting to preserve or define the original code as part of the native spec.</p>
<p>A very simple example, this explains how DID might be made to force any value to its truthy status by applying NOT twice:</p>
<pre><code>//
//  did: native/body [
//
//  "Synonym for TO-LOGIC"
//
//      return: "true if value is NOT a LOGIC! false, BLANK!, or NULL"
//          [logic!]
//      optional [&lt;opt&gt; any-value!]
//  ][
//      not not :optional
//  ]
//
REBNATIVE(_did_)  // see TO-C-NAME
{
    INCLUDE_PARAMS_OF__DID_;

    return Init_Logic(D_OUT, IS_TRUTHY(ARG(optional)));
}
</code></pre>
<h2>There's A Good Idea In Here...But</h2>
<p>Expressing what natives do as usermode code is a good way of understanding what that code does.</p>
<p>However it needs to be tested or it's doomed to get out of sync.  I had the idea that natives would swap out their behavior for their usermode equivalents every now and again and we'd run the tests.  But if you're actually intercept calls to natives and implement them with other natives, what happens when two of them use interdependent definitions?</p>
<h2>This Testing And Documentation Doesn't Belong In The Core</h2>
<p>It's nice to be able to see it there with the native spec.  But compiling these bodies into the executable just makes it unnecessarily bigger.</p>
<p>There's a lot of other testing and documentation enhancements that are higher priority, and the complexity incurred from this feature suggests dropping it.</p>
<p>It was a neat idea from a long time ago that has been superseded in importance by many other neat ideas.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://forum.rebol.info/t/dropping-the-native-body-feature-from-core/1635/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/dropping-the-native-body-feature-from-core/1635/1</link>
        <pubDate>Sun, 18 Jul 2021 09:02:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1635-1</guid>
        <source url="https://forum.rebol.info/t/dropping-the-native-body-feature-from-core/1635.rss">Dropping the NATIVE/BODY Feature From Core</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Evaluating the worthiness of VALUE_FLAG_UNEVALUATED</title>
    <link>https://forum.rebol.info/t/evaluating-the-worthiness-of-value-flag-unevaluated/912</link>
    <description>One question that comes up fairly often with new users is why **if [var = value] [...]** doesn&#39;t do what they expect.

We know that blocks are truthy, and passing a literal block to an IF will not run the code in the block.  They should have written **if (var = value) [...]** or just plain **if var = value [...]**.  But this isn&#39;t obvious to a newbie.

When I&#39;ve encountered this situation myself, it&#39;s usually because of changing a WHILE into an IF, or something of that sort.  Of course, **I** know why a WHILE puts a block around its condition and an IF does not...but for a new user that&#39;s certainly non-obvious.

## Hence, VALUE_FLAG_UNEVALUATED was born

I had the idea that values would have a bit on them that would say whether they were the product of an evaluation, or just literal.  Hence when IF ran, it could tell the difference between:

    block: [a b c]
    if block [...]

and

    if [a b c] [...]

The former it would allow, the latter it would prohibit with an error.  This *seemed* like a good thing.

## Does it do more harm than good?

You probably shouldn&#39;t write **if [literal block]** in your code (unless you were writing a test, or plan on transforming it before execution).  Yet you might well want to do this in a composition.

     compose/only [... if (conditional-expression) [...] ...]

If that conditional expression is a literal block, then do you want to get an error on it?

And really, what if someone *does* write:

     condition: [var = value]
     ...
     if condition body

If they intended that condition to execute, that&#39;s a mistake that wouldn&#39;t be caught.  So here we have the check impeding experts...and not protecting new users as thoroughly as one would hope.

## Nearly every safety feature has shown to be not worth it

Because Rebol is subtle and can be difficult to debug, it has been tempting to throw in various safety mechanisms.  But nearly all that have been tried have been thrown out, instead addressing the relevant concern through a different angle.

There&#39;s no question that the existence of VALUE_FLAG_UNEVALUATED and maintaining its state makes the evaluator code more complicated.  Yet I&#39;ve found being able to read it as being helpful in some cases when debugging or deprecating APIs.  It&#39;s likely good to keep the feature and let functions know this property of their callsites if they find it necessary.

But should things like the protection of IF and other conditional clauses be in the box, or should it be part of an adapted definition in a &quot;training wheels&quot; module...not enshrined in the mainline code?  (For that matter, should the website demo use training wheels mode by default, if it existed?)

I think I&#39;m leaning toward making this a training-wheels-only feature, and having the stock IF (CASE/etc.) not error on literal blocks.  Of course, the training wheels would have its work cut out for it to emulate every conditional test in a CASE statement, *it would basically have to reimplement CASE*.  So this is a fairly heavy change.</description>
    
    <lastBuildDate>Tue, 20 Nov 2018 14:36:57 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/evaluating-the-worthiness-of-value-flag-unevaluated/912.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Evaluating the worthiness of VALUE_FLAG_UNEVALUATED</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>My feeling is that it can be difficult to predict what newbies will struggle with. As long as the built-in help is available and clearly written, ideally with some kind of feedback mechanism available, I think that would provide a quicker way forward than building stuff for an (as yet) imaginary audience of users. <img src="//forum.rebol.info/images/emoji/twitter/slight_smile.png?v=7" title=":slight_smile:" class="emoji" alt=":slight_smile:"> Of course, if your gut tells you that some guardrails are necessary from the outset, then I trust your judgment. If the protection is easy to implement, I don't think I'd prioritize its inclusion very highly until it becomes a quantifiable compaint.</p>
          <p><a href="https://forum.rebol.info/t/evaluating-the-worthiness-of-value-flag-unevaluated/912/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/evaluating-the-worthiness-of-value-flag-unevaluated/912/6</link>
        <pubDate>Tue, 20 Nov 2018 14:36:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-912-6</guid>
        <source url="https://forum.rebol.info/t/evaluating-the-worthiness-of-value-flag-unevaluated/912.rss">Evaluating the worthiness of VALUE_FLAG_UNEVALUATED</source>
      </item>
      <item>
        <title>Evaluating the worthiness of VALUE_FLAG_UNEVALUATED</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="912">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>I think newbies might get tripped up on this temporarily or accidentally</p>
</blockquote>
</aside>
<p>Food for thought, is the MAYBE construct, but it's written in usermode:</p>
<pre><code>&gt;&gt; x: 10

&gt;&gt; x: maybe case [1 &gt; 2 [&lt;nope&gt;] 3 &gt; 4 [&lt;nope&gt;]]
&gt;&gt; x
== 10

&gt;&gt; x: maybe case [1 &gt; 2 [&lt;nope&gt;] 3 &lt; 4 [&lt;yep&gt;]]
&gt;&gt; x
== &lt;yep&gt;
</code></pre>
<p>MAYBE is similar looking to DEFAULT, so similar that you <em>might</em> think it requires a BLOCK! on its right.  But while DEFAULT conditionally runs the code on the right, MAYBE always runs it.  So a BLOCK! on the right as a literal would undermine it, as the MAYBE would always do the assignment.</p>
<pre><code>&gt;&gt; x: null
&gt;&gt; x: default [1000 + 20]
&gt;&gt; x
== 1020

&gt;&gt; x: maybe [case [1 &gt; 2 [&lt;nope&gt;] 3 &lt; 4 [&lt;yep&gt;]]
== [case [1 &gt; 2 [&lt;nope&gt;] 3 &lt; 4 [&lt;yep&gt;]]] // whoops
</code></pre>
<p>For this reason it put in a protection against literal uses.  That has really been helpful, because it's easy to get wrong.  I definitely do make that mistake, and I wrote MAYBE--so I'm sure other people would.</p>
<p>This gives me second thoughts, just about whether "in the box" constructs should be protecting or not.  Going through with the removal for IF/CASE/etc. showed it wasn't really as invasive as I might have thought...fairly few changes needed.</p>
<p>Perhaps this is an instance where erring on the side of the checks for Beta/One is worth it?  Or is the better solve to make MAYBE take a hard-quoted GROUP! and run it even though it doesn't <em>need</em> to?  This was done with UNLESS, to make it appear more consistent with AND and OR.</p>
<pre><code>&gt;&gt; x: maybe case [1 &gt; 2 [&lt;nope&gt;] 3 &gt; 4 [&lt;nope&gt;]]
** Error: MAYBE only takes a GROUP!

&gt;&gt; x: maybe (case [1 &gt; 2 [&lt;nope&gt;] 3 &gt; 4 [&lt;nope&gt;]])
&gt;&gt; x
== 10

&gt;&gt; code: [case [1 &gt; 2 [&lt;nope&gt;] 3 &gt; 4 [&lt;nope&gt;]]]
&gt;&gt; x: maybe code // checking evaluated bit wouldn't error on this
** Error: MAYBE only takes a GROUP!

&gt;&gt; code: [case [1 &gt; 2 [&lt;nope&gt;] 3 &gt; 4 [&lt;nope&gt;]]]
&gt;&gt; x: maybe (code)
&gt;&gt; x
== [case [1 &gt; 2 [&lt;nope&gt;] 3 &gt; 4 [&lt;nope&gt;]]]
</code></pre>
<p>That is actually safer.  But where does the protection stop?  What property of IF makes it not require a GROUP!, while MAYBE does?  In this case, the argument might be that MAYBE sure looks a lot like DEFAULT...and with it seeming to be in the same family, it's easy to screw up.</p>
<p>Put another way: <em>It's hard to say that MAYBE doesn't need some kind of protection, and literally quoting its right hand side and expecting a GROUP! there is a way of accomplishing that.  But requiring a GROUP! where it's not necessary has the downside of interfering with COMPOSE operations when it doesn't have to.  Requiring a BLOCK! doesn't convey the "always executed, not conditionally executed" nature.  This makes checking the unevaluated bit an attractive compromise, so if it's used there why not on conditionals as well?</em></p>
<p>Thinking about the influences of COMPOSE, I'm feeling like <strong>x: 10 unless case [...]</strong> is rather nice vs. <strong>x: 10 unless (case [...])</strong>. This does get down to asking "who is Rebol for, and do they need more protection, or just a better debugger".</p>
<p>Note adding the protection in a "training wheels" module is as easy as:</p>
<pre><code>if: adapt 'if [
    lib/if unevaluated? 'condition and [block? :condition] [
         fail "Literal block used as condition of IF"
    ]
]
</code></pre>
<p>Should there be a rule that none of the natives/mezzanine do this by default, and that any code which is executed unconditionally never require a BLOCK! or GROUP!?  Or is a more nuanced rule needed?</p>
          <p><a href="https://forum.rebol.info/t/evaluating-the-worthiness-of-value-flag-unevaluated/912/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/evaluating-the-worthiness-of-value-flag-unevaluated/912/5</link>
        <pubDate>Tue, 20 Nov 2018 08:23:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-912-5</guid>
        <source url="https://forum.rebol.info/t/evaluating-the-worthiness-of-value-flag-unevaluated/912.rss">Evaluating the worthiness of VALUE_FLAG_UNEVALUATED</source>
      </item>
      <item>
        <title>Evaluating the worthiness of VALUE_FLAG_UNEVALUATED</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've axed it, and I want to make the point that these things aren't necessarily hard to do or change, more just hard decisions to make:</p>
<aside class="onebox githubcommit">
  <header class="source">
      <a href="https://github.com/metaeducation/ren-c/commit/2ca0bdc20c2e8b57dee15b22075ef23fc9f5cdf9#diff-eb0773f2422286b087e1992fb1ab094cL67" target="_blank" rel="noopener">github.com/metaeducation/ren-c</a>
  </header>
  <article class="onebox-body">
    <div class="github-row">
  <div class="github-icon-container" title="Commit">
    <svg width="60" height="60" class="github-icon" viewBox="0 0 14 16" aria-hidden="true"><path d="M10.86 7c-.45-1.72-2-3-3.86-3-1.86 0-3.41 1.28-3.86 3H0v2h3.14c.45 1.72 2 3 3.86 3 1.86 0 3.41-1.28 3.86-3H14V7h-3.14zM7 10.2c-1.22 0-2.2-.98-2.2-2.2 0-1.22.98-2.2 2.2-2.2 1.22 0 2.2.98 2.2 2.2 0 1.22-.98 2.2-2.2 2.2z"></path></svg>
  </div>

  <div class="github-info-container">
    <h4>
      <a href="https://github.com/metaeducation/ren-c/commit/2ca0bdc20c2e8b57dee15b22075ef23fc9f5cdf9" target="_blank" rel="noopener">Kill IS_CONDITIONAL_TRUE()/IS_CONDITIONAL_FALSE()</a>
    </h4>

    <div class="github-info">
      <div class="date">
        committed <span class="discourse-local-date" data-format="ll" data-date="2018-11-19" data-time="17:54:19" data-timezone="UTC">05:54PM - 19 Nov 18 UTC</span>
      </div>

      <div class="user">
        <a href="https://github.com/hostilefork" target="_blank" rel="noopener">
          <img alt="hostilefork" src="https://avatars1.githubusercontent.com/u/20440?v=4" class="onebox-avatar-inline" width="20" height="20">
          hostilefork
        </a>
        
      </div>

      <div class="lines" title="changed 3 files with 4 additions and 33 deletions">
        <a href="https://github.com/metaeducation/ren-c/commit/2ca0bdc20c2e8b57dee15b22075ef23fc9f5cdf9" target="_blank" rel="noopener">
          <span class="added">+4</span>
          <span class="removed">-33</span>
        </a>
      </div>
    </div>

  </div>
</div>


  <div class="github-row">
    <pre class="github-content" style="white-space: normal;">There was a speculative feature implemented which would cause errors
when conditionals were used with literal blocks, to stop the relatively
common newbie...</pre>
  </div>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          <p><a href="https://forum.rebol.info/t/evaluating-the-worthiness-of-value-flag-unevaluated/912/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/evaluating-the-worthiness-of-value-flag-unevaluated/912/4</link>
        <pubDate>Mon, 19 Nov 2018 18:10:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-912-4</guid>
        <source url="https://forum.rebol.info/t/evaluating-the-worthiness-of-value-flag-unevaluated/912.rss">Evaluating the worthiness of VALUE_FLAG_UNEVALUATED</source>
      </item>
      <item>
        <title>Evaluating the worthiness of VALUE_FLAG_UNEVALUATED</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="2" data-topic="912">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>it doesn’t seem like a feature that should be changed because a newbie hasn’t yet grasped something as fundamental as literal values</p>
</blockquote>
</aside>
<p>Another area this has caused problems is in tests.  You want to write <strong><code>(&lt;foo&gt; = if [1] [&lt;foo&gt;])</code></strong> but can't because you're being "protected".</p>
<p>There are definitely some real, useful, power-user applications of the unevaluated flag.  This leads me to not want to rip it out entirely.  Some functions get real benefit from being able to tell if the callsite was <strong>10</strong> or <strong>5 + 5</strong> and it makes a difference they can action on...helpful in dealing with interface changes, for instance.</p>
<p>But building it into conditional tests in the system itself is probably a mistake.  What it's already done is introduce two tests: IS_TRUTHY() and IS_CONDITIONALLY_TRUE() <em>(and by extension, IS_FALSEY() and IS_CONDITIONALLY_FALSE())</em>.  Then you have to have explanations that say "well, it disallows literal blocks, which you don't want to do in some places for sure but it's thought to be helpful in some interfaces".</p>
<p>This flag was tried for a while as a solution to mitigate non-block branches, and scrapped there as well.  Because non-block branches were figured as a bad tradeoff all told. So I think IS_CONDITIONALLY_TRUE()<br>
and IS_CONDITIONALLY_FALSE() in the core needs to go.</p>
<p>I still want to be thinking about how one might build the training wheels layer and use the bit, so we'll put a pin in that.</p>
          <p><a href="https://forum.rebol.info/t/evaluating-the-worthiness-of-value-flag-unevaluated/912/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/evaluating-the-worthiness-of-value-flag-unevaluated/912/3</link>
        <pubDate>Mon, 19 Nov 2018 16:45:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-912-3</guid>
        <source url="https://forum.rebol.info/t/evaluating-the-worthiness-of-value-flag-unevaluated/912.rss">Evaluating the worthiness of VALUE_FLAG_UNEVALUATED</source>
      </item>
      <item>
        <title>Evaluating the worthiness of VALUE_FLAG_UNEVALUATED</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Hm. I think newbies might get tripped up on this temporarily or accidentally, but it doesn't seem like a feature that should be changed because a newbie hasn't yet grasped something as fundamental as literal values.</p>
          <p><a href="https://forum.rebol.info/t/evaluating-the-worthiness-of-value-flag-unevaluated/912/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/evaluating-the-worthiness-of-value-flag-unevaluated/912/2</link>
        <pubDate>Mon, 19 Nov 2018 16:36:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-912-2</guid>
        <source url="https://forum.rebol.info/t/evaluating-the-worthiness-of-value-flag-unevaluated/912.rss">Evaluating the worthiness of VALUE_FLAG_UNEVALUATED</source>
      </item>
      <item>
        <title>Evaluating the worthiness of VALUE_FLAG_UNEVALUATED</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>One question that comes up fairly often with new users is why <strong>if [var = value] [...]</strong> doesn't do what they expect.</p>
<p>We know that blocks are truthy, and passing a literal block to an IF will not run the code in the block.  They should have written <strong>if (var = value) [...]</strong> or just plain <strong>if var = value [...]</strong>.  But this isn't obvious to a newbie.</p>
<p>When I've encountered this situation myself, it's usually because of changing a WHILE into an IF, or something of that sort.  Of course, <strong>I</strong> know why a WHILE puts a block around its condition and an IF does not...but for a new user that's certainly non-obvious.</p>
<h2>Hence, VALUE_FLAG_UNEVALUATED was born</h2>
<p>I had the idea that values would have a bit on them that would say whether they were the product of an evaluation, or just literal.  Hence when IF ran, it could tell the difference between:</p>
<pre><code>block: [a b c]
if block [...]
</code></pre>
<p>and</p>
<pre><code>if [a b c] [...]
</code></pre>
<p>The former it would allow, the latter it would prohibit with an error.  This <em>seemed</em> like a good thing.</p>
<h2>Does it do more harm than good?</h2>
<p>You probably shouldn't write <strong>if [literal block]</strong> in your code (unless you were writing a test, or plan on transforming it before execution).  Yet you might well want to do this in a composition.</p>
<pre><code> compose/only [... if (conditional-expression) [...] ...]
</code></pre>
<p>If that conditional expression is a literal block, then do you want to get an error on it?</p>
<p>And really, what if someone <em>does</em> write:</p>
<pre><code> condition: [var = value]
 ...
 if condition body
</code></pre>
<p>If they intended that condition to execute, that's a mistake that wouldn't be caught.  So here we have the check impeding experts...and not protecting new users as thoroughly as one would hope.</p>
<h2>Nearly every safety feature has shown to be not worth it</h2>
<p>Because Rebol is subtle and can be difficult to debug, it has been tempting to throw in various safety mechanisms.  But nearly all that have been tried have been thrown out, instead addressing the relevant concern through a different angle.</p>
<p>There's no question that the existence of VALUE_FLAG_UNEVALUATED and maintaining its state makes the evaluator code more complicated.  Yet I've found being able to read it as being helpful in some cases when debugging or deprecating APIs.  It's likely good to keep the feature and let functions know this property of their callsites if they find it necessary.</p>
<p>But should things like the protection of IF and other conditional clauses be in the box, or should it be part of an adapted definition in a "training wheels" module...not enshrined in the mainline code?  (For that matter, should the website demo use training wheels mode by default, if it existed?)</p>
<p>I think I'm leaning toward making this a training-wheels-only feature, and having the stock IF (CASE/etc.) not error on literal blocks.  Of course, the training wheels would have its work cut out for it to emulate every conditional test in a CASE statement, <em>it would basically have to reimplement CASE</em>.  So this is a fairly heavy change.</p>
          <p><a href="https://forum.rebol.info/t/evaluating-the-worthiness-of-value-flag-unevaluated/912/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/evaluating-the-worthiness-of-value-flag-unevaluated/912/1</link>
        <pubDate>Mon, 19 Nov 2018 02:44:59 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-912-1</guid>
        <source url="https://forum.rebol.info/t/evaluating-the-worthiness-of-value-flag-unevaluated/912.rss">Evaluating the worthiness of VALUE_FLAG_UNEVALUATED</source>
      </item>
  </channel>
</rss>

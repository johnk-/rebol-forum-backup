<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Beta/One Comment Concession</title>
    <link>https://forum.rebol.info/t/the-beta-one-comment-concession/1028</link>
    <description>&gt; **Note:** People should bear in mind there was never a question that semicolon was going to stay a comment character.  *There was only a question of if another sequence (or sequences) would be permitted.  (!)*
&gt; 
&gt; Also, bear in mind that the alternative syntax for comments discussion started in August 2017.  Hence it [predated the creation of &quot;invisibles&quot; by about 4 months](https://forum.rebol.info/t/issues-with-invisibles-a-truly-disappearing-comment/405).  Invisibles have offered a much higher leverage tool for machine-processable comment-like things, and to use them requires not giving up too many characters to be stripped out of source.

Ideas have been discussed and tried.  But the time has run out on this decision, and status quo wins.

## Semicolon will be the only scanner comment in Beta/One

Other ideas got panned for various reasons:

* **`#`** Makes every line look like it has an #issue on it, and # is overloaded as it is (char! should probably change to **&amp;** and be more compatible with HTML character entities).  The use of issues and having them stand out is a more unique Rebol attraction than comments.  Having lone # for a dialecting component seems nice, e.g. `compose # [(1  + 2) (# 1 + 2) (1 + 2)]` =&gt; `[(1 + 2) 3 (1 + 2)]`

* **`//`** Tried it for a while and it didn&#39;t make it as happy as I wanted it to.  Wound up desired for NewPath, as the representation of a length 3 path with blanks in it.  Having blanks in paths not render affords paths like **/foo** (what was a refinement) and **foo/** (previously did not exist).

* **`--`** Made up of a known legal WORD! character.  Have gotten kind of attached to this as a shorthand for DUMP-to-end-of-line.     Has uses in dialects, e.g. those representing command lines (it&#39;s a sequence used to indicate end of switches and beginning of parameters).  Doesn&#39;t look good when doing sequential lines of comments as a block, only when commenting an existing line rightwards...which means it&#39;s not a good &quot;one size fits all&quot; comment form like `//` is for C and C++.

* **`\`** Only @gchiu likes it.  Every time we try to talk about it, StackOverflow chat or other mediums with escaping throw a fit.  My experience with trying it out for generalized quoting instead of apostrophe made me fairly convinced I hate this character in source code.  I think I want to stick to @MarkI&#39;s idea that it&#39;s the one ASCII codepoint we promise not to use outside of strings, to help people making templating languages *who need an escape from Rebol itself*.

## Recommendations

My own conclusion is that I&#39;m going to avoid the `;--` and `;;` sequences.  They don&#39;t help make up for semicolon&#39;s shortcomings, they exacerbate the problem and destroy what merit it does have.

Instead I suggest sticking to single semicolons, and finding a way to space them away from the code.  I personally wouldn&#39;t want to get in the business of doing alignment of semicolons to some arbitrary margin you have to maintain as you edit:

     some &lt;code&gt; on a #medium line       ; so I put comment here
     short line                          ; guess comment goes here, then?
     then =what= IF [I go write &lt;some&gt;] &quot;Long line&quot;    ; crap, touch all the lines now? 

This kind of practice annoys me in version control due to touching lines that shouldn&#39;t have been affected.  *(Of course, it&#39;s text and not a graph database, so you get this with secondary changes due to indentation too.)*

Instead I&#39;d just suggest trading off something like the two spaces you might have used for a dash before, and use them for an extra space to put some distance from your code.

     some &lt;code&gt; on a #medium line  ; comment two spaces out
     short line  ; again, just two spaces
     then =what= IF [I go write &lt;some&gt;] &quot;Long line&quot;  ; not perfect (but nothing is) 

Compare that with the alternative using another unit of character width, e.g. `;--`:

     some &lt;code&gt; on a #medium line ;-- this seems more cluttered
     short line ;-- at least, I think it looks cluttered 
     then =what= IF [I go write &lt;some&gt;] &quot;Long line&quot; ;-- but do whatever you like 

Then there&#39;s `;;`:

     some &lt;code&gt; on a #medium line ;; this is probably even worse
     short line ;; I&#39;ve tried this one for a while and pretty sure I hate it 
     then =what= IF [I go write &lt;some&gt;] &quot;Long line&quot; ;; but well, matters of taste 

Embracing the single semicolon actually works pretty reasonably if you put comments on their own lines, when they line up like this their complained-about &quot;dottedness&quot; almost suggests a cut-along-dotted-line kind of separation:

     ; STUFF TO TALK ABOUT
     ;
     ; This isn&#39;t so bad...it&#39;s actually kind of nice

## Closing This and Looking to the Future

I mentioned that we have invisibles now, and my attachment to `--` for DUMP has made me reluctant to take it away from dialecting.  And it&#39;s invisible, too...so very comment-like.

Perhaps its best to just repeat a mantra [like what @LkpPo said](https://forum.rebol.info/t/deciding-on-an-alternative-comment-syntax/275/49?u=hostilefork):

&gt; *&quot;...a comment do[es] nothing from the point of view of the computer. Why [have] more ways of doing nothing?&quot;*

Semicolon may kind of suck as a character, but that just means it&#39;s not wanted for anything else.  So it seems to have job protection/monopoly status.

The big change of taking **==** away from equality comparison and giving it back for marking up sections may open some doors to new and interesting forms of commenting that can actually *do* something (e.g. when you are in a debug mode, print out **== PHASE ONE ==** as it passes by).</description>
    
    <lastBuildDate>Wed, 23 Jan 2019 03:24:13 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/the-beta-one-comment-concession/1028.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Beta/One Comment Concession</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p><strong>Note:</strong> People should bear in mind there was never a question that semicolon was going to stay a comment character.  <em>There was only a question of if another sequence (or sequences) would be permitted.  (!)</em></p>
<p>Also, bear in mind that the alternative syntax for comments discussion started in August 2017.  Hence it <a href="https://forum.rebol.info/t/issues-with-invisibles-a-truly-disappearing-comment/405">predated the creation of "invisibles" by about 4 months</a>.  Invisibles have offered a much higher leverage tool for machine-processable comment-like things, and to use them requires not giving up too many characters to be stripped out of source.</p>
</blockquote>
<p>Ideas have been discussed and tried.  But the time has run out on this decision, and status quo wins.</p>
<h2>Semicolon will be the only scanner comment in Beta/One</h2>
<p>Other ideas got panned for various reasons:</p>
<ul>
<li>
<p><strong><code>#</code></strong> Makes every line look like it has an <span class="hashtag">#issue</span> on it, and # is overloaded as it is (char! should probably change to <strong>&amp;</strong> and be more compatible with HTML character entities).  The use of issues and having them stand out is a more unique Rebol attraction than comments.  Having lone # for a dialecting component seems nice, e.g. <code>compose # [(1 + 2) (# 1 + 2) (1 + 2)]</code> =&gt; <code>[(1 + 2) 3 (1 + 2)]</code></p>
</li>
<li>
<p><strong><code>//</code></strong> Tried it for a while and it didn't make it as happy as I wanted it to.  Wound up desired for NewPath, as the representation of a length 3 path with blanks in it.  Having blanks in paths not render affords paths like <strong>/foo</strong> (what was a refinement) and <strong>foo/</strong> (previously did not exist).</p>
</li>
<li>
<p><strong><code>--</code></strong> Made up of a known legal WORD! character.  Have gotten kind of attached to this as a shorthand for DUMP-to-end-of-line.     Has uses in dialects, e.g. those representing command lines (it's a sequence used to indicate end of switches and beginning of parameters).  Doesn't look good when doing sequential lines of comments as a block, only when commenting an existing line rightwards...which means it's not a good "one size fits all" comment form like <code>//</code> is for C and C++.</p>
</li>
<li>
<p><strong><code>\</code></strong> Only <a class="mention" href="/u/gchiu">@gchiu</a> likes it.  Every time we try to talk about it, StackOverflow chat or other mediums with escaping throw a fit.  My experience with trying it out for generalized quoting instead of apostrophe made me fairly convinced I hate this character in source code.  I think I want to stick to <span class="mention">@MarkI</span>'s idea that it's the one ASCII codepoint we promise not to use outside of strings, to help people making templating languages <em>who need an escape from Rebol itself</em>.</p>
</li>
</ul>
<h2>Recommendations</h2>
<p>My own conclusion is that I'm going to avoid the <code>;--</code> and <code>;;</code> sequences.  They don't help make up for semicolon's shortcomings, they exacerbate the problem and destroy what merit it does have.</p>
<p>Instead I suggest sticking to single semicolons, and finding a way to space them away from the code.  I personally wouldn't want to get in the business of doing alignment of semicolons to some arbitrary margin you have to maintain as you edit:</p>
<pre><code> some &lt;code&gt; on a #medium line       ; so I put comment here
 short line                          ; guess comment goes here, then?
 then =what= IF [I go write &lt;some&gt;] "Long line"    ; crap, touch all the lines now? 
</code></pre>
<p>This kind of practice annoys me in version control due to touching lines that shouldn't have been affected.  <em>(Of course, it's text and not a graph database, so you get this with secondary changes due to indentation too.)</em></p>
<p>Instead I'd just suggest trading off something like the two spaces you might have used for a dash before, and use them for an extra space to put some distance from your code.</p>
<pre><code> some &lt;code&gt; on a #medium line  ; comment two spaces out
 short line  ; again, just two spaces
 then =what= IF [I go write &lt;some&gt;] "Long line"  ; not perfect (but nothing is) 
</code></pre>
<p>Compare that with the alternative using another unit of character width, e.g. <code>;--</code>:</p>
<pre><code> some &lt;code&gt; on a #medium line ;-- this seems more cluttered
 short line ;-- at least, I think it looks cluttered 
 then =what= IF [I go write &lt;some&gt;] "Long line" ;-- but do whatever you like 
</code></pre>
<p>Then there's <code>;;</code>:</p>
<pre><code> some &lt;code&gt; on a #medium line ;; this is probably even worse
 short line ;; I've tried this one for a while and pretty sure I hate it 
 then =what= IF [I go write &lt;some&gt;] "Long line" ;; but well, matters of taste 
</code></pre>
<p>Embracing the single semicolon actually works pretty reasonably if you put comments on their own lines, when they line up like this their complained-about "dottedness" almost suggests a cut-along-dotted-line kind of separation:</p>
<pre><code> ; STUFF TO TALK ABOUT
 ;
 ; This isn't so bad...it's actually kind of nice
</code></pre>
<h2>Closing This and Looking to the Future</h2>
<p>I mentioned that we have invisibles now, and my attachment to <code>--</code> for DUMP has made me reluctant to take it away from dialecting.  And it's invisible, too...so very comment-like.</p>
<p>Perhaps its best to just repeat a mantra <a href="https://forum.rebol.info/t/deciding-on-an-alternative-comment-syntax/275/49?u=hostilefork">like what @LkpPo said</a>:</p>
<blockquote>
<p><em>"...a comment do[es] nothing from the point of view of the computer. Why [have] more ways of doing nothing?"</em></p>
</blockquote>
<p>Semicolon may kind of suck as a character, but that just means it's not wanted for anything else.  So it seems to have job protection/monopoly status.</p>
<p>The big change of taking <strong>==</strong> away from equality comparison and giving it back for marking up sections may open some doors to new and interesting forms of commenting that can actually <em>do</em> something (e.g. when you are in a debug mode, print out <strong>== PHASE ONE ==</strong> as it passes by).</p>
          <p><a href="https://forum.rebol.info/t/the-beta-one-comment-concession/1028/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-beta-one-comment-concession/1028/1</link>
        <pubDate>Tue, 22 Jan 2019 12:53:10 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1028-1</guid>
        <source url="https://forum.rebol.info/t/the-beta-one-comment-concession/1028.rss">The Beta/One Comment Concession</source>
      </item>
  </channel>
</rss>

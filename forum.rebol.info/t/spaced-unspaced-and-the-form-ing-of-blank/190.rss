<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>SPACED, UNSPACED, and the FORM-ing of BLANK!</title>
    <link>https://forum.rebol.info/t/spaced-unspaced-and-the-form-ing-of-blank/190</link>
    <description>Historically in Rebol, the `#[none]` value would FORM and MOLD to appear as the WORD! none.  This is still the case today in Red:

    &gt;&gt; form #[none]
    == &quot;none&quot;
    &gt;&gt; mold #[none]
    == &quot;none&quot;

One way of looking at this would be that as a none is a value a variable might wish to hold, that being able to show that is helpful for reflecting the state of a variable:

     &gt;&gt; x: none
     &gt;&gt; print [&quot;The value of x is&quot; x]
     The value of x is none

But there are a number of philosophical holes in this.  Firstly, you can&#39;t really tell if x is a WORD! or not.  Secondly, other examples of printing would throw away information:

    &gt;&gt; x: [block]
    &gt;&gt; print [&quot;The value of x is&quot; x]
    The value of x is block

So this suggests a fluidity that perhaps forcing a visible representation for blanks (none) isn&#39;t the best option.  Many practical cases would be improved if it just disappeared, such as these:

    &gt;&gt; print [&quot;thing to include&quot; if false [&quot;thing to omit&quot;]]
    thing to include none

    &gt;&gt; parentheses: false
    &gt;&gt; rejoin [
            if parentheses [&quot;(&quot;]
            &quot;thing to maybe parenthesize&quot;
            if parentheses [&quot;)&quot;]
        ]
    == &quot;nonething to maybe parenthesizenone&quot;

To say that finding a deep philosophy of PRINT has been difficult would be an understatement.  Should it space or not...should the &quot;#[none]&quot; value be represented with an underscore for &quot;blank&quot;, and `print [&quot;Then use that for spacing&quot; _ x]`.  :-/  Several questions remain unresolved even now.

Yet ultimately the decision was to create two routines, SPACED and UNSPACED, which would treat blanks the same as voids...as the absence of anything to stringify.  PRINT invokes SPACED by default if given a block, and if one wishes to get an unspaced print you simply say `print unspaced [...]`.

The result has been a profound improvement.  Says @ShixinZeng:

&gt; I love it. It&#39;s much easier to write than **either true [&quot;something&quot;][&quot;&quot;]**

[You too will love it.  It&#39;s much better than REJOIN.  You&#39;re going to use it again and again.](http://www.nbc.com/saturday-night-live/video/amazing-alexander/n9457?snl=1)

Feel free to add your testimonials here.</description>
    
    <lastBuildDate>Thu, 06 Jul 2017 17:43:46 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/spaced-unspaced-and-the-form-ing-of-blank/190.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>SPACED, UNSPACED, and the FORM-ing of BLANK!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I'll also mention that not only is <code>print unspaced [...]</code> more literate and comprehensible than <code>print rejoin [...]</code> from a terminology standpoint, the fact that UNSPACED always returns a string is important.</p>
<p>Note how the property of REJOIN adopting the type of its first element can cause unpredictable variations, that would throw off new users:</p>
<pre><code>&gt;&gt; x: [some stuff]

&gt;&gt; print rejoin ["the data is" space x]
the data is some stuff

&gt;&gt; print rejoin [x space "is the data"]
*** Script Error: some has no value
*** Where: print</code></pre>
          <p><a href="https://forum.rebol.info/t/spaced-unspaced-and-the-form-ing-of-blank/190/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/spaced-unspaced-and-the-form-ing-of-blank/190/2</link>
        <pubDate>Thu, 06 Jul 2017 17:43:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-190-2</guid>
        <source url="https://forum.rebol.info/t/spaced-unspaced-and-the-form-ing-of-blank/190.rss">SPACED, UNSPACED, and the FORM-ing of BLANK!</source>
      </item>
      <item>
        <title>SPACED, UNSPACED, and the FORM-ing of BLANK!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Historically in Rebol, the <code>#[none]</code> value would FORM and MOLD to appear as the WORD! none.  This is still the case today in Red:</p>
<pre><code>&gt;&gt; form #[none]
== "none"
&gt;&gt; mold #[none]
== "none"
</code></pre>
<p>One way of looking at this would be that as a none is a value a variable might wish to hold, that being able to show that is helpful for reflecting the state of a variable:</p>
<pre><code> &gt;&gt; x: none
 &gt;&gt; print ["The value of x is" x]
 The value of x is none
</code></pre>
<p>But there are a number of philosophical holes in this.  Firstly, you can't really tell if x is a WORD! or not.  Secondly, other examples of printing would throw away information:</p>
<pre><code>&gt;&gt; x: [block]
&gt;&gt; print ["The value of x is" x]
The value of x is block
</code></pre>
<p>So this suggests a fluidity that perhaps forcing a visible representation for blanks (none) isn't the best option.  Many practical cases would be improved if it just disappeared, such as these:</p>
<pre><code>&gt;&gt; print ["thing to include" if false ["thing to omit"]]
thing to include none

&gt;&gt; parentheses: false
&gt;&gt; rejoin [
        if parentheses ["("]
        "thing to maybe parenthesize"
        if parentheses [")"]
    ]
== "nonething to maybe parenthesizenone"
</code></pre>
<p>To say that finding a deep philosophy of PRINT has been difficult would be an understatement.  Should it space or not...should the "#[none]" value be represented with an underscore for "blank", and <code>print ["Then use that for spacing" _ x]</code>.  :-/  Several questions remain unresolved even now.</p>
<p>Yet ultimately the decision was to create two routines, SPACED and UNSPACED, which would treat blanks the same as voids...as the absence of anything to stringify.  PRINT invokes SPACED by default if given a block, and if one wishes to get an unspaced print you simply say <code>print unspaced [...]</code>.</p>
<p>The result has been a profound improvement.  Says <span class="mention">@ShixinZeng</span>:</p>
<blockquote>
<p>I love it. It's much easier to write than <strong>either true ["something"][""]</strong></p>
</blockquote>
<p><a href="http://www.nbc.com/saturday-night-live/video/amazing-alexander/n9457?snl=1" rel="nofollow noopener">You too will love it.  It's much better than REJOIN.  You're going to use it again and again.</a></p>
<p>Feel free to add your testimonials here.</p>
          <p><a href="https://forum.rebol.info/t/spaced-unspaced-and-the-form-ing-of-blank/190/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/spaced-unspaced-and-the-form-ing-of-blank/190/1</link>
        <pubDate>Thu, 06 Jul 2017 17:29:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-190-1</guid>
        <source url="https://forum.rebol.info/t/spaced-unspaced-and-the-form-ing-of-blank/190.rss">SPACED, UNSPACED, and the FORM-ing of BLANK!</source>
      </item>
  </channel>
</rss>

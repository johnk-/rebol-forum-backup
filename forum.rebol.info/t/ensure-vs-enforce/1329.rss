<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>ENSURE vs. ENFORCE</title>
    <link>https://forum.rebol.info/t/ensure-vs-enforce/1329</link>
    <description>I noticed that I have two different ways of using the word &quot;Ensure&quot;.

The first meaning is **&quot;If something hasn&#39;t already been done, make sure it gets done.&quot;**  This happens with things like passing a series to a value cell...and anything that gets put into a value cell has to be under the control of the memory manager.  That&#39;s indicated by a bit set on the series, so **Ensure_Series_Managed(series)** will check to see if the bit is set, and if so it is a no-op.  If it&#39;s not set, then some code runs and the bit gets set.

The second meaning is **&quot;Check if something has a property...and pass the value thru if it has that property, otherwise trigger a failure and interrupt the operation.&quot;** This is how it&#39;s been used in the ENSURE native, where you give it a datatype and can say something like **`ensure integer! foo`**.  Inside the C code I can use it the same way, e.g.

    REBVAL *v = ENSURE(REB_INTEGER, First_Value_In_Array(array));

*I&#39;m not thrilled about having the word mean both things.*  At first I figured that **ENFORCE** might be used for the first case...but then it sounds like what it does is more severe.  Depending on how you look at it, &quot;forcibly&quot; changing a condition to be true even if it was not might be more &quot;intense&quot; than raising an error...

ENSURE has precedent in design-by-contract, which suggests failure vs. massaging things to be how you want:

https://archive.eiffel.com/doc/online/eiffel50/intro/language/invitation-07.html

That goes along with me thinking I think I like the ENSURE native how it is, so it&#39;s the other word I want to change...currently it&#39;s only inside the implementation so it&#39;s not a big issue.  But talking it through in case anyone has ideas.

    ; could this better suggest that if the array is not managed, it becomes so?
    ; there is no error, only bringing the argument into compliance.
    ; also should suggest that the input value is passed through either way.
    ;
    Init_Block(value, Enforce_Array_Managed(array));

Perhaps just &quot;FORCE&quot;, instead of &quot;ENFORCE&quot;?

    Init_Block(value, Force_Array_Managed(array));

Hmm... I think I like that.

It could be used as a Redbol function in a context where you want to do a TO conversion, but only if something wasn&#39;t the type already:

    &gt;&gt; blk: [a b]
    &gt;&gt; forced: force block! blk
    == [a b]
    &gt;&gt; append blk &#39;c
    &gt;&gt; forced
    == [a b c]  ; kept identity; was passed thru as-is

    &gt;&gt; int: 1
    &gt;&gt; forced: force block! int
    == [1]  ; had to have a new thing made for it to be blocklike

This is the spirit of the kinds of functions I&#39;m talking about...to have a baseline case where they are no-ops, but then take action if the thing they want isn&#39;t true enough to pass through a result with that property.  Previously I called the above **force block!** concept &quot;blockify&quot;, but this could generalize better and be less of a weird name.</description>
    
    <lastBuildDate>Fri, 18 Sep 2020 16:59:41 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/ensure-vs-enforce/1329.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>ENSURE vs. ENFORCE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I noticed that I have two different ways of using the word "Ensure".</p>
<p>The first meaning is <strong>"If something hasn't already been done, make sure it gets done."</strong>  This happens with things like passing a series to a value cell...and anything that gets put into a value cell has to be under the control of the memory manager.  That's indicated by a bit set on the series, so <strong>Ensure_Series_Managed(series)</strong> will check to see if the bit is set, and if so it is a no-op.  If it's not set, then some code runs and the bit gets set.</p>
<p>The second meaning is <strong>"Check if something has a property...and pass the value thru if it has that property, otherwise trigger a failure and interrupt the operation."</strong> This is how it's been used in the ENSURE native, where you give it a datatype and can say something like <strong><code>ensure integer! foo</code></strong>.  Inside the C code I can use it the same way, e.g.</p>
<pre><code>REBVAL *v = ENSURE(REB_INTEGER, First_Value_In_Array(array));
</code></pre>
<p><em>I'm not thrilled about having the word mean both things.</em>  At first I figured that <strong>ENFORCE</strong> might be used for the first case...but then it sounds like what it does is more severe.  Depending on how you look at it, "forcibly" changing a condition to be true even if it was not might be more "intense" than raising an error...</p>
<p>ENSURE has precedent in design-by-contract, which suggests failure vs. massaging things to be how you want:</p>
<p><a href="https://archive.eiffel.com/doc/online/eiffel50/intro/language/invitation-07.html" class="onebox" target="_blank" rel="nofollow noopener">https://archive.eiffel.com/doc/online/eiffel50/intro/language/invitation-07.html</a></p>
<p>That goes along with me thinking I think I like the ENSURE native how it is, so it's the other word I want to change...currently it's only inside the implementation so it's not a big issue.  But talking it through in case anyone has ideas.</p>
<pre><code>; could this better suggest that if the array is not managed, it becomes so?
; there is no error, only bringing the argument into compliance.
; also should suggest that the input value is passed through either way.
;
Init_Block(value, Enforce_Array_Managed(array));
</code></pre>
<p>Perhaps just "FORCE", instead of "ENFORCE"?</p>
<pre><code>Init_Block(value, Force_Array_Managed(array));
</code></pre>
<p>Hmm... I think I like that.</p>
<p>It could be used as a Redbol function in a context where you want to do a TO conversion, but only if something wasn't the type already:</p>
<pre><code>&gt;&gt; blk: [a b]
&gt;&gt; forced: force block! blk
== [a b]
&gt;&gt; append blk 'c
&gt;&gt; forced
== [a b c]  ; kept identity; was passed thru as-is

&gt;&gt; int: 1
&gt;&gt; forced: force block! int
== [1]  ; had to have a new thing made for it to be blocklike
</code></pre>
<p>This is the spirit of the kinds of functions I'm talking about...to have a baseline case where they are no-ops, but then take action if the thing they want isn't true enough to pass through a result with that property.  Previously I called the above <strong>force block!</strong> concept "blockify", but this could generalize better and be less of a weird name.</p>
          <p><a href="https://forum.rebol.info/t/ensure-vs-enforce/1329/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ensure-vs-enforce/1329/1</link>
        <pubDate>Fri, 18 Sep 2020 11:59:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1329-1</guid>
        <source url="https://forum.rebol.info/t/ensure-vs-enforce/1329.rss">ENSURE vs. ENFORCE</source>
      </item>
  </channel>
</rss>

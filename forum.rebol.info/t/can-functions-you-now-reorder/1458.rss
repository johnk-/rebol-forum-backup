<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Can Functions You ➤ Now REORDER</title>
    <link>https://forum.rebol.info/t/can-functions-you-now-reorder/1458</link>
    <description>As things have slowly nudged along in the function composition space, I&#39;ve kept a generic reordering facility in mind.

And today... less than a week into 2021... we have a first version of it, tentatively named REORDER.

    &gt;&gt; append-value-first: reorder :append [value series]

    &gt;&gt; append-value-first &lt;item&gt; [a b c]
    == [a b c &lt;item&gt;]

As with other function derivations, there&#39;s a lot of benefit over writing **func [value series] [append series value]** !

First of all, it&#39;s nearly as fast as the original function. It adds a little overhead to do the rearrangement, but it places values in the same underlying frame slots...and introduces no new frame of its own.

You keep the HELP, parameter names, and descriptions...as well as keep the refinements:

    &gt;&gt; append-value-first/dup &lt;item&gt; [a b c] 3
    == [a b c &lt;item&gt; &lt;item&gt; &lt;item&gt;]

## Usage Notes

*You need to provide all the required arguments*.  It won&#39;t guess where you want parameters to go.

    &gt;&gt; reorder :append [value]
    ** Script Error: append is missing its series argument

However... **you can position optional arguments in the ordering if you like!**

    &gt;&gt; append-val-dup-ser: reorder :append [value dup series]

    &gt;&gt; append-val-dup-ser &lt;item&gt; 3 [a b c]
    == [a b c &lt;item&gt; &lt;item&gt; &lt;item&gt;]

As usual, I will plead for the submission of more tests:

**[%tests/functions/reorder.test.reb](https://github.com/metaeducation/ren-c/blob/master/tests/functions/reorder.test.reb)**

I point out that this is based on a more foundational ability, to specify non-refinement arguments in paths...which pushes them to the end of the pending arguments:

    &gt;&gt; append/series &lt;item&gt; [a b c]
    == [a b c &lt;item&gt;]

REORDER gives you a more intuitive interface to it, but you can also do it that way if you feel like it!</description>
    
    <lastBuildDate>Wed, 06 Jan 2021 03:04:17 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/can-functions-you-now-reorder/1458.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Can Functions You ➤ Now REORDER</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p><img src="https://forum.rebol.info/images/emoji/twitter/exploding_head.png?v=9" title=":exploding_head:" class="emoji only-emoji" alt=":exploding_head:"><br>
Very cool tool to have in the box!</p>
          <p><a href="https://forum.rebol.info/t/can-functions-you-now-reorder/1458/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/can-functions-you-now-reorder/1458/2</link>
        <pubDate>Wed, 06 Jan 2021 03:04:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1458-2</guid>
        <source url="https://forum.rebol.info/t/can-functions-you-now-reorder/1458.rss">Can Functions You ➤ Now REORDER</source>
      </item>
      <item>
        <title>Can Functions You ➤ Now REORDER</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>As things have slowly nudged along in the function composition space, I've kept a generic reordering facility in mind.</p>
<p>And today... less than a week into 2021... we have a first version of it, tentatively named REORDER.</p>
<pre><code>&gt;&gt; append-value-first: reorder :append [value series]

&gt;&gt; append-value-first &lt;item&gt; [a b c]
== [a b c &lt;item&gt;]
</code></pre>
<p>As with other function derivations, there's a lot of benefit over writing <strong>func [value series] [append series value]</strong> !</p>
<p>First of all, it's nearly as fast as the original function. It adds a little overhead to do the rearrangement, but it places values in the same underlying frame slots...and introduces no new frame of its own.</p>
<p>You keep the HELP, parameter names, and descriptions...as well as keep the refinements:</p>
<pre><code>&gt;&gt; append-value-first/dup &lt;item&gt; [a b c] 3
== [a b c &lt;item&gt; &lt;item&gt; &lt;item&gt;]
</code></pre>
<h2>Usage Notes</h2>
<p><em>You need to provide all the required arguments</em>.  It won't guess where you want parameters to go.</p>
<pre><code>&gt;&gt; reorder :append [value]
** Script Error: append is missing its series argument
</code></pre>
<p>However... <strong>you can position optional arguments in the ordering if you like!</strong></p>
<pre><code>&gt;&gt; append-val-dup-ser: reorder :append [value dup series]

&gt;&gt; append-val-dup-ser &lt;item&gt; 3 [a b c]
== [a b c &lt;item&gt; &lt;item&gt; &lt;item&gt;]
</code></pre>
<p>As usual, I will plead for the submission of more tests:</p>
<p><strong><a href="https://github.com/metaeducation/ren-c/blob/master/tests/functions/reorder.test.reb">%tests/functions/reorder.test.reb</a></strong></p>
<p>I point out that this is based on a more foundational ability, to specify non-refinement arguments in paths...which pushes them to the end of the pending arguments:</p>
<pre><code>&gt;&gt; append/series &lt;item&gt; [a b c]
== [a b c &lt;item&gt;]
</code></pre>
<p>REORDER gives you a more intuitive interface to it, but you can also do it that way if you feel like it!</p>
          <p><a href="https://forum.rebol.info/t/can-functions-you-now-reorder/1458/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/can-functions-you-now-reorder/1458/1</link>
        <pubDate>Wed, 06 Jan 2021 02:46:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1458-1</guid>
        <source url="https://forum.rebol.info/t/can-functions-you-now-reorder/1458.rss">Can Functions You ➤ Now REORDER</source>
      </item>
  </channel>
</rss>

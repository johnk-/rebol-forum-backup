<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>APPLY II: The Revenge</title>
    <link>https://forum.rebol.info/t/apply-ii-the-revenge/1406</link>
    <description>It&#39;s time to bring back APPLY.

## First Big Question: Quote The Function or Not?

This has been on my mind since the beginning: *should you have to use a GET-WORD! to name the function to apply, or does it quote by default...and make you put code fragments that returns a function in a group*.

     ; Worldview #1
     apply :append [series value]
     apply second reduce [:insert :append] [series value]  ; will APPLY :APPEND

     ; Worldview #2
     apply append [series value]
     apply :append [series value]  ; still legal if you want
     apply (second reduce [:insert :append]) [series value]  ; GROUP! is required

*(Note: We have at least some relief at not having to consider Worldview #3, of `apply &#39;append [series value]` so APPLY can capture the name &quot;append&quot; for debug stack purposes.  That&#39;s not needed because `:append` gets an ACTION! that carries the label in its cell.  [This has been a change that punches above its weight.](https://forum.rebol.info/t/more-comprehensible-errors-with-per-cell-labeling/1357))*

In the beginning I would have said it *definitely* has to go with Worldview #1, because in the second case you don&#39;t get a clear signal that APPEND is not being called on [SERIES VALUE] and the result being passed to APPLY.  If you didn&#39;t see the apply or were otherwise distracted, your reading comprehension would be thrown off by breaking from convention.

Over time I&#39;ve become more of a believer that the whole premise of the language is to let you bend constructs to predominate use, so the 99% case is pleasing to use.  The now famous case of OF&#39;s left-quote, for instance:

    type: &#39;type of x  ; without OF quoting

    type: type of x  ; with OF quoting

The quote mark makes it clearer, but when OF becomes so common that you &quot;just know&quot; then it&#39;s a much more pleasing function to use.  How many times do you use OF with a reflector you pick via code?  When is that code a single-arity function you wouldn&#39;t have to put in a GROUP! to use with enfix anyway??!

But does that same philosophy to APPLY, that we come to read **apply append** as one indivisible unit, and feel thankful for not having to reach for the colon key?  It&#39;s a little bit different than OF because you read left to right, and you can start reading at the APPEND with no speedbump after it.

I&#39;ll stress that you would still have the choice.  If you were the type of person who thought it clearer to use the colon, you could do so.  You just wouldn&#39;t be able to invoke a function-to-generate-the-function unless you put that in a GROUP!.

*I can&#39;t make up my mind.*  So I think I&#39;m going to make the answer Worldview 1.5:

     ; Worldview 1.5
     &gt;&gt; apply second reduce [:insert :append] [series value]
     ** Error: APPLY arguments must be GET-WORD! or GROUP! at the moment

This leaves the door open to interpreting plain WORD! as naming a function in the future.  And it gives time for people to find a really compelling case for where not being able to generate a function without using a GROUP! would be a deal-breaker.

## Naming Refinements

Historical APPLY had a nasty positional nature for refinements, which led to things like this, from the R3-Alpha module code:

    return map-each [mod ver sum name] source [
        apply :load-module [
            mod true? ver ver true? sum sum no-share no-lib import true? name name delay
        ]
    ]

You see the combination of `true? ver` followed by `ver` as filling in first the refinement slot for /VERSION, and then the value of the refinement argument.

Then you see &quot;used or not&quot; refinements being supplied to their argument cells by the value alone (`no-share` signaling not to provide /SHARE, `no-lib` signaling not to use /LIB)

**But we can now put refinement names in the APPLY dialect!**

    apply :load-module [
        mod /version ver /sum sum
            /share null /lib null  ; avoids need for &quot;clarifying&quot; `no-share: false`
            /import import /name name
            /delay delay
    ]

You might ask what was stopping that before.  The issue was that historical Rebol had the problem that if you had an argument that could take on any value...including NONE!...then NONE! could not be used to represent the state of the refinement itself.

(Imagine if you are specifying an initial value to fill a block with (as in ARRAY/INITIAL).  It may be important to distinguish putting a NONE! in vs. not having a default at all.)

This is solved in Ren-C by reserving the non-valued NULL state for &quot;refinement not taken&quot;.

&gt; Note: I&#39;d gone back and forth a while over whether a REFINEMENT-like PATH! would be appropriate to use in this dialect, based on the question of whether they would be evaluator-active or not.  Ideas were floated around like `foo` would fetch a variable but be an error if it was NULL, while `/foo` would fetch a variable and allow NULL.
&gt;
&gt; In the end, inertness for refinements won out.  BLANK!-headed PATH!s and TUPLE!s simply have more dialecting power if they don&#39;t overlap what could be a legitimate user intention to fetch variables.  This APPLY situation shows a good example of why inertness is good.)*
&gt;
&gt; Also, if you want to literally pass a refinement value you can do so.  Just quote it:
&gt;
&gt;        apply :whatever [/refinement &#39;/refinement]
&gt;
&gt; That will pass /REFINEMENT as the refinement parameter.

## Providing Normal Arguments By Name

A neat feature of new APPLY will be not only that you can reorder refinements to put them in any position, but also that you can name normal arguments.

So things like this would be legal:

    &gt;&gt; apply :append [/dup 2, /value &lt;d&gt;, [a b c]]
    == [a b c &lt;d&gt; &lt;d&gt;]

Everything is streamlined by the idea that refinements represent one (and only one) argument in the frame.  *Which has been a critical and elegance-making change.*

The concept is that ordered parameters which have not yet been named would be filled in, in the order that they are supplied.  You wouldn&#39;t be able to specify something twice, so this would be an error:

    &gt;&gt; apply :append [/series [a b c], [d e f], &lt;g&gt;]
    ** Error: Duplicate argument supplied for SERIES

## Can LOGIC! Be Used With Parameterless-Refinements?

I have belabored the point of why we don&#39;t want low-level FRAME! mechanics getting involved in [transforming `[#[true] #[false]]` into `[# null]`](https://forum.rebol.info/t/should-refinement-arguments-be-refinement-if-used/735/4?u=hostilefork) for refinements that are &quot;either used or not&quot;.

Those rules don&#39;t really &quot;apply&quot; here.  APPLY is its own dialect with its own mechanics, and it can do what&#39;s convenient.  It can canonize true and false into # and NULL in the frame.

    foo: func [/usable /logicable [logic!]] [...]

    apply :foo [/usable 1 &lt; 2, /logicable 1 &lt; 2]
    ; this would give usable of `#`, and logicable of `#[true]`

    apply :foo [/usable 1 &gt; 2, /logicable 1 &gt; 2]
    ; this would give usable of NULL, and logicable of `#[false]`

Hopefully it makes sense why I think APPLY should be able to do this, while MAKE FRAME! and friends don&#39;t.  MAKE FRAME! is the tool for writing *APPLY-like-things*, and there&#39;s no layer between the frame and the evaluator where it&#39;s appropriate to put these transformations.  It should be kept pure.

## Should You Be *Able* to Provide Refinements By Position?

I&#39;m not sure if giving refinements by position is a great idea.  But this hits on a philosophical question of whether refinements have an order that is exposed to the user.

*But specialization can shuffle the order.*  For instance, what was once a refinement can become a normal argument.

    &gt;&gt; foo: func [x [integer!] /refine1 [integer!] /refine2 [integer!]] [...]

    &gt;&gt; parameters of :foo
    == [x /refine1 /refine2]  ; one normal argument

    &gt;&gt; foo-2: :foo/refine2
    == [x refine2 /refine1]  ; two normal arguments (e.g. acts like FOO/REFINE2)

This makes things a bit wacky.

I feel like the safest decision for right now is to say that once you&#39;ve filled all the ordered arguments, any more arguments in the APPLY with no label causes an error.  The place where this would cause issues would be if BLOCK!s are used to serialize and deserialize frame state generically.  That&#39;s a thorny problem in general, which brings us to...

## Should There Be An APPLY/ONLY

The idea behind APPLY/ONLY was that you have the values for a function&#39;s arguments already processed, and you don&#39;t want to evaluate them again.

One thing that breaks APPLY/ONLY in Ren-C&#39;s world is that this doesn&#39;t give a way to supply NULL arguments.  One option would be to let the BAD-WORD! with label `~null~` be an escape mechanism for this, which might cover a lot of cases (though obviously not accurately capturing a frame that purposefully wanted to pass the ~null~ BAD-WORD!).

*Because FRAME!s have come along as a general and pure tool for representing function applications, the pressure is taken off of APPLY to be all things to all people.*  I think it should start out as the handy evaluative form, and then wait for motivating scenarios before trying to bend to anything else.  Maybe another operator entirely would be more suitable, or just using FRAME! as it is.</description>
    
    <lastBuildDate>Fri, 10 Sep 2021 11:14:51 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/apply-ii-the-revenge/1406.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>APPLY II: The Revenge</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>I think it's worth trying.</p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1406/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1406/6</link>
        <pubDate>Fri, 10 Sep 2021 11:14:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1406-6</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1406.rss">APPLY II: The Revenge</source>
      </item>
      <item>
        <title>APPLY II: The Revenge</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="1406">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>&gt;&gt; (append $ /dup 2, data [d e]) print ["data is" mold data]
data is [a b c d e d e]
</code></pre>
<p>While it may not be perfect, it certainly shows that there are options. We could have done it as:</p>
<pre><code>($ append /dup 2, data [d e])
</code></pre>
</blockquote>
</aside>
<p>While that might kind of suck, it just was to get the point that there are options.  And I am quite convinced...</p>
<h2>We Will Need An Apply Operator, We Just Have To Decide On It</h2>
<p>I think the floodgates are pretty much open on "weird words" now.  The fact that you can't make them into SET-WORD!s or put them in PATH!s will just be life.  Maybe they'll be their own category distinct from WORD!, like SYMBOL! ?</p>
<p>Among things we'll get sooner or later are <strong>:</strong> and <strong>::</strong></p>
<pre><code>append :: [data [d e] /dup 2]
</code></pre>
<p>That's good-looking, but maybe too good looking...I think it should be saved for something in the type system as in other languages.</p>
<p>Arrows are associated with functions, and since <strong><code>-&gt;</code></strong> was being used for lambdas, I said that using leftward arrow for something "function related" made more sense than other things.  Well... APPLY is function-related, is it not?</p>
<pre><code>append &lt;- [data [d e] /dup 2]
</code></pre>
<p>Maybe POINTFREE could be shorthanded with lambda pointing at a GROUP! instead of a BLOCK!, or something along those lines?</p>
<pre><code>&gt;&gt; ap10: -&gt; (append _ 10)

&gt;&gt; ap10 [a b c]
== [a b c 10]

&gt;&gt; mp2: -&gt; (multiply 2)

&gt;&gt; mp2 10
== 20
</code></pre>
<p>It seems to me that if we're concerned that someone wants to actually calculate a body to use for a function, they wouldn't be using the shorthand lambda notation to do that and would use full FUNC.  Or those oddballs would be all right using <strong>-&gt; :(...)</strong> if they wanted that.</p>
<p>There's only so many keys on the keyboard in this universe.  How about it, &lt;- for APPLY?</p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1406/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1406/5</link>
        <pubDate>Thu, 09 Sep 2021 22:52:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1406-5</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1406.rss">APPLY II: The Revenge</source>
      </item>
      <item>
        <title>APPLY II: The Revenge</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1406">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>First Big Question: Is The Applicant A Literal Word or Not?</p>
<p>This has been on my mind since the beginning: <em>should you have to use a GET-WORD! to name the function to apply, or does it quote by default...and make you put code fragments that returns a function in a group</em>.</p>
</blockquote>
</aside>
<p>On this note, it seems Red's APPLY is (maybe?) going for the case of "worldview 1", where you can say <strong><code>apply append [...]</code></strong> instead of <strong><code>apply :append [...]</code></strong></p>
<p><a href="https://gitlab.com/hiiamboris/red-mezz-warehouse/-/blob/master/apply.red" class="inline-onebox">apply.red · master · hi i am boris / Red mezz warehouse · GitLab</a></p>
<p>Boris says:</p>
<blockquote>
<p>"Also, should function name be a lit-arg?<br>
I expect the main use cases will have a literally written function name,<br>
and where that is not enough, a paren could be used. E.g.:</p>
<pre><code>apply (pick [func1 func2] condition) [...]
</code></pre>
<p>Lit-arg will also allow us to pass a function value to it without parens (though currently that's impossible since we can't use function value to construct a path)</p>
<p>apply :myfunc [...]</p>
</blockquote>
<h2>As a Reminder of My Opinion... "Worldview 1.5"</h2>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1406">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><em>I can't make up my mind.</em> So I think I'm going to make the answer Worldview 1.5:</p>
<pre><code class="lang-auto"> ; Worldview 1.5
 &gt;&gt; apply second reduce [:insert :append] [series value]
 ** Error: APPLY arguments must be GET-WORD! or GROUP! at the moment
</code></pre>
<p>This leaves the door open to interpreting plain WORD! as naming a function in the future. And it gives time for people to find a really compelling case for where not being able to generate a function without using a GROUP! would be a deal-breaker.</p>
</blockquote>
</aside>
<p>I guess maybe Red's usage gives the opportunity for them to be the guinea pigs.  If it bites people then they can be the one to find out.</p>
<h2>Gives me Thought: Might "APPLIQUE" Be Unified?</h2>
<p>They're making it so you can use an object to apply parameters.  If you have an already built object that can be used for a function in Ren-C, that has a name... it's called FRAME!, and you can just DO it.  You don't need to APPLY it because it knows the name of the function it was created for.</p>
<p>So APPLIQUE is a version of APPLY that runs code bound into a frame.</p>
<pre><code>&gt;&gt; flag: true

&gt;&gt; applique :append [
       series: [a b c]
       if flag [
           value: &lt;control&gt;
       ] else [
           value: &lt;structures&gt;
       ]
   ]
== [a b c &lt;control&gt;]
</code></pre>
<p>But APPLIQUE is a (deliberately) crappy name.  I didn't want to take something that would be used for something else.</p>
<p>Should this be folded in as a variant of APPLY of some kind?  APPLY/FRAME?  APPLY/CODE?  Or a different datatype?</p>
<pre><code>&gt;&gt; apply :append [...]  ; act like normal APPLY

&gt;&gt; apply :append @[...]  ; act like APPLIQUE
</code></pre>
<p>In some sense what you want to say here is actually kind of like:</p>
<pre><code>&gt;&gt; do make :append [
       series: [a b c]
       if flag [
           value: &lt;control&gt;
       ] else [
           value: &lt;structures&gt;
       ]
   ]
== [a b c &lt;control&gt;]
</code></pre>
<p>That would break it out into two steps; one step where you build the frame out of code, a bit like a MAKE OBJECT!.</p>
<p>But the problem here is that you're passing make an ACTION!, and getting a FRAME! back.  :-/</p>
<p>Right now when you make a frame you say <strong>make frame! :append</strong> and all your parameters are taken.  So the only way out of this looks like to allow MAKE taking an ACTION! instance in for "what to make" and giving you a FRAME! back.  Which is weird.</p>
<p>Anyway, just mentioning because Red is using APPLY to mean two different things, though their division doesn't make sense in Ren-C's (quite superior <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">) model.</p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1406/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1406/4</link>
        <pubDate>Tue, 24 Aug 2021 07:01:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1406-4</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1406.rss">APPLY II: The Revenge</source>
      </item>
      <item>
        <title>APPLY II: The Revenge</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1406">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It's time to bring back APPLY</p>
</blockquote>
</aside>
<p>...and by *"it's time" I apparently meant <em>"within the next year, maybe"</em>...</p>
<p>But better late than never, right?  It's in!</p>
<h2>Refinements Can be Provided In Any Order</h2>
<pre><code>[a b c d e d e] = apply :append [[a b c] [d e] /dup 2]
[a b c d e d e] = apply :append [/dup 2 [a b c] [d e]]
[a b c d e d e] = apply :append [[a b c] /dup 2 [d e]]

[a b c d d] = apply :append [/dup 2 [a b c] [d e] /part 1]
[a b c d d] = apply :append [[a b c] [d e] /part 1 /dup 2]
</code></pre>
<h2>Any Parameter (Not Just Refinements) Can Be Used By Name</h2>
<p>Once a parameter has been supplied by name, it is no longer considered for consuming positionally.</p>
<pre><code>[a b c d e] = apply :append [/series [a b c] /value [d e]]
[a b c d e] = apply :append [/value [d e] /series [a b c]]

[a b c d e] = apply :append [/series [a b c] [d e]]
[a b c d e] = apply :append [/value [d e] [a b c]]
</code></pre>
<h2>Commas Are Ok So Long As They Are Interstitial</h2>
<pre><code>[a b c d e d e] = apply :append [[a b c], [d e], /dup 2]
[a b c d e d e] = apply :append [/dup 2, [a b c] [d e]]

&gt;&gt; apply :append [/dup, 2 [a b c] [d e]]
** Script Error: end was reached while trying to set /dup
</code></pre>
<h2>Giving Too Many Arguments Is An Error</h2>
<pre><code>&gt;&gt; apply :append [[a b c] [d e] [f g]]
** Script Error: Too many values in processed argument block of APPLY.
</code></pre>
<h2>Refinements Must Be Followed By A Non-Refinement</h2>
<pre><code>&gt;&gt; apply :append [/dup /part 1 [a b c] [d e]]
** Script Error: end was reached while trying to set /dup
</code></pre>
<p>But you can pass refinements as arguments to refinements...just use a quote!</p>
<pre><code>&gt;&gt; tester: func [/refine [any-value!]] [refine]

&gt;&gt; apply :tester [/refine '/ta-da!]
== /ta-da!
</code></pre>
<h2>No-Arg Refinements Permit LOGIC! But Set NULL or <code>#</code>
</h2>
<p>Remember: <em>the DO FRAME! mechanics do not change anything, besides ~unset~ isotopes being turned to NULLs.</em>  So if a refinement doesn't take an argument, the only legal values for that refinement in the frame are # and NULL.</p>
<p>But APPLY isn't DO FRAME!.  It's a higher level thing that builds a frame from the values you supply, and then has an opportunity to look over them before running DO FRAME!.  So if it sees you gave a #[true] or a #[false] to a refinement with no argument, it will adjust it appropriately.</p>
<pre><code>&gt;&gt; testme: func [/refine] [refine]

# = apply :testme [/refine #]
null = apply :testme [/refine null]

# = apply :testme [/refine true]
null = apply :testme [/refine false]
</code></pre>
<h2>^META Arguments Are Also Accounted For</h2>
<p>For those following <a href="https://forum.rebol.info/t/default-values-and-make-frame/1412/3">the profound design points</a>, the DO FRAME! mechanic does not allow you to have isotopes in frame slots.  The way you get isotopes through to a function is through meta parameters, and by convention those parameters are quoted or otherwise "leveled up" into non-isotope status.</p>
<p>But as another convenience, APPLY detects when a parameter is meta and will level it up...because the low-level frame mechanics aren't allowed to editorialize:</p>
<pre><code>&gt;&gt; non-detector: func [arg] [arg]  ; not a meta argument, isotopes illegal

&gt;&gt; apply :non-detector [~baddie~]
** Script Error: non-detector needs arg as ^META for ~baddie~ isotope

&gt;&gt; detector: func [^arg] [arg]

&gt;&gt; apply :detector [~baddie~]
== ~baddie~
</code></pre>
<p><strong>I know not everyone has gotten their heads around isotopes yet, but they are critical... this stuff was the missing link to making it all gel.</strong></p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/dizzy.png?v=9" title=":dizzy:" class="emoji only-emoji" alt=":dizzy:"> <img src="https://forum.rebol.info/images/emoji/twitter/dizzy.png?v=9" title=":dizzy:" class="emoji only-emoji" alt=":dizzy:"> <img src="https://forum.rebol.info/images/emoji/twitter/dizzy.png?v=9" title=":dizzy:" class="emoji only-emoji" alt=":dizzy:"></p>
<h1>What's Next?!  Making It Easier To Use!</h1>
<p>Let me just offer a quick example showing that our hands may not be as tied as we think...</p>
<p>Let's make $ a function that takes the name of the function to apply on the left and variadically takes args from the right:</p>
<pre><code>&gt;&gt; $: enfixed func ['name [word!] 'args [&lt;variadic&gt; &lt;end&gt; any-value!]] [
       args: make block! args
       apply :(get name) args
   ]

&gt;&gt; data: [a b c]

&gt;&gt; (append $ /dup 2, data [d e]) print ["data is" mold data]
data is [a b c d e d e]
</code></pre>
<p>While it may not be perfect, it certainly shows that there are options.  We could have done it as:</p>
<pre><code>($ append /dup 2, data [d e])
</code></pre>
<p>Just a line of thinking to consider.  But certainly, to consider how the evaluator <em>bends</em>...</p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1406/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1406/3</link>
        <pubDate>Tue, 17 Aug 2021 07:58:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1406-3</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1406.rss">APPLY II: The Revenge</source>
      </item>
      <item>
        <title>APPLY II: The Revenge</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I was debugging something in the not-really-used-but-still-there encapping code, and saw one of the many kind of lousy line-breaking situations:</p>
<pre><code>    section-headers-data:
        read/seek/part file e_shoff (e_shnum * e_shentsize)
</code></pre>
<p>The code is indented enough that it would exceed the desired 80-column-limit to put that all on one line.</p>
<p>What I sometimes do with this to try to communicate is put the whole thing in a GROUP!:</p>
<pre><code>    (section-headers-data:
        read/seek/part file e_shoff (e_shnum * e_shentsize)
    )
</code></pre>
<p>But it's crappy enough that I avoid doing it, as cases like this one show.</p>
<p>With the proposed design for APPLY, you'd have an alternative...with comma and line break options too:</p>
<pre><code>    section-headers-data: apply :read [
        file /seek e_shoff /part (e_shnum * e_shentsize)
    ]

    section-headers-data: apply :read [
        file, /seek e_shoff, /part (e_shnum * e_shentsize)
    ]

    section-headers-data: apply :read [
        file
        /seek e_shoff
        /part e_shnum * e_shentsize
    ]
</code></pre>
<p>In the post above, I question whether <strong>apply read</strong> or <strong>apply :read</strong> is better.  But maybe there's an even better angle if you want more readability.</p>
<h2>It's A Common Desire...Should It Have a Foundational Syntax?</h2>
<p>I want to take terminal dot to mean "this is not a function call", e.g. <strong>var.</strong> would error if var was a function.  So terminal slash was the complement...to mean "this <em>IS</em> a function call".</p>
<p>But what if terminal slash meant "this is a function call... and it's <em>also</em> an apply form"</p>
<pre><code>    section-headers-data: read/ [
        file
        /seek e_shoff
        /part e_shnum * e_shentsize
    ]
</code></pre>
<p>This wouldn't have to lose my concept that <strong>:var/</strong> would be <em>"get me the variable and ensure it's an action"</em> meaning... though it would lose the plain syntax of <strong>foo/ x y z</strong> of "be sure this is a function and run it", you'd have to say <strong>foo/ [x y z]</strong> instead.  Though when you think about it... if someone is obsessive enough to need assurance that foo is a function, might they also be obsessive enough to want to specify a precise number of arguments to it?</p>
<h2>Seems Promising...</h2>
<p>Anyway, an interesting thought.  It could put a close to the "should APPLY quote" debate, and say it wouldn't, because you'd only use APPLY with functions coming from expressions if you had this form.</p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1406/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1406/2</link>
        <pubDate>Sun, 27 Dec 2020 11:45:55 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1406-2</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1406.rss">APPLY II: The Revenge</source>
      </item>
      <item>
        <title>APPLY II: The Revenge</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>It's time to bring back APPLY.</p>
<h2>First Big Question: Quote The Function or Not?</h2>
<p>This has been on my mind since the beginning: <em>should you have to use a GET-WORD! to name the function to apply, or does it quote by default...and make you put code fragments that returns a function in a group</em>.</p>
<pre><code> ; Worldview #1
 apply :append [series value]
 apply second reduce [:insert :append] [series value]  ; will APPLY :APPEND

 ; Worldview #2
 apply append [series value]
 apply :append [series value]  ; still legal if you want
 apply (second reduce [:insert :append]) [series value]  ; GROUP! is required
</code></pre>
<p><em>(Note: We have at least some relief at not having to consider Worldview <span class="hashtag">#3</span>, of <code>apply 'append [series value]</code> so APPLY can capture the name "append" for debug stack purposes.  That's not needed because <code>:append</code> gets an ACTION! that carries the label in its cell.  <a href="https://forum.rebol.info/t/more-comprehensible-errors-with-per-cell-labeling/1357">This has been a change that punches above its weight.</a>)</em></p>
<p>In the beginning I would have said it <em>definitely</em> has to go with Worldview <span class="hashtag">#1</span>, because in the second case you don't get a clear signal that APPEND is not being called on [SERIES VALUE] and the result being passed to APPLY.  If you didn't see the apply or were otherwise distracted, your reading comprehension would be thrown off by breaking from convention.</p>
<p>Over time I've become more of a believer that the whole premise of the language is to let you bend constructs to predominate use, so the 99% case is pleasing to use.  The now famous case of OF's left-quote, for instance:</p>
<pre><code>type: 'type of x  ; without OF quoting

type: type of x  ; with OF quoting
</code></pre>
<p>The quote mark makes it clearer, but when OF becomes so common that you "just know" then it's a much more pleasing function to use.  How many times do you use OF with a reflector you pick via code?  When is that code a single-arity function you wouldn't have to put in a GROUP! to use with enfix anyway??!</p>
<p>But does that same philosophy to APPLY, that we come to read <strong>apply append</strong> as one indivisible unit, and feel thankful for not having to reach for the colon key?  It's a little bit different than OF because you read left to right, and you can start reading at the APPEND with no speedbump after it.</p>
<p>I'll stress that you would still have the choice.  If you were the type of person who thought it clearer to use the colon, you could do so.  You just wouldn't be able to invoke a function-to-generate-the-function unless you put that in a GROUP!.</p>
<p><em>I can't make up my mind.</em>  So I think I'm going to make the answer Worldview 1.5:</p>
<pre><code> ; Worldview 1.5
 &gt;&gt; apply second reduce [:insert :append] [series value]
 ** Error: APPLY arguments must be GET-WORD! or GROUP! at the moment
</code></pre>
<p>This leaves the door open to interpreting plain WORD! as naming a function in the future.  And it gives time for people to find a really compelling case for where not being able to generate a function without using a GROUP! would be a deal-breaker.</p>
<h2>Naming Refinements</h2>
<p>Historical APPLY had a nasty positional nature for refinements, which led to things like this, from the R3-Alpha module code:</p>
<pre><code>return map-each [mod ver sum name] source [
    apply :load-module [
        mod true? ver ver true? sum sum no-share no-lib import true? name name delay
    ]
]
</code></pre>
<p>You see the combination of <code>true? ver</code> followed by <code>ver</code> as filling in first the refinement slot for /VERSION, and then the value of the refinement argument.</p>
<p>Then you see "used or not" refinements being supplied to their argument cells by the value alone (<code>no-share</code> signaling not to provide /SHARE, <code>no-lib</code> signaling not to use /LIB)</p>
<p><strong>But we can now put refinement names in the APPLY dialect!</strong></p>
<pre><code>apply :load-module [
    mod /version ver /sum sum
        /share null /lib null  ; avoids need for "clarifying" `no-share: false`
        /import import /name name
        /delay delay
]
</code></pre>
<p>You might ask what was stopping that before.  The issue was that historical Rebol had the problem that if you had an argument that could take on any value...including NONE!...then NONE! could not be used to represent the state of the refinement itself.</p>
<p>(Imagine if you are specifying an initial value to fill a block with (as in ARRAY/INITIAL).  It may be important to distinguish putting a NONE! in vs. not having a default at all.)</p>
<p>This is solved in Ren-C by reserving the non-valued NULL state for "refinement not taken".</p>
<blockquote>
<p>Note: I'd gone back and forth a while over whether a REFINEMENT-like PATH! would be appropriate to use in this dialect, based on the question of whether they would be evaluator-active or not.  Ideas were floated around like <code>foo</code> would fetch a variable but be an error if it was NULL, while <code>/foo</code> would fetch a variable and allow NULL.</p>
<p>In the end, inertness for refinements won out.  BLANK!-headed PATH!s and TUPLE!s simply have more dialecting power if they don't overlap what could be a legitimate user intention to fetch variables.  This APPLY situation shows a good example of why inertness is good.)*</p>
<p>Also, if you want to literally pass a refinement value you can do so.  Just quote it:</p>
<pre><code>   apply :whatever [/refinement '/refinement]
</code></pre>
<p>That will pass /REFINEMENT as the refinement parameter.</p>
</blockquote>
<h2>Providing Normal Arguments By Name</h2>
<p>A neat feature of new APPLY will be not only that you can reorder refinements to put them in any position, but also that you can name normal arguments.</p>
<p>So things like this would be legal:</p>
<pre><code>&gt;&gt; apply :append [/dup 2, /value &lt;d&gt;, [a b c]]
== [a b c &lt;d&gt; &lt;d&gt;]
</code></pre>
<p>Everything is streamlined by the idea that refinements represent one (and only one) argument in the frame.  <em>Which has been a critical and elegance-making change.</em></p>
<p>The concept is that ordered parameters which have not yet been named would be filled in, in the order that they are supplied.  You wouldn't be able to specify something twice, so this would be an error:</p>
<pre><code>&gt;&gt; apply :append [/series [a b c], [d e f], &lt;g&gt;]
** Error: Duplicate argument supplied for SERIES
</code></pre>
<h2>Can LOGIC! Be Used With Parameterless-Refinements?</h2>
<p>I have belabored the point of why we don't want low-level FRAME! mechanics getting involved in <a href="https://forum.rebol.info/t/should-refinement-arguments-be-refinement-if-used/735/4">transforming <code>[#[true] #[false]]</code> into <code>[# null]</code></a> for refinements that are "either used or not".</p>
<p>Those rules don't really "apply" here.  APPLY is its own dialect with its own mechanics, and it can do what's convenient.  It can canonize true and false into # and NULL in the frame.</p>
<pre><code>foo: func [/usable /logicable [logic!]] [...]

apply :foo [/usable 1 &lt; 2, /logicable 1 &lt; 2]
; this would give usable of `#`, and logicable of `#[true]`

apply :foo [/usable 1 &gt; 2, /logicable 1 &gt; 2]
; this would give usable of NULL, and logicable of `#[false]`
</code></pre>
<p>Hopefully it makes sense why I think APPLY should be able to do this, while MAKE FRAME! and friends don't.  MAKE FRAME! is the tool for writing <em>APPLY-like-things</em>, and there's no layer between the frame and the evaluator where it's appropriate to put these transformations.  It should be kept pure.</p>
<h2>Should You Be <em>Able</em> to Provide Refinements By Position?</h2>
<p>I'm not sure if giving refinements by position is a great idea.  But this hits on a philosophical question of whether refinements have an order that is exposed to the user.</p>
<p><em>But specialization can shuffle the order.</em>  For instance, what was once a refinement can become a normal argument.</p>
<pre><code>&gt;&gt; foo: func [x [integer!] /refine1 [integer!] /refine2 [integer!]] [...]

&gt;&gt; parameters of :foo
== [x /refine1 /refine2]  ; one normal argument

&gt;&gt; foo-2: :foo/refine2
== [x refine2 /refine1]  ; two normal arguments (e.g. acts like FOO/REFINE2)
</code></pre>
<p>This makes things a bit wacky.</p>
<p>I feel like the safest decision for right now is to say that once you've filled all the ordered arguments, any more arguments in the APPLY with no label causes an error.  The place where this would cause issues would be if BLOCK!s are used to serialize and deserialize frame state generically.  That's a thorny problem in general, which brings us to...</p>
<h2>Should There Be An APPLY/ONLY</h2>
<p>The idea behind APPLY/ONLY was that you have the values for a function's arguments already processed, and you don't want to evaluate them again.</p>
<p>One thing that breaks APPLY/ONLY in Ren-C's world is that this doesn't give a way to supply NULL arguments.  One option would be to let the BAD-WORD! with label <code>~null~</code> be an escape mechanism for this, which might cover a lot of cases (though obviously not accurately capturing a frame that purposefully wanted to pass the ~null~ BAD-WORD!).</p>
<p><em>Because FRAME!s have come along as a general and pure tool for representing function applications, the pressure is taken off of APPLY to be all things to all people.</em>  I think it should start out as the handy evaluative form, and then wait for motivating scenarios before trying to bend to anything else.  Maybe another operator entirely would be more suitable, or just using FRAME! as it is.</p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1406/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1406/1</link>
        <pubDate>Thu, 19 Nov 2020 11:11:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1406-1</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1406.rss">APPLY II: The Revenge</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>A New, More Limited &quot;Word&quot; Type: SYMBOL! ?</title>
    <link>https://forum.rebol.info/t/a-new-more-limited-word-type-symbol/1709</link>
    <description>**Recently I decided [it was more important to let TAG! have dots and slashes in it](https://forum.rebol.info/t/lexical-conflicts-back-to-bite-us-dots-in-tags/1702), than it was to let &quot;arrow words&quot; be in paths or tuples.**

This felt a bit uncomfortable because it&#39;s creating a second-class citizen of WORD!... things like **`&lt;`** and **`&gt;`** and **`&gt;&gt;=`** and all their bretheren don&#39;t have the same abilities.

Maybe it just feels uncomfortable because it isn&#39;t being done more decisively...

## What If They Weren&#39;t WORD!s?

If these were in a different category, like SYMBOL!, we could just say that they don&#39;t come in GET-WORD! or SET-WORD! or META-WORD! or THE-WORD! variations.  They don&#39;t go in TUPLE! and they don&#39;t go in PATH!.

They could still dispatch like WORD!s in the evaluator.  And they&#39;d come in QUOTED! forms, so you could SET and GET them.  But also... look, multi-return can help, with single return!

    [::]: enfix :join

Put it in a SET-BLOCK! and there you go.  GET doesn&#39;t really have a parallel, but it&#39;s done more rarely and so things like **`get &#39;::`** seems it&#39;s good enough.

## Opening Things Up

With this new category, it seems like the doors are open to picking things that just don&#39;t play well with colons, slashes, or dots.  It wouldn&#39;t matter because they wouldn&#39;t have to.

I&#39;ve been wanting **`:`** and **`::`** for a while now.  If they didn&#39;t have the burden of being WORD!s, then no one would ask questions like *&quot;what does the SET-WORD! form of those things look like?&quot;*

It would mean that **`@`** and **`^`** could free up from being their own types, and just be symbols.

We wouldn&#39;t need to worry about the ambiguity of **`%`**, and it could be used to make paths...if that seemed like a good idea:

    &gt;&gt; % /some/(reverse &quot;htap&quot;)
    == %/some/path

I don&#39;t know if bringing **/** and **//** and **.** and **...** in as symbols vs paths/tuples is ideal.  Maybe there&#39;s some duality between them, where they&#39;re both somehow?  I&#39;d have to think about it.

## What Should Be A Symbol?  = + - ?

The &quot;arrow words&quot; came out of a mixture of **&lt;** and **&gt;** with characters that could be put into WORD!s, like **-** and **+** and **|** and **=**.

So if we&#39;re contemplating **`::`**, does that open up things like  **`:-:`**   It certainly seems like maybe **`:=`** would be more useful as a symbol than as the GET variation of equals.

But here are some thoughts:

* When it comes to mixing with words... I&#39;ll say that I&#39;ve actually found that + in words can be useful, like **file+extension** to name a variable that is composed of more than one part.

    * I&#39;ve never felt tempted to do anything similar with =

* I have valued being able to put + and - in PATH!.  I used it for **`+/-`** to denote &quot;signed&quot; in ENBIN and DEBIN.

    * Some similar situation might apply with **`=/=`**

* Anything demoted to symbol status couldn&#39;t be used as a refinement either.  So there&#39;d not eb any **`foo/=`** refinements

Conservatively I&#39;d imagine we wouldn&#39;t be seeing any mixing of **+** or **-** with **:** to make a symbol.  But I might leave **`:=`** on the table, partially because I feel = is less of a natural fit for being in words in the first place.

Then there&#39;s more to think about with whether **`&lt;:&gt;`** is valuable enough as an operator to outweigh being able to make a TAG! like **`&lt;:foo&gt;`** (if those things are truly in contention)

## But SYMBOL! Functions Can&#39;t Have Refinements...

Can&#39;t be in paths means they can&#39;t have things after them to be refinements.

Oh well.  Tough luck.

As it happens they kind of couldn&#39;t have refinements anyway, because most symbols were winding up as infix functions.

## No Matter What, There&#39;s Only So Many Keys

It may sound like a big deal, but there&#39;s only so many symbols on the keyboard.  This will bring in a few symbols, but if anyone wants a lot more they&#39;ll have to go to unicode.</description>
    
    <lastBuildDate>Fri, 10 Sep 2021 17:18:17 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/a-new-more-limited-word-type-symbol/1709.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>A New, More Limited &quot;Word&quot; Type: SYMBOL! ?</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Lot to wrap my head around here. I don't have much of a reaction yet... I need to spend more time absorbing this proposal.</p>
          <p><a href="https://forum.rebol.info/t/a-new-more-limited-word-type-symbol/1709/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/a-new-more-limited-word-type-symbol/1709/2</link>
        <pubDate>Fri, 10 Sep 2021 17:18:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1709-2</guid>
        <source url="https://forum.rebol.info/t/a-new-more-limited-word-type-symbol/1709.rss">A New, More Limited &quot;Word&quot; Type: SYMBOL! ?</source>
      </item>
      <item>
        <title>A New, More Limited &quot;Word&quot; Type: SYMBOL! ?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><strong>Recently I decided <a href="https://forum.rebol.info/t/lexical-conflicts-back-to-bite-us-dots-in-tags/1702">it was more important to let TAG! have dots and slashes in it</a>, than it was to let "arrow words" be in paths or tuples.</strong></p>
<p>This felt a bit uncomfortable because it's creating a second-class citizen of WORD!... things like <strong><code>&lt;</code></strong> and <strong><code>&gt;</code></strong> and <strong><code>&gt;&gt;=</code></strong> and all their bretheren don't have the same abilities.</p>
<p>Maybe it just feels uncomfortable because it isn't being done more decisively...</p>
<h2>What If They Weren't WORD!s?</h2>
<p>If these were in a different category, like SYMBOL!, we could just say that they don't come in GET-WORD! or SET-WORD! or META-WORD! or THE-WORD! variations.  They don't go in TUPLE! and they don't go in PATH!.</p>
<p>They could still dispatch like WORD!s in the evaluator.  And they'd come in QUOTED! forms, so you could SET and GET them.  But also... look, multi-return can help, with single return!</p>
<pre><code>[::]: enfix :join
</code></pre>
<p>Put it in a SET-BLOCK! and there you go.  GET doesn't really have a parallel, but it's done more rarely and so things like <strong><code>get '::</code></strong> seems it's good enough.</p>
<h2>Opening Things Up</h2>
<p>With this new category, it seems like the doors are open to picking things that just don't play well with colons, slashes, or dots.  It wouldn't matter because they wouldn't have to.</p>
<p>I've been wanting <strong><code>:</code></strong> and <strong><code>::</code></strong> for a while now.  If they didn't have the burden of being WORD!s, then no one would ask questions like <em>"what does the SET-WORD! form of those things look like?"</em></p>
<p>It would mean that <strong><code>@</code></strong> and <strong><code>^</code></strong> could free up from being their own types, and just be symbols.</p>
<p>We wouldn't need to worry about the ambiguity of <strong><code>%</code></strong>, and it could be used to make paths...if that seemed like a good idea:</p>
<pre><code>&gt;&gt; % /some/(reverse "htap")
== %/some/path
</code></pre>
<p>I don't know if bringing <strong>/</strong> and <strong>//</strong> and <strong>.</strong> and <strong>...</strong> in as symbols vs paths/tuples is ideal.  Maybe there's some duality between them, where they're both somehow?  I'd have to think about it.</p>
<h2>What Should Be A Symbol?  = + - ?</h2>
<p>The "arrow words" came out of a mixture of <strong>&lt;</strong> and <strong>&gt;</strong> with characters that could be put into WORD!s, like <strong>-</strong> and <strong>+</strong> and <strong>|</strong> and <strong>=</strong>.</p>
<p>So if we're contemplating <strong><code>::</code></strong>, does that open up things like  <strong><code>:-:</code></strong>   It certainly seems like maybe <strong><code>:=</code></strong> would be more useful as a symbol than as the GET variation of equals.</p>
<p>But here are some thoughts:</p>
<ul>
<li>
<p>When it comes to mixing with words... I'll say that I've actually found that + in words can be useful, like <strong>file+extension</strong> to name a variable that is composed of more than one part.</p>
<ul>
<li>I've never felt tempted to do anything similar with =</li>
</ul>
</li>
<li>
<p>I have valued being able to put + and - in PATH!.  I used it for <strong><code>+/-</code></strong> to denote "signed" in ENBIN and DEBIN.</p>
<ul>
<li>Some similar situation might apply with <strong><code>=/=</code></strong>
</li>
</ul>
</li>
<li>
<p>Anything demoted to symbol status couldn't be used as a refinement either.  So there'd not eb any <strong><code>foo/=</code></strong> refinements</p>
</li>
</ul>
<p>Conservatively I'd imagine we wouldn't be seeing any mixing of <strong>+</strong> or <strong>-</strong> with <strong>:</strong> to make a symbol.  But I might leave <strong><code>:=</code></strong> on the table, partially because I feel = is less of a natural fit for being in words in the first place.</p>
<p>Then there's more to think about with whether <strong><code>&lt;:&gt;</code></strong> is valuable enough as an operator to outweigh being able to make a TAG! like <strong><code>&lt;:foo&gt;</code></strong> (if those things are truly in contention)</p>
<h2>But SYMBOL! Functions Can't Have Refinements...</h2>
<p>Can't be in paths means they can't have things after them to be refinements.</p>
<p>Oh well.  Tough luck.</p>
<p>As it happens they kind of couldn't have refinements anyway, because most symbols were winding up as infix functions.</p>
<h2>No Matter What, There's Only So Many Keys</h2>
<p>It may sound like a big deal, but there's only so many symbols on the keyboard.  This will bring in a few symbols, but if anyone wants a lot more they'll have to go to unicode.</p>
          <p><a href="https://forum.rebol.info/t/a-new-more-limited-word-type-symbol/1709/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/a-new-more-limited-word-type-symbol/1709/1</link>
        <pubDate>Fri, 10 Sep 2021 01:56:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1709-1</guid>
        <source url="https://forum.rebol.info/t/a-new-more-limited-word-type-symbol/1709.rss">A New, More Limited &quot;Word&quot; Type: SYMBOL! ?</source>
      </item>
  </channel>
</rss>

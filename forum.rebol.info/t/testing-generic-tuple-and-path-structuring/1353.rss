<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Testing Generic Tuple and Path Structuring</title>
    <link>https://forum.rebol.info/t/testing-generic-tuple-and-path-structuring/1353</link>
    <description>Generic TUPLE! and PATH! are fairly similar.  Both are immutable types, both have to have at least two elements, and neither allow nesting into themselves.  So you can&#39;t put a tuple-into-a-tuple or a path-into-a-path.

*But you can put a tuple in a path...just not vice versa.*  So **a.b.c/d.e.f** is a 2-element PATH! containing two 3-element TUPLE!.  While **a/b/c.d/e/f** is a 5-element PATH! whose third element is a TUPLE!.

Writing this is complicated, especially because the scanner is kind of &quot;ad hoc&quot; and has been evolving organically over time.  So I came up with an interesting test dialect.

## Structural Equivalence Testing

Here are the two examples above shown in the test dialect.  Each line contains a string, an arrow, and then one or more *isomorphic structures*, where PATH! is replaced with BLOCK! and TUPLE! is replaced with GROUP!:

    &quot;a.b.c/d.e.f&quot;  -&gt;  [(a b c) (d e f)]
    &quot;a/b/c.d/e/f&quot;  -&gt;  [a b (c d) e f]

So then what the test does is LOAD the string, and transform its paths and tuples into the blocks and groups on the right of the arrow.

Because actual BLOCK! and GROUP!s are legal in tuples and paths, the transformation turns them into ^block and ^group in the tests that use them:

    &quot;[a].(b)&quot;  -&gt;  (^[a] ^(b))

Whitespace testing is important, to make sure it reacts correctly...which means you can get more than one value on the right:

    &quot;(a b)/c&quot;  -&gt;  [^(a b) c]
    &quot;(a b) /c&quot;  -&gt;  ^(a b)  [_ c]

I decided it was a nice use of the NEW-LINE? to detect when a new test started.  I still don&#39;t know exactly where on balance in dialecting it&#39;s good or bad to use line breaks, but it would be much noisier if each test had to be in a BLOCK! or if there had to be some explicit `&lt;new-test&gt;` tag.

I found that on a page full of tests, two spaces between things helped... and also, the ability to group a few similar tests together and then skip a line before another group of tests:

    &quot;.&quot;  -&gt;  (_ _)
    &quot;..&quot;  -&gt;  (_ _ _)
    &quot;...&quot;  -&gt;  (_ _ _ _)

    &quot;/a&quot;  -&gt;  [_ a] 
    &quot;//a&quot;  -&gt;  [_ _ a]
    &quot;a/&quot;  -&gt;  [a _]
    &quot;a//&quot;  -&gt;  [a _ _]
    &quot;/a/&quot;  -&gt;  [_ a _]
    &quot;//a//&quot;  -&gt;  [_ _ a _ _]

Anyway, the generic tuple commit is all still a work in progress...but hopefully I&#39;ll be able to get it hammered together soon.  Some pretty fancy cases are working!

    &quot;a.1.(x)/[a b c]/&lt;d&gt;.2&quot;  -&gt;  [(a 1 ^(x)) ^[a b c] (&lt;d&gt; 2)]

    &quot;/./(a b)/./&quot;  -&gt;  [_ (_ _) ^(a b) (_ _) _]

**But equally important to what kinds of wild paths and tuples you might create if you wanted, is the fact that mysteriously *evil* paths and tuples won&#39;t be able to exist.**  So don&#39;t fear the power... get ready to enjoy the *coherence*.</description>
    
    <lastBuildDate>Fri, 02 Jul 2021 18:09:53 +0000</lastBuildDate>
    <category>Testing</category>
    <atom:link href="https://forum.rebol.info/t/testing-generic-tuple-and-path-structuring/1353.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Testing Generic Tuple and Path Structuring</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Generic TUPLE! and PATH! are fairly similar.  Both are immutable types, both have to have at least two elements, and neither allow nesting into themselves.  So you can't put a tuple-into-a-tuple or a path-into-a-path.</p>
<p><em>But you can put a tuple in a path...just not vice versa.</em>  So <strong>a.b.c/d.e.f</strong> is a 2-element PATH! containing two 3-element TUPLE!.  While <strong>a/b/c.d/e/f</strong> is a 5-element PATH! whose third element is a TUPLE!.</p>
<p>Writing this is complicated, especially because the scanner is kind of "ad hoc" and has been evolving organically over time.  So I came up with an interesting test dialect.</p>
<h2>Structural Equivalence Testing</h2>
<p>Here are the two examples above shown in the test dialect.  Each line contains a string, an arrow, and then one or more <em>isomorphic structures</em>, where PATH! is replaced with BLOCK! and TUPLE! is replaced with GROUP!:</p>
<pre><code>"a.b.c/d.e.f"  -&gt;  [(a b c) (d e f)]
"a/b/c.d/e/f"  -&gt;  [a b (c d) e f]
</code></pre>
<p>So then what the test does is LOAD the string, and transform its paths and tuples into the blocks and groups on the right of the arrow.</p>
<p>Because actual BLOCK! and GROUP!s are legal in tuples and paths, the transformation turns them into ^block and ^group in the tests that use them:</p>
<pre><code>"[a].(b)"  -&gt;  (^[a] ^(b))
</code></pre>
<p>Whitespace testing is important, to make sure it reacts correctly...which means you can get more than one value on the right:</p>
<pre><code>"(a b)/c"  -&gt;  [^(a b) c]
"(a b) /c"  -&gt;  ^(a b)  [_ c]
</code></pre>
<p>I decided it was a nice use of the NEW-LINE? to detect when a new test started.  I still don't know exactly where on balance in dialecting it's good or bad to use line breaks, but it would be much noisier if each test had to be in a BLOCK! or if there had to be some explicit <code>&lt;new-test&gt;</code> tag.</p>
<p>I found that on a page full of tests, two spaces between things helped... and also, the ability to group a few similar tests together and then skip a line before another group of tests:</p>
<pre><code>"."  -&gt;  (_ _)
".."  -&gt;  (_ _ _)
"..."  -&gt;  (_ _ _ _)

"/a"  -&gt;  [_ a] 
"//a"  -&gt;  [_ _ a]
"a/"  -&gt;  [a _]
"a//"  -&gt;  [a _ _]
"/a/"  -&gt;  [_ a _]
"//a//"  -&gt;  [_ _ a _ _]
</code></pre>
<p>Anyway, the generic tuple commit is all still a work in progress...but hopefully I'll be able to get it hammered together soon.  Some pretty fancy cases are working!</p>
<pre><code>"a.1.(x)/[a b c]/&lt;d&gt;.2"  -&gt;  [(a 1 ^(x)) ^[a b c] (&lt;d&gt; 2)]

"/./(a b)/./"  -&gt;  [_ (_ _) ^(a b) (_ _) _]
</code></pre>
<p><strong>But equally important to what kinds of wild paths and tuples you might create if you wanted, is the fact that mysteriously <em>evil</em> paths and tuples won't be able to exist.</strong>  So don't fear the power... get ready to enjoy the <em>coherence</em>.</p>
          <p><a href="https://forum.rebol.info/t/testing-generic-tuple-and-path-structuring/1353/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/testing-generic-tuple-and-path-structuring/1353/1</link>
        <pubDate>Thu, 01 Oct 2020 07:30:53 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1353-1</guid>
        <source url="https://forum.rebol.info/t/testing-generic-tuple-and-path-structuring/1353.rss">Testing Generic Tuple and Path Structuring</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>LET added to PARSE... but what about COPY?</title>
    <link>https://forum.rebol.info/t/let-added-to-parse-but-what-about-copy/1524</link>
    <description>I&#39;ve added LET into PARSE.  So you can dynamically make variables to capture:

    &gt;&gt; var: &lt;untouched&gt;

    &gt;&gt; parse &quot;a&quot; [let var: skip, (print [&quot;inside PARSE, var is&quot; mold var])]
    inside PARSE, var is #a
    == &quot;a&quot;

    &gt;&gt; var
    == &lt;untouched&gt;  ; pretty cool...

So it&#39;s kind of a synonym for SET, except it declares the variable such that it&#39;s only in the &quot;wave&quot; of rule evaluation.  Right now that means the variable won&#39;t be visible to subrules that are not embedded in rule blocks.  So if you have **`rule: [some var]`** and try **`[let var: skip, rule]`** it won&#39;t work...you have to say **`[let var: skip, [some var]]`**.

*(We have some flexibility in this behavior...[as PARSE/INSIDE has demonstrated](https://forum.rebol.info/t/separating-parse-rules-across-contexts/313/5?u=hostilefork)...but I&#39;m trying just to get the basics to work for now.)*

If you don&#39;t use a SET-WORD!, it will create the new variable...but leave it unset.  

## But What About COPY?

If LET acts like SET, how do you get the new-variable-declaration of LET...but with COPY semantics?

I&#39;ve pointed out previously that I think we should probably go to a model [more like Topaz PARSE](https://forum.rebol.info/t/changing-set-word-and-get-word-in-parse/1139).  This is to say that we mark positions by saying things like **pos: here** (and seek them with **seek pos**), reclaiming SET-WORD! and GET-WORD!.  Then SET-WORD! can mean &quot;set&quot;.

To follow that idea exactly, then **let x: copy ...** is the syntax for getting copy-like semantics, where **let x: ...** (and plain **x: ...** to reuse an existing declaration) would assume you were only going to be capturing one parse item.

One wacky-but-cool thought I had was that **let [x]: ...** and **[x]: ...** in PARSE could instead of multi-return, mean multi-capture, e.g. COPY.

## What Is The Philosphy Behind SET and COPY, Anyway?

It&#39;s a little weird that you can write:

    &gt;&gt; parse &quot;aaaaa&quot; [set x some &quot;a&quot;]

It was an error in Rebol2.  But Red and R3-Alpha just give you the first A.  I&#39;ve reverted Ren-C to Rebol2&#39;s idea of saying that&#39;s an error...you matched more than one item, so having the result be just **#a** seems wrong.

When we look at that with a SET-WORD!-based instruction, it seems counterintuitive that a plain SET-WORD! wouldn&#39;t react to SOME with &quot;copy semantics&quot;?

    &gt;&gt; parse &quot;aaaaa&quot; [x: some &quot;a&quot;]

Doesn&#39;t it seem like you&#39;re asking for X to be set to **&quot;aaaaa&quot;**?  Why should you have to say **[x: copy some &quot;a&quot;]** or **[[x]: some &quot;a&quot;]**?

But while it feels like rules that match multiple things should give series results, you wind up wondering about things that can be either-or:

    &gt;&gt; parse data [x: [integer! | some text!]]

Because the rules are matched in order, you don&#39;t have notice that a SOME comes later if you match an integer!.  The composite rule may be a single thing, or multiple things.

But maybe that&#39;s just life.  If you match a rule that&#39;s a single-kind of rule, you get the single thing...and if it&#39;s a multiple kind of rule, you get the multiple thing.

Maybe we could make a decoration that turns single matches into multiple matches if that&#39;s what you meant?  or instance, **1 integer!** gives you a BLOCK! of integers, while **integer!** gives you just 1.

    &gt;&gt; parse [&quot;a&quot;] [x: [integer! | some text!]]
    &gt;&gt; x
    == [&quot;a&quot;]

    &gt;&gt; parse [304] [x: [integer! | some text!]]
    &gt;&gt; x
    == 304

    &gt;&gt; parse [304] [x: [1 integer! | some text!]]
    &gt;&gt; x
    == [304]

The reason I suggest the 1 case for moving it to do a block capture is because no one would say literal 1, and if you are using a number N then you likely want a block regardless...otherwise you&#39;d get a different type based on how many matched.

If this seems reasonable, we could eliminate the SET and COPY distinction...as it always seemed odd to me.


## Inconvenient Truths: PARSE Rules Looking More Like Regular Code

So PARSE&#39;s SET is rather different from regular SET.  It doesn&#39;t take a variable which holds the word to set, it effectively *quotes* the word it wants to set.

     &gt;&gt; x: &#39;word
     &gt;&gt; set x &quot;a&quot;
     &gt;&gt; word
     == &quot;a&quot;

     &gt;&gt; parse &quot;a&quot; [set x skip]
     &gt;&gt; x
     == &quot;a&quot;

The &quot;Topaz way&quot; would bring about a transition that would make this look different.

     &gt;&gt; parse &quot;a&quot; [x: skip]
     &gt;&gt; x
     == &quot;a&quot;

This small stylistic note is going to make PARSE rules look a little bit more like regular code.

For those who are fans of syntax highlighters, the nature of the language is such as to defeat them.  So knowing when you&#39;re in a parse rule or not is just going to be something a bit hard to do.

I think this is &quot;just life&quot;.  It&#39;s a little disappointing, and makes me long for the &quot;code as graph database&quot; were you have unlimited rendering options.  Different project.</description>
    
    <lastBuildDate>Tue, 02 Mar 2021 17:06:00 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/let-added-to-parse-but-what-about-copy/1524.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>LET added to PARSE... but what about COPY?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="BlackATTR" data-post="2" data-topic="1524">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>I'm used to the convention of a digit specifying the # of times a rule should fire, and while few would write 1, it's not uncommon to say 2+. If I'm reading this right, this means we'd have a convention where 1 means this thing and 2+ means another.</p>
</blockquote>
</aside>
<p>No.  The suggestion here is that you'd get a series of elements either way, as opposed to a single element.  This way you'd have a syntax for one element (no number) vs. collection containing one element (number 1).</p>
<p>However, this turns out not to be the big issue with trying to have a single "SET" operator.  The big issue is:</p>
<pre><code> x: [integer! | between "(" ")" | integer! integer! | some text!]
</code></pre>
<p>It doesn't make a whole lot of sense what a block of alternates should do in a set.</p>
<p>COPY currently implies "see however far across the input the rules spanned, and copy the input series across that range."</p>
<p>However, some rules are now being established to actually produce results...in addition to moving the input.  It's not fully clear how the two different meanings should operate.</p>
<p>This is heavy issue <span class="hashtag">#1</span> with UPARSE, but fortunately it's a good substrate for hacking up alternatives.</p>
          <p><a href="https://forum.rebol.info/t/let-added-to-parse-but-what-about-copy/1524/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/let-added-to-parse-but-what-about-copy/1524/3</link>
        <pubDate>Tue, 02 Mar 2021 17:06:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1524-3</guid>
        <source url="https://forum.rebol.info/t/let-added-to-parse-but-what-about-copy/1524.rss">LET added to PARSE... but what about COPY?</source>
      </item>
      <item>
        <title>LET added to PARSE... but what about COPY?</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>First up: LET in Parse is a big <img src="https://forum.rebol.info/images/emoji/twitter/+1.png?v=9" title=":+1:" class="emoji" alt=":+1:"></p>
<p>Next, there are some things I like about <a href="https://github.com/giesse/red-topaz-parse">Topaz PARSE</a>, but there are definitely some changes that folks will want to chime in about. I personally don't mind parse looking like regular code, as described here.</p>
<p>(Sidenote: Topaz uses * as an alias for 'skip, but I think that's confusing and would prefer to see more widely accepted aliases like:<br>
<code>* = Zero or more items</code><br>
<code>? = Any single text!</code><br>
<code># = Any single digit -- although this might be confusing with char!</code>)</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1524">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>The reason I suggest the 1 case for moving it to do a block capture is because no one would say literal 1,</p>
</blockquote>
</aside>
<p>I'm not sure about this. I'm used to the convention of a digit specifying the # of times a rule should fire, and while few would write 1, it's not uncommon to say 2+. If I'm reading this right, this means we'd have a convention where 1 means this thing and 2+ means another.</p>
          <p><a href="https://forum.rebol.info/t/let-added-to-parse-but-what-about-copy/1524/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/let-added-to-parse-but-what-about-copy/1524/2</link>
        <pubDate>Fri, 26 Feb 2021 13:18:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1524-2</guid>
        <source url="https://forum.rebol.info/t/let-added-to-parse-but-what-about-copy/1524.rss">LET added to PARSE... but what about COPY?</source>
      </item>
      <item>
        <title>LET added to PARSE... but what about COPY?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've added LET into PARSE.  So you can dynamically make variables to capture:</p>
<pre><code>&gt;&gt; var: &lt;untouched&gt;

&gt;&gt; parse "a" [let var: skip, (print ["inside PARSE, var is" mold var])]
inside PARSE, var is #a
== "a"

&gt;&gt; var
== &lt;untouched&gt;  ; pretty cool...
</code></pre>
<p>So it's kind of a synonym for SET, except it declares the variable such that it's only in the "wave" of rule evaluation.  Right now that means the variable won't be visible to subrules that are not embedded in rule blocks.  So if you have <strong><code>rule: [some var]</code></strong> and try <strong><code>[let var: skip, rule]</code></strong> it won't work...you have to say <strong><code>[let var: skip, [some var]]</code></strong>.</p>
<p><em>(We have some flexibility in this behavior...<a href="https://forum.rebol.info/t/separating-parse-rules-across-contexts/313/5">as PARSE/INSIDE has demonstrated</a>...but I'm trying just to get the basics to work for now.)</em></p>
<p>If you don't use a SET-WORD!, it will create the new variable...but leave it unset.</p>
<h2>But What About COPY?</h2>
<p>If LET acts like SET, how do you get the new-variable-declaration of LET...but with COPY semantics?</p>
<p>I've pointed out previously that I think we should probably go to a model <a href="https://forum.rebol.info/t/changing-set-word-and-get-word-in-parse/1139">more like Topaz PARSE</a>.  This is to say that we mark positions by saying things like <strong>pos: here</strong> (and seek them with <strong>seek pos</strong>), reclaiming SET-WORD! and GET-WORD!.  Then SET-WORD! can mean "set".</p>
<p>To follow that idea exactly, then <strong>let x: copy ...</strong> is the syntax for getting copy-like semantics, where <strong>let x: ...</strong> (and plain <strong>x: ...</strong> to reuse an existing declaration) would assume you were only going to be capturing one parse item.</p>
<p>One wacky-but-cool thought I had was that <strong>let [x]: ...</strong> and <strong>[x]: ...</strong> in PARSE could instead of multi-return, mean multi-capture, e.g. COPY.</p>
<h2>What Is The Philosphy Behind SET and COPY, Anyway?</h2>
<p>It's a little weird that you can write:</p>
<pre><code>&gt;&gt; parse "aaaaa" [set x some "a"]
</code></pre>
<p>It was an error in Rebol2.  But Red and R3-Alpha just give you the first A.  I've reverted Ren-C to Rebol2's idea of saying that's an error...you matched more than one item, so having the result be just <strong><span class="hashtag">#a</span></strong> seems wrong.</p>
<p>When we look at that with a SET-WORD!-based instruction, it seems counterintuitive that a plain SET-WORD! wouldn't react to SOME with "copy semantics"?</p>
<pre><code>&gt;&gt; parse "aaaaa" [x: some "a"]
</code></pre>
<p>Doesn't it seem like you're asking for X to be set to <strong>"aaaaa"</strong>?  Why should you have to say <strong>[x: copy some "a"]</strong> or <strong>[[x]: some "a"]</strong>?</p>
<p>But while it feels like rules that match multiple things should give series results, you wind up wondering about things that can be either-or:</p>
<pre><code>&gt;&gt; parse data [x: [integer! | some text!]]
</code></pre>
<p>Because the rules are matched in order, you don't have notice that a SOME comes later if you match an integer!.  The composite rule may be a single thing, or multiple things.</p>
<p>But maybe that's just life.  If you match a rule that's a single-kind of rule, you get the single thing...and if it's a multiple kind of rule, you get the multiple thing.</p>
<p>Maybe we could make a decoration that turns single matches into multiple matches if that's what you meant?  or instance, <strong>1 integer!</strong> gives you a BLOCK! of integers, while <strong>integer!</strong> gives you just 1.</p>
<pre><code>&gt;&gt; parse ["a"] [x: [integer! | some text!]]
&gt;&gt; x
== ["a"]

&gt;&gt; parse [304] [x: [integer! | some text!]]
&gt;&gt; x
== 304

&gt;&gt; parse [304] [x: [1 integer! | some text!]]
&gt;&gt; x
== [304]
</code></pre>
<p>The reason I suggest the 1 case for moving it to do a block capture is because no one would say literal 1, and if you are using a number N then you likely want a block regardless...otherwise you'd get a different type based on how many matched.</p>
<p>If this seems reasonable, we could eliminate the SET and COPY distinction...as it always seemed odd to me.</p>
<h2>Inconvenient Truths: PARSE Rules Looking More Like Regular Code</h2>
<p>So PARSE's SET is rather different from regular SET.  It doesn't take a variable which holds the word to set, it effectively <em>quotes</em> the word it wants to set.</p>
<pre><code> &gt;&gt; x: 'word
 &gt;&gt; set x "a"
 &gt;&gt; word
 == "a"

 &gt;&gt; parse "a" [set x skip]
 &gt;&gt; x
 == "a"
</code></pre>
<p>The "Topaz way" would bring about a transition that would make this look different.</p>
<pre><code> &gt;&gt; parse "a" [x: skip]
 &gt;&gt; x
 == "a"
</code></pre>
<p>This small stylistic note is going to make PARSE rules look a little bit more like regular code.</p>
<p>For those who are fans of syntax highlighters, the nature of the language is such as to defeat them.  So knowing when you're in a parse rule or not is just going to be something a bit hard to do.</p>
<p>I think this is "just life".  It's a little disappointing, and makes me long for the "code as graph database" were you have unlimited rendering options.  Different project.</p>
          <p><a href="https://forum.rebol.info/t/let-added-to-parse-but-what-about-copy/1524/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/let-added-to-parse-but-what-about-copy/1524/1</link>
        <pubDate>Fri, 26 Feb 2021 04:33:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1524-1</guid>
        <source url="https://forum.rebol.info/t/let-added-to-parse-but-what-about-copy/1524.rss">LET added to PARSE... but what about COPY?</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Ren Garden / Status / Future</title>
    <link>https://forum.rebol.info/t/ren-garden-status-future/455</link>
    <description>Ren Garden is a project which was originally written in about a month, when I was trying to feel out what a client of the C++ API might look like.  It has been periodically brought up to date so that it runs.  Recently I brought it up to date so it would build, and made a debug drop for Windows:

http://hostilefork.com/media/shared/garden/garden-6-Jan-2018.zip

We pretty much have Ren Garden to thank for the existence of Ren-C at all.  If I hadn&#39;t tried to wire up a Rebol evaluator to Qt and a C++ API, I&#39;d not have learned enough about how Rebol was written to start fixing it up.

I think it is a neat demo, and I like to use it when giving presentations (as opposed to just typing in an ordinary console).  But while it is a promising application, it has no shortage of flaws and difficulties in its design.

One smart thing Ren Garden does is build on Qt.  Qt is a nice, fluid, well-documented layer of abstraction across operating systems.  It is true that the DLLs for Qt are somewhat large (the debug ones in particular, and I&#39;d rather people be running debug builds for now).  When the pieces Ren Garden wants are put together (Core, GUI, Network) the release build size w/DLLs is going to be in the ~10mb range.  Doing a static build which only takes the parts of Qt that you use and puts them into the executable is a labor-intensive process--and not one that sufficient incentive has been around to do.  But even then you&#39;re not going to see less than ~5mb for that exe.

I&#39;m not too concerned about that.  And if you&#39;re using KDE on Linux, you already have Qt--so long as you build for the same version as the shell is using, you shouldn&#39;t need any separate libraries.  _(Linux distributions try to build all the KDE apps to use the same library versions as the shell is using, and a packaged Ren Garden would do the same.)_

Yet what it does is apply a [QTextEdit widget](http://doc.qt.io/qt-5/qtextedit.html) in a somewhat creative way.  I was trying not to pull in a full WebKit browser, being a bit size-conscious...and not wanting to make something like an Electron app.  This was probably short-sighted, as with the emscripten build we would probably want to make an in-browser experience like Ren Garden, and it would be more able to share code.  In either case, since it&#39;s a text editor, there has to be some amount of logic to prune off the old history if you have a long-running/long-printing process, because it just gets slower and slower as you add more lines.  That&#39;s one of the many things that haven&#39;t been attended to yet.

The INPUT command doesn&#39;t currently work, and it goes through some rather experimental I/O code that works with C++ classes.  Writing a C++ &quot;iostream&quot; turned out to be kind of more of a hassle than I realized, and I&#39;m not sure if it&#39;s the right direction to be going.  PORT!s in general need a major design review, and then thinking about how such ports will interact with C (or if it will have a special C++ interface) is something that needs to be thought about.

Having Ren Garden around helps stress the API a bit.  It shows weak points, one weak point of which is still threading... it has a separate GUI thread from the evaluator thread, but even that treads on some dodgy territory.  

Because it is basically the largest (only?) app that uses Rebol in an embedded way, it is a good test of new ideas and catching design problems...and so I&#39;m glad it&#39;s there.  But how to prioritize bug fixes?  What features or experiments should be done with it?  What is the likelihood that having honed drops of it would expand usage?  Who would help, and how?

These are questions people have to answer.  @szeng has brought up an interest in whether or not Rebol a Rebol/Qt linkup could supplant the AGG-based /View code... and @gchiu keeps bringing that up too.  I&#39;ve been hesitant to invest more in this because I don&#39;t want to be the only one doing it.

Where do other people see this standing, and is anyone willing to commit anything to it?  Or is it just another &quot;if I develop it you *might* use it&quot; situation?</description>
    
    <lastBuildDate>Tue, 09 Jan 2018 20:33:16 +0000</lastBuildDate>
    <category>Announcements</category>
    <atom:link href="https://forum.rebol.info/t/ren-garden-status-future/455.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Ren Garden / Status / Future</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>Simplest is to scan the code for the last Rebol header in current tab and send everything from there to another tab to evaluate, or better still, to a console in a specified directory.  That way we wouldn't have to update the interpreter for ren garden all the time.</p>
          <p><a href="https://forum.rebol.info/t/ren-garden-status-future/455/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-garden-status-future/455/6</link>
        <pubDate>Tue, 09 Jan 2018 20:33:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-455-6</guid>
        <source url="https://forum.rebol.info/t/ren-garden-status-future/455.rss">Ren Garden / Status / Future</source>
      </item>
      <item>
        <title>Ren Garden / Status / Future</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="4" data-topic="455">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/letter_avatar_proxy/v3/letter/j/b77776/40.png" class="avatar"> JacobGood1:</div>
<blockquote>
<p>Alright, it is the least I can do =).</p>
</blockquote>
</aside>
<p>All right, looking at code editor options, we shall see.</p>
          <p><a href="https://forum.rebol.info/t/ren-garden-status-future/455/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-garden-status-future/455/5</link>
        <pubDate>Tue, 09 Jan 2018 02:10:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-455-5</guid>
        <source url="https://forum.rebol.info/t/ren-garden-status-future/455.rss">Ren Garden / Status / Future</source>
      </item>
      <item>
        <title>Ren Garden / Status / Future</title>
        <dc:creator><![CDATA[JacobGood1]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="3" data-topic="455">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>We'll be more confident if people put their money where their mouth is.</p>
</blockquote>
</aside>
<p>Alright, it is the least I can do =)...</p>
<p>done</p>
          <p><a href="https://forum.rebol.info/t/ren-garden-status-future/455/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-garden-status-future/455/4</link>
        <pubDate>Tue, 09 Jan 2018 00:12:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-455-4</guid>
        <source url="https://forum.rebol.info/t/ren-garden-status-future/455.rss">Ren Garden / Status / Future</source>
      </item>
      <item>
        <title>Ren Garden / Status / Future</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="455">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/letter_avatar_proxy/v3/letter/j/b77776/40.png" class="avatar"> JacobGood1:</div>
<blockquote>
<p>I would like it to have a source editing area where we can send code to the repl from the source code.</p>
</blockquote>
</aside>
<p>Ctrl-T currently makes a new REPL tab.</p>
<p>I feel like tabs should be able to be REPL or code editing.  I was thinking that <strong>do 3</strong> or whatever would mean "do the contents of tab 3".</p>
<p>But these features need designing.  I kind of put the idea out there, with things like Ctrl-Z that can bring back the selection you were at before the previous evaluation.  Which is new-ish stuff (at least new to me).  I know there've been workbook-style apps for a long time <em>(I had <a href="https://en.wikipedia.org/wiki/Mathcad" rel="nofollow noopener">the original MathCAD</a> way back when, and certainly people are still building apps in this vein)</em>.  I'm not trying to go too crazy with all that workbook stuff, but just try and build an <em>ergonomic</em> console, so playing with Rebol is more or less pleasant.</p>
<aside class="quote no-group" data-post="2" data-topic="455">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/letter_avatar_proxy/v3/letter/j/b77776/40.png" class="avatar"> JacobGood1:</div>
<blockquote>
<p>I hope to help but I have two jobs, a marriage, and course work to attend to... not much time.</p>
</blockquote>
</aside>
<p>Well, while there's not much chance of us acquiring enough donations to fund expert C++ development (beyond myself, and I donate my time anyway)...I will say, that if people kick in to the Patreon for just the basic websites and documentation, I will feel more inclined to do things those people want.</p>
<p>$5/mo is still a donation.  We'll be more confident if people put their money where their mouth is.  You'd buy me a beer, so, why not fund the websites?</p>
<p>And then, well, maybe I'll make a code editor tab.  <img src="//forum.rebol.info/images/emoji/twitter/stuck_out_tongue.png?v=7" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<aside class="quote quote-modified" data-post="1" data-topic="438">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/forum.rebol.info/gchiu/40/22_2.png" class="avatar">
    <a href="https://forum.rebol.info/t/community-funding/438">Community Funding</a> <a class="badge-wrapper  bullet" href="/c/community"><span class="badge-category-bg" style="background-color: #12A89D;"></span><span style="" data-drop-close="true" class="badge-category clear-badge" title="Topics of the Rebol community, including announcements, founding/deprecation of Rebol related websites or local communities, applications, new publications or other resources, advertisements, etc.">Community</span></a>
  </div>
  <blockquote>
    We should be in a position to <a href="https://www.patreon.com/rebolfoundation" rel="nofollow noopener">accept donations</a> both for running of this forum, rebol.info and for specific tasks. 
I was wondering how that might happen transparently.  <a class="mention" href="/u/blackattr">@BlackATTR</a> suggested using <a href="https://www.patreon.com/" rel="nofollow noopener">Patreon</a> so I wonder if that could be used to fund a Rebol Foundation which then dishes out funds for the ongoing maintenance of our intrastructure.  But I see that they take 5%. 
What about a Bitcoin address that is held by the foundation, and just takes donations? Are the transactions at one address tr…
  </blockquote>
</aside>

          <p><a href="https://forum.rebol.info/t/ren-garden-status-future/455/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-garden-status-future/455/3</link>
        <pubDate>Mon, 08 Jan 2018 23:56:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-455-3</guid>
        <source url="https://forum.rebol.info/t/ren-garden-status-future/455.rss">Ren Garden / Status / Future</source>
      </item>
      <item>
        <title>Ren Garden / Status / Future</title>
        <dc:creator><![CDATA[JacobGood1]]></dc:creator>
        <description><![CDATA[
            <p>"What features or experiments should be done with it?"</p>
<p>I would like it to have a source editing area where we can send code to the repl from the source code. We could load the program from source on start up, that way the repl is ready to use with the source. This would make it closer to a lisp editing experience.</p>
<p>"Where do other people see this standing, and is anyone willing to commit anything to it? Or is it just another "if I develop it you might use it" situation?"</p>
<p>I hope to help but I have two jobs, a marriage, and course work to attend to... not much time.</p>
          <p><a href="https://forum.rebol.info/t/ren-garden-status-future/455/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-garden-status-future/455/2</link>
        <pubDate>Mon, 08 Jan 2018 23:49:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-455-2</guid>
        <source url="https://forum.rebol.info/t/ren-garden-status-future/455.rss">Ren Garden / Status / Future</source>
      </item>
      <item>
        <title>Ren Garden / Status / Future</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Ren Garden is a project which was originally written in about a month, when I was trying to feel out what a client of the C++ API might look like.  It has been periodically brought up to date so that it runs.  Recently I brought it up to date so it would build, and made a debug drop for Windows:</p>
<p><a href="http://hostilefork.com/media/shared/garden/garden-6-Jan-2018.zip" class="onebox" target="_blank" rel="nofollow noopener">http://hostilefork.com/media/shared/garden/garden-6-Jan-2018.zip</a></p>
<p>We pretty much have Ren Garden to thank for the existence of Ren-C at all.  If I hadn't tried to wire up a Rebol evaluator to Qt and a C++ API, I'd not have learned enough about how Rebol was written to start fixing it up.</p>
<p>I think it is a neat demo, and I like to use it when giving presentations (as opposed to just typing in an ordinary console).  But while it is a promising application, it has no shortage of flaws and difficulties in its design.</p>
<p>One smart thing Ren Garden does is build on Qt.  Qt is a nice, fluid, well-documented layer of abstraction across operating systems.  It is true that the DLLs for Qt are somewhat large (the debug ones in particular, and I'd rather people be running debug builds for now).  When the pieces Ren Garden wants are put together (Core, GUI, Network) the release build size w/DLLs is going to be in the ~10mb range.  Doing a static build which only takes the parts of Qt that you use and puts them into the executable is a labor-intensive process--and not one that sufficient incentive has been around to do.  But even then you're not going to see less than ~5mb for that exe.</p>
<p>I'm not too concerned about that.  And if you're using KDE on Linux, you already have Qt--so long as you build for the same version as the shell is using, you shouldn't need any separate libraries.  <em>(Linux distributions try to build all the KDE apps to use the same library versions as the shell is using, and a packaged Ren Garden would do the same.)</em></p>
<p>Yet what it does is apply a <a href="http://doc.qt.io/qt-5/qtextedit.html" rel="nofollow noopener">QTextEdit widget</a> in a somewhat creative way.  I was trying not to pull in a full WebKit browser, being a bit size-conscious...and not wanting to make something like an Electron app.  This was probably short-sighted, as with the emscripten build we would probably want to make an in-browser experience like Ren Garden, and it would be more able to share code.  In either case, since it's a text editor, there has to be some amount of logic to prune off the old history if you have a long-running/long-printing process, because it just gets slower and slower as you add more lines.  That's one of the many things that haven't been attended to yet.</p>
<p>The INPUT command doesn't currently work, and it goes through some rather experimental I/O code that works with C++ classes.  Writing a C++ "iostream" turned out to be kind of more of a hassle than I realized, and I'm not sure if it's the right direction to be going.  PORT!s in general need a major design review, and then thinking about how such ports will interact with C (or if it will have a special C++ interface) is something that needs to be thought about.</p>
<p>Having Ren Garden around helps stress the API a bit.  It shows weak points, one weak point of which is still threading... it has a separate GUI thread from the evaluator thread, but even that treads on some dodgy territory.</p>
<p>Because it is basically the largest (only?) app that uses Rebol in an embedded way, it is a good test of new ideas and catching design problems...and so I'm glad it's there.  But how to prioritize bug fixes?  What features or experiments should be done with it?  What is the likelihood that having honed drops of it would expand usage?  Who would help, and how?</p>
<p>These are questions people have to answer.  <a class="mention" href="/u/szeng">@szeng</a> has brought up an interest in whether or not Rebol a Rebol/Qt linkup could supplant the AGG-based /View code... and <a class="mention" href="/u/gchiu">@gchiu</a> keeps bringing that up too.  I've been hesitant to invest more in this because I don't want to be the only one doing it.</p>
<p>Where do other people see this standing, and is anyone willing to commit anything to it?  Or is it just another "if I develop it you <em>might</em> use it" situation?</p>
          <p><a href="https://forum.rebol.info/t/ren-garden-status-future/455/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-garden-status-future/455/1</link>
        <pubDate>Mon, 08 Jan 2018 22:31:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-455-1</guid>
        <source url="https://forum.rebol.info/t/ren-garden-status-future/455.rss">Ren Garden / Status / Future</source>
      </item>
  </channel>
</rss>

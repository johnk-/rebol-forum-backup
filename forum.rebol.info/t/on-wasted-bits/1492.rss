<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>On Wasted Bits</title>
    <link>https://forum.rebol.info/t/on-wasted-bits/1492</link>
    <description>In one of my Philadelphia talks, I cited a quote from Paul Graham in [The 1,000 Year Language]() 

&gt; *&quot;I learned to program when computer power was scarce. I can remember taking all the spaces out of my Basic programs so they would fit into the memory of a 4K TRS-80. The thought of all this stupendously inefficient software burning up cycles doing the same thing over and over seems kind of gross to me. But I think my intuitions here are wrong. I&#39;m like someone who grew up poor, and can&#39;t bear to spend money even for something important, like going to the doctor.&quot;*
&gt;
&gt; ...
&gt;
&gt; *&quot;The desire for speed is so deeply engrained in us, with our puny computers, that it will take a conscious effort to overcome it. In language design, we should be consciously seeking out situations where we can trade efficiency for even the smallest increase in convenience.&quot;*

I&#39;ve been struggling some with this fight.  For instance, the scenario of:

    count-up x 1000000 [
        let y: x + 1
        print [y]
    ]

What I have explored is the question of making LET a dynamic construct.  This dynamism would mean it wouldn&#39;t be scanned for in advance (like &quot;FUNCT&quot; looked for SET-WORD!).  It would actually bring a new variable and binding into existence... basically just syntax sugar for if you had written:

    count-up x 1000000 [
        use [y] [
            y: x + 1
            print [y]
        ]
    ]

It&#39;s uncomfortable to induce the thought that you&#39;d be making a new object each time through the loop...an object with one field (y).  That&#39;s a million objects being made, that the GC will have to grapple with.

I&#39;m working on making these as small as possible...and the GC will sweep them up.  But people who have seen LET or LET-like constructs from other languages would not generally assume that it would cause so much pain to the GC.  It feels so much more catastrophically worse than creating a single object:

    let y
    count-up x 1000000 [
        y: x + 1
        print [y]
    ]

And if you were using **`func [... &lt;local&gt; y]`** that&#39;s even more efficient.  It doesn&#39;t create a separate object identity at all, but piggy-backs on the frame (where the arguments are already stored).

Of course, we&#39;re dealing with an incredibly dumb &quot;mark and sweep the world&quot; GC right now, that only starts cleaning up when it hits a wall.  If we were more clever, I&#39;m sure there could be ways that the GC could localize most LETs and do zoning cleverness...doing light pick-ups of GC objects.

## I May Be Worrying Too Much

The size of the variable is smaller than the size of the frame created by an addition, e.g. by the **+**.  If someone is at the level of optimizing for the LETs, they&#39;d make a much bigger difference by eliminating the block:

    count-up x 1000000 [
        let y: x + 1
        print x
    ]

*(Note: PRINT requires blocks on non-strings, non-newline characters [for a pretty good reason](https://forum.rebol.info/t/limiting-print-to-block-text-perhaps-blank-to-opt-out/855), but I&#39;m just trying to make the point about the relative costs of things.)*

The creation of FRAME! (e.g. for a BLOCK!) has been optimized to reduce the GC load to just about the minimum that it can, but that minimum is the same minimum as what we&#39;re looking at for a LET.  So when the cost of a LET is more or less on the same level as the cost for a GROUP!, how much should we really be asking people to worry about it?

When you think about the forces in play here--the ability to do rearrangements to optimize it if you need to, and Paul Graham&#39;s remarks about expressivity being the long tail--I think making LET dynamic is probably the winning bet.

Luddites who don&#39;t like it can use **`&lt;local&gt;`** and be no worse off.</description>
    
    <lastBuildDate>Sat, 06 Feb 2021 06:54:49 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/on-wasted-bits/1492.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>On Wasted Bits</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In one of my Philadelphia talks, I cited a quote from Paul Graham in <a>The 1,000 Year Language</a></p>
<blockquote>
<p><em>"I learned to program when computer power was scarce. I can remember taking all the spaces out of my Basic programs so they would fit into the memory of a 4K TRS-80. The thought of all this stupendously inefficient software burning up cycles doing the same thing over and over seems kind of gross to me. But I think my intuitions here are wrong. I'm like someone who grew up poor, and can't bear to spend money even for something important, like going to the doctor."</em></p>
<p>...</p>
<p><em>"The desire for speed is so deeply engrained in us, with our puny computers, that it will take a conscious effort to overcome it. In language design, we should be consciously seeking out situations where we can trade efficiency for even the smallest increase in convenience."</em></p>
</blockquote>
<p>I've been struggling some with this fight.  For instance, the scenario of:</p>
<pre><code>count-up x 1000000 [
    let y: x + 1
    print [y]
]
</code></pre>
<p>What I have explored is the question of making LET a dynamic construct.  This dynamism would mean it wouldn't be scanned for in advance (like "FUNCT" looked for SET-WORD!).  It would actually bring a new variable and binding into existence... basically just syntax sugar for if you had written:</p>
<pre><code>count-up x 1000000 [
    use [y] [
        y: x + 1
        print [y]
    ]
]
</code></pre>
<p>It's uncomfortable to induce the thought that you'd be making a new object each time through the loop...an object with one field (y).  That's a million objects being made, that the GC will have to grapple with.</p>
<p>I'm working on making these as small as possible...and the GC will sweep them up.  But people who have seen LET or LET-like constructs from other languages would not generally assume that it would cause so much pain to the GC.  It feels so much more catastrophically worse than creating a single object:</p>
<pre><code>let y
count-up x 1000000 [
    y: x + 1
    print [y]
]
</code></pre>
<p>And if you were using <strong><code>func [... &lt;local&gt; y]</code></strong> that's even more efficient.  It doesn't create a separate object identity at all, but piggy-backs on the frame (where the arguments are already stored).</p>
<p>Of course, we're dealing with an incredibly dumb "mark and sweep the world" GC right now, that only starts cleaning up when it hits a wall.  If we were more clever, I'm sure there could be ways that the GC could localize most LETs and do zoning cleverness...doing light pick-ups of GC objects.</p>
<h2>I May Be Worrying Too Much</h2>
<p>The size of the variable is smaller than the size of the frame created by an addition, e.g. by the <strong>+</strong>.  If someone is at the level of optimizing for the LETs, they'd make a much bigger difference by eliminating the block:</p>
<pre><code>count-up x 1000000 [
    let y: x + 1
    print x
]
</code></pre>
<p><em>(Note: PRINT requires blocks on non-strings, non-newline characters <a href="https://forum.rebol.info/t/limiting-print-to-block-text-perhaps-blank-to-opt-out/855">for a pretty good reason</a>, but I'm just trying to make the point about the relative costs of things.)</em></p>
<p>The creation of FRAME! (e.g. for a BLOCK!) has been optimized to reduce the GC load to just about the minimum that it can, but that minimum is the same minimum as what we're looking at for a LET.  So when the cost of a LET is more or less on the same level as the cost for a GROUP!, how much should we really be asking people to worry about it?</p>
<p>When you think about the forces in play here--the ability to do rearrangements to optimize it if you need to, and Paul Graham's remarks about expressivity being the long tail--I think making LET dynamic is probably the winning bet.</p>
<p>Luddites who don't like it can use <strong><code>&lt;local&gt;</code></strong> and be no worse off.</p>
          <p><a href="https://forum.rebol.info/t/on-wasted-bits/1492/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/on-wasted-bits/1492/1</link>
        <pubDate>Sat, 06 Feb 2021 06:54:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1492-1</guid>
        <source url="https://forum.rebol.info/t/on-wasted-bits/1492.rss">On Wasted Bits</source>
      </item>
  </channel>
</rss>

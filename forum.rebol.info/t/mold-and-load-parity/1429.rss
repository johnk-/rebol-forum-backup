<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>MOLD and LOAD parity</title>
    <link>https://forum.rebol.info/t/mold-and-load-parity/1429</link>
    <description>It occurred to me in [this post](https://forum.rebol.info/t/the-simple-things-matter-the-most/1428/8) that MOLD/ONLY appears to work at odds to other /ONLY options:

    &gt;&gt; append [] []
    == []

    â€Œ&gt;&gt; append/only [] []
    == [[]]

    â€Œ&gt;&gt; mold []
    == &quot;[]&quot;

    â€Œ&gt;&gt; mold/only []
    == &quot;&quot;

As [my solution to /ONLY](https://forum.rebol.info/t/cutting-out-only-could-we-make-append-find-etc-only-accept-blocks/1182/10?u=rgchris) is to use an optimized equivalent of [**func [value][reduce [value]]**](), this highlights the discrepency:

    &gt;&gt; append only [] []  ; same as append/only
    == [[]]

    &gt;&gt; mold only []  ; not same as mold/only
    == &quot;[[]]&quot;


How then should MOLD handle blocks, and what are the implications for LOAD? Let&#39;s assume that current MOLD/ONLY is the correct behaviour for BLOCK!:

    &gt;&gt; mold [1 2 3]
    == &quot;1 2 3&quot;

    &gt;&gt; load &quot;1 2 3&quot;
    == [1 2 3]

This seems fine until you get to single-length blocks:

    &gt;&gt; mold [1]
    == &quot;1&quot;

    &gt;&gt; load &quot;1&quot;
    == 1

Clearly this is now an inconsistency in LOAD. LOAD/ALL would get you there:

    &gt;&gt; load/all &quot;1&quot;
    == [1]

Should LOAD/ALL then be the default? Probably. Proposition: MOLD/ONLY and LOAD/ALL become MOLD and LOAD. Yay! There is a parity where it matters most: (de)serialization of a block of values.

The wrinkle is: loading singular values is useful. Lost is the MOLD/LOAD parity when handling non-blocks:

    &gt;&gt; mold 1
    == &quot;1&quot;

    &gt;&gt; load &quot;1&quot;
    == [1]

Where to go with that? Lost is shorthand validation of snippets of text:

    &gt;&gt; type-of load &quot;10-Dec-2020&quot;
    == date!

    &gt;&gt; type-of load &quot;http://rebol.info&quot;
    == url!

I&#39;d argue that this is beyond the scope of LOADâ€”LOAD is an overloaded (ðŸ˜Ž) function and the more critical behaviour is to return a block. It would be more fitting to dedicate a separate wrapper for TRANSCODE that is less likely to use the polymorphic demands of loading from external sources and craps out if, leading/trailing whitespace aside, the content doesn&#39;t conform to a single value (even if that value is a GROUP!). Spitballingâ€”DETECT, DISCERN, whatever:

    &gt;&gt; map-each value [&quot;10-Dec-2020&quot; &quot;http://rebol.info&quot;] [type-of detect value]
    == [date! url!]

    &gt;&gt; detect &quot;1 2 3&quot;
    == ERROR! #!*^!#%@$

Thus MOLD of BLOCK! holds parity with LOAD; MOLD of non-block holds parity with DETECT (or other name).</description>
    
    <lastBuildDate>Fri, 11 Dec 2020 02:14:06 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/mold-and-load-parity/1429.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>MOLD and LOAD parity</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was split to a new topic: <a href="/t/plugging-the-script-header-hole/1430">Plugging The Script Header Hole</a></p>
          <p><a href="https://forum.rebol.info/t/mold-and-load-parity/1429/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/mold-and-load-parity/1429/5</link>
        <pubDate>Fri, 11 Dec 2020 06:37:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1429-5</guid>
        <source url="https://forum.rebol.info/t/mold-and-load-parity/1429.rss">MOLD and LOAD parity</source>
      </item>
      <item>
        <title>MOLD and LOAD parity</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="1" data-topic="1429">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>LOAD is an overloaded (<img src="https://forum.rebol.info/images/emoji/twitter/sunglasses.png?v=9" title=":sunglasses:" class="emoji" alt=":sunglasses:">) function</p>
</blockquote>
</aside>
<p>One aspect of this overloading is that it's trying to handle arbitrary file formats and codecs as well.  So<br>
<strong>load %whatever.png</strong></p>
<p>TRANSCODE is now easy to use, with multiple returns cueing if you wanted to transcode the whole thing vs. just one part.  It handles TEXT! as well as BINARY! (as TEXT! is also UTF-8 underlying):</p>
<pre><code>&gt;&gt; transcode "a &lt;b&gt; 10"
== [a &lt;b&gt; 10]

&gt;&gt; [value next]: transcode "a &lt;b&gt; 10"
== a

&gt;&gt; next
== " &lt;b&gt; 10"
</code></pre>
<p>Binding while transcoding would be a performance advantage (I think Red does it).  There is a facility in the scanner now that binds as it goes but this is for the libRebol API only, not exposed by TRANSCODE.</p>
<p>In any case, point being that though I said <strong>LOAD should always return a BLOCK!</strong> that would be understood here to mean <strong>well, at least LOAD of 'rebol code should always return a BLOCK!</strong>.</p>
<p>But even if /ALL goes away, there's always going to be parameterization settings to the underlying "codec" that powers generic loading.  Does the code-loading "codec" have options?  I think it should...policies like allowing or disallowing CR/LF or tabs, etc.  Compatibility options, like BINARY! as #{...} instead of &amp;{...}.</p>
<p>So is there a hard and fast reason why there wouldn't be an option of "load just one value?" in the code-loading codec?</p>
<p>...I think it's something that is probably not worth it to include.  But just wanted to point out that LOAD is theorized to do much more, and parameterization <em>will</em> be necessary.</p>
          <p><a href="https://forum.rebol.info/t/mold-and-load-parity/1429/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/mold-and-load-parity/1429/4</link>
        <pubDate>Fri, 11 Dec 2020 01:08:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1429-4</guid>
        <source url="https://forum.rebol.info/t/mold-and-load-parity/1429.rss">MOLD and LOAD parity</source>
      </item>
      <item>
        <title>MOLD and LOAD parity</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="1" data-topic="1429">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>Let's assume that current MOLD/ONLY is the correct behaviour for BLOCK!:</p>
</blockquote>
</aside>
<p>It feels consistent with the "container-as-primacy" for blocks, which I will link here:</p>
<p><a href="https://forum.rebol.info/t/every-thought-on-array-splicing-has-been-had/1332">"Every thought on array splicing has been had!" <img src="https://forum.rebol.info/images/emoji/twitter/exploding_head.png?v=9" title=":exploding_head:" class="emoji" alt=":exploding_head:"> </a></p>
<p><strong>I definitely favor the idea that LOAD always returns a BLOCK!</strong>, and that if you think the load operation will return one-and-only-one item there be an extractor for that:</p>
<pre><code>&gt;&gt; single of [1]
== 1

&gt;&gt; single of [1 2]
** Error: single used on block with more than one item
</code></pre>
<p>So you can put together a thought like:</p>
<pre><code>&gt;&gt; something: "1"

&gt;&gt; ensure integer! single of load something
== 1
</code></pre>
<p>Or you could shorthand the <code>single of load</code> behavior as just <strong>LOAD-VALUE</strong> (I'm trying that out...)</p>
<blockquote>
<p>Note: here is what my remark inside LOAD on the feature of single value extraction was:</p>
<pre><code>; If appropriate and possible, return singular data value.
;
; !!! How good an idea is this, really?  People are used to saying
; load "10" and getting `10`, not `[10]`.  But it seems like this makes
; the process have some variability to it that makes it a poor default.
;
all .not [
    all_LOAD
    header  ; technically doesn't prevent returning single value (?)
    (length of data) &lt;&gt; 1
] then [
    data: first data
]</code></pre>
</blockquote>
          <p><a href="https://forum.rebol.info/t/mold-and-load-parity/1429/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/mold-and-load-parity/1429/3</link>
        <pubDate>Thu, 10 Dec 2020 23:18:44 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1429-3</guid>
        <source url="https://forum.rebol.info/t/mold-and-load-parity/1429.rss">MOLD and LOAD parity</source>
      </item>
      <item>
        <title>MOLD and LOAD parity</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>If this were to come to pass, one would need to learn the dissonance between using MOLD on a BLOCK! vs. using MOLD on other values. Shorter, there would <strong>not</strong> be parity between MOLD BLOCK and DETECT*. That dissonance exists everywhere in the post-/ONLY world anyways though.</p>
<p>DETECT should be able to handle a stringified block, thus:</p>
<pre><code class="lang-nohighlight">&gt;&gt; mold only [block of things]
== "[block of things]"

&gt;&gt; detect "[block of things]"
== [block of things]
</code></pre>
<p>I believe this proposal and my ONLY one addresses a couple of inconsistencies in the language.</p>
<p>*Not convinced re. the name</p>
          <p><a href="https://forum.rebol.info/t/mold-and-load-parity/1429/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/mold-and-load-parity/1429/2</link>
        <pubDate>Thu, 10 Dec 2020 23:10:40 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1429-2</guid>
        <source url="https://forum.rebol.info/t/mold-and-load-parity/1429.rss">MOLD and LOAD parity</source>
      </item>
      <item>
        <title>MOLD and LOAD parity</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>It occurred to me in <a href="https://forum.rebol.info/t/the-simple-things-matter-the-most/1428/8">this post</a> that MOLD/ONLY appears to work at odds to other /ONLY options:</p>
<pre><code>&gt;&gt; append [] []
== []

â€Œ&gt;&gt; append/only [] []
== [[]]

â€Œ&gt;&gt; mold []
== "[]"

â€Œ&gt;&gt; mold/only []
== ""
</code></pre>
<p>As <a href="https://forum.rebol.info/t/cutting-out-only-could-we-make-append-find-etc-only-accept-blocks/1182/10">my solution to /ONLY</a> is to use an optimized equivalent of <a><strong>func [value][reduce [value]]</strong></a>, this highlights the discrepency:</p>
<pre><code>&gt;&gt; append only [] []  ; same as append/only
== [[]]

&gt;&gt; mold only []  ; not same as mold/only
== "[[]]"
</code></pre>
<p>How then should MOLD handle blocks, and what are the implications for LOAD? Let's assume that current MOLD/ONLY is the correct behaviour for BLOCK!:</p>
<pre><code>&gt;&gt; mold [1 2 3]
== "1 2 3"

&gt;&gt; load "1 2 3"
== [1 2 3]
</code></pre>
<p>This seems fine until you get to single-length blocks:</p>
<pre><code>&gt;&gt; mold [1]
== "1"

&gt;&gt; load "1"
== 1
</code></pre>
<p>Clearly this is now an inconsistency in LOAD. LOAD/ALL would get you there:</p>
<pre><code>&gt;&gt; load/all "1"
== [1]
</code></pre>
<p>Should LOAD/ALL then be the default? Probably. Proposition: MOLD/ONLY and LOAD/ALL become MOLD and LOAD. Yay! There is a parity where it matters most: (de)serialization of a block of values.</p>
<p>The wrinkle is: loading singular values is useful. Lost is the MOLD/LOAD parity when handling non-blocks:</p>
<pre><code>&gt;&gt; mold 1
== "1"

&gt;&gt; load "1"
== [1]
</code></pre>
<p>Where to go with that? Lost is shorthand validation of snippets of text:</p>
<pre><code>&gt;&gt; type-of load "10-Dec-2020"
== date!

&gt;&gt; type-of load "http://rebol.info"
== url!
</code></pre>
<p>I'd argue that this is beyond the scope of LOADâ€”LOAD is an overloaded (<img src="https://forum.rebol.info/images/emoji/twitter/sunglasses.png?v=9" title=":sunglasses:" class="emoji" alt=":sunglasses:">) function and the more critical behaviour is to return a block. It would be more fitting to dedicate a separate wrapper for TRANSCODE that is less likely to use the polymorphic demands of loading from external sources and craps out if, leading/trailing whitespace aside, the content doesn't conform to a single value (even if that value is a GROUP!). Spitballingâ€”DETECT, DISCERN, whatever:</p>
<pre><code>&gt;&gt; map-each value ["10-Dec-2020" "http://rebol.info"] [type-of detect value]
== [date! url!]

&gt;&gt; detect "1 2 3"
== ERROR! #!*^!#%@$
</code></pre>
<p>Thus MOLD of BLOCK! holds parity with LOAD; MOLD of non-block holds parity with DETECT (or other name).</p>
          <p><a href="https://forum.rebol.info/t/mold-and-load-parity/1429/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/mold-and-load-parity/1429/1</link>
        <pubDate>Thu, 10 Dec 2020 23:00:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1429-1</guid>
        <source url="https://forum.rebol.info/t/mold-and-load-parity/1429.rss">MOLD and LOAD parity</source>
      </item>
  </channel>
</rss>

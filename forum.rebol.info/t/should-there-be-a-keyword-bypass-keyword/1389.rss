<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should There Be A &quot;Keyword Bypass&quot; Keyword?</title>
    <link>https://forum.rebol.info/t/should-there-be-a-keyword-bypass-keyword/1389</link>
    <description>A unique and sometimes uncomfortable design point of Rebol dialects--best exemplified by PARSE--is that there is no decoration to distinguish keywords from non.

For instance, imagine the unlucky author of this routine:

    filter: func [
        data [block!] &quot;data to search&quot;
        reject [any-value!] &quot;item to filter out&quot;
    ][
        parse data [any [remove reject | skip]]
    ]

They thought it seemed fine, but didn&#39;t know that REJECT was a keyword.  SKIP is also frequently used to hold an integer skip count.

When this kind of problem has come up in the past, I&#39;ve thought that the right answer would be to take something like GET-WORD! to mean &quot;use the real variable, not a keyword&quot;:

    parse data [any [remove :reject | skip]]

But in PARSE&#39;s overloaded world, of course GET-WORD! is taken for &quot;get parse position&quot;.  Though I never particularly liked it, so I proposed **mark pos** instead of **:pos**.

Of course, this then meant anyone who had used a variable called MARK now ran afoul of the keywords.  :-/

## Should This Be Covered With A Single WORD! Operator?

If we consider keyword collisions to be an edge case, then taking a whole datatype for it might be excessive.

What if there were an operator which was a kind of escaping mechanism, that meant *&quot;don&#39;t treat this as a keyword?&quot;*

What comes to mind for me is a symbol, and it&#39;s one I&#39;ve used for a connected purpose.  It&#39;s the **`&gt;-`**

    parse data [any [remove &gt;- reject | skip]]

By being symbolic and light, it doesn&#39;t disrupt too badly.  It points at what it&#39;s talking about.

The concept would be that the default definition would just be a kind of pass-thru of its right hand side.   
 So sort of like **func [x] [:x]** but it would be like REEVAL, and be able to be invisible if its right hand were invisible:

    &gt;&gt; (&gt;- add 10 20)
    == 30

    &gt;&gt; (&gt;- 304)
    == 304

    &gt;&gt; 1020 (&gt;- comment &quot;hi&quot;)
    == 1020

Then the enfix form of this (SHOVE) could be **`-&gt;-`**, which is not useless because it allows the right-hand side to be a PATH!.

With these in hand, dialects could promise that what&#39;s on the right of them wouldn&#39;t act as a keyword.  That promise would be easy to keep if they were doing literal inspections of an evaluative feed and only running things they didn&#39;t recognize.  Just don&#39;t do special handling for it, and the regular evaluation will happen.

## PARSE Actually Has Another Avenue

I&#39;ve become convinced that PARSE probably needs to use the `@foo` forms to mean &quot;match this literally&quot;.  Because the workarounds needed to get that today are too obtuse.

Notice that this won&#39;t work:

     block: [some &quot;a&quot;]
     parse [1 [some &quot;a&quot;] 3] [integer! block integer!]

This isn&#39;t helped by `&gt;-` described above.  The problem is a conflict in semantics, not a conflict in keywords.

But imagine if this did the intended thing:

     block: [some &quot;a&quot;]
     parse [1 [some &quot;a&quot;] 3] [integer! @block integer!]

That seems important to me, and it is connected systemically to the &quot;as-is&quot; notion this type is coming to be associated with.

*While this is different, it would limit the cases you&#39;d need to use `&gt;-` with to those where you wanted a variable to act as a rule.*

## How Does This Compare with GET-WORD! for Subvert Keyword?

I still sort of feel like GET-WORD! makes more sense for PARSE to subvert keywords, and that MARK and SEEK are good enough for setting and getting the parse position (and much clearer).

    parse data [any [remove :reject | skip]]

This sort of lines up with today&#39;s usage of GET-GROUP! for &quot;splice this thing here so the parse feed sees it as if it had been written literally here&quot;.</description>
    
    <lastBuildDate>Fri, 06 Nov 2020 19:40:22 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/should-there-be-a-keyword-bypass-keyword/1389.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should There Be A &quot;Keyword Bypass&quot; Keyword?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A unique and sometimes uncomfortable design point of Rebol dialects--best exemplified by PARSE--is that there is no decoration to distinguish keywords from non.</p>
<p>For instance, imagine the unlucky author of this routine:</p>
<pre><code>filter: func [
    data [block!] "data to search"
    reject [any-value!] "item to filter out"
][
    parse data [any [remove reject | skip]]
]
</code></pre>
<p>They thought it seemed fine, but didn't know that REJECT was a keyword.  SKIP is also frequently used to hold an integer skip count.</p>
<p>When this kind of problem has come up in the past, I've thought that the right answer would be to take something like GET-WORD! to mean "use the real variable, not a keyword":</p>
<pre><code>parse data [any [remove :reject | skip]]
</code></pre>
<p>But in PARSE's overloaded world, of course GET-WORD! is taken for "get parse position".  Though I never particularly liked it, so I proposed <strong>mark pos</strong> instead of <strong>:pos</strong>.</p>
<p>Of course, this then meant anyone who had used a variable called MARK now ran afoul of the keywords.  :-/</p>
<h2>Should This Be Covered With A Single WORD! Operator?</h2>
<p>If we consider keyword collisions to be an edge case, then taking a whole datatype for it might be excessive.</p>
<p>What if there were an operator which was a kind of escaping mechanism, that meant <em>"don't treat this as a keyword?"</em></p>
<p>What comes to mind for me is a symbol, and it's one I've used for a connected purpose.  It's the <strong><code>&gt;-</code></strong></p>
<pre><code>parse data [any [remove &gt;- reject | skip]]
</code></pre>
<p>By being symbolic and light, it doesn't disrupt too badly.  It points at what it's talking about.</p>
<p>The concept would be that the default definition would just be a kind of pass-thru of its right hand side.<br>
So sort of like <strong>func [x] [:x]</strong> but it would be like REEVAL, and be able to be invisible if its right hand were invisible:</p>
<pre><code>&gt;&gt; (&gt;- add 10 20)
== 30

&gt;&gt; (&gt;- 304)
== 304

&gt;&gt; 1020 (&gt;- comment "hi")
== 1020
</code></pre>
<p>Then the enfix form of this (SHOVE) could be <strong><code>-&gt;-</code></strong>, which is not useless because it allows the right-hand side to be a PATH!.</p>
<p>With these in hand, dialects could promise that what's on the right of them wouldn't act as a keyword.  That promise would be easy to keep if they were doing literal inspections of an evaluative feed and only running things they didn't recognize.  Just don't do special handling for it, and the regular evaluation will happen.</p>
<h2>PARSE Actually Has Another Avenue</h2>
<p>I've become convinced that PARSE probably needs to use the <code>@foo</code> forms to mean "match this literally".  Because the workarounds needed to get that today are too obtuse.</p>
<p>Notice that this won't work:</p>
<pre><code> block: [some "a"]
 parse [1 [some "a"] 3] [integer! block integer!]
</code></pre>
<p>This isn't helped by <code>&gt;-</code> described above.  The problem is a conflict in semantics, not a conflict in keywords.</p>
<p>But imagine if this did the intended thing:</p>
<pre><code> block: [some "a"]
 parse [1 [some "a"] 3] [integer! @block integer!]
</code></pre>
<p>That seems important to me, and it is connected systemically to the "as-is" notion this type is coming to be associated with.</p>
<p><em>While this is different, it would limit the cases you'd need to use <code>&gt;-</code> with to those where you wanted a variable to act as a rule.</em></p>
<h2>How Does This Compare with GET-WORD! for Subvert Keyword?</h2>
<p>I still sort of feel like GET-WORD! makes more sense for PARSE to subvert keywords, and that MARK and SEEK are good enough for setting and getting the parse position (and much clearer).</p>
<pre><code>parse data [any [remove :reject | skip]]
</code></pre>
<p>This sort of lines up with today's usage of GET-GROUP! for "splice this thing here so the parse feed sees it as if it had been written literally here".</p>
          <p><a href="https://forum.rebol.info/t/should-there-be-a-keyword-bypass-keyword/1389/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-there-be-a-keyword-bypass-keyword/1389/1</link>
        <pubDate>Fri, 06 Nov 2020 19:24:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1389-1</guid>
        <source url="https://forum.rebol.info/t/should-there-be-a-keyword-bypass-keyword/1389.rss">Should There Be A &quot;Keyword Bypass&quot; Keyword?</source>
      </item>
  </channel>
</rss>

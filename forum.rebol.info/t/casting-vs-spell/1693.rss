<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Casting vs. SPELL</title>
    <link>https://forum.rebol.info/t/casting-vs-spell/1693</link>
    <description>With my bolstered confidence that FILE! best serves as a non-string, I feel like it gives a certain amount of irresistable power.

    &gt;&gt; size of %foo.dat
    == 143983  ; size of the foo.dat file on disk

*(Note: My thinking on SIZE with strings is that it gives you a count in bytes, whereas LENGTH gives you a count in codepoints.  This distinction of &quot;length is logical units&quot; and &quot;size is a byte count&quot; has precedent in other systems...but I&#39;d like to go through and make sure that it&#39;s being used consistently everywhere.  A BINARY! can use either since its logical size is 1, but I&#39;d prefer to speak in terms of the size where possible...e.g. when the binary is not being discussed in the context of a generic length that would apply to any series)*
 
Somewhat extremely, this would suggest I&#39;d be saying that **length of %foo.dat** would be something that would delegate to whatever the port type was for that file...and give back the logical length of the contents.

    ; contents of %foo.myformat
    [record 1 &quot;foo&quot; #bar]
    [record 2 &quot;baz&quot; #mumble]

    &gt;&gt; length of %foo.myformat
    == 2

We&#39;re imagining here that you&#39;re living in a world where a &quot;myformat&quot; port would act something like:

    &gt;&gt; p: open %foo.myformat

    &gt;&gt; read/part p 1
    == make object! [
        x: &quot;foo&quot;
        y: #bar
    ]

    &gt;&gt; read/part p 1
    == make object! [
        x: &quot;baz&quot;
        y: #mumble
    ]

    &gt;&gt; read/part p 1
    ; null

**Of course I am making this all up.**  But what I&#39;m trying to get at is that when you want to talk about the attributes of something that is a representation of some grand thing, the number of characters in its name is potentially much less interesting than all the logical things you can ask about it.

That said...it should be easy to ask how long the name is.  And this is a little bit ugly:

    &gt;&gt; length of as text! %foo.dat
    == 7

In the API I&#39;ve used the word &quot;spell&quot; to talk about string extraction.  Might that look nicer?

    &gt;&gt; spell %foo.dat
    == &quot;foo.dat&quot;

    &gt;&gt; length of spell %foo.dat
    == 7

I guess it could also be FORM.  Though FORM never quite sat right with me, I don&#39;t think of it so much as a verb in computer programming as a noun for &quot;form you fill out&quot;.

Anyway, this is just to throw out there the idea of SPELL as a way to ask for the underlying string of something that may look a bit better than AS TEXT!.</description>
    
    <lastBuildDate>Tue, 31 Aug 2021 16:44:42 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/casting-vs-spell/1693.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Casting vs. SPELL</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>This is heading in an interesting direction!</p>
<p>When I think "length of " I usually expect  to be a noun. So something like:</p>
<pre><code>&gt;&gt; length of chars %foo.dat
== 7</code></pre>
<p>Although to verbify it we'd be looking at something more like:</p>
<pre><code>&gt;&gt; length of as-chars %foo.dat
== 7</code></pre>
<p>or</p>
<pre><code>&gt;&gt; length of as chars %foo.dat
== 7</code></pre>
<p>Which probably doesn't sit well either. It pushes us closer to Hypertext / Applescript syntax.</p>
<pre><code>&gt;&gt; length of form %foo.dat
== 7</code></pre>
<p>Might be imperfect, but it's plain and simple.</p>
<p>Some other pseudocode:</p>
<pre><code>&gt;&gt; query.name %foo.dat
== "foo.dat"

&gt;&gt; length of query.name %foo.dat
== 7

&gt;&gt; file: query %foo.dat
== make object! [
    name: "foo.dat"
    suffix: %.dat
    size: 1869
    date: 10-Aug-2021/10:48:33.724-4:00
    type: 'file
]

&gt;&gt; length of file.name
== 7</code></pre>
          <p><a href="https://forum.rebol.info/t/casting-vs-spell/1693/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/casting-vs-spell/1693/2</link>
        <pubDate>Mon, 30 Aug 2021 23:49:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1693-2</guid>
        <source url="https://forum.rebol.info/t/casting-vs-spell/1693.rss">Casting vs. SPELL</source>
      </item>
      <item>
        <title>Casting vs. SPELL</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>With my bolstered confidence that FILE! best serves as a non-string, I feel like it gives a certain amount of irresistable power.</p>
<pre><code>&gt;&gt; size of %foo.dat
== 143983  ; size of the foo.dat file on disk
</code></pre>
<p><em>(Note: My thinking on SIZE with strings is that it gives you a count in bytes, whereas LENGTH gives you a count in codepoints.  This distinction of "length is logical units" and "size is a byte count" has precedent in other systems...but I'd like to go through and make sure that it's being used consistently everywhere.  A BINARY! can use either since its logical size is 1, but I'd prefer to speak in terms of the size where possible...e.g. when the binary is not being discussed in the context of a generic length that would apply to any series)</em></p>
<p>Somewhat extremely, this would suggest I'd be saying that <strong>length of %foo.dat</strong> would be something that would delegate to whatever the port type was for that file...and give back the logical length of the contents.</p>
<pre><code>; contents of %foo.myformat
[record 1 "foo" #bar]
[record 2 "baz" #mumble]

&gt;&gt; length of %foo.myformat
== 2
</code></pre>
<p>We're imagining here that you're living in a world where a "myformat" port would act something like:</p>
<pre><code>&gt;&gt; p: open %foo.myformat

&gt;&gt; read/part p 1
== make object! [
    x: "foo"
    y: #bar
]

&gt;&gt; read/part p 1
== make object! [
    x: "baz"
    y: #mumble
]

&gt;&gt; read/part p 1
; null
</code></pre>
<p><strong>Of course I am making this all up.</strong>  But what I'm trying to get at is that when you want to talk about the attributes of something that is a representation of some grand thing, the number of characters in its name is potentially much less interesting than all the logical things you can ask about it.</p>
<p>That said...it should be easy to ask how long the name is.  And this is a little bit ugly:</p>
<pre><code>&gt;&gt; length of as text! %foo.dat
== 7
</code></pre>
<p>In the API I've used the word "spell" to talk about string extraction.  Might that look nicer?</p>
<pre><code>&gt;&gt; spell %foo.dat
== "foo.dat"

&gt;&gt; length of spell %foo.dat
== 7
</code></pre>
<p>I guess it could also be FORM.  Though FORM never quite sat right with me, I don't think of it so much as a verb in computer programming as a noun for "form you fill out".</p>
<p>Anyway, this is just to throw out there the idea of SPELL as a way to ask for the underlying string of something that may look a bit better than AS TEXT!.</p>
          <p><a href="https://forum.rebol.info/t/casting-vs-spell/1693/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/casting-vs-spell/1693/1</link>
        <pubDate>Mon, 30 Aug 2021 12:50:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1693-1</guid>
        <source url="https://forum.rebol.info/t/casting-vs-spell/1693.rss">Casting vs. SPELL</source>
      </item>
  </channel>
</rss>

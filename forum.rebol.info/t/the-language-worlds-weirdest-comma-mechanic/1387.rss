<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Language World&#39;s Weirdest COMMA! Mechanic</title>
    <link>https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387</link>
    <description>All right, I went and wrote it:

&gt; **Though sounding a bit like a broken record at this point, please add tests as you can think of them.**
&gt;
&gt; [%comma.test.reb](https://github.com/metaeducation/ren-c/blob/master/tests/datatypes/comma.test.reb)
&gt;
&gt; Due to having to juggle about a million design decisions at once that have actual deep difficult ramifications, I kind of have to draw the line after I feel I&#39;ve gotten past any obvious disproofs of an idea...so the tests only go so far in the initial commit.  Unfortunately that&#39;s about as far as they tend to stay until bugs are found.

    &gt;&gt; all [1 + 2, 3 + 4]
    == 7

    &gt;&gt; all [1 +, 2 3 + 4]
    ** Script Error: + is missing its value2 argument

    &gt;&gt; all [(1 +) 2 3 + 4]  ; error parity
    ** Script Error: + is missing its value2 argument

I also did a quick patch of the feature into PARSE (it is difficult with how parse is written to do a &quot;good&quot; job of this, pointing to a conceptual problem with how parse is written, so a rewrite would hopefully address that):

    &gt;&gt; parse &quot;aaabbb&quot; [some &quot;a&quot;, some &quot;b&quot;]
    == &quot;aaabbb&quot;

    &gt;&gt; parse &quot;aaabbb&quot; [some, &quot;a&quot; some &quot;b&quot;]
    ** Script Error: expression barrier hit while fulfilling argument

Beyond the expression barrier feature--which I have always believed to be important--having comma available in dialects is powerful.

Note that I left in support for 1,1 being a synonym for 1.0 based on the idea of space significance.  This means you&#39;ll have less ability to copy/paste data from other contexts directly, like (1,2,3) ... but it&#39;s not clear how much gain there is from allowing that when so many other things won&#39;t work (especially in plan -4, where `foo(a, b c)` isn&#39;t loadable either).

At least for the moment, this breaks the idea of supporting commas in URL!s directly.  While it might be possible to say that **`http://a,b`** is legal but `http://a,` is not, how such things are scanned needs to be redesigned so there&#39;s not so much sporadic code all over the place.  I&#39;m open to the idea...just not assuming it as a foregone conclusion.

## I Actually Like It

Many years ago when expression barriers were first being cooked up, I had been mostly swayed by the &quot;commas and periods are too hard to tell apart&quot; idea...to say that the only purpose they should have in the language would be as synonyms.

If this idea is taken to extremes, we would also say that the number **1** and lowercase **L** and the uppercase **i** and the vertical bar all have to be the same, due to **I1l|**. being too hard to differentiate.  *(Though fonts and syntax highlighting choices can go a long way in that.)*

Today my thinking is that you don&#39;t necessarily control this kind of thing from the language level.  You give people choices, and they write their code as it feels good to them.  If they&#39;ve got a certain mix of data and don&#39;t like comma with it, they should use another arrangement.  Put things in groups, or on newlines, or whatever.

I&#39;ll point out you have the option to put an entire expression in a group, or just the last thing and keep the comma.  It&#39;s up to you.  So taking the maybe-ugly combo of blank-tailed TUPLE! and comma, you could go with your taste:

    1 + a., 2 + 3
    1 + (a.), 2 + 3
    (1 + a.) 2 + 3
    (1 + a.) (2 + 3)
    [
        1 + a.
        2 + 3
    ]

It&#39;s something people can ignore entirely if they want.  Don&#39;t use it if you don&#39;t like it.  But right now, I like it...and I plan to phase out BAR! as an expression barrier in the default.  But the mechanics are such that we know you can build usermode barriers if you want that to behave the same.</description>
    
    <lastBuildDate>Sat, 28 Nov 2020 16:30:22 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Language World&#39;s Weirdest COMMA! Mechanic</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1387">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>&gt;&gt; all [1 +, 2 3 + 4]
** Script Error: + is missing its value2 argument
</code></pre>
</blockquote>
</aside>
<p>One thought I had was that the COMMA! might represent a <em>pause</em> instead of a <em>barrier</em> when it came to enfix.  This could make it a precedence manipulator:</p>
<pre><code>&gt;&gt; add 1 2 * 3
== 7

&gt;&gt; add 1 2, * 3
== 9  ; as if you'd written `(add 1 2) * 3`
</code></pre>
<p>The current thought is it acts more like you've written <code>(add 1 2) (* 3)</code>.</p>
<p>We probably want such an operator, but I don't think comma is it.  The barrier behavior seems more reasonable and uniform, and lets you throw commas into lists of generated expressions and know that you're keeping them separate.  (well, modulo hard quoting)</p>
          <p><a href="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/5</link>
        <pubDate>Sat, 28 Nov 2020 16:30:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1387-5</guid>
        <source url="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387.rss">The Language World&#39;s Weirdest COMMA! Mechanic</source>
      </item>
      <item>
        <title>The Language World&#39;s Weirdest COMMA! Mechanic</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1387">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>At least for the moment, this breaks the idea of supporting commas in URL!s directly. While it might be possible to say that <strong><code>http://a,b</code></strong> is legal but <code>http://a</code></p>
</blockquote>
</aside>
<p>This may be a stretch, but I wonder if there's an argument here for copying a MarkDown convention for an alternative way to express URLs: allowing <code>&lt;&gt;</code> as delimiters. It would only apply to URLs that contain <code>://</code> so as to distinguish from tags with namespaces.</p>
          <p><a href="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/4</link>
        <pubDate>Tue, 24 Nov 2020 16:32:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1387-4</guid>
        <source url="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387.rss">The Language World&#39;s Weirdest COMMA! Mechanic</source>
      </item>
      <item>
        <title>The Language World&#39;s Weirdest COMMA! Mechanic</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I had a <a href="https://rg.on-arran.com/wiki/show/Commas">similar thoughts</a> way back. I had originally wanted to copy the 'implied block' model of CSS and Ruby, but am now more or less on the same page as your proposal here.</p>
          <p><a href="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/3</link>
        <pubDate>Tue, 24 Nov 2020 16:27:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1387-3</guid>
        <source url="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387.rss">The Language World&#39;s Weirdest COMMA! Mechanic</source>
      </item>
      <item>
        <title>The Language World&#39;s Weirdest COMMA! Mechanic</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Wow, I'm in love with COMMA! in parse expressions. <img src="https://forum.rebol.info/images/emoji/twitter/heartpulse.png?v=9" title=":heartpulse:" class="emoji" alt=":heartpulse:"></p>
          <p><a href="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/2</link>
        <pubDate>Fri, 06 Nov 2020 19:10:09 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1387-2</guid>
        <source url="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387.rss">The Language World&#39;s Weirdest COMMA! Mechanic</source>
      </item>
      <item>
        <title>The Language World&#39;s Weirdest COMMA! Mechanic</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>All right, I went and wrote it:</p>
<blockquote>
<p><strong>Though sounding a bit like a broken record at this point, please add tests as you can think of them.</strong></p>
<p><a href="https://github.com/metaeducation/ren-c/blob/master/tests/datatypes/comma.test.reb">%comma.test.reb</a></p>
<p>Due to having to juggle about a million design decisions at once that have actual deep difficult ramifications, I kind of have to draw the line after I feel I've gotten past any obvious disproofs of an idea...so the tests only go so far in the initial commit.  Unfortunately that's about as far as they tend to stay until bugs are found.</p>
</blockquote>
<pre><code>&gt;&gt; all [1 + 2, 3 + 4]
== 7

&gt;&gt; all [1 +, 2 3 + 4]
** Script Error: + is missing its value2 argument

&gt;&gt; all [(1 +) 2 3 + 4]  ; error parity
** Script Error: + is missing its value2 argument
</code></pre>
<p>I also did a quick patch of the feature into PARSE (it is difficult with how parse is written to do a "good" job of this, pointing to a conceptual problem with how parse is written, so a rewrite would hopefully address that):</p>
<pre><code>&gt;&gt; parse "aaabbb" [some "a", some "b"]
== "aaabbb"

&gt;&gt; parse "aaabbb" [some, "a" some "b"]
** Script Error: expression barrier hit while fulfilling argument
</code></pre>
<p>Beyond the expression barrier feature--which I have always believed to be important--having comma available in dialects is powerful.</p>
<p>Note that I left in support for 1,1 being a synonym for 1.0 based on the idea of space significance.  This means you'll have less ability to copy/paste data from other contexts directly, like (1,2,3) ... but it's not clear how much gain there is from allowing that when so many other things won't work (especially in plan -4, where <code>foo(a, b c)</code> isn't loadable either).</p>
<p>At least for the moment, this breaks the idea of supporting commas in URL!s directly.  While it might be possible to say that <strong><code>http://a,b</code></strong> is legal but <code>http://a,</code> is not, how such things are scanned needs to be redesigned so there's not so much sporadic code all over the place.  I'm open to the idea...just not assuming it as a foregone conclusion.</p>
<h2>I Actually Like It</h2>
<p>Many years ago when expression barriers were first being cooked up, I had been mostly swayed by the "commas and periods are too hard to tell apart" idea...to say that the only purpose they should have in the language would be as synonyms.</p>
<p>If this idea is taken to extremes, we would also say that the number <strong>1</strong> and lowercase <strong>L</strong> and the uppercase <strong>i</strong> and the vertical bar all have to be the same, due to <strong>I1l|</strong>. being too hard to differentiate.  <em>(Though fonts and syntax highlighting choices can go a long way in that.)</em></p>
<p>Today my thinking is that you don't necessarily control this kind of thing from the language level.  You give people choices, and they write their code as it feels good to them.  If they've got a certain mix of data and don't like comma with it, they should use another arrangement.  Put things in groups, or on newlines, or whatever.</p>
<p>I'll point out you have the option to put an entire expression in a group, or just the last thing and keep the comma.  It's up to you.  So taking the maybe-ugly combo of blank-tailed TUPLE! and comma, you could go with your taste:</p>
<pre><code>1 + a., 2 + 3
1 + (a.), 2 + 3
(1 + a.) 2 + 3
(1 + a.) (2 + 3)
[
    1 + a.
    2 + 3
]
</code></pre>
<p>It's something people can ignore entirely if they want.  Don't use it if you don't like it.  But right now, I like it...and I plan to phase out BAR! as an expression barrier in the default.  But the mechanics are such that we know you can build usermode barriers if you want that to behave the same.</p>
          <p><a href="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/1</link>
        <pubDate>Fri, 06 Nov 2020 16:11:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1387-1</guid>
        <source url="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387.rss">The Language World&#39;s Weirdest COMMA! Mechanic</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Reclaiming BAR! ... Could It Mean &quot;newline&quot; in PRINT?</title>
    <link>https://forum.rebol.info/t/reclaiming-bar-could-it-mean-newline-in-print/1388</link>
    <description>With [the arrival of COMMA!](https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387), the heavier vertical bar goes back to its sole entrenched purpose as an alternate in PARSE rules.

But this makes one wonder what it might be used for.  A long time ago when it was still a separate BAR! datatype, the barrier was tried out as a newline in PRINT.

     &gt;&gt; print [&quot;sum one:&quot; 10 + 20 | &quot;sum two:&quot; 3 + 4]
     sum one: 30
     sum two: 7

The reason this was panned was that separating expressions was a distinct intention.  What if the strings were coming from an expression:

     &gt;&gt; sum-label: func [n] [either n = 1 [&quot;one&quot;] [&quot;two&quot;]]

    &gt;&gt; print [sum-label 1 10 + 20 | sum-label 2 3 + 4]
    sum one: 30
    sum two: 7

It could be interesting to people to separate `sum-label 1 | 10 + 20` to make the expression boundary clearer.  But if they got a newline in the process, that would not be good.

But now with COMMA!, we can reconsider:

    &gt;&gt; print [sum-label 1, 10 + 20 | sum-label 2, 3 + 4]
    sum one: 30
    sum two: 7

You have your expression separations, and you have your newline.

## Contentious With Other Definitions of |

I wouldn&#39;t propose accomplishing this by defining | to be the newline character in general.

It would be a keyword in DELIMIT (hence the SPACED that PRINT is based on).

This has the potential for causing confusion for anyone who redefines | and thinks they can use it freely.  We run into questions of how to subvert PRINT&#39;s meaning it has chosen and invoke the operator.

But those tools are starting to emerge.  **`reeval :|`** can trigger identical behavior to using a function in **|**... now even allowing it to be invisible.  That doesn&#39;t cover enfix, but you get that with **`-&gt;-`**

&gt; Note: I&#39;m wondering now if **`&gt;-`** should be a &quot;SHOVE&quot; that doesn&#39;t give any argument to the right hand side, while **`-&gt;-`** pulls something from the left.  That means you could say **`&gt;- keyword`** to get generalized dialect subversion when something like PRINT has taken a keyword.  As long as it doesn&#39;t take **`&gt;-`**, that is!

## I Think These Questions Are *THE POINT*

If we don&#39;t approach the mechanisms and understandings that allow things like PRINT to work this way, the whole exercise of building this framework is probably wasted work.

We need to know how to make dialect keywords, how to easily write dialects, and have patterns for mixing code that may collide with the dialect&#39;s choices.</description>
    
    <lastBuildDate>Fri, 06 Nov 2020 18:41:08 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/reclaiming-bar-could-it-mean-newline-in-print/1388.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Reclaiming BAR! ... Could It Mean &quot;newline&quot; in PRINT?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>With <a href="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387">the arrival of COMMA!</a>, the heavier vertical bar goes back to its sole entrenched purpose as an alternate in PARSE rules.</p>
<p>But this makes one wonder what it might be used for.  A long time ago when it was still a separate BAR! datatype, the barrier was tried out as a newline in PRINT.</p>
<pre><code> &gt;&gt; print ["sum one:" 10 + 20 | "sum two:" 3 + 4]
 sum one: 30
 sum two: 7
</code></pre>
<p>The reason this was panned was that separating expressions was a distinct intention.  What if the strings were coming from an expression:</p>
<pre><code> &gt;&gt; sum-label: func [n] [either n = 1 ["one"] ["two"]]

&gt;&gt; print [sum-label 1 10 + 20 | sum-label 2 3 + 4]
sum one: 30
sum two: 7
</code></pre>
<p>It could be interesting to people to separate <code>sum-label 1 | 10 + 20</code> to make the expression boundary clearer.  But if they got a newline in the process, that would not be good.</p>
<p>But now with COMMA!, we can reconsider:</p>
<pre><code>&gt;&gt; print [sum-label 1, 10 + 20 | sum-label 2, 3 + 4]
sum one: 30
sum two: 7
</code></pre>
<p>You have your expression separations, and you have your newline.</p>
<h2>Contentious With Other Definitions of |</h2>
<p>I wouldn't propose accomplishing this by defining | to be the newline character in general.</p>
<p>It would be a keyword in DELIMIT (hence the SPACED that PRINT is based on).</p>
<p>This has the potential for causing confusion for anyone who redefines | and thinks they can use it freely.  We run into questions of how to subvert PRINT's meaning it has chosen and invoke the operator.</p>
<p>But those tools are starting to emerge.  <strong><code>reeval :|</code></strong> can trigger identical behavior to using a function in <strong>|</strong>... now even allowing it to be invisible.  That doesn't cover enfix, but you get that with <strong><code>-&gt;-</code></strong></p>
<blockquote>
<p>Note: I'm wondering now if <strong><code>&gt;-</code></strong> should be a "SHOVE" that doesn't give any argument to the right hand side, while <strong><code>-&gt;-</code></strong> pulls something from the left.  That means you could say <strong><code>&gt;- keyword</code></strong> to get generalized dialect subversion when something like PRINT has taken a keyword.  As long as it doesn't take <strong><code>&gt;-</code></strong>, that is!</p>
</blockquote>
<h2>I Think These Questions Are <em>THE POINT</em>
</h2>
<p>If we don't approach the mechanisms and understandings that allow things like PRINT to work this way, the whole exercise of building this framework is probably wasted work.</p>
<p>We need to know how to make dialect keywords, how to easily write dialects, and have patterns for mixing code that may collide with the dialect's choices.</p>
          <p><a href="https://forum.rebol.info/t/reclaiming-bar-could-it-mean-newline-in-print/1388/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/reclaiming-bar-could-it-mean-newline-in-print/1388/1</link>
        <pubDate>Fri, 06 Nov 2020 18:33:26 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1388-1</guid>
        <source url="https://forum.rebol.info/t/reclaiming-bar-could-it-mean-newline-in-print/1388.rss">Reclaiming BAR! ... Could It Mean &quot;newline&quot; in PRINT?</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>USCII Seen With New Eyes</title>
    <link>https://forum.rebol.info/t/uscii-seen-with-new-eyes/1713</link>
    <description>In 2008 I used R3-Alpha to make some 5x7 bitmaps out of a stock font I found, plus some data to make symbols for the missing control characters.  The way I defined the missing characters was with blocks of data, like:

    [
        code: 10
        name: &quot;Line Feed&quot;
        abbr: &quot;LF&quot;
        description: {
            On typewriters, printers, and some terminal emulators, moves the
            cursor down one row without affecting its column position. On Unix,
            used to mark end-of-line.
        }
        image: [
            &quot;XXX  &quot;
            &quot;  X  &quot;
            &quot;  X  &quot;
            &quot;  X  &quot;
            &quot;XXXXX&quot;
            &quot; XXX &quot;
            &quot;  X  &quot;
        ]
        notes: {
            A spin on the carraige return which emphasizes the &quot;downness&quot; of
            a feed, but also with a horizontal suggestion of the current line
        }
        rating: &#39;good
    ] 

Besides not needing commas on the strings, this doesn&#39;t really buy a whole lot over JSON.  The script had a couple of talking points--that PNG encoding and IMAGE! was built in, and that you could put BINARY! data directly in your script as hex.  But largely unremarkable.

Not that the point was to demo &quot;great Rebol practices&quot;, really.  I was just using it as a tool.  *(And it was 2008, so I had just found the language...one shouldn&#39;t expect much regardless.)*

**I&#39;ve gotten it working under Redbol emulation--which is kind of a cool trick in and of itself.**  This involved patching up the bad IMAGE! code well enough to work with the script, but it felt worth it to run the rest of it.

**But the real fun begins moving to modern ideas.**  So I put aside a copy as a historical version to keep as a Redbol test, but then started updating it to the new world...

## Rethought With UTF-8 and a Dialect

When you take away the BLOCK! and start using the parts in the box, what you get is a lot more remarkable.

    === LF: Line Feed (10) ===

    ◼◼◼▢▢
    ▢▢◼▢▢
    ▢▢◼▢▢
    ▢▢◼▢▢
    ◼◼◼◼◼
    ▢◼◼◼▢
    ▢▢◼▢▢

    description: {
        On typewriters, printers, and some terminal emulators, moves the
        cursor down one row without affecting its column position. On Unix,
        used to mark end-of-line.
    }
    notes: {
        A spin on the carraige return which emphasizes the &quot;downness&quot; of
        a feed, but also with a horizontal suggestion of the current line
    }
    rating: good

It&#39;s much more interesting:

* UTF-8 means that we can use solid and hollow boxes to represent the bitmap.  They&#39;re legal characters in WORD!s, so instead of 7 TEXT!s the bitmap can be represented as 7 WORD!s and still be LOAD-able.

* A section-divider can do double duty for the attributes.  A SET-WORD! becomes the shorthand, the name can be turned into regular WORD!s spanning up to a GROUP! that contains the codepoint.

* There were multiple shorthands in some cases (e.g. 17, Device Control 1, can be known as DC1 or XON).  instead of a SET-WORD! like **LF:** that can be a SET-PATH!, like **DC1/XON:**.

* Since it&#39;s a dialect, there&#39;s no need to put a tick mark on the rating of &quot;good/fair/poor&quot;.

## A Fluid Format that You Transform With UPARSE

The first thing I did was to transform the new representation back to the old representation with UPARSE.  [I wrote about how it could be better if UPARSE had REDUCE](https://forum.rebol.info/t/collect-of-set-word-text-uparse-reduce/1712)...

So it&#39;s not optimal, and we wouldn&#39;t need such a transformation step anyway if processing directly.  You&#39;d use GATHER/EMIT.

But I&#39;m pasting it here just to make the point that in just a couple of minutes I was able to have the old code up and running on the new format:

    override-data: uparse load %uscii-5x7-english-c0.reb [
        collect [while keep ^ collect [
            &#39;===
            [
                abbr: set-word! (abbr: as text! abbr)
                | abbr: set-path! (abbr: as block! abbr)
            ]
            name: between &lt;here&gt; [code: into group! integer!]
            &#39;===

            keep (compose [
                code: (code)
                name: (spaced inert name)
                abbr: (abbr)
                image:  ; coming up...
            ])

            keep ^ collect 7 [w: word!, keep (as text! w)]

            opt [keep ^ &#39;description:, keep text!]
            opt [keep ^ &#39;notes:, keep text!]
            opt [keep ^ &#39;rating:, keep ^ ^ word!]
        ]]
    ]

## IMO, This is Rebol&#39;s &quot;Deep Lake&quot;

Breaking free of the JSON mindset and using the parts really makes this work:

[https://github.com/hostilefork/uscii/blob/master/uscii-5x7-english-c0.reb](https://github.com/hostilefork/uscii/blob/master/uscii-5x7-english-c0.reb)

Revisiting this and the Whitespace interpreter are just really good examples of the form.</description>
    
    <lastBuildDate>Sun, 12 Sep 2021 23:02:08 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/uscii-seen-with-new-eyes/1713.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>USCII Seen With New Eyes</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In 2008 I used R3-Alpha to make some 5x7 bitmaps out of a stock font I found, plus some data to make symbols for the missing control characters.  The way I defined the missing characters was with blocks of data, like:</p>
<pre><code>[
    code: 10
    name: "Line Feed"
    abbr: "LF"
    description: {
        On typewriters, printers, and some terminal emulators, moves the
        cursor down one row without affecting its column position. On Unix,
        used to mark end-of-line.
    }
    image: [
        "XXX  "
        "  X  "
        "  X  "
        "  X  "
        "XXXXX"
        " XXX "
        "  X  "
    ]
    notes: {
        A spin on the carraige return which emphasizes the "downness" of
        a feed, but also with a horizontal suggestion of the current line
    }
    rating: 'good
] 
</code></pre>
<p>Besides not needing commas on the strings, this doesn't really buy a whole lot over JSON.  The script had a couple of talking points--that PNG encoding and IMAGE! was built in, and that you could put BINARY! data directly in your script as hex.  But largely unremarkable.</p>
<p>Not that the point was to demo "great Rebol practices", really.  I was just using it as a tool.  <em>(And it was 2008, so I had just found the language...one shouldn't expect much regardless.)</em></p>
<p><strong>I've gotten it working under Redbol emulation--which is kind of a cool trick in and of itself.</strong>  This involved patching up the bad IMAGE! code well enough to work with the script, but it felt worth it to run the rest of it.</p>
<p><strong>But the real fun begins moving to modern ideas.</strong>  So I put aside a copy as a historical version to keep as a Redbol test, but then started updating it to the new world...</p>
<h2>Rethought With UTF-8 and a Dialect</h2>
<p>When you take away the BLOCK! and start using the parts in the box, what you get is a lot more remarkable.</p>
<pre><code>=== LF: Line Feed (10) ===

◼◼◼▢▢
▢▢◼▢▢
▢▢◼▢▢
▢▢◼▢▢
◼◼◼◼◼
▢◼◼◼▢
▢▢◼▢▢

description: {
    On typewriters, printers, and some terminal emulators, moves the
    cursor down one row without affecting its column position. On Unix,
    used to mark end-of-line.
}
notes: {
    A spin on the carraige return which emphasizes the "downness" of
    a feed, but also with a horizontal suggestion of the current line
}
rating: good
</code></pre>
<p>It's much more interesting:</p>
<ul>
<li>
<p>UTF-8 means that we can use solid and hollow boxes to represent the bitmap.  They're legal characters in WORD!s, so instead of 7 TEXT!s the bitmap can be represented as 7 WORD!s and still be LOAD-able.</p>
</li>
<li>
<p>A section-divider can do double duty for the attributes.  A SET-WORD! becomes the shorthand, the name can be turned into regular WORD!s spanning up to a GROUP! that contains the codepoint.</p>
</li>
<li>
<p>There were multiple shorthands in some cases (e.g. 17, Device Control 1, can be known as DC1 or XON).  instead of a SET-WORD! like <strong>LF:</strong> that can be a SET-PATH!, like <strong>DC1/XON:</strong>.</p>
</li>
<li>
<p>Since it's a dialect, there's no need to put a tick mark on the rating of "good/fair/poor".</p>
</li>
</ul>
<h2>A Fluid Format that You Transform With UPARSE</h2>
<p>The first thing I did was to transform the new representation back to the old representation with UPARSE.  <a href="https://forum.rebol.info/t/collect-of-set-word-text-uparse-reduce/1712">I wrote about how it could be better if UPARSE had REDUCE</a>...</p>
<p>So it's not optimal, and we wouldn't need such a transformation step anyway if processing directly.  You'd use GATHER/EMIT.</p>
<p>But I'm pasting it here just to make the point that in just a couple of minutes I was able to have the old code up and running on the new format:</p>
<pre><code>override-data: uparse load %uscii-5x7-english-c0.reb [
    collect [while keep ^ collect [
        '===
        [
            abbr: set-word! (abbr: as text! abbr)
            | abbr: set-path! (abbr: as block! abbr)
        ]
        name: between &lt;here&gt; [code: into group! integer!]
        '===

        keep (compose [
            code: (code)
            name: (spaced inert name)
            abbr: (abbr)
            image:  ; coming up...
        ])

        keep ^ collect 7 [w: word!, keep (as text! w)]

        opt [keep ^ 'description:, keep text!]
        opt [keep ^ 'notes:, keep text!]
        opt [keep ^ 'rating:, keep ^ ^ word!]
    ]]
]
</code></pre>
<h2>IMO, This is Rebol's "Deep Lake"</h2>
<p>Breaking free of the JSON mindset and using the parts really makes this work:</p>
<p><a href="https://github.com/hostilefork/uscii/blob/master/uscii-5x7-english-c0.reb">https://github.com/hostilefork/uscii/blob/master/uscii-5x7-english-c0.reb</a></p>
<p>Revisiting this and the Whitespace interpreter are just really good examples of the form.</p>
          <p><a href="https://forum.rebol.info/t/uscii-seen-with-new-eyes/1713/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/uscii-seen-with-new-eyes/1713/1</link>
        <pubDate>Sun, 12 Sep 2021 13:15:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1713-1</guid>
        <source url="https://forum.rebol.info/t/uscii-seen-with-new-eyes/1713.rss">USCII Seen With New Eyes</source>
      </item>
  </channel>
</rss>

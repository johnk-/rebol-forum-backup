<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Third Of The Way Through 2021 Status Report</title>
    <link>https://forum.rebol.info/t/third-of-the-way-through-2021-status-report/1599</link>
    <description>So here we are, 1/3 of the way through 2021 already.  How can things seem so long and yet time pass quickly at the same time?

One element of good news is that today marks my 2-weeks-since-second-coronvirus vaccination shot.  I&#39;m pretty sure this means I&#39;m immortal now.

Having been cooped up too long, I&#39;m going to get back to my traveling lifestyle--once I take care of some necessary business, like seeing the dentist and stuff.

So it seems a good moment to quickly take stock of what&#39;s happened since January.

## Despite Downtime And Distractions, Lots Of Good News

I&#39;ve been involved in some other things (I&#39;ve mentioned Rust programming, for instance).  And given the monotony of staying in all the time, there have been stretches of time where I didn&#39;t feel like looking at code and just watching [animal videos on YouTube all day](https://www.youtube.com/watch?v=Sdn8SNYyjxc).

Especially harrowing is trying to make progress on fundamental issues of binding and modules.  There&#39;s not some map to follow, and there may be no answer.  It can turn into a death spiral pretty easily.

So I wasn&#39;t necessarily all that optimistic I&#39;d have a good roster of things to report before I pack up and leave my island prison.  **But as luck would have it...a lot of things started working out and clicking into place!**

## Most Obvious Major Success Story: [UPARSE](https://forum.rebol.info/t/introducing-uparse-the-hackable-usermode-parse/1529)

Rebol PARSE boasts a nice gimmick of the mixture of BLOCK!s for rules and GROUP!s for imperative code.  The groups have sequencing of rules implicit just by having one follow another...no special operator or function calls required.

But I&#39;d been lamenting for a while that it really wasn&#39;t packing the punch it should, especially when compared to things like Haskell parser combinators.  You couldn&#39;t make new PARSE keywords, and it was too locked down in terms of extracting little bits of series without being able to leverage abstraction to build bigger things.

When I started writing a combinator-based UPARSE--the way someone who didn&#39;t know C might try writing it within the language--I didn&#39;t know how successful it would be.  The only thing I knew was that it would be very slow (so long as none of the combinators were written as natives).  But what emerged is very, very good!

The backbone of difference in UPARSE surrounds rules not only knowing how much input they consume, but also having a &quot;synthesized product&quot;.  Especially satisfying is how this uses multiple-return values, which had some progress on improving their performance and hardening their feature set.

There are still many open questions.  But what is clear is that leveraging the evaluator and frame mechanics is a *HUGE* win...as opposed to trying to write some limited and super-optimized state machine.  This is truly code that vindicates my attention to the design how action invocations can be reified, reflected, and manipulated as FRAME! objects.

*(I&#39;m sure that some of the hesitance people have had to try writing their own PARSE in Rebol is related to speed when it runs.  But it&#39;s also the case that historical Rebol2/Red/R3-Alpha just don&#39;t have good bones for doing a generic combinator parse dialect.  The code would be a nightmare. 
 But Ren-C is far more powerful, so it is actually looking quite legible and good!)*

As I tried to build in abilities like dealing with invisible combinators inside of the UPARSE engine, this drew out the fact that we didn&#39;t have good mechanics for that.  The ideas that had been simmering and percolating around things like modal parameters finally clicked... into a **[comprehensive plan for how @ forms could let code deal with invisibility and null isotopes](https://forum.rebol.info/t/emergent-behavior-of-x-x-y-x-y/1596)**.

## Less Obvious Major Success Story: [&quot;Sea Of Words&quot;](https://forum.rebol.info/t/the-sea-of-words/1564)

Commits related to this haven&#39;t made it to master yet.  But the results are very, very promising...and it means we shouldn&#39;t have to worry about binding-to-typos in the future.  Something like JavaScript&#39;s &quot;strict mode&quot; will be within our grasp.

The observation I made in [Don&#39;t Fear the WORD!](https://forum.rebol.info/t/dont-fear-the-word/1549) really seems like it is poignant to realizing what the difference of this medium is.  Ren-C has been putting together the mechanics to make this feasible...being able to GC word spellings just as strings are GC&#39;d.  We just need to make the binding model account for it.

## Priority Adjustments

Top priority for this year was: &quot;Kick the tires of virtual binding, optimize and clean it up as necessary&quot;.  That kind of got subsumed into the module work and sea of words, which will continue to be *the* major issue.

I talked stacklessness getting integrated.  Given that stackless is written, the major point of it has been made...I know how to design for it, and bits of it have been grafted in.  Our real question remains about locking, and the language&#39;s general lack of destructors and lifetime management.  What I&#39;ve seen in Rust makes me think we might want to use something similar...to distinguish reference-counted objects to ones that are managed by an implicit borrowing protocol.  I don&#39;t think there&#39;s really any other solution if we want any kind of destructors for things like iterators.

Debugging...well...the best I can say on that front is that the shape of UPARSE is very friendly to debugging.  And the protocol surrounding @ is adding new smart ideas on how return results can go &quot;meta&quot; when doing something like a usermode TRACE.

As I said above, I&#39;ll have to see how much other stuff I get involved in before I can get a sense of how much to realistically expect to get done this year.  But there is a lot going on, and a lot to get excited about--if one is the sort of person who is excited by this sort of thing.  :tophat:</description>
    
    <lastBuildDate>Fri, 07 May 2021 18:51:36 +0000</lastBuildDate>
    <category>Announcements</category>
    <atom:link href="https://forum.rebol.info/t/third-of-the-way-through-2021-status-report/1599.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Third Of The Way Through 2021 Status Report</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>For what you have done so far, you are practical immortal already. We just need to make Ren-C a worldwide success to make it more widely known.</p>
          <p><a href="https://forum.rebol.info/t/third-of-the-way-through-2021-status-report/1599/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/third-of-the-way-through-2021-status-report/1599/2</link>
        <pubDate>Fri, 07 May 2021 18:51:36 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1599-2</guid>
        <source url="https://forum.rebol.info/t/third-of-the-way-through-2021-status-report/1599.rss">Third Of The Way Through 2021 Status Report</source>
      </item>
      <item>
        <title>Third Of The Way Through 2021 Status Report</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So here we are, 1/3 of the way through 2021 already.  How can things seem so long and yet time pass quickly at the same time?</p>
<p>One element of good news is that today marks my 2-weeks-since-second-coronvirus vaccination shot.  I'm pretty sure this means I'm immortal now.</p>
<p>Having been cooped up too long, I'm going to get back to my traveling lifestyle--once I take care of some necessary business, like seeing the dentist and stuff.</p>
<p>So it seems a good moment to quickly take stock of what's happened since January.</p>
<h2>Despite Downtime And Distractions, Lots Of Good News</h2>
<p>I've been involved in some other things (I've mentioned Rust programming, for instance).  And given the monotony of staying in all the time, there have been stretches of time where I didn't feel like looking at code and just watching <a href="https://www.youtube.com/watch?v=Sdn8SNYyjxc">animal videos on YouTube all day</a>.</p>
<p>Especially harrowing is trying to make progress on fundamental issues of binding and modules.  There's not some map to follow, and there may be no answer.  It can turn into a death spiral pretty easily.</p>
<p>So I wasn't necessarily all that optimistic I'd have a good roster of things to report before I pack up and leave my island prison.  <strong>But as luck would have it...a lot of things started working out and clicking into place!</strong></p>
<h2>Most Obvious Major Success Story: <a href="https://forum.rebol.info/t/introducing-uparse-the-hackable-usermode-parse/1529">UPARSE</a>
</h2>
<p>Rebol PARSE boasts a nice gimmick of the mixture of BLOCK!s for rules and GROUP!s for imperative code.  The groups have sequencing of rules implicit just by having one follow another...no special operator or function calls required.</p>
<p>But I'd been lamenting for a while that it really wasn't packing the punch it should, especially when compared to things like Haskell parser combinators.  You couldn't make new PARSE keywords, and it was too locked down in terms of extracting little bits of series without being able to leverage abstraction to build bigger things.</p>
<p>When I started writing a combinator-based UPARSE--the way someone who didn't know C might try writing it within the language--I didn't know how successful it would be.  The only thing I knew was that it would be very slow (so long as none of the combinators were written as natives).  But what emerged is very, very good!</p>
<p>The backbone of difference in UPARSE surrounds rules not only knowing how much input they consume, but also having a "synthesized product".  Especially satisfying is how this uses multiple-return values, which had some progress on improving their performance and hardening their feature set.</p>
<p>There are still many open questions.  But what is clear is that leveraging the evaluator and frame mechanics is a <em>HUGE</em> win...as opposed to trying to write some limited and super-optimized state machine.  This is truly code that vindicates my attention to the design how action invocations can be reified, reflected, and manipulated as FRAME! objects.</p>
<p><em>(I'm sure that some of the hesitance people have had to try writing their own PARSE in Rebol is related to speed when it runs.  But it's also the case that historical Rebol2/Red/R3-Alpha just don't have good bones for doing a generic combinator parse dialect.  The code would be a nightmare.<br>
But Ren-C is far more powerful, so it is actually looking quite legible and good!)</em></p>
<p>As I tried to build in abilities like dealing with invisible combinators inside of the UPARSE engine, this drew out the fact that we didn't have good mechanics for that.  The ideas that had been simmering and percolating around things like modal parameters finally clicked... into a <strong><a href="https://forum.rebol.info/t/emergent-behavior-of-x-x-y-x-y/1596">comprehensive plan for how @ forms could let code deal with invisibility and null isotopes</a></strong>.</p>
<h2>Less Obvious Major Success Story: <a href="https://forum.rebol.info/t/the-sea-of-words/1564">"Sea Of Words"</a>
</h2>
<p>Commits related to this haven't made it to master yet.  But the results are very, very promising...and it means we shouldn't have to worry about binding-to-typos in the future.  Something like JavaScript's "strict mode" will be within our grasp.</p>
<p>The observation I made in <a href="https://forum.rebol.info/t/dont-fear-the-word/1549">Don't Fear the WORD!</a> really seems like it is poignant to realizing what the difference of this medium is.  Ren-C has been putting together the mechanics to make this feasible...being able to GC word spellings just as strings are GC'd.  We just need to make the binding model account for it.</p>
<h2>Priority Adjustments</h2>
<p>Top priority for this year was: "Kick the tires of virtual binding, optimize and clean it up as necessary".  That kind of got subsumed into the module work and sea of words, which will continue to be <em>the</em> major issue.</p>
<p>I talked stacklessness getting integrated.  Given that stackless is written, the major point of it has been made...I know how to design for it, and bits of it have been grafted in.  Our real question remains about locking, and the language's general lack of destructors and lifetime management.  What I've seen in Rust makes me think we might want to use something similar...to distinguish reference-counted objects to ones that are managed by an implicit borrowing protocol.  I don't think there's really any other solution if we want any kind of destructors for things like iterators.</p>
<p>Debugging...well...the best I can say on that front is that the shape of UPARSE is very friendly to debugging.  And the protocol surrounding @ is adding new smart ideas on how return results can go "meta" when doing something like a usermode TRACE.</p>
<p>As I said above, I'll have to see how much other stuff I get involved in before I can get a sense of how much to realistically expect to get done this year.  But there is a lot going on, and a lot to get excited about--if one is the sort of person who is excited by this sort of thing.  <img src="https://forum.rebol.info/images/emoji/twitter/tophat.png?v=9" title=":tophat:" class="emoji" alt=":tophat:"></p>
          <p><a href="https://forum.rebol.info/t/third-of-the-way-through-2021-status-report/1599/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/third-of-the-way-through-2021-status-report/1599/1</link>
        <pubDate>Fri, 07 May 2021 11:00:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1599-1</guid>
        <source url="https://forum.rebol.info/t/third-of-the-way-through-2021-status-report/1599.rss">Third Of The Way Through 2021 Status Report</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Multiple Return Values</title>
    <link>https://forum.rebol.info/t/multiple-return-values/1134</link>
    <description>&gt; **UPDATE:** [The described functionality now exists](https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271/2?u=hostilefork), with the mentioned issues resolved.  :partying_face: 

We now have the mythical **SET-BLOCK!** and **GET-BLOCK!**.  You can write:

    multi-return: function [a b] [
        return :[(a * 3) (b - 16)]
    ]

    &gt;&gt; [x y]: multi-return 10 20
    == [30 4]

    &gt;&gt; x
    == 30
    
    &gt;&gt; y
    == 4

That&#39;s relatively cool.  And you don&#39;t have to take all the values...

    &gt;&gt; [x]: [10 20]
    == [10 20]

    &gt;&gt; x
    == 10

You have to know that it&#39;s returning multiple values though.  Using a plain SET-WORD! will get you the block:

    &gt;&gt; x: some-function-i-didnt-know-was-multi-return ...
    == [ret1 ret2 ret3]  ; the block! could easily be mistaken for single return

## But I&#39;ve been having one of those ideas that just won&#39;t go away...

Rather than choose between **[x]:** and **[x y]:** and knowing in advance how many values you&#39;re taking or throwing away, I&#39;ve wanted someone who only wants one value to be blissfully ignorant.  So the choice would be between:

    &gt;&gt; x: multi-return ...
    &gt;&gt; [x y]: multi-return ...

So even though the first case is a multiple return, you wouldn&#39;t set x to a block of values, *but just get the first value*.

This would require some kind of magic.

## Here&#39;s a stab at what &quot;magic&quot; might look like...

What if AT-BLOCK! (&quot;new LIT-BLOCK!?&quot;) wasn&#39;t just inert, but had a special relationship with SET, SET-BLOCK!s and SET-WORD!s?

    &gt;&gt; reduce [@[10 20]]
    == @[10 20]

    &gt;&gt; reduce [x: @[10 20]]
    == 10  ; the 20 just vaporizes in the assignment
    &gt;&gt; x
    == 10
    
    &gt;&gt; reduce [[x y]: @[10 20]]
    == [10 20]
    &gt;&gt; x
    == 10
    &gt;&gt; y
    == 20

This would let you upgrade functions to have more return values without the user knowing it.

The only catch is when you&#39;re trying to work with these AT-BLOCK!s literally.  Assignment is such a foundational thing that undermining it has consequences.

You&#39;d need a way to do a hard SET.  That could be done via SET/ONLY or similar.  But for a briefer notation, perhaps SET-GROUP! could be a SET/ONLY?

    &gt;&gt; (x): @[10 20]
    == @[10 20]

    &gt;&gt; x
    == @[10 20]

It seems so incredibly useful that I feel we *must* try something along these lines, even if just to put the notion out of my head so I don&#39;t keep thinking about it!</description>
    
    <lastBuildDate>Sat, 01 Feb 2020 04:50:29 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/multiple-return-values/1134.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Multiple Return Values</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>This is one of those ideas that won't go away, and seems one of the most useful ideas for SET-BLOCK!</p>
<p>But I think the idea of having a SET-BLOCK! evaluate to a BLOCK! with the elements is misguided.  e.g.</p>
<pre><code>&gt;&gt; [x y]: [30 4]
== [30 4]
</code></pre>
<aside class="quote no-group quote-modified" data-post="1" data-topic="1134">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>&gt;&gt; x
== 30

&gt;&gt; y
== 4

&gt;&gt; [x]: [10 20]
== [10 20]

&gt;&gt; x
== 10
</code></pre>
</blockquote>
</aside>
<p>We know you can't put NULL in blocks.  But NULL is a pretty important return value.</p>
<p>One thing that comes up here is that since you can't put NULL in blocks, you'd have to do something else for the return result, if it's going to be a block.  You could fib a little and do the normal assignment, but then either put a VOID! or a BLANK! in the position.</p>
<pre><code>&gt;&gt; [x]: null
== [#[void]]  ; presumably "safer" than the more innocuous BLANK! ? 

&gt;&gt; get 'x
; null  ; &lt;-- still got set to null
</code></pre>
<p>That's a bit of a bummer, because I'd thought it might be nice if <strong>[x]: something</strong> could be used as a way of ensuring that the assign did not produce null.  :-/  But that's something that seems to be handled by the likes of <strong>x: non null something</strong> in a pretty literate way that's more generic (and we've discussed shorthands like MUST or THE, etc.)</p>
<p>I think it would be important that if a function wanted to do multiple returns that it could know how many results it was assigning.  This could save calculation on things that aren't needed.</p>
          <p><a href="https://forum.rebol.info/t/multiple-return-values/1134/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/multiple-return-values/1134/5</link>
        <pubDate>Sat, 01 Feb 2020 04:50:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1134-5</guid>
        <source url="https://forum.rebol.info/t/multiple-return-values/1134.rss">Multiple Return Values</source>
      </item>
      <item>
        <title>Multiple Return Values</title>
        <dc:creator><![CDATA[LkpPo]]></dc:creator>
        <description><![CDATA[
            <p>It seems like a lua feature. <a href="https://www.lua.org/pil/5.1.html" rel="nofollow noopener">Multiple return values</a> that work with <a href="https://www.lua.org/pil/4.1.html" rel="nofollow noopener">multiple assignment of variables</a>, but also of the <a href="https://www.lua.org/pil/5.2.html" rel="nofollow noopener">parameters</a> of a calling function.</p>
          <p><a href="https://forum.rebol.info/t/multiple-return-values/1134/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/multiple-return-values/1134/4</link>
        <pubDate>Wed, 10 Apr 2019 03:33:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1134-4</guid>
        <source url="https://forum.rebol.info/t/multiple-return-values/1134.rss">Multiple Return Values</source>
      </item>
      <item>
        <title>Multiple Return Values</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="1134">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>One question</p>
</blockquote>
</aside>
<p>That's six questions.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=7" title=":slight_smile:" class="emoji" alt=":slight_smile:">  But good ones...</p>
<blockquote>
<p>what do functions see?</p>
</blockquote>
<p>Yep, this is the slippery bit.  It's difficult when you have:</p>
<pre><code>data: [1 &lt;a&gt; @[b c]]
foo: pick data 3
</code></pre>
<p>If PICK comes back with <code>@[b c]</code> it will look like a multi-return.  So it's like PICK has to be marked as <em>not</em> a multi-returning function, and the evaluator knows not to treat it as such.</p>
<p>So that might suggest this is a narrow feature about the behavior of SET-BLOCK!s and a certain kind of function.  It may be that AT-BLOCK!s don't have anything to do with it.</p>
<p>In such a case, if you wanted to pass the multiple returns you might have to use <strong><code>some-func :(multi-func ...)</code></strong> or another notation if you wanted to ask for the full value as an argument.</p>
<p>Definitely a lot of thinking to do here, feel free to write up some examples... I just wanted to mention it as something that it seems like we're actually able to look into now, that I think would be cool.</p>
          <p><a href="https://forum.rebol.info/t/multiple-return-values/1134/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/multiple-return-values/1134/3</link>
        <pubDate>Thu, 28 Mar 2019 06:33:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1134-3</guid>
        <source url="https://forum.rebol.info/t/multiple-return-values/1134.rss">Multiple Return Values</source>
      </item>
      <item>
        <title>Multiple Return Values</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>Yup, sounds really useful.<br>
One question, what do functions see?</p>
<p>f: function [a][]<br>
f multi-return</p>
<p>Does f get the return as a block, or the first value?</p>
<p>What happens with multiple parameters in f? With refinements? With variadics? When f is enfixed?</p>
          <p><a href="https://forum.rebol.info/t/multiple-return-values/1134/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/multiple-return-values/1134/2</link>
        <pubDate>Thu, 28 Mar 2019 06:09:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1134-2</guid>
        <source url="https://forum.rebol.info/t/multiple-return-values/1134.rss">Multiple Return Values</source>
      </item>
      <item>
        <title>Multiple Return Values</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p><strong>UPDATE:</strong> <a href="https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271/2">The described functionality now exists</a>, with the mentioned issues resolved.  <img src="https://forum.rebol.info/images/emoji/twitter/partying_face.png?v=9" title=":partying_face:" class="emoji" alt=":partying_face:"></p>
</blockquote>
<p>We now have the mythical <strong>SET-BLOCK!</strong> and <strong>GET-BLOCK!</strong>.  You can write:</p>
<pre><code>multi-return: function [a b] [
    return :[(a * 3) (b - 16)]
]

&gt;&gt; [x y]: multi-return 10 20
== [30 4]

&gt;&gt; x
== 30

&gt;&gt; y
== 4
</code></pre>
<p>That's relatively cool.  And you don't have to take all the values...</p>
<pre><code>&gt;&gt; [x]: [10 20]
== [10 20]

&gt;&gt; x
== 10
</code></pre>
<p>You have to know that it's returning multiple values though.  Using a plain SET-WORD! will get you the block:</p>
<pre><code>&gt;&gt; x: some-function-i-didnt-know-was-multi-return ...
== [ret1 ret2 ret3]  ; the block! could easily be mistaken for single return
</code></pre>
<h2>But I've been having one of those ideas that just won't go away...</h2>
<p>Rather than choose between <strong>[x]:</strong> and <strong>[x y]:</strong> and knowing in advance how many values you're taking or throwing away, I've wanted someone who only wants one value to be blissfully ignorant.  So the choice would be between:</p>
<pre><code>&gt;&gt; x: multi-return ...
&gt;&gt; [x y]: multi-return ...
</code></pre>
<p>So even though the first case is a multiple return, you wouldn't set x to a block of values, <em>but just get the first value</em>.</p>
<p>This would require some kind of magic.</p>
<h2>Here's a stab at what "magic" might look like...</h2>
<p>What if AT-BLOCK! ("new LIT-BLOCK!?") wasn't just inert, but had a special relationship with SET, SET-BLOCK!s and SET-WORD!s?</p>
<pre><code>&gt;&gt; reduce [@[10 20]]
== @[10 20]

&gt;&gt; reduce [x: @[10 20]]
== 10  ; the 20 just vaporizes in the assignment
&gt;&gt; x
== 10

&gt;&gt; reduce [[x y]: @[10 20]]
== [10 20]
&gt;&gt; x
== 10
&gt;&gt; y
== 20
</code></pre>
<p>This would let you upgrade functions to have more return values without the user knowing it.</p>
<p>The only catch is when you're trying to work with these AT-BLOCK!s literally.  Assignment is such a foundational thing that undermining it has consequences.</p>
<p>You'd need a way to do a hard SET.  That could be done via SET/ONLY or similar.  But for a briefer notation, perhaps SET-GROUP! could be a SET/ONLY?</p>
<pre><code>&gt;&gt; (x): @[10 20]
== @[10 20]

&gt;&gt; x
== @[10 20]
</code></pre>
<p>It seems so incredibly useful that I feel we <em>must</em> try something along these lines, even if just to put the notion out of my head so I don't keep thinking about it!</p>
          <p><a href="https://forum.rebol.info/t/multiple-return-values/1134/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/multiple-return-values/1134/1</link>
        <pubDate>Thu, 28 Mar 2019 01:56:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1134-1</guid>
        <source url="https://forum.rebol.info/t/multiple-return-values/1134.rss">Multiple Return Values</source>
      </item>
  </channel>
</rss>

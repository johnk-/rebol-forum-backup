<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Theory of Symbols and Repurposing `? ?` and `! !`</title>
    <link>https://forum.rebol.info/t/theory-of-symbols-and-repurposing-and/834</link>
    <description>As I&#39;ve said before: it&#39;s good to try new things--and Ren-C has plenty of ideas that turned out to be winners (or led to a path of evolution to something that was a winner).  BUT if a change doesn&#39;t come out as a winner, it needs to be rethought and possibly backed out.

I think the use of `??` and `!!` as a kind of ternary operator has turned out to be a turkey.

These were chosen because they &quot;stand out&quot; a bit more than something like C&#39;s **condition ? true-thing : false-thing;** ternary operator.  That is why [Perl6 chose them over simply **`?`** and **`!`**](https://www.oreilly.com/library/view/perl-6-deep/9781787282049/8f44a788-52d0-4264-b46d-d433f8b61e83.xhtml).  Doubling that makes them stick out like a sore thumb.

For a time I liked it, studying the construct in isolation.  If you pulled up examples they looked okay.  Yet taking a step back from the page, they looked odd in context.

&gt; **UPDATE:** The facility that the ?? and !! operators used to provide have been replaced by [soft-quoted branching](https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020).  Really it is superior to have  **if condition [code] else &#39;3**  instead of the likes of  **if condition [code] !! 3**.  So hey, we tried a Perl-ism for a bit, and found a cross-cutting solution for all branching constructs that is better!

## But can sticking out like a sore thumb be used better?

Hence, *this property may be something you want to do with constructs that are designed to be *transient*, and not committed in code*.  This makes me think that **??**&#39;s previous purpose as a debug construct might have been superior.  Then as you visually scan the code you can tell if you&#39;ve left debugging information in--it jumps right off the page.   By a similar token, **!!** seems like it might make a great breakpoint.</description>
    
    <lastBuildDate>Sat, 17 Nov 2018 22:00:16 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/theory-of-symbols-and-repurposing-and/834.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Theory of Symbols and Repurposing `? ?` and `! !`</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Going further along these lines, I propose that <code>**</code> not be infix power, rather that be just <strong><code>pow</code></strong>.</p>
<p>Remember that infix left-tight (the R3-Alpha way) grabs its <em>immediate</em> evaluated left argument:</p>
<pre><code>&gt;&gt; power 2 2 + 1
== 8.0

&gt;&gt; 2 pow 2 + 1
== 5.0
</code></pre>
<p>And incidentally, that's the name of the standard C library function for power.</p>
<p>After seeing how <a href="https://forum.rebol.info/t/taking-a-thrilling-tour-through-the-dump/909">use-it-every-day useful <strong><code>--</code></strong> has become</a>, hopefully this gets everyone thinking... what cool symbolic purpose might <strong><code>**</code></strong> serve?  How about <strong><code>++</code></strong>?</p>
          <p><a href="https://forum.rebol.info/t/theory-of-symbols-and-repurposing-and/834/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/theory-of-symbols-and-repurposing-and/834/6</link>
        <pubDate>Sat, 17 Nov 2018 22:00:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-834-6</guid>
        <source url="https://forum.rebol.info/t/theory-of-symbols-and-repurposing-and/834.rss">Theory of Symbols and Repurposing `? ?` and `! !`</source>
      </item>
      <item>
        <title>Theory of Symbols and Repurposing `? ?` and `! !`</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="1" data-topic="834">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Hence, <em>this property may be something you want to do with constructs that are designed to be <em>transient</em> , and not committed in code</em> . This makes me think that <strong>??</strong> 's previous purpose as a debug construct might have been superior. Then as you visually scan the code you can tell if you’ve left debugging information in–it jumps right off the page. By a similar token, <strong>!!</strong> seems like it might make a great breakpoint.</p>
</blockquote>
</aside>
<p>Having immersed myself into this mindset a bit, I am pretty much convinced of it.  Because the idea of taking super-common debug routines and making them easy to type and spot is so compelling, I feel like PROBE has to be in that set.  So I've been thinking this might be arranged such that:</p>
<ul>
<li>
<strong><code>--</code></strong> is an alias for DUMP <em>(now that we have <a href="https://trello.com/c/8Bmwvwya/" rel="nofollow noopener">the ME and MY operators</a>)</em>
</li>
<li>
<strong><code>??</code></strong> is an alias for PROBE</li>
<li>
<strong><code>!!</code></strong> is an alias for BREAKPOINT (invisible)</li>
<li>
<strong><code>...</code></strong> is "TBD" (non-invisible/valued breakpoint, gives opportunity to resume w/value)</li>
</ul>
<p>With "invisibles" like COMMENT and ELIDE rocking the scene (in a very good way), it's extremely nice having <strong>--</strong> acting as DUMP did, and being invisible.  Especially since DUMP treats strings just as labels.</p>
<pre><code>all [
   some-condition
   -- "got past first step"
   some-other [12 (condition) 34]
   -- "got past second step"
   more-stuff #running &lt;whatever&gt;
]
</code></pre>
<p>If you were putting in throw away debug output, why would you ever use a PRINT?  DUMP is flexible and can be made even moreso.  Here you have invisibility (doesn't affect the ALL's logic), and an easy way of spotting when you've left the debug code in.</p>
<p><em>(Note: I've been wanting to make an argument that PRINT should probably only take BLOCK! and TEXT!, for reasonings very similar to why there was <a href="https://forum.rebol.info/t/backpedaling-on-non-block-branches/476">backpedaling on non-block branches</a>.  This might help bolster that argument, since casual dumping and printing of variables for debugging would have a superior solution.)</em></p>
<p>It's neat.  So it feels like historical Rebol had a good thing going with this direction, and Ren-C has made that thing even better.  Taking back <strong><code>--</code></strong> for nobler purposes was a good step, and taking back <strong><code>==</code></strong> (see <a href="https://forum.rebol.info/t/strict-equality-lax-equality-equivalence-sameness-is-and/349">the IS and = plan</a>) will be another forward step.</p>
<p>Apologies to Perl6, but we're now back to using zero ideas from perl again.  <img src="//forum.rebol.info/images/emoji/twitter/slight_smile.png?v=7" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://forum.rebol.info/t/theory-of-symbols-and-repurposing-and/834/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/theory-of-symbols-and-repurposing-and/834/4</link>
        <pubDate>Fri, 12 Oct 2018 07:40:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-834-4</guid>
        <source url="https://forum.rebol.info/t/theory-of-symbols-and-repurposing-and/834.rss">Theory of Symbols and Repurposing `? ?` and `! !`</source>
      </item>
      <item>
        <title>Theory of Symbols and Repurposing `? ?` and `! !`</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p><strong>Note:</strong> Here was the old implementation code for ??, !!, and a false-triggered variant called <code>?!</code></p>
</blockquote>
<hr>
<pre><code>??: enfix func [
    {If TO-LOGIC of the left is true, return right value, otherwise null}

    return: [&lt;opt&gt; any-value!]
    left [&lt;opt&gt; any-value!]
    right [&lt;opt&gt; any-value!]
][
    if :left [:right] ;-- will voidify result if right is null
]
</code></pre>
<hr>
<pre><code>!!: enfix func [
    {If left isn't null, return it, else return value on the right}

    return: [&lt;opt&gt; any-value!]
    left [&lt;opt&gt; any-value!]
    right [&lt;opt&gt; any-value!]
][
    :left else [:right] ;-- will *not* voidify result if right is null
]
</code></pre>
<hr>
<pre><code>?!: enfix func [ ;-- name suggests shorthand of `left ?? () !! right`
    {If TO LOGIC! of the left is false, return right value, otherwise null}

    return: [&lt;opt&gt; any-value!]
    left [&lt;opt&gt; any-value!]
    right [&lt;opt&gt; any-value!]
][
    if-not :left [:right] ;-- will voidify result if right is null
]</code></pre>
          <p><a href="https://forum.rebol.info/t/theory-of-symbols-and-repurposing-and/834/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/theory-of-symbols-and-repurposing-and/834/3</link>
        <pubDate>Sat, 29 Sep 2018 17:22:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-834-3</guid>
        <source url="https://forum.rebol.info/t/theory-of-symbols-and-repurposing-and/834.rss">Theory of Symbols and Repurposing `? ?` and `! !`</source>
      </item>
      <item>
        <title>Theory of Symbols and Repurposing `? ?` and `! !`</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p><strong>Note:</strong> Here was the old Trello card content about <code>??</code> and <code>!!</code></p>
</blockquote>
<hr>
<pre><code>&gt;&gt; 1 &gt; 2 ?? [greater than] !! [less than]
== [less than]

&gt;&gt; 2 &gt; 1 ?? [greater than] !! [less than]
== [greater than]

&gt;&gt; print ["Two is" (2 &gt; 1 ?? "not") "less than one"]
== Two is not less than one

&gt;&gt; if 1 &lt; 2 [print "they mix"] !! [&lt;like&gt; #this]
they mix

&gt;&gt; if 1 &gt; 2 [print "they mix"] !! [&lt;like&gt; #this]
== [&lt;like&gt; #this]

&gt;&gt; select [a b c] 'b !! "no-match"
== c

&gt;&gt; select [a b c] 'd !! "no-match"
== "no-match"
</code></pre>
<hr>
<blockquote>
<p><em>"The <code>??</code> and <code>!!</code> operators resemble the function of C's <code>condition ? true-clause : false-clause</code>, but are much more flexible.   They can be mixed and matched with other conditional constructs."</em></p>
<p><em>"Because <code>!!</code> tests for nullness on its left, it's a good fit for slipping in a default value when an operation returns nulls."</em></p>
<p><em>"Like AND, <code>??</code> tests for logic on its left.  There is an <code>?!</code> operator which tests for logic false on the left.  But currently no version that tests for valueness on the left (e.g. a parallel to THEN)."</em></p>
<p>"Note that if you say <code>1 &lt; 2 ?? 3 + 3 !! 4 + 4</code>, both additions will be run.  To "block" evaluation, there has to be a BLOCK! somewhere (or a GROUP! that is quoted), hence these are not meant as a generic alternative to AND and ELSE."</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/theory-of-symbols-and-repurposing-and/834/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/theory-of-symbols-and-repurposing-and/834/2</link>
        <pubDate>Sat, 29 Sep 2018 17:21:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-834-2</guid>
        <source url="https://forum.rebol.info/t/theory-of-symbols-and-repurposing-and/834.rss">Theory of Symbols and Repurposing `? ?` and `! !`</source>
      </item>
      <item>
        <title>Theory of Symbols and Repurposing `? ?` and `! !`</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>As I've said before: it's good to try new things--and Ren-C has plenty of ideas that turned out to be winners (or led to a path of evolution to something that was a winner).  BUT if a change doesn't come out as a winner, it needs to be rethought and possibly backed out.</p>
<p>I think the use of <code>??</code> and <code>!!</code> as a kind of ternary operator has turned out to be a turkey.</p>
<p>These were chosen because they "stand out" a bit more than something like C's <strong>condition ? true-thing : false-thing;</strong> ternary operator.  That is why <a href="https://www.oreilly.com/library/view/perl-6-deep/9781787282049/8f44a788-52d0-4264-b46d-d433f8b61e83.xhtml" rel="nofollow noopener">Perl6 chose them over simply <strong><code>?</code></strong> and <strong><code>!</code></strong></a>.  Doubling that makes them stick out like a sore thumb.</p>
<p>For a time I liked it, studying the construct in isolation.  If you pulled up examples they looked okay.  Yet taking a step back from the page, they looked odd in context.</p>
<blockquote>
<p><strong>UPDATE:</strong> The facility that the ?? and !! operators used to provide have been replaced by <a href="https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020">soft-quoted branching</a>.  Really it is superior to have  <strong>if condition [code] else '3</strong>  instead of the likes of  <strong>if condition [code] !! 3</strong>.  So hey, we tried a Perl-ism for a bit, and found a cross-cutting solution for all branching constructs that is better!</p>
</blockquote>
<h2>But can sticking out like a sore thumb be used better?</h2>
<p>Hence, <em>this property may be something you want to do with constructs that are designed to be <em>transient</em>, and not committed in code</em>.  This makes me think that <strong>??</strong>'s previous purpose as a debug construct might have been superior.  Then as you visually scan the code you can tell if you've left debugging information in--it jumps right off the page.   By a similar token, <strong>!!</strong> seems like it might make a great breakpoint.</p>
          <p><a href="https://forum.rebol.info/t/theory-of-symbols-and-repurposing-and/834/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/theory-of-symbols-and-repurposing-and/834/1</link>
        <pubDate>Sat, 29 Sep 2018 16:40:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-834-1</guid>
        <source url="https://forum.rebol.info/t/theory-of-symbols-and-repurposing-and/834.rss">Theory of Symbols and Repurposing `? ?` and `! !`</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>NULL Isotope Naming Issues</title>
    <link>https://forum.rebol.info/t/null-isotope-naming-issues/1417</link>
    <description>I&#39;m moving ahead, quickly, with **[NULL isotopes](https://forum.rebol.info/t/null-blank-void-history-under-scrutiny/1249/11?u=hostilefork)**.

Firstly I&#39;ll say that the analogy to atomic isotopes is an extremely apt one.  So this isn&#39;t likely to just be a codename--it would be user-facing terminology: *&quot;isotope&quot;*, *&quot;decay&quot;*, *&quot;heavy null&quot;*, *&quot;light null&quot;*.

For background reading on precedent for names and notation, check out the [Wikpiedia Article on Tritium](https://en.wikipedia.org/wiki/Tritium).  (I&#39;m linking Tritium instead of Deuterium because it is radioactive, while Deuterium is stable.)

**No matter what notation is chosen**, I want the console to show which kind of NULL you have.  If we want to help reinforce the &quot;counting the number of nullons&quot;, maybe it&#39;s done with a number:

    &gt;&gt; if false [&lt;whatever&gt;]
    ; null

    &gt;&gt; if true [null]
    ; null-2

More fanciful representations are possible:

    &gt;&gt; if false [&lt;whatever&gt;]
    ; ¹null

    &gt;&gt; if true [null]
    ; ²null

But if there&#39;s going to be a function that generates these isotopes out of thin air, it should probably be easy to type:

    &gt;&gt; null then [print &quot;This won&#39;t print.&quot;]
    ; null

    &gt;&gt; null-2 then [print &quot;This prints.&quot;]
    This prints.
    == ~void~

The canon property of the isotope is reactivity to THEN and ELSE, which suggests that rather than convoluted names for the tests (like **null?/light**) we can do better with that:

    &gt;&gt; else? null
    == #[true]

    &gt;&gt; else? null-2
    == #[false]

## Grokking The &quot;Gotcha&quot; In The Mechanic

I want to point out what we&#39;re trading off here.  We&#39;re making what seems to be 99% of cases easier to handle, while creating a small glitch in substitutability:

    &gt;&gt; (x: if true [null]) else [print &quot;As likely desired, this won&#39;t run.&quot;]
    ; null-2

    &gt;&gt; x else [print &quot;But going through variable substitution WILL run.&quot;]
    But going through variable substitution WILL run.
    == ~void~

    &gt;&gt; x
    ; null   &lt;- here is why: WORD!-fetch decayed it, so no longer null-2

A little strange, but explainable.  And when you compare to the headaches that voidification brought, this is a much more minor amount of pain to bear.

Notice that even in the first case, passing through assignment to a SET-WORD! didn&#39;t disrupt the value on the evaluator stack.

## So... With That Laid Down... Naming?

I actually first wrote `NULL+` ... but quickly moved away from that, because that suggests *charge*, and we&#39;re deliberately talking about *isotopes* and not *ions*.  The distinction is important, because the &quot;superficial reactivity&quot; is unchanged:

    &gt;&gt; null? if true [null]
    == #[true]

    &gt;&gt; null? if false [&lt;whatever&gt;]
    == #[true]

So I thought maybe `NULL*` to indicate some kind of...uncharged augmentation.  @BlackATTR thought that looked kind of wildcard-y.

`NULL-T` or `T-NULL` could imply it is &quot;THEN-reactive&quot;

    &gt;&gt; null-t then [print &quot;causes then to run...&quot;]
    causes then to run...
    == ~void~

    &gt;&gt; t-null then [print &quot;causes then to run...&quot;]
    causes then to run...
    == ~void~

I actually am kind of drawn to the small leading decoration for the heavy null, with nothing on the &quot;light&quot; null:

    &gt;&gt; if false [&lt;whatever&gt;]
    ; null

    &gt;&gt; if true [null]
    ; ²null

What I like there is the concept that it kind of fades out unless you need to pay attention to it.

**I&#39;m probably just going to go with NULL-2 for the moment, with the aforementioned ELSE? test to check if a value is a NULL-2.**

---

*&quot;The essence of architecture is the suppression of information not necessary to the task at hand, and so it is somehow fitting that the very nature of architecture is such that it never presents its whole self to us but only a facet or two at a time.&quot;*</description>
    
    <lastBuildDate>Tue, 24 Aug 2021 02:49:57 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/null-isotope-naming-issues/1417.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>NULL Isotope Naming Issues</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1417">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Most BAD-WORD! isotopes can't be passed to the condition of IF at all, because it's not a ^META parameter. So the question of whether they are "truthy" or "falsey" does not apply, since all the tests for truth don't allow isotopes to be passed.</p>
<p>But the ~null~ isotope is special, because it converts itself into a plain NULL when passed to a non-^META parameter:</p>
</blockquote>
</aside>
<p>This concession arose from a desire to try to appease people like <a class="mention" href="/u/rgchris">@rgchris</a> who believe they do not need ELSE or THEN, to sweep the isotope under the rug.</p>
<p>Looking at the ripples of inconsistency this creates, I think the learnable/better solution is just to give you a tool to turn isotopes that are representative of values back to the value they are an isotope of.</p>
<pre><code>&gt;&gt; match blank! _
== ~blank~  ; isotope

&gt;&gt; decay match blank! _
== _

&gt;&gt; if true [null]
== ~null~  ; isotope

&gt;&gt; decay if true [null]
; null
</code></pre>
<p>You still get the decay on variable assignment:</p>
<pre><code>&gt;&gt; x: if true [null]
== ~null~  ; isotope

&gt;&gt; x
; null
</code></pre>
<p>And also on RETURN by default (the RETURN/ISOTOPE will suppress the decay).</p>
<pre><code>&gt;&gt; foo: func [] [return if true [null]]
&gt;&gt; foo
; null

&gt;&gt; bar: func [] [return/isotope if true [null]]
&gt;&gt; bar
== ~null~  ; isotope
</code></pre>
<p>Having to use DECAY to pass ~null~ isotopes to normal parameters is a bit of a thorn.  But the trouble is that if we subvert it, we lose the benefits isotopes are there to provide.</p>
<p>Consider this example of something that would happen in less contrived circumstances:</p>
<pre><code> data: ["a" b &lt;c&gt;]

 until [
     item: take data
     if word? item [
         item: null
     ]
     match [&lt;opt&gt; integer!] item
 ]
</code></pre>
<p>It looks like we're trying to end the loop once the item is either null or an integer.  But NULL is falsey, so MATCH needs to give back a ~null~ isotope.</p>
<p>Some contexts can treat a null isotope like a NULL on a case-by-case basis.  This shows one that can't: <strong>UNTIL actually cares about the intent of truth or falsehood.  The existence of a null isotope is to keep the "null intent" while disabling its participation in things that might react to it as "falsey" or "branch not taken"</strong></p>
<p>For any given function parameter, you can't tell whether it matters automatically.  The condition in an IF needs to react differently to a ~blank~ from a BLANK!, but a REDUCE doesn't have to.</p>
<pre><code>&gt;&gt; reduce [match [integer! blank!] _]
== [_]  ; reduce can safely convert ~blank~ isotopes to _
</code></pre>
<p>The REDUCE knows it's not looking at the truth or falsehood, so it can restore the blank.  But an IF has to error:</p>
<pre><code>&gt;&gt; if match [integer! blank!] _ [print "needs to error!"]
** Error: IF doesn't allow ~blank~ isotope as its condition parameter
</code></pre>
<h2>The Grand Theory Of Isotopes is Coming Together</h2>
<p>Isotopes represent special cases of communicating intent, while saying that the value is "in limbo".  The default reaction to things in limbo is to error on them.  But if you know how to handle them, you can.</p>
<p>I'll write it up in more detail with some of the truly interesting examples of problems they solve.  But the upshot is, ~null~ is like all the other bad-word isotopes, and neither true nor false!</p>
          <p><a href="https://forum.rebol.info/t/null-isotope-naming-issues/1417/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/null-isotope-naming-issues/1417/3</link>
        <pubDate>Tue, 24 Aug 2021 02:49:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1417-3</guid>
        <source url="https://forum.rebol.info/t/null-isotope-naming-issues/1417.rss">NULL Isotope Naming Issues</source>
      </item>
      <item>
        <title>NULL Isotope Naming Issues</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So the update now is that there is no separate datatype for "null isotopes".  Rather, the only things that have isotopes are BAD-WORD!s.</p>
<p>Like other BAD-WORD!s, evaluating ~null~ makes it into an isotope.</p>
<pre><code>&gt;&gt; ~null~
== ~null~  ; isotope
</code></pre>
<p>This isotope is also the product when branch is taken and evaluates to NULL:</p>
<pre><code>&gt;&gt; if true [null]
== ~null~  ; isotope
</code></pre>
<p>Most BAD-WORD! isotopes can't be passed to the condition of IF at all, because it's not a ^META parameter.  So the question of whether they are "truthy" or "falsey" does not apply, since all the tests for truth don't allow isotopes to be passed.</p>
<p>But the ~null~ isotope is special, because it converts itself into a plain NULL when passed to a non-^META parameter:</p>
<pre><code>&gt;&gt; normal: func [x] [probe x, return none]

&gt;&gt; normal 1020
== 1020

&gt;&gt; normal null
; null

&gt;&gt; normal ~null~
; null
</code></pre>
<p>A ^META parameter can tell the difference; removing the isotope state (and leaving the null as-is):</p>
<pre><code>&gt;&gt; detector: func [^x] [probe x, return none]

&gt;&gt; detector 1020
== '1020

&gt;&gt; detector null
; null

&gt;&gt; detector ~null~
~null~
</code></pre>
<p><strong>So the reason why the <code>~null~</code> isotope appears to be falsey is because of this translation!</strong>  It's not actually falsey at all, but all the logic detecting functions take normal parameters so they see it as a plain null...</p>
<pre><code>&gt;&gt; did ~null~
== #[false]

&gt;&gt; did if true [null]
== #[false]
</code></pre>
<p>The same reason that NULL? can't tell the difference...it doesn't take a meta parameter, so the ~null~ isotope looks like NULL to it:</p>
<pre><code>&gt;&gt; null? ~null~
== #[true]

&gt;&gt; null? if true [null]
== #[true]
</code></pre>
<p>The non-isotope form of <strong>~null~</strong> is neither true nor false, like other BAD-WORD!s:</p>
<pre><code>&gt;&gt; second [a ~null~ b]
== ~null~

&gt;&gt; did second [a ~null~ b]
** Script Error: BAD-WORD! values aren't conditionally true or false
</code></pre>
<h2>ELSE, THEN, ALSO, etc. Detect via ^META Parameters</h2>
<p>We saw above that if you take a ^param instead of a normal param, you have the information to distinguish.  That's exactly what ELSE does with its left hand side.</p>
<pre><code>&gt;&gt; null else [print "This runs!"]
This runs!

&gt;&gt; ~null~ else [print "This doesn't!"]

&gt;&gt; ~null~ then [print "But this does!"]
But this does!

&gt;&gt; if true [null] else [print "This won't run!"]
== ~null~  ; isotope
</code></pre>
<p>Hopefully if you're following enough of this it's starting to make sense.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<h2>So Just Call It "The Null Isotope" or "~null~ isotope"</h2>
<p>There might be some creative writing somewhere that refers to it as being the "heavy" form, but that's not really necessary.</p>
<p>Terms like NULL-2 are not needed.</p>
          <p><a href="https://forum.rebol.info/t/null-isotope-naming-issues/1417/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/null-isotope-naming-issues/1417/2</link>
        <pubDate>Sun, 20 Jun 2021 21:22:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1417-2</guid>
        <source url="https://forum.rebol.info/t/null-isotope-naming-issues/1417.rss">NULL Isotope Naming Issues</source>
      </item>
      <item>
        <title>NULL Isotope Naming Issues</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I'm moving ahead, quickly, with <strong><a href="https://forum.rebol.info/t/null-blank-void-history-under-scrutiny/1249/11">NULL isotopes</a></strong>.</p>
<p>Firstly I'll say that the analogy to atomic isotopes is an extremely apt one.  So this isn't likely to just be a codename--it would be user-facing terminology: <em>"isotope"</em>, <em>"decay"</em>, <em>"heavy null"</em>, <em>"light null"</em>.</p>
<p>For background reading on precedent for names and notation, check out the <a href="https://en.wikipedia.org/wiki/Tritium">Wikpiedia Article on Tritium</a>.  (I'm linking Tritium instead of Deuterium because it is radioactive, while Deuterium is stable.)</p>
<p><strong>No matter what notation is chosen</strong>, I want the console to show which kind of NULL you have.  If we want to help reinforce the "counting the number of nullons", maybe it's done with a number:</p>
<pre><code>&gt;&gt; if false [&lt;whatever&gt;]
; null

&gt;&gt; if true [null]
; null-2
</code></pre>
<p>More fanciful representations are possible:</p>
<pre><code>&gt;&gt; if false [&lt;whatever&gt;]
; ¹null

&gt;&gt; if true [null]
; ²null
</code></pre>
<p>But if there's going to be a function that generates these isotopes out of thin air, it should probably be easy to type:</p>
<pre><code>&gt;&gt; null then [print "This won't print."]
; null

&gt;&gt; null-2 then [print "This prints."]
This prints.
== ~void~
</code></pre>
<p>The canon property of the isotope is reactivity to THEN and ELSE, which suggests that rather than convoluted names for the tests (like <strong>null?/light</strong>) we can do better with that:</p>
<pre><code>&gt;&gt; else? null
== #[true]

&gt;&gt; else? null-2
== #[false]
</code></pre>
<h2>Grokking The "Gotcha" In The Mechanic</h2>
<p>I want to point out what we're trading off here.  We're making what seems to be 99% of cases easier to handle, while creating a small glitch in substitutability:</p>
<pre><code>&gt;&gt; (x: if true [null]) else [print "As likely desired, this won't run."]
; null-2

&gt;&gt; x else [print "But going through variable substitution WILL run."]
But going through variable substitution WILL run.
== ~void~

&gt;&gt; x
; null   &lt;- here is why: WORD!-fetch decayed it, so no longer null-2
</code></pre>
<p>A little strange, but explainable.  And when you compare to the headaches that voidification brought, this is a much more minor amount of pain to bear.</p>
<p>Notice that even in the first case, passing through assignment to a SET-WORD! didn't disrupt the value on the evaluator stack.</p>
<h2>So... With That Laid Down... Naming?</h2>
<p>I actually first wrote <code>NULL+</code> ... but quickly moved away from that, because that suggests <em>charge</em>, and we're deliberately talking about <em>isotopes</em> and not <em>ions</em>.  The distinction is important, because the "superficial reactivity" is unchanged:</p>
<pre><code>&gt;&gt; null? if true [null]
== #[true]

&gt;&gt; null? if false [&lt;whatever&gt;]
== #[true]
</code></pre>
<p>So I thought maybe <code>NULL*</code> to indicate some kind of...uncharged augmentation.  <a class="mention" href="/u/blackattr">@BlackATTR</a> thought that looked kind of wildcard-y.</p>
<p><code>NULL-T</code> or <code>T-NULL</code> could imply it is "THEN-reactive"</p>
<pre><code>&gt;&gt; null-t then [print "causes then to run..."]
causes then to run...
== ~void~

&gt;&gt; t-null then [print "causes then to run..."]
causes then to run...
== ~void~
</code></pre>
<p>I actually am kind of drawn to the small leading decoration for the heavy null, with nothing on the "light" null:</p>
<pre><code>&gt;&gt; if false [&lt;whatever&gt;]
; null

&gt;&gt; if true [null]
; ²null
</code></pre>
<p>What I like there is the concept that it kind of fades out unless you need to pay attention to it.</p>
<p><strong>I'm probably just going to go with NULL-2 for the moment, with the aforementioned ELSE? test to check if a value is a NULL-2.</strong></p>
<hr>
<p><em>"The essence of architecture is the suppression of information not necessary to the task at hand, and so it is somehow fitting that the very nature of architecture is such that it never presents its whole self to us but only a facet or two at a time."</em></p>
          <p><a href="https://forum.rebol.info/t/null-isotope-naming-issues/1417/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/null-isotope-naming-issues/1417/1</link>
        <pubDate>Wed, 25 Nov 2020 18:02:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1417-1</guid>
        <source url="https://forum.rebol.info/t/null-isotope-naming-issues/1417.rss">NULL Isotope Naming Issues</source>
      </item>
  </channel>
</rss>

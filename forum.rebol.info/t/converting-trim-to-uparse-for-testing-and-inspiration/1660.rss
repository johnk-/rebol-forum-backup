<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Converting TRIM To UPARSE for Testing And Inspiration</title>
    <link>https://forum.rebol.info/t/converting-trim-to-uparse-for-testing-and-inspiration/1660</link>
    <description>A long time ago, @Brett converted the circuitous native code for TRIM from R3-Alpha to PARSE-based usermode code.

Since we have that code--and some tests for it--I thought it would be a good idea to go ahead and try running it under UPARSE.  This would be another way of testing UPARSE...as well as to see if the new features gave it any kind of leg up.  We could also look for inspirations for new features...

## New Features: `&lt;index&gt;` and MEASURE Combinators

There was a calculation of indentation done for the TRIM/AUTO feature.  It uses PARSE* which is the version that doesn&#39;t require matching to the end of the input.  *(Though since it doesn&#39;t check the result and doesn&#39;t do any operations which would roll back, it doesn&#39;t make a difference.)*

    indent: _
    if auto [
        parse* series [
            ; Don&#39;t count empty lines, (e.g. trim/auto {^/^/^/    asdf})
            remove [while LF]

            (indent: 0)
            s: &lt;here&gt;, some rule, e: &lt;here&gt;
            (indent: (index of e) - (index of s))
        ]
    ]

The first thought I had is that with TAG! combinators, though we lost the ability to match TAG!s without a quote like `[some &#39;&lt;tag&gt;]`...we have a nice noun-space to play with that doesn&#39;t interfere with variable name nouns.  So what if `&lt;index&gt;` gave you the index position in the current series?

That makes it a bit nicer:

    indent: _
    if auto [
        parse* series [
            ; Don&#39;t count empty lines, (e.g. trim/auto {^/^/^/    asdf})
            remove [while LF]

            s: &lt;index&gt;, while rule, e: &lt;index&gt;, (indent: e - s)
        ]
    ]

I also changed the SOME to a WHILE, which always succeeds...and since `&lt;index&gt;` always succeeds there&#39;s no need to pre-emptively set the indent to 0.

But wouldn&#39;t this pattern make a nice combinator in and of itself?  Something that can tell you how long a matched range is.  Well, uparse fans, meet **MEASURE**!

    indent: _
    if auto [
        parse* series [
            ; Don&#39;t count empty lines, (e.g. trim/auto {^/^/^/    asdf})
            remove [while LF]

            indent: measure while rule
        ]
    ]

And look how easy the combinator is to write *(it&#39;s one of those that can just use the default rollback)*:

    measure: combinator [
        {Get the length of a matched portion of content}
        return: &quot;Length in series units&quot;
            [&lt;opt&gt; integer!]
        parser [action!]
        &lt;local&gt; s e
    ][
        ([# (remainder)]: parser input) else [return null]  ; ignore result

        e: index of get remainder
        s: index of input

        if s &gt; e [  ; could also return something like ~bad-seek~ isotope
            fail &quot;Can&#39;t MEASURE region where rules did a SEEK before the INPUT&quot;
        ]

        return e - s
    ]

## That&#39;s A Pretty Good Start!

It seems to me that what the TRIM code needs is probably a bit better definition of the semantics.  TRIM/AUTO is a bit strange:

    &gt;&gt; utrim/auto &quot;  x^/ y^/   z^/&quot;
    == &quot;x^/ y^/ z^/&quot;

It indents relative to the first non-newline-line...but that creates an issue of what to do about the line that comes after it which is *less* indented.  The rule for processing lines was:

    line-start-rule: compose/deep [
        remove [((if indent [[opt repeat (indent)]] else [&#39;while])) rule]
    ]

The **indent** not being a BLANK! implies TRIM/AUTO.

That&#39;s a /DEEP compose that does splicing (signified these days by **`((...))`**.  I rewrote the rule to be a bit clearer as:

    line-start-rule: compose [
        remove (if indent &#39;[opt repeat (indent) rule] else &#39;[while rule])
    ]

That&#39;s more pleasing to me, as well as more efficient.  It&#39;s a nice use of the quoted branches!

But back to the semantics: *is this right?*  It could also slam the less indented lines to the left by moving the OPT.

    line-start-rule: compose [
        remove (if indent &#39;[repeat (indent) opt rule] else &#39;[while rule])
    ]

That would make the **`y`** flush with the left:

    &gt;&gt; utrim/auto &quot;  x^/ y^/   z^/&quot;
    == &quot;x^/y^/ z^/&quot;

Anyway... let&#39;s keep those UPARSE test cases coming!  It&#39;s to a point now where UPARSE is more reliable than R3-Alpha-derived native PARSE (I&#39;m calling PARSE3) and Red.  So it&#39;s revealing the bugs and inconsistencies in those codebases, not vice versa.  :-)</description>
    
    <lastBuildDate>Sat, 14 Aug 2021 07:28:36 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/converting-trim-to-uparse-for-testing-and-inspiration/1660.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Converting TRIM To UPARSE for Testing And Inspiration</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="Brett" data-post="3" data-topic="1660">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/brett/40/177_2.png" class="avatar"> Brett:</div>
<blockquote>
<p>people might find this parsing flexibility indispensable and want it to run at production speed</p>
</blockquote>
</aside>
<p>It is indispensible, and I think that speeding it up will be not just within feasibility, but have the appealing effect of speeding up the general facilities of the language!</p>
<aside class="quote quote-modified" data-post="1" data-topic="1636">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar">
    <a href="https://forum.rebol.info/t/progress-on-nativizing-parser-combinators/1636">Progress on Nativizing Parser Combinators</a> <a class="badge-wrapper  bullet" href="/c/domains/parsing/16"><span class="badge-category-parent-bg" style="background-color: #F1592A;"></span><span class="badge-category-bg" style="background-color: #F1592A;"></span><span style="" data-drop-close="true" class="badge-category clear-badge" title="Discussion focusing on parsing data.">Parsing</span></a>
  </div>
  <blockquote>
    So... let's start with a virtual machine I have...where r3-alpha gets this time for a rather simple parse operation: 
r3-alpha&gt;&gt; delta-time [
     parse "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" [
         some [opt "c" opt "b" opt "a"]
     ]
 ]
 == 0:00:00.000020  ; averages around here on 

UPARSE was written with design consideration only; it wasn't even optimized usermode code.  Performance was no object.  And of course, that shows: 
uparse-on-day-zero&gt;&gt; delta-time [
     uparse "aaaaaaaaaaaaaâ€¦
  </blockquote>
</aside>

<p>But the next great challenge I'd like to be able to prototype is to be able to run on top of an abstracted pipe vs. marching along directly in memory.  If we could do that, we could run on network data...or be processing a continuously feeding pipe from a CALL session that is being scripted and reacted to.</p>
<p>It might be another one of those "you get what you pay for" situations with the combinators.  If the combinator only accepts ANY-SERIES! input and not PORT!, then it might be more limited.  But we'd want the stock combinators to be able to run on either.</p>
<p>Point being: still more prototyping work to be done before the optimizing!</p>
          <p><a href="https://forum.rebol.info/t/converting-trim-to-uparse-for-testing-and-inspiration/1660/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/converting-trim-to-uparse-for-testing-and-inspiration/1660/5</link>
        <pubDate>Sat, 14 Aug 2021 07:28:36 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1660-5</guid>
        <source url="https://forum.rebol.info/t/converting-trim-to-uparse-for-testing-and-inspiration/1660.rss">Converting TRIM To UPARSE for Testing And Inspiration</source>
      </item>
      <item>
        <title>Converting TRIM To UPARSE for Testing And Inspiration</title>
        <dc:creator><![CDATA[Brett]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1660">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>To something simpler:</p>
<pre><code class="lang-auto">line-start-rule: [opt remove repeat (indent) rule]
</code></pre>
</blockquote>
</aside>
<p>This power of expressiveness to simplify to the essence of the intent is great.</p>
          <p><a href="https://forum.rebol.info/t/converting-trim-to-uparse-for-testing-and-inspiration/1660/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/converting-trim-to-uparse-for-testing-and-inspiration/1660/4</link>
        <pubDate>Sat, 14 Aug 2021 05:54:08 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1660-4</guid>
        <source url="https://forum.rebol.info/t/converting-trim-to-uparse-for-testing-and-inspiration/1660.rss">Converting TRIM To UPARSE for Testing And Inspiration</source>
      </item>
      <item>
        <title>Converting TRIM To UPARSE for Testing And Inspiration</title>
        <dc:creator><![CDATA[Brett]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1660">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><a class="mention" href="/u/brett">@Brett</a> converted the circuitous native code for TRIM from R3-Alpha to PARSE-based usermode code.</p>
</blockquote>
</aside>
<p>Don't think I can claim that, I think that was your efforts with a little modifcation and tests work from me.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1660">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>And look how easy the combinator is to write</p>
</blockquote>
</aside>
<p>Careful, people might find this parsing flexibility indispensable and want it to run at production speed.</p>
          <p><a href="https://forum.rebol.info/t/converting-trim-to-uparse-for-testing-and-inspiration/1660/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/converting-trim-to-uparse-for-testing-and-inspiration/1660/3</link>
        <pubDate>Sat, 14 Aug 2021 05:52:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1660-3</guid>
        <source url="https://forum.rebol.info/t/converting-trim-to-uparse-for-testing-and-inspiration/1660.rss">Converting TRIM To UPARSE for Testing And Inspiration</source>
      </item>
      <item>
        <title>Converting TRIM To UPARSE for Testing And Inspiration</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>And now a little more magic <img src="https://forum.rebol.info/images/emoji/twitter/mage.png?v=9" title=":mage:" class="emoji" alt=":mage:"> to hopefully keep <a class="mention" href="/u/brett">@Brett</a> in the impressed-zone...</p>
<p>Let's take a second look at the LINE-START_RULE</p>
<blockquote>
<pre><code>line-start-rule: compose [
    remove (if indent '[opt repeat (indent) rule] else '[while rule])
]
</code></pre>
</blockquote>
<p>I began adding ranged REPEATs with blocks, such as <strong>repeat ([2 3]) integer!</strong> - this is more hygienic than <strong>2 3 integer!</strong> which creates semantic problems by not being equivalent to <strong>2 [3 integer!]</strong>.</p>
<p>Also: if your min and max are in variables, it's clearer to have the REPEAT construct there vs. opaquely reading <strong>foo bar rule</strong> and not knowing that's going to wind up with FOO and BAR being integers that are iteration limits.  Writing <strong>repeat (:[foo bar]) rule</strong> makes that a lot clearer.  (Remember that GET-BLOCK!s reduce now.)</p>
<p>But I had a thought that BLANK! should be able to opt-out of REPEAT to make it a no-op:</p>
<pre><code>&gt;&gt; num-b: _

&gt;&gt; uparse? "aaa" [repeat (num-b) "b", some "a"]
== #[true]
</code></pre>
<p>We allow this in the REPEAT iterative loop to opt out, so why not here?  That made me wonder about opting out of the BLOCK! form.  Presumably <strong>repeat ([_ _]) rule</strong> would be a no-op also.  But what if you only half opted out?  What's <strong>repeat ([_ 3]) rule</strong> or <strong>repeat ([3 _]) rule</strong> ?</p>
<p>Furthermore, that thought had a tricky cousin...</p>
<h2>What About <em>Opting In</em> ?</h2>
<p>If you could "opt in" to a REPEAT... like all the way in... you could say that it was a synonym for WHILE.  Basically have some token that represented an arbitrarily large integer.</p>
<p>So I used <strong>#</strong>, which is what's being used elsewhere to opt-in.  It's what refinements with no arguments have as a parameter value when they are requested.  It's how you indicate a multi-return value you don't want to give a name to, but still want to have the semantics of requesting.  And now it means "no limit".</p>
<p>Under this set of rules, <strong>repeat ([3 #]) rule</strong> will match the rule at least 3 times, but any number of times more than that.  While <strong>repeat ([3 _]) rule</strong> is just a synonym for <strong>repeat (3) rule</strong>...that can come in handy when you're trying to write code that generically uses min and max but has the ability to decay to not.</p>
<p>Using this idea and defaulting indent to # instead of _, we can rewrite our rule from:</p>
<pre><code>line-start-rule: compose [
    remove (if indent '[opt repeat (indent) rule] else '[while rule])
]
</code></pre>
<p>To something simpler:</p>
<pre><code>line-start-rule: [opt remove repeat (indent) rule]
</code></pre>
<h2>Still Elevating <img src="https://forum.rebol.info/images/emoji/twitter/arrow_double_up.png?v=9" title=":arrow_double_up:" class="emoji" alt=":arrow_double_up:"> The Art <img src="https://forum.rebol.info/images/emoji/twitter/framed_picture.png?v=9" title=":framed_picture:" class="emoji" alt=":framed_picture:"> in 2021 !</h2>
          <p><a href="https://forum.rebol.info/t/converting-trim-to-uparse-for-testing-and-inspiration/1660/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/converting-trim-to-uparse-for-testing-and-inspiration/1660/2</link>
        <pubDate>Sat, 14 Aug 2021 04:02:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1660-2</guid>
        <source url="https://forum.rebol.info/t/converting-trim-to-uparse-for-testing-and-inspiration/1660.rss">Converting TRIM To UPARSE for Testing And Inspiration</source>
      </item>
      <item>
        <title>Converting TRIM To UPARSE for Testing And Inspiration</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A long time ago, <a class="mention" href="/u/brett">@Brett</a> converted the circuitous native code for TRIM from R3-Alpha to PARSE-based usermode code.</p>
<p>Since we have that code--and some tests for it--I thought it would be a good idea to go ahead and try running it under UPARSE.  This would be another way of testing UPARSE...as well as to see if the new features gave it any kind of leg up.  We could also look for inspirations for new features...</p>
<h2>New Features: <code>&lt;index&gt;</code> and MEASURE Combinators</h2>
<p>There was a calculation of indentation done for the TRIM/AUTO feature.  It uses PARSE* which is the version that doesn't require matching to the end of the input.  <em>(Though since it doesn't check the result and doesn't do any operations which would roll back, it doesn't make a difference.)</em></p>
<pre><code>indent: _
if auto [
    parse* series [
        ; Don't count empty lines, (e.g. trim/auto {^/^/^/    asdf})
        remove [while LF]

        (indent: 0)
        s: &lt;here&gt;, some rule, e: &lt;here&gt;
        (indent: (index of e) - (index of s))
    ]
]
</code></pre>
<p>The first thought I had is that with TAG! combinators, though we lost the ability to match TAG!s without a quote like <code>[some '&lt;tag&gt;]</code>...we have a nice noun-space to play with that doesn't interfere with variable name nouns.  So what if <code>&lt;index&gt;</code> gave you the index position in the current series?</p>
<p>That makes it a bit nicer:</p>
<pre><code>indent: _
if auto [
    parse* series [
        ; Don't count empty lines, (e.g. trim/auto {^/^/^/    asdf})
        remove [while LF]

        s: &lt;index&gt;, while rule, e: &lt;index&gt;, (indent: e - s)
    ]
]
</code></pre>
<p>I also changed the SOME to a WHILE, which always succeeds...and since <code>&lt;index&gt;</code> always succeeds there's no need to pre-emptively set the indent to 0.</p>
<p>But wouldn't this pattern make a nice combinator in and of itself?  Something that can tell you how long a matched range is.  Well, uparse fans, meet <strong>MEASURE</strong>!</p>
<pre><code>indent: _
if auto [
    parse* series [
        ; Don't count empty lines, (e.g. trim/auto {^/^/^/    asdf})
        remove [while LF]

        indent: measure while rule
    ]
]
</code></pre>
<p>And look how easy the combinator is to write <em>(it's one of those that can just use the default rollback)</em>:</p>
<pre><code>measure: combinator [
    {Get the length of a matched portion of content}
    return: "Length in series units"
        [&lt;opt&gt; integer!]
    parser [action!]
    &lt;local&gt; s e
][
    ([# (remainder)]: parser input) else [return null]  ; ignore result

    e: index of get remainder
    s: index of input

    if s &gt; e [  ; could also return something like ~bad-seek~ isotope
        fail "Can't MEASURE region where rules did a SEEK before the INPUT"
    ]

    return e - s
]
</code></pre>
<h2>That's A Pretty Good Start!</h2>
<p>It seems to me that what the TRIM code needs is probably a bit better definition of the semantics.  TRIM/AUTO is a bit strange:</p>
<pre><code>&gt;&gt; utrim/auto "  x^/ y^/   z^/"
== "x^/ y^/ z^/"
</code></pre>
<p>It indents relative to the first non-newline-line...but that creates an issue of what to do about the line that comes after it which is <em>less</em> indented.  The rule for processing lines was:</p>
<pre><code>line-start-rule: compose/deep [
    remove [((if indent [[opt repeat (indent)]] else ['while])) rule]
]
</code></pre>
<p>The <strong>indent</strong> not being a BLANK! implies TRIM/AUTO.</p>
<p>That's a /DEEP compose that does splicing (signified these days by <strong><code>((...))</code></strong>.  I rewrote the rule to be a bit clearer as:</p>
<pre><code>line-start-rule: compose [
    remove (if indent '[opt repeat (indent) rule] else '[while rule])
]
</code></pre>
<p>That's more pleasing to me, as well as more efficient.  It's a nice use of the quoted branches!</p>
<p>But back to the semantics: <em>is this right?</em>  It could also slam the less indented lines to the left by moving the OPT.</p>
<pre><code>line-start-rule: compose [
    remove (if indent '[repeat (indent) opt rule] else '[while rule])
]
</code></pre>
<p>That would make the <strong><code>y</code></strong> flush with the left:</p>
<pre><code>&gt;&gt; utrim/auto "  x^/ y^/   z^/"
== "x^/y^/ z^/"
</code></pre>
<p>Anyway... let's keep those UPARSE test cases coming!  It's to a point now where UPARSE is more reliable than R3-Alpha-derived native PARSE (I'm calling PARSE3) and Red.  So it's revealing the bugs and inconsistencies in those codebases, not vice versa.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://forum.rebol.info/t/converting-trim-to-uparse-for-testing-and-inspiration/1660/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/converting-trim-to-uparse-for-testing-and-inspiration/1660/1</link>
        <pubDate>Fri, 13 Aug 2021 23:09:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1660-1</guid>
        <source url="https://forum.rebol.info/t/converting-trim-to-uparse-for-testing-and-inspiration/1660.rss">Converting TRIM To UPARSE for Testing And Inspiration</source>
      </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Dialecting Power of NewPath /REF/(INE)/[MENT]</title>
    <link>https://forum.rebol.info/t/the-dialecting-power-of-newpath-ref-ine-ment/1401</link>
    <description>*(Note: I have been calling **/FOO/BAR** a &quot;refinement&quot;, so **refinement? &#39;/foo/bar** is true)*

---

For a long while, I was hesitant to commit **`/foo`** to being inert, because I wondered if there was some greater meaning for it in binding.

But now I&#39;m resigned to it.  Which gives a somewhat interesting result: a whole category of bound dialecting parts that you know *aren&#39;t* meant as variable references.

We already see how well this works with TUPLE! and predicates.  If they weren&#39;t inert, you&#39;d have to worry that **until .not.even? [...]** should be interpreted as **(until .not.even?), ([...])**

## What Cool Role Could Refinements Have?

The original suggestion for predicates actually used refinements.  But **until /not/even? [...]** didn&#39;t seem to be as good, so tuple was used.

But is there a good use at callsites?

Something I observed today was that **`/(...)`** and **`/[...]`** open up a new GROUP! and BLOCK! type, at the very least.  What might this mean in PARSE, and could it be connected to a meaning for words like **/rule** or **/obj/member** ?

The only connotation refinements have right now is &quot;optionality&quot; and...*parameter-ness*?  The optionality could be one focus:

    &gt;&gt; did parse [a c] [&#39;a /[&#39;b] &#39;c]  ; synonym for `opt [&#39;b]`
    == #[true]

    rule: [&#39;b]
    &gt;&gt; did parse [a c] [&#39;a /rule &#39;c]  ; synonym for `opt rule`
    == #[true]

That&#39;s not compelling, clearly.  But I&#39;m just trying to stimulate thoughts on what it might be used for.

Perhaps it could be the &quot;matches literally, not as a rule&quot; concept?

    &gt;&gt; data: [some integer!]

    &gt;&gt; parse [[some integer!] [some integer!]] [2 /data]
    == [[some integer!] [some integer!]]

This could build conceptually on the &quot;more inert&quot; form (as opposed to an active rule).  Though I kind of liked the &quot;as-is&quot; connotation of @data.  But perhaps this would be easier on the eyes.

*This points out something I hadn&#39;t thought about...* that refinements could have been used for other signals:

    &gt;&gt; append [a b c] [d e]
    == [a b c d e]

    &gt;&gt; append [a b c] /[d e]
    == [a b c [d e]]

    &gt;&gt; append [a b c] &#39;/[d e]
    == [a b c /[d e]]

    &gt;&gt; data: [d e]
    &gt;&gt; append [a b c] /data
    == [a b c [d e]]

I had a vague inkling that it might be used in blaming function parameters:

    &gt;&gt; foo: func [x] [fail /x &quot;Pointing at problem&quot;]

     &gt;&gt; foo 10
    ** Error: Pointing at problem
    ** Where: foo console
    ** Near: [foo 10 **]  ; note it indicates callsite, not the FAIL site

That sort of makes sense, because /FOO is likely to be used in the apply dialect to name parameters.  So this could be seen as better than **`fail @foo`**.  What makes me a little uncomfortable with it is that paths and URLs will be legal as the error ID, so having a &quot;slashed thing&quot; might seem repetitive in a way that the @ would not.

*This is just a brainstorm pointing out the existence of an available new-old-type.*  I&#39;d be interested to hear any ideas or feelings on what PARSE might do with it...

## Then...What About GET and SET Forms?

There&#39;s four assignment forms to deal with:

* **`.foo.bar:`**
* **`:.foo.bar`**
* **`/foo/bar:`**
* **`:/foo/bar`**

What would these be for?

I&#39;ve proposed terminal slash and dot be a commentary on whether the thing being gotten or assigned is allowed to be an action or not.  Though that seems to make **:foo.bar.** and **foo.bar.** synonymous, as the GET only has impact on actions...and you&#39;re assuring it&#39;s not one.

Just more stuff to think about.  My suggestion for anything that doesn&#39;t have an interesting novel answer yet is to just make it error...to save it for meaning something in the future.</description>
    
    <lastBuildDate>Fri, 13 Nov 2020 14:14:48 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/the-dialecting-power-of-newpath-ref-ine-ment/1401.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Dialecting Power of NewPath /REF/(INE)/[MENT]</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em>(Note: I have been calling <strong>/FOO/BAR</strong> a "refinement", so <strong>refinement? '/foo/bar</strong> is true)</em></p>
<hr>
<p>For a long while, I was hesitant to commit <strong><code>/foo</code></strong> to being inert, because I wondered if there was some greater meaning for it in binding.</p>
<p>But now I'm resigned to it.  Which gives a somewhat interesting result: a whole category of bound dialecting parts that you know <em>aren't</em> meant as variable references.</p>
<p>We already see how well this works with TUPLE! and predicates.  If they weren't inert, you'd have to worry that <strong>until .not.even? [...]</strong> should be interpreted as <strong>(until .not.even?), ([...])</strong></p>
<h2>What Cool Role Could Refinements Have?</h2>
<p>The original suggestion for predicates actually used refinements.  But <strong>until /not/even? [...]</strong> didn't seem to be as good, so tuple was used.</p>
<p>But is there a good use at callsites?</p>
<p>Something I observed today was that <strong><code>/(...)</code></strong> and <strong><code>/[...]</code></strong> open up a new GROUP! and BLOCK! type, at the very least.  What might this mean in PARSE, and could it be connected to a meaning for words like <strong>/rule</strong> or <strong>/obj/member</strong> ?</p>
<p>The only connotation refinements have right now is "optionality" and...<em>parameter-ness</em>?  The optionality could be one focus:</p>
<pre><code>&gt;&gt; did parse [a c] ['a /['b] 'c]  ; synonym for `opt ['b]`
== #[true]

rule: ['b]
&gt;&gt; did parse [a c] ['a /rule 'c]  ; synonym for `opt rule`
== #[true]
</code></pre>
<p>That's not compelling, clearly.  But I'm just trying to stimulate thoughts on what it might be used for.</p>
<p>Perhaps it could be the "matches literally, not as a rule" concept?</p>
<pre><code>&gt;&gt; data: [some integer!]

&gt;&gt; parse [[some integer!] [some integer!]] [2 /data]
== [[some integer!] [some integer!]]
</code></pre>
<p>This could build conceptually on the "more inert" form (as opposed to an active rule).  Though I kind of liked the "as-is" connotation of <span class="mention">@data</span>.  But perhaps this would be easier on the eyes.</p>
<p><em>This points out something I hadn't thought about...</em> that refinements could have been used for other signals:</p>
<pre><code>&gt;&gt; append [a b c] [d e]
== [a b c d e]

&gt;&gt; append [a b c] /[d e]
== [a b c [d e]]

&gt;&gt; append [a b c] '/[d e]
== [a b c /[d e]]

&gt;&gt; data: [d e]
&gt;&gt; append [a b c] /data
== [a b c [d e]]
</code></pre>
<p>I had a vague inkling that it might be used in blaming function parameters:</p>
<pre><code>&gt;&gt; foo: func [x] [fail /x "Pointing at problem"]

 &gt;&gt; foo 10
** Error: Pointing at problem
** Where: foo console
** Near: [foo 10 **]  ; note it indicates callsite, not the FAIL site
</code></pre>
<p>That sort of makes sense, because /FOO is likely to be used in the apply dialect to name parameters.  So this could be seen as better than <strong><code>fail @foo</code></strong>.  What makes me a little uncomfortable with it is that paths and URLs will be legal as the error ID, so having a "slashed thing" might seem repetitive in a way that the @ would not.</p>
<p><em>This is just a brainstorm pointing out the existence of an available new-old-type.</em>  I'd be interested to hear any ideas or feelings on what PARSE might do with it...</p>
<h2>Then...What About GET and SET Forms?</h2>
<p>There's four assignment forms to deal with:</p>
<ul>
<li><strong><code>.foo.bar:</code></strong></li>
<li><strong><code>:.foo.bar</code></strong></li>
<li><strong><code>/foo/bar:</code></strong></li>
<li><strong><code>:/foo/bar</code></strong></li>
</ul>
<p>What would these be for?</p>
<p>I've proposed terminal slash and dot be a commentary on whether the thing being gotten or assigned is allowed to be an action or not.  Though that seems to make <strong>:foo.bar.</strong> and <strong>foo.bar.</strong> synonymous, as the GET only has impact on actions...and you're assuring it's not one.</p>
<p>Just more stuff to think about.  My suggestion for anything that doesn't have an interesting novel answer yet is to just make it error...to save it for meaning something in the future.</p>
          <p><a href="https://forum.rebol.info/t/the-dialecting-power-of-newpath-ref-ine-ment/1401/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-dialecting-power-of-newpath-ref-ine-ment/1401/1</link>
        <pubDate>Fri, 13 Nov 2020 11:35:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1401-1</guid>
        <source url="https://forum.rebol.info/t/the-dialecting-power-of-newpath-ref-ine-ment/1401.rss">The Dialecting Power of NewPath /REF/(INE)/[MENT]</source>
      </item>
  </channel>
</rss>

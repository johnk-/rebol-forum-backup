<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>On the critique of PORT!</title>
    <link>https://forum.rebol.info/t/on-the-critique-of-port/1213</link>
    <description>From [chat](https://chat.stackoverflow.com/transcript/message/47355072#47355072)

&gt; Well you know Rebol PORT! was crap

There&#39;s obviously a wider context for this statement with that discussion, however there&#39;s something I&#39;m not clear of in your (@hostilefork&#39;s) port! critique:

* for sure the TCP scheme is flawed—you&#39;ve found plenty of work in evaluating HTTPD alone

* It&#39;s likely the file scheme will have similar glaring flaws if the tires are kicked sufficiently

* I don&#39;t know too much about the serial port scheme/extension (is it even a scheme?)

* `stdin`, `stdout` and `stderror` were dropped for implementation expediency in the move from Rebol 2 (though there was no `stderror` therein)

* We have a few other [higher-level schemes](https://github.com/gchiu/Rebol3/tree/master/protocols) with various degrees of love and care

Does your overall  *&#39;crap&#39;*  verdict extend to the [PORT! datatype concept and structure](https://github.com/revault/rebol-wiki/wiki/Ports) itself (language quirks pertaining to naming—per [aforementioned event names](/t/read-and-wrote-events/1208)—notwithstanding)?

I&#39;ve built a few schemes for Rebol 2 and 3 over time and I do tend to like the concept of these malleable interfaces with their tight association with the core verbs and the url!/file! types (it&#39;s possible I&#39;m biased given my own investment in that way of thinking).

I do believe scheme authoring could benefit from much more transparency and documentation—there&#39;s still a degree of mystery as to the specific mechanics (particularly when building schemes on top of the TCP scheme). In general though I see ports/schemes as being in that small set of Rebol&#39;s core and compelling distinguishing features.

My confusion may just come down to the terminology used (ports/schemes/specific schemes), but I&#39;m open to the prospect that my own perspective is misguided and that perhaps ports are an attempt at oversimplification of complex systems.

\**that small set* being something like: data representation, evaluation model, parse/dialecting, size/self-containment ([Tiny Elvis](http://blog.hostilefork.com/is-rebol-actually-a-revolution/)) and ports/schemes. Would also add &#39;embedability&#39; based on your own efforts in honing the API and the *Amish* constraint on the source.</description>
    
    <lastBuildDate>Mon, 23 Sep 2019 19:44:04 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/on-the-critique-of-port/1213.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>On the critique of PORT!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="1" data-topic="1213">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>My confusion may just come down to the terminology used (ports/schemes/specific schemes)</p>
</blockquote>
</aside>
<p>From a terminology perspective, it would definitely be helpful if Rebol stuck to common names when things are common.  It's unfortunate that Red is perpetuating calling <a href="https://en.wikipedia.org/wiki/Generic_function" rel="nofollow noopener">Generic Functions</a> ACTION!s.</p>
<blockquote>
<p>Does your overall  <em>'crap'</em>  verdict extend to the <a href="https://github.com/revault/rebol-wiki/wiki/Ports" rel="nofollow noopener">PORT! datatype concept and structure</a> itself</p>
</blockquote>
<p>In the moment, I was just speaking out of annoyance with the implementation.  Failure handling was nearly non-existent, and authoring of correct code even impossible if you assume no failures.  <em>(I'd argue that the absence of a READ/PART in the TCP scheme is indicative of a kind of fundamental misunderstanding of how sockets work...but at least I have added that feature.)</em></p>
<p>The very broad idea of using <em>generics</em> is fine and likely appropriate: to be able to say <strong><code>write port data</code></strong> instead of what most languages would get with <strong><code>file.write(data)</code></strong> or <strong><code>socket.write(data)</code></strong>, it's all right.  When you're going for English-like syntax and trying to get the number of typed characters (and visualized glyphs) down, it seems like a sort of lower-limit.</p>
<p>But when you have refinements (e.g. /PART or /LINES on READ), where then only the file port implements it and it just gets dropped otherwise...it's very frustrating to look at it and have to ask:</p>
<ul>
<li>"How many of these refinements are there in the long tail?  If more get added, will every existing PORT! be responsible for it?"</li>
<li>"If code lives in the generic READ to handle something like READ/LINES regardless of port type, how can it be abstractly implemented to build the result block one string at a time vs. read the entire binary data at once?"</li>
<li>"What does it mean when we can't take for granted the result of READ or WRITE will be bytes...e.g. in the progressive scenario of building a block above?"</li>
</ul>
<aside class="quote no-group" data-post="1" data-topic="1213">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I'm open to the prospect that my own perspective is misguided and that perhaps ports are an attempt at oversimplification of complex systems.</p>
</blockquote>
</aside>
<p>It's very difficult to see how READ and WRITE can serve so many masters.  So this seems to me to require at least some level of separation of a byte-stream transport layer which you can stack up, and then some other articulation for codecs (including streaming ones).</p>
<p>The READ/WRITE level in my view might be ideally a much more accessible way of doing <a href="https://docs.google.com/presentation/d/1YL7tW9flenQoCgFCMB1Ks-UPMiTB0il5klbjryKd6YM/edit#slide=id.i147" rel="nofollow noopener">C++ iostreams</a>, with "insertion" and "extraction" operators.  If you look at Boost.ASIO it does the same sort of thing as Rebol TLS, where you <a href="https://www.boost.org/doc/libs/1_66_0/doc/html/boost_asio/reference/ssl__stream.html" rel="nofollow noopener">chain together a TLS stream on top of a TCP stream</a>.</p>
<p>As for how you get from there to encoding or decoding Rebol structure, well maybe that's what codec design is for.  And maybe you can attach codecs to ports (perhaps disabling READ and WRITE at the byte level so you don't muck it up, and only let you use LOAD and SAVE?)</p>
<p>There may be great potential for designs here, but someone has to do it.  I was hoping it wouldn't be me.  :-/</p>
          <p><a href="https://forum.rebol.info/t/on-the-critique-of-port/1213/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/on-the-critique-of-port/1213/2</link>
        <pubDate>Mon, 23 Sep 2019 06:42:59 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1213-2</guid>
        <source url="https://forum.rebol.info/t/on-the-critique-of-port/1213.rss">On the critique of PORT!</source>
      </item>
      <item>
        <title>On the critique of PORT!</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>From <a href="https://chat.stackoverflow.com/transcript/message/47355072#47355072" rel="nofollow noopener">chat</a></p>
<blockquote>
<p>Well you know Rebol PORT! was crap</p>
</blockquote>
<p>There's obviously a wider context for this statement with that discussion, however there's something I'm not clear of in your (<a class="mention" href="/u/hostilefork">@hostilefork</a>'s) port! critique:</p>
<ul>
<li>
<p>for sure the TCP scheme is flawed—you've found plenty of work in evaluating HTTPD alone</p>
</li>
<li>
<p>It's likely the file scheme will have similar glaring flaws if the tires are kicked sufficiently</p>
</li>
<li>
<p>I don't know too much about the serial port scheme/extension (is it even a scheme?)</p>
</li>
<li>
<p><code>stdin</code>, <code>stdout</code> and <code>stderror</code> were dropped for implementation expediency in the move from Rebol 2 (though there was no <code>stderror</code> therein)</p>
</li>
<li>
<p>We have a few other <a href="https://github.com/gchiu/Rebol3/tree/master/protocols" rel="nofollow noopener">higher-level schemes</a> with various degrees of love and care</p>
</li>
</ul>
<p>Does your overall  <em>'crap'</em>  verdict extend to the <a href="https://github.com/revault/rebol-wiki/wiki/Ports" rel="nofollow noopener">PORT! datatype concept and structure</a> itself (language quirks pertaining to naming—per <a href="/t/read-and-wrote-events/1208">aforementioned event names</a>—notwithstanding)?</p>
<p>I've built a few schemes for Rebol 2 and 3 over time and I do tend to like the concept of these malleable interfaces with their tight association with the core verbs and the url!/file! types (it's possible I'm biased given my own investment in that way of thinking).</p>
<p>I do believe scheme authoring could benefit from much more transparency and documentation—there's still a degree of mystery as to the specific mechanics (particularly when building schemes on top of the TCP scheme). In general though I see ports/schemes as being in that small set of Rebol's core and compelling distinguishing features.</p>
<p>My confusion may just come down to the terminology used (ports/schemes/specific schemes), but I'm open to the prospect that my own perspective is misguided and that perhaps ports are an attempt at oversimplification of complex systems.</p>
<p>*<em>that small set</em> being something like: data representation, evaluation model, parse/dialecting, size/self-containment (<a href="http://blog.hostilefork.com/is-rebol-actually-a-revolution/" rel="nofollow noopener">Tiny Elvis</a>) and ports/schemes. Would also add 'embedability' based on your own efforts in honing the API and the <em>Amish</em> constraint on the source.</p>
          <p><a href="https://forum.rebol.info/t/on-the-critique-of-port/1213/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/on-the-critique-of-port/1213/1</link>
        <pubDate>Sat, 21 Sep 2019 00:21:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1213-1</guid>
        <source url="https://forum.rebol.info/t/on-the-critique-of-port/1213.rss">On the critique of PORT!</source>
      </item>
  </channel>
</rss>

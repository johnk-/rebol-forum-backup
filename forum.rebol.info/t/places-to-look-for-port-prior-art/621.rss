<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Places to Look for PORT! Prior Art</title>
    <link>https://forum.rebol.info/t/places-to-look-for-port-prior-art/621</link>
    <description>It&#39;s probably useful to gather some resources on places to look for comparison/contrast/inspiration for I/O designs.  So post here if you have them.  I&#39;ll list a few:

### Boost.ASIO

The C++ world has a powerful offering of Boost.ASIO, which stands for &quot;Asynchronous I/O&quot;.

[Boost.ASIO Overview](https://www.boost.org/doc/libs/1_66_0/doc/html/boost_asio/overview/core/basics.html)

The focus is to link up various &quot;easily leaky&quot; C-style things into the C++ world, where things can be wired together more robustly.  Of course, to take advantage of that, one must be able to read source that looks like these examples:

[`https://www.boost.org/doc/libs/1_63_0/doc/html/boost_asio/examples.html`](https://www.boost.org/doc/libs/1_63_0/doc/html/boost_asio/examples.html) 

...which aren&#39;t necessarily all that complex when you boil down the syntax.  But I haven&#39;t really used it.  I feel like sitting down with it might be educational for me, and perhaps how they&#39;ve broken down the problem could have easier-to-read parallels.  One might even imagine using C++ in the implementation, at least for starters, if it demonstrated benefit.

### Node.JS

JavaScript is single-threaded, Node.JS was sort of rapidly put together, and people seem to have been hacking up Node.JS programs fine.  As far as I recall, Node didn&#39;t try to attack every kind of I/O through some kind of uniform interface.  You just have objects that you pass callbacks to when they got the information you requested.  Here&#39;s a description of how to do file I/O:

[How to read files in Node.JS](https://docs.nodejitsu.com/articles/file-system/how-to-read-files-in-nodejs/)

It raises the question of how wise it is to try and pipe everything through one kind of READ and WRITE, vs **clip: make clipboard! ...** then **clip/read**, where the parameterization and data return types can all be customized by that object.

### 0MQ

I don&#39;t know a ton about [0MQ](http://zeromq.org/), but when I think about the idea of what some kind of unified-futuristic-I/O-model might do for someone, it&#39;s the kind of idea that comes up.  What if PORT! always spat out blobs of Rebol values?

One scenario I think is interesting to model is two Rebol apps on a network, where one is able to send Rebol-styled data at a certain rate, and the other end can receive it and process it with PARSE.  What might that look like?

### Uniserve

I&#39;ve never used Uniserve:

https://www.softinnov.org/rebol/uniserve.shtml

But supposedly it was a driving factor in creating Red.  Yet Red lacks I/O.

It was created to address a perceived deficiency in Rebol2.  Did it?  Was it in competition with R3-Alpha ports?  Does anyone who&#39;s used it have good things to say about it, bad?</description>
    
    <lastBuildDate>Tue, 05 Jun 2018 20:47:00 +0000</lastBuildDate>
    <category>Ports</category>
    <atom:link href="https://forum.rebol.info/t/places-to-look-for-port-prior-art/621.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Places to Look for PORT! Prior Art</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>0MQ is at the same network layer as http. Although interactions can be in lock step, they can also be asynchronous though you need to keep polling for results rather then being event driven. I'm not seeing much added benefit for using the port model here.</p>
          <p><a href="https://forum.rebol.info/t/places-to-look-for-port-prior-art/621/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/places-to-look-for-port-prior-art/621/4</link>
        <pubDate>Tue, 05 Jun 2018 19:08:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-621-4</guid>
        <source url="https://forum.rebol.info/t/places-to-look-for-port-prior-art/621.rss">Places to Look for PORT! Prior Art</source>
      </item>
      <item>
        <title>Places to Look for PORT! Prior Art</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h2>Topaz</h2>
<p>Here is an overview of Topaz--which as far as we know is not happening:</p>
<p><a href="https://github.com/giesse/Project-SnowBall/blob/master/topaz/concepts.rmd" rel="nofollow noopener"><code>https://github.com/giesse/Project-SnowBall/blob/master/topaz/concepts.rmd</code></a></p>
<p>Interesting to look at is what he says about "promises" as a way to reconcile the convenience of synchronous I/O with the flexibility of asynchronous I/O.  Yet he points out a weakness--in that you can't delay evaluation products if they drive conditional code.</p>
<p>I suspect what he suggests drives too far away from what Rebol is actually capable of under its paradigm, but putting it here for study.</p>
          <p><a href="https://forum.rebol.info/t/places-to-look-for-port-prior-art/621/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/places-to-look-for-port-prior-art/621/3</link>
        <pubDate>Sun, 03 Jun 2018 23:32:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-621-3</guid>
        <source url="https://forum.rebol.info/t/places-to-look-for-port-prior-art/621.rss">Places to Look for PORT! Prior Art</source>
      </item>
      <item>
        <title>Places to Look for PORT! Prior Art</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="1" data-topic="621">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I don’t know a ton about 0MQ, but when I think about the idea of what some kind of unified-futuristic-I/O-model might do for someone, it’s the kind of idea that comes up.  What if PORT! always spat out blobs of Rebol values?</p>
</blockquote>
</aside>
<p>This would seem to be scheme dependent. This is indeed how my REST scheme works: requests a web page and returns an object representing the target resource. This is also how the MySQL scheme functions—you can specify a query and it'll return the response as blocks of Rebol values.</p>
<aside class="quote no-group" data-post="1" data-topic="621">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>One scenario I think is interesting to model is two Rebol apps on a network, where one is able to send Rebol-styled data at a certain rate, and the other end can receive it and process it with PARSE.  What might that look like?</p>
</blockquote>
</aside>
<p>This could be a pair of schemes—client/server—that would on initiation create a client/server TCP (or UDP) port and serialize/deserialize outgoing/incoming data.</p>
<p>Server:<br>
<img src="//forum.rebol.info/uploads/default/original/1X/8a1795486fc0dffbdcbbabbb430986ada3768783.jpg" alt="image" width="570" height="335"></p>
          <p><a href="https://forum.rebol.info/t/places-to-look-for-port-prior-art/621/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/places-to-look-for-port-prior-art/621/2</link>
        <pubDate>Tue, 15 May 2018 18:05:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-621-2</guid>
        <source url="https://forum.rebol.info/t/places-to-look-for-port-prior-art/621.rss">Places to Look for PORT! Prior Art</source>
      </item>
      <item>
        <title>Places to Look for PORT! Prior Art</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>It's probably useful to gather some resources on places to look for comparison/contrast/inspiration for I/O designs.  So post here if you have them.  I'll list a few:</p>
<h3>Boost.ASIO</h3>
<p>The C++ world has a powerful offering of Boost.ASIO, which stands for "Asynchronous I/O".</p>
<p><a href="https://www.boost.org/doc/libs/1_66_0/doc/html/boost_asio/overview/core/basics.html" rel="nofollow noopener">Boost.ASIO Overview</a></p>
<p>The focus is to link up various "easily leaky" C-style things into the C++ world, where things can be wired together more robustly.  Of course, to take advantage of that, one must be able to read source that looks like these examples:</p>
<p><a href="https://www.boost.org/doc/libs/1_63_0/doc/html/boost_asio/examples.html" rel="nofollow noopener"><code>https://www.boost.org/doc/libs/1_63_0/doc/html/boost_asio/examples.html</code></a></p>
<p>...which aren't necessarily all that complex when you boil down the syntax.  But I haven't really used it.  I feel like sitting down with it might be educational for me, and perhaps how they've broken down the problem could have easier-to-read parallels.  One might even imagine using C++ in the implementation, at least for starters, if it demonstrated benefit.</p>
<h3>Node.JS</h3>
<p>JavaScript is single-threaded, Node.JS was sort of rapidly put together, and people seem to have been hacking up Node.JS programs fine.  As far as I recall, Node didn't try to attack every kind of I/O through some kind of uniform interface.  You just have objects that you pass callbacks to when they got the information you requested.  Here's a description of how to do file I/O:</p>
<p><a href="https://docs.nodejitsu.com/articles/file-system/how-to-read-files-in-nodejs/" rel="nofollow noopener">How to read files in Node.JS</a></p>
<p>It raises the question of how wise it is to try and pipe everything through one kind of READ and WRITE, vs <strong>clip: make clipboard! ...</strong> then <strong>clip/read</strong>, where the parameterization and data return types can all be customized by that object.</p>
<h3>0MQ</h3>
<p>I don't know a ton about <a href="http://zeromq.org/" rel="nofollow noopener">0MQ</a>, but when I think about the idea of what some kind of unified-futuristic-I/O-model might do for someone, it's the kind of idea that comes up.  What if PORT! always spat out blobs of Rebol values?</p>
<p>One scenario I think is interesting to model is two Rebol apps on a network, where one is able to send Rebol-styled data at a certain rate, and the other end can receive it and process it with PARSE.  What might that look like?</p>
<h3>Uniserve</h3>
<p>I've never used Uniserve:</p>
<p><a href="https://www.softinnov.org/rebol/uniserve.shtml" class="onebox" target="_blank" rel="nofollow noopener">https://www.softinnov.org/rebol/uniserve.shtml</a></p>
<p>But supposedly it was a driving factor in creating Red.  Yet Red lacks I/O.</p>
<p>It was created to address a perceived deficiency in Rebol2.  Did it?  Was it in competition with R3-Alpha ports?  Does anyone who's used it have good things to say about it, bad?</p>
          <p><a href="https://forum.rebol.info/t/places-to-look-for-port-prior-art/621/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/places-to-look-for-port-prior-art/621/1</link>
        <pubDate>Tue, 15 May 2018 08:05:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-621-1</guid>
        <source url="https://forum.rebol.info/t/places-to-look-for-port-prior-art/621.rss">Places to Look for PORT! Prior Art</source>
      </item>
  </channel>
</rss>

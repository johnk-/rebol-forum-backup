<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Rethinking Auto-Gathered SET-WORD! Locals</title>
    <link>https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150</link>
    <description>Having to explicitly declare locals at the top of your FUNC is certainly primitive, so there needs to be another answer.

**It&#39;s important to have a way to annotate variables as being local declarations at the place you use them.**

...but...I think that the decision to consider this annotation to be implicit with a SET-WORD! in R3-Alpha&#39;s FUNCTION is probably a bad idea (...for anything but a code golf language).

## It creates too many spurious locals

There are many reasons you might use SET-WORD!s and not all of them warrant a local.  We say these are generic dialecting parts, they don&#39;t have to mean anything related to assignment at all (though it helps if they are, usually).  But even common assignment-related usages make a bunch of stray locals:

    something: ...  ; some &quot;global&quot; thing you want to reference

    foo: function [...] [
        something  ; this is null because a something: was gathered below!

        obj: make object! [
            field1: ...  ; why would FOO now have a &lt;local&gt; named field1 ?
            field2: ...  ; and why now a &lt;local&gt; named field2 ?
        ]

        bar: function [...] [
             something: ...  ; this is a local in BAR, but why in FOO too??
        ]
     ]             

Gathering locals you don&#39;t need is inefficient.  You&#39;re using more storage space for the function&#39;s frame, for a variable you&#39;re never going to use.  It makes the function slower to call, and also looks confusing if you look in the debugger to see a bunch of spurious locals for the frame.

It&#39;s also inconvenient--because as with `something` above, it may cause a variable to be nulled out that you actually had meant to use.

## I think we should require an annotation

It doesn&#39;t seem to me to be too terrible to have people say `let x: 10` or `var x: 10` instead of just `x: 10`.  (I&#39;ll suggest `var` for today&#39;s method because it would get effectively &quot;lifted&quot;, and I have some more interesting &quot;virtual binding&quot; ideas for `let`)

Like I say, it&#39;s not that something like an auto-gathering FUNCTION just from a SET-WORD! *shouldn&#39;t exist*.  The whole point of Rebol is that you can make such things if you want them.  But the idea strikes me as flawed enough in most applications that you should do some extra typing.

Then, what we can do is just say that any SET-WORD! which aren&#39;t covered by this get unbound.  If they try to run in the evaluator, you get an error.  ([UPDATE: See thoughts on issues with this idea](https://forum.rebol.info/t/unbinding-set-word-s-in-func-pros-and-cons/1494))

## Not a big change so much as naming change

We&#39;ll just have to come up with a name or setting for the gathering function.

Preferably not FUNCT *(which is what Rebol2 called the gatherer)*.  :-)

Having a way to express a desire to auto-gather locals in the spec, e.g. `&lt;local&gt; #set-word!` or `&lt;autolocal&gt;` or something like that is a possibility.

Questions/Comments/Concerns?</description>
    
    <lastBuildDate>Wed, 10 Feb 2021 21:36:52 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Rethinking Auto-Gathered SET-WORD! Locals</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A year later, and we actually have virtual binding.  So...</p>
<aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="1150">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I think getting rid of auto-gathering of SET-WORD! is important</p>
</blockquote>
</aside>
<p>The process is now underway, <a href="https://github.com/metaeducation/ren-c/pull/1110">first with METHOD</a>...and then with FUNC.  We'll use METH and FUNC while METHOD and FUNCTION are phased out in their old meaning.  Then--when enough time has passed--you'll be able to say METHOD and FUNCTION as synonyms for the behavior that METH and FUNC have.</p>
<p><em>I'm well aware that the LET implementation is not perfect.</em>  But what it's replacing was an unfixably broken design choice.  And what is there so far of LET shows enough promise to be enough of a better bet that we try pushing it and see what it can and can't do.</p>
          <p><a href="https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150/7</link>
        <pubDate>Wed, 10 Feb 2021 21:36:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1150-7</guid>
        <source url="https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150.rss">Rethinking Auto-Gathered SET-WORD! Locals</source>
      </item>
      <item>
        <title>Rethinking Auto-Gathered SET-WORD! Locals</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="1" data-topic="1150">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Not a big change so much as naming change</p>
</blockquote>
</aside>
<p>I should mention that going this direction gives us what I consider to be a good change: <strong>FUNC</strong> as a simple contraction for <strong>FUNCTION</strong>.  They will be the same thing.</p>
<p>This is in the spirit of <strong>EVAL</strong> being made a synonym for <strong>EVALUATE</strong> and other ways of avoiding confusion.</p>
          <p><a href="https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150/6</link>
        <pubDate>Tue, 17 Sep 2019 15:56:44 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1150-6</guid>
        <source url="https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150.rss">Rethinking Auto-Gathered SET-WORD! Locals</source>
      </item>
      <item>
        <title>Rethinking Auto-Gathered SET-WORD! Locals</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="1150">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>In the annotating proposal I'm making here, VAR would be scanned for by name by FUNCTION.</p>
</blockquote>
</aside>
<p>Something about Rebol makes VAR a bad name for this.  That is, you frequently have a declaration which holds a WORD! or a PATH! and <em>names</em>  a variable.  VAR is a good name for that (e.g. the X parameter in <strong>for-each x [a b c] [...]</strong> is the kind of thing you would call <code>var</code> as the literal name of the variable.)</p>
<p>Given how common that is, using LET or repurposing USE makes more sense.</p>
<h2>I think getting rid of auto-gathering of SET-WORD! is important</h2>
<p>Since this has crossed my mind, everything I look at makes me think that picking a multi-purpose dialecting part like SET-WORD! for this purpose is a mistake.  There's just too many ways you want to use them unrelated to declaring locals.</p>
<p>Whereas stealing one word as being uniquely partnered with FUNCTION (as how KEEP is partnered to COLLECT) is a much less consequential theft.  Especially if you could override it with something else as part of the function spec dialect.</p>
<p>This is another one of those "daunting" change proposals, and the impacts on PARSE in particular bear scrutiny.  (Should it be <strong>copy let x: [some integer!]</strong> or <strong>let x: copy [some integer!])</strong>.  But just mentioning that thinking about it hasn't gone away... and that I don't think VAR is what it should be called due to frequent other uses for that term.</p>
          <p><a href="https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150/5</link>
        <pubDate>Tue, 04 Jun 2019 23:15:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1150-5</guid>
        <source url="https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150.rss">Rethinking Auto-Gathered SET-WORD! Locals</source>
      </item>
      <item>
        <title>Rethinking Auto-Gathered SET-WORD! Locals</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>routine! seems to be unused.</p>
          <p><a href="https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150/3</link>
        <pubDate>Sun, 28 Apr 2019 00:05:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1150-3</guid>
        <source url="https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150.rss">Rethinking Auto-Gathered SET-WORD! Locals</source>
      </item>
      <item>
        <title>Rethinking Auto-Gathered SET-WORD! Locals</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In the annotating proposal I'm making here, VAR would be scanned for by name by FUNCTION.  This would make it a sort of "keyword" in the "function body dialect" :-/ (though perhaps you could override it, e.g. by saying <code>&lt;varword&gt; myvar</code> in the spec).</p>
<p>But I don't suggest removing it from the body.  I suggest leaving it there.  But then, it could have a behavior at runtime like this:</p>
<pre><code>&gt;&gt; var x: 10
== 10

&gt;&gt; var [x y z]: [10 20 30]
== [10 20 30]

&gt;&gt; var x
== x

&gt;&gt; var [x y z]
== [x y z]
</code></pre>
<p>So it would be a variadic which would look at its right, see if it was a SET-WORD! or a SET-BLOCK!, and if so run one unit of evaluation and return the result.  If it were a WORD! or a BLOCK! it would return the word or block as is...acting like LIT would.</p>
<p>This would give you the ability to do something like both declare a local and SET it, as in:</p>
<pre><code>set var x do whatever
</code></pre>
<p>Because it would be looked for literally, it would suffer the same problem that source-level vs. generated set-words do today...</p>
<pre><code> foo: function [] [
     do compose [
         var (to word! "wontwork"): 10
         print [wontwork]
     ]
 ]
</code></pre>
<p>But this is where I'm hoping that the implementation tricks I have in mind for <code>let</code> <em>would</em> be able to work.</p>
          <p><a href="https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150/2</link>
        <pubDate>Sat, 27 Apr 2019 19:26:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1150-2</guid>
        <source url="https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150.rss">Rethinking Auto-Gathered SET-WORD! Locals</source>
      </item>
      <item>
        <title>Rethinking Auto-Gathered SET-WORD! Locals</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Having to explicitly declare locals at the top of your FUNC is certainly primitive, so there needs to be another answer.</p>
<p><strong>It's important to have a way to annotate variables as being local declarations at the place you use them.</strong></p>
<p>...but...I think that the decision to consider this annotation to be implicit with a SET-WORD! in R3-Alpha's FUNCTION is probably a bad idea (...for anything but a code golf language).</p>
<h2>It creates too many spurious locals</h2>
<p>There are many reasons you might use SET-WORD!s and not all of them warrant a local.  We say these are generic dialecting parts, they don't have to mean anything related to assignment at all (though it helps if they are, usually).  But even common assignment-related usages make a bunch of stray locals:</p>
<pre><code>something: ...  ; some "global" thing you want to reference

foo: function [...] [
    something  ; this is null because a something: was gathered below!

    obj: make object! [
        field1: ...  ; why would FOO now have a &lt;local&gt; named field1 ?
        field2: ...  ; and why now a &lt;local&gt; named field2 ?
    ]

    bar: function [...] [
         something: ...  ; this is a local in BAR, but why in FOO too??
    ]
 ]             
</code></pre>
<p>Gathering locals you don't need is inefficient.  You're using more storage space for the function's frame, for a variable you're never going to use.  It makes the function slower to call, and also looks confusing if you look in the debugger to see a bunch of spurious locals for the frame.</p>
<p>It's also inconvenient--because as with <code>something</code> above, it may cause a variable to be nulled out that you actually had meant to use.</p>
<h2>I think we should require an annotation</h2>
<p>It doesn't seem to me to be too terrible to have people say <code>let x: 10</code> or <code>var x: 10</code> instead of just <code>x: 10</code>.  (I'll suggest <code>var</code> for today's method because it would get effectively "lifted", and I have some more interesting "virtual binding" ideas for <code>let</code>)</p>
<p>Like I say, it's not that something like an auto-gathering FUNCTION just from a SET-WORD! <em>shouldn't exist</em>.  The whole point of Rebol is that you can make such things if you want them.  But the idea strikes me as flawed enough in most applications that you should do some extra typing.</p>
<p>Then, what we can do is just say that any SET-WORD! which aren't covered by this get unbound.  If they try to run in the evaluator, you get an error.  (<a href="https://forum.rebol.info/t/unbinding-set-word-s-in-func-pros-and-cons/1494">UPDATE: See thoughts on issues with this idea</a>)</p>
<h2>Not a big change so much as naming change</h2>
<p>We'll just have to come up with a name or setting for the gathering function.</p>
<p>Preferably not FUNCT <em>(which is what Rebol2 called the gatherer)</em>.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Having a way to express a desire to auto-gather locals in the spec, e.g. <code>&lt;local&gt; #set-word!</code> or <code>&lt;autolocal&gt;</code> or something like that is a possibility.</p>
<p>Questions/Comments/Concerns?</p>
          <p><a href="https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150/1</link>
        <pubDate>Sat, 27 Apr 2019 18:50:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1150-1</guid>
        <source url="https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150.rss">Rethinking Auto-Gathered SET-WORD! Locals</source>
      </item>
  </channel>
</rss>

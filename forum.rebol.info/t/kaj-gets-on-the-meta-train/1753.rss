<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Kaj Gets on the Meta Train</title>
    <link>https://forum.rebol.info/t/kaj-gets-on-the-meta-train/1753</link>
    <description>So Kaj is still out there somewhere, working on a spiritual competitor to Red he is calling &quot;Meta&quot;. :roll_eyes:

  https://language.metaproject.frl/

His first target is the Atari 2600 :joystick::space_invader:  so he&#39;s certainly starting from... the basics.

*(For whatever it&#39;s worth, I actually am interested in things like Atari 2600 programming and seeing what you can do with modern tools.  e.g. there&#39;s a neat [reboot of PAC-MAN](https://youtu.be/4X1NdKvNCYQ?t=459) and I think a lot of people would like to know what **could** have been done, theoretically.)*

There&#39;s no source code by which to measure the amount of investment the project represents so far.  He&#39;s only giving out binaries, and says:

&gt; &quot;There will always be a free version of *Meta*. We will build a business on top of it, by offering paid premium versions and other products built with *Meta*.&quot;

## What&#39;s The Mission Difference From Red?

Seemingly not much.  But inevitably, one angle is going to be &quot;faster&quot;:

&gt; &quot;Red/System is the wrong abstraction level and the wrong format for an intermediate language, certainly for a REBOL language. The abstraction level is that of C, which is too low for the intermediate layer. The format is that of REBOL, which is free form for human use. Red is parsed from free form to something more suitable for machine processing, then a lot of Red/System is generated, then all of that needs to be reparsed. The compiler is painfully slow.&quot;

But he&#39;s willing to build on LLVM to start with.  I&#39;d said that Red should aim for a LLVM-subset IR, that could then be built with either a simple/small custom emitter or the full &quot;bloated&quot; toolchain if one really wanted to.  That would have provided a fallback; but Nenad wasn&#39;t a fan of the LLVM instruction set for some reason, and had ideas about exposing lower-level CPU features (maybe that was why).

So at least in this sense Kaj&#39;s approach seems more pragmatic to me.

Also inevitably: having people to work with was slowing him down.  He&#39;ll make much more progress on his own, [as we find from his Atari Forum post](https://atariage.com/forums/topic/315558-a-new-language-for-the-atari/?tab=comments#comment-4719124):

&gt;  Red was launched on a REBOL conference of mine in the Netherlands. I helped launch the language and contributed to it for half a decade. After that I left the project, because I am disappointed that it hasn&#39;t fulfilled its promises.
&gt;
&gt; Before all that, I contributed to the latest version of REBOL and lobbied its creator Carl Sassenrath to open-source it. It eventually was, and REBOL could have done most of what Red promised, but Carl abandoned it when his funding ran out. After the leader left, the project was torn apart by competing interests.
&gt;
&gt; My language is meant to succeed both REBOL and Red. 

## There&#39;s only ONE Download for Windows, Linux, Mac...?

On the surface this seems interesting: he&#39;s using something called the [&quot;APE: Actually Portable Executable&quot;](https://justine.lol/ape.html) format.  You can use a single download for all platforms--the same single file.  It puts x86 code into a container that can run as either a Windows .COM file or a unix shell script.

It&#39;s a stunt which isn&#39;t really all *that* profound--though I&#39;ll admit I&#39;d wondered if there was some polyglot trick that could do exactly this.  Turns out the answer is yes...so that&#39;s cool.  I&#39;m glad someone did it.

But it has more relevance to writing viruses than it does to practical cross-platform development.  Launching the code is a drop in the bucket compared to all the other things you need to worry about in a useful platform abstraction layer.  Not to mention that obviously Macs are now on ARM, so the binaries would have to be emulated or include both instruction sets.

At this juncture, running WebAssembly in a browser is far more compelling a story...because you have the whole web runtime available.

Anyway I doubt he&#39;s married to the APE format and is just trying it out because it seems cool.  It&#39;s not something I want to worry over.  And for what it&#39;s worth, it doesn&#39;t work for me on Windows 11.  YMMV.

## Source Comparison?

Not much is available to compare.  His examples don&#39;t have headers, which is one of the more defining historical properties of Rebol programs.  The word &quot;header&quot; is not mentioned in his manifesto, so it&#39;s not clear if that&#39;s temporary or permanent.

Here&#39;s a Fibonacci example:

    ; Maximum 24 for natural16! result
    ; Max 47 for natural32! result
    parameter= 24
     
    print &quot;Fibonacci &quot;  print parameter  print &quot;: &quot;
     
    natural! [Fibonacci previous]
    ; natural32! [Fibonacci previous]
     
    either parameter &lt;= 1 [
        Fibonacci: parameter  ; Fibonacci 0 ... 1
    ][
        Fibonacci: previous: 1  ; Fibonacci 2
 
        loop parameter - 2 [
            previous: also
                Fibonacci
                Fibonacci: Fibonacci + previous
         ]
    ]
     
    print/line Fibonacci 

So...

* It seems he wants PRINT to not include a newline, so you have to say PRINT/LINE to get it.

   * I prefer the solution of asking those who really want partial line output (e.g. console prompts) to WRITE STDOUT directly...and that PRINT COLLECT be used as a pattern when your code is piecing together a full line from parts generated by distinct bits of code, KEEP-ing each part.

* Working on Atari means he&#39;s getting involved in things like INTEGER16!, and you optimize based on annotating datatypes like that.  I&#39;m more of the &quot;bignum by default&quot; philosophy, so different indeed.

    * Putting **natural! [Fibonacci previous]** in the middle of the code to constrain the type--not in a function spec--suggests this is really rather far afield from the evaluator-driven Rebol.

* He&#39;s trotting out historical ALSO in a first example.  No one in the Atari forum clapped with amazement at the genius several Rebolers seem to think it represents.  (So I feel pretty comfortable with **[Ren-C&#39;s ALSO and ELIDE](https://forum.rebol.info/t/enfixing-also-stylizing-it-after-then-and-else/402)**.)

Without more to look at I can&#39;t have more to say.</description>
    
    <lastBuildDate>Fri, 26 Nov 2021 07:52:00 +0000</lastBuildDate>
    <category>Foreign Inspiration</category>
    <atom:link href="https://forum.rebol.info/t/kaj-gets-on-the-meta-train/1753.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Kaj Gets on the Meta Train</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1753">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Without more to look at I can't have more to say.</p>
</blockquote>
</aside>
<p>Well, I guess I can reiterate that I do find the Atari angle interesting <em>in the sense</em> that Kaj is acknowledging the recreational aspect of such pursuits.  e.g. it's more a kind of thought/teaching/art experiment... than it is some obvious revolution in software which you'd want to be running your surgery robots or self-driving cars.</p>
<p>The conversations on the Atari Age forums thus lend themselves to reasonable questions from other old people about supporting features such as inline assembly from other Atari tools.  (Whereas Red's marketing hype leads to young programmers asking about running Red-powered AI connected from the cloud on their toaster.)</p>
<p>But when he says <strong>"<em>Meta</em> is close to REBOL, but solves its weaknesses."</strong>...that really shows that what we consider the weaknesses of Rebol couldn't be more different.</p>
<p>When I looked at Rebol I never fretted about <em>"whoa, it's too slow"</em>.  I thought <em>"whoa, it doesn't work"</em>.</p>
<p>Tricks that seemed great--like being able to make your own loop constructs--broke instantly when RETURN from inside your custom loop's body just stopped the loop and kept running.  It seems many people who agreed this stuff was a problem...like Andreas, BrianH, and Ladislav...all vanished and went on to other things...leaving present company to worry about it.  (Note: Only Gabriele remains remarking on the RETURN concept to the Red people)</p>
<p>I think people who were tied up on "Rebol is great because it's one file with no install process cross platform" are the ones who miss the point of Rebol.  You could rig up Python or any other language to be a single EXE cross platform, and pre-package it with a GUI.  These days you can pack anything up in Docker so it's a "single file".  That isn't the special part.</p>
<p>The special part is giving people something they can bend into new dialects--without waiting for the language designers to do it for them.  UPARSE goes there, in spades.  I don't see this coming from other endeavors which seem to claim I take Rebol outside its original plan.  <img src="https://forum.rebol.info/images/emoji/twitter/man_shrugging.png?v=9" title=":man_shrugging:" class="emoji" alt=":man_shrugging:"></p>
          <p><a href="https://forum.rebol.info/t/kaj-gets-on-the-meta-train/1753/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/kaj-gets-on-the-meta-train/1753/2</link>
        <pubDate>Fri, 26 Nov 2021 02:50:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1753-2</guid>
        <source url="https://forum.rebol.info/t/kaj-gets-on-the-meta-train/1753.rss">Kaj Gets on the Meta Train</source>
      </item>
      <item>
        <title>Kaj Gets on the Meta Train</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So Kaj is still out there somewhere, working on a spiritual competitor to Red he is calling "Meta". <img src="https://forum.rebol.info/images/emoji/twitter/roll_eyes.png?v=9" title=":roll_eyes:" class="emoji" alt=":roll_eyes:"></p>
<p><a href="https://language.metaproject.frl/">https://language.metaproject.frl/</a></p>
<p>His first target is the Atari 2600 <img src="https://forum.rebol.info/images/emoji/twitter/joystick.png?v=9" title=":joystick:" class="emoji" alt=":joystick:"><img src="https://forum.rebol.info/images/emoji/twitter/space_invader.png?v=9" title=":space_invader:" class="emoji" alt=":space_invader:">  so he's certainly starting from... the basics.</p>
<p><em>(For whatever it's worth, I actually am interested in things like Atari 2600 programming and seeing what you can do with modern tools.  e.g. there's a neat <a href="https://youtu.be/4X1NdKvNCYQ?t=459">reboot of PAC-MAN</a> and I think a lot of people would like to know what <strong>could</strong> have been done, theoretically.)</em></p>
<p>There's no source code by which to measure the amount of investment the project represents so far.  He's only giving out binaries, and says:</p>
<blockquote>
<p>"There will always be a free version of <em>Meta</em>. We will build a business on top of it, by offering paid premium versions and other products built with <em>Meta</em>."</p>
</blockquote>
<h2>What's The Mission Difference From Red?</h2>
<p>Seemingly not much.  But inevitably, one angle is going to be "faster":</p>
<blockquote>
<p>"Red/System is the wrong abstraction level and the wrong format for an intermediate language, certainly for a REBOL language. The abstraction level is that of C, which is too low for the intermediate layer. The format is that of REBOL, which is free form for human use. Red is parsed from free form to something more suitable for machine processing, then a lot of Red/System is generated, then all of that needs to be reparsed. The compiler is painfully slow."</p>
</blockquote>
<p>But he's willing to build on LLVM to start with.  I'd said that Red should aim for a LLVM-subset IR, that could then be built with either a simple/small custom emitter or the full "bloated" toolchain if one really wanted to.  That would have provided a fallback; but Nenad wasn't a fan of the LLVM instruction set for some reason, and had ideas about exposing lower-level CPU features (maybe that was why).</p>
<p>So at least in this sense Kaj's approach seems more pragmatic to me.</p>
<p>Also inevitably: having people to work with was slowing him down.  He'll make much more progress on his own, <a href="https://atariage.com/forums/topic/315558-a-new-language-for-the-atari/?tab=comments#comment-4719124">as we find from his Atari Forum post</a>:</p>
<blockquote>
<p>Red was launched on a REBOL conference of mine in the Netherlands. I helped launch the language and contributed to it for half a decade. After that I left the project, because I am disappointed that it hasn't fulfilled its promises.</p>
<p>Before all that, I contributed to the latest version of REBOL and lobbied its creator Carl Sassenrath to open-source it. It eventually was, and REBOL could have done most of what Red promised, but Carl abandoned it when his funding ran out. After the leader left, the project was torn apart by competing interests.</p>
<p>My language is meant to succeed both REBOL and Red.</p>
</blockquote>
<h2>There's only ONE Download for Windows, Linux, Mac...?</h2>
<p>On the surface this seems interesting: he's using something called the <a href="https://justine.lol/ape.html">"APE: Actually Portable Executable"</a> format.  You can use a single download for all platforms--the same single file.  It puts x86 code into a container that can run as either a Windows .COM file or a unix shell script.</p>
<p>It's a stunt which isn't really all <em>that</em> profound--though I'll admit I'd wondered if there was some polyglot trick that could do exactly this.  Turns out the answer is yes...so that's cool.  I'm glad someone did it.</p>
<p>But it has more relevance to writing viruses than it does to practical cross-platform development.  Launching the code is a drop in the bucket compared to all the other things you need to worry about in a useful platform abstraction layer.  Not to mention that obviously Macs are now on ARM, so the binaries would have to be emulated or include both instruction sets.</p>
<p>At this juncture, running WebAssembly in a browser is far more compelling a story...because you have the whole web runtime available.</p>
<p>Anyway I doubt he's married to the APE format and is just trying it out because it seems cool.  It's not something I want to worry over.  And for what it's worth, it doesn't work for me on Windows 11.  YMMV.</p>
<h2>Source Comparison?</h2>
<p>Not much is available to compare.  His examples don't have headers, which is one of the more defining historical properties of Rebol programs.  The word "header" is not mentioned in his manifesto, so it's not clear if that's temporary or permanent.</p>
<p>Here's a Fibonacci example:</p>
<pre><code>; Maximum 24 for natural16! result
; Max 47 for natural32! result
parameter= 24
 
print "Fibonacci "  print parameter  print ": "
 
natural! [Fibonacci previous]
; natural32! [Fibonacci previous]
 
either parameter &lt;= 1 [
    Fibonacci: parameter  ; Fibonacci 0 ... 1
][
    Fibonacci: previous: 1  ; Fibonacci 2

    loop parameter - 2 [
        previous: also
            Fibonacci
            Fibonacci: Fibonacci + previous
     ]
]
 
print/line Fibonacci 
</code></pre>
<p>So...</p>
<ul>
<li>
<p>It seems he wants PRINT to not include a newline, so you have to say PRINT/LINE to get it.</p>
<ul>
<li>I prefer the solution of asking those who really want partial line output (e.g. console prompts) to WRITE STDOUT directly...and that PRINT COLLECT be used as a pattern when your code is piecing together a full line from parts generated by distinct bits of code, KEEP-ing each part.</li>
</ul>
</li>
<li>
<p>Working on Atari means he's getting involved in things like INTEGER16!, and you optimize based on annotating datatypes like that.  I'm more of the "bignum by default" philosophy, so different indeed.</p>
<ul>
<li>Putting <strong>natural! [Fibonacci previous]</strong> in the middle of the code to constrain the type--not in a function spec--suggests this is really rather far afield from the evaluator-driven Rebol.</li>
</ul>
</li>
<li>
<p>He's trotting out historical ALSO in a first example.  No one in the Atari forum clapped with amazement at the genius several Rebolers seem to think it represents.  (So I feel pretty comfortable with <strong><a href="https://forum.rebol.info/t/enfixing-also-stylizing-it-after-then-and-else/402">Ren-C's ALSO and ELIDE</a></strong>.)</p>
</li>
</ul>
<p>Without more to look at I can't have more to say.</p>
          <p><a href="https://forum.rebol.info/t/kaj-gets-on-the-meta-train/1753/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/kaj-gets-on-the-meta-train/1753/1</link>
        <pubDate>Sat, 20 Nov 2021 23:44:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1753-1</guid>
        <source url="https://forum.rebol.info/t/kaj-gets-on-the-meta-train/1753.rss">Kaj Gets on the Meta Train</source>
      </item>
  </channel>
</rss>

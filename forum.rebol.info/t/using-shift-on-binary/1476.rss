<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Using Shift on BINARY!</title>
    <link>https://forum.rebol.info/t/using-shift-on-binary/1476</link>
    <description>In wrestling with an older file format, it&#39;s notable how entrenched 32-bit numbers are (for bit fiddling purposes) within big specifications. JavaScript itself (I believe) converts its numbers to 32-bit for the purposes of its **&lt;&lt;**, **&gt;&gt;** and **&gt;&gt;&gt;** operators.

As R3 Alpha and Ren-C shifts on 64-bit signed integers, it is not then compatible with some of those older specification. Thus I was trying to twist my brain into figuring out how bridge the gap. In short, I gave up and went with this approach which, while appalling, works as intended:

```plain
bits-zero: enbase/base #{0000000000000000} 2
bits-one: enbase/base #{FFFFFFFFFFFFFFFF} 2

brute-force-shift: func [
    value [binary!]
    bits [integer!]
    /logical
    &lt;local&gt; length is-negative
][
    length: 8 * length-of value
    not-negative: zero? 128 and+ value/1
    value: enbase/base value 2

    case [
        not negative? bits [
            insert reverse value skip bits-zero 64 - bits
            reverse head clear skip value length
        ]

        any [
            logical
            not-negative
        ][
            insert value skip tail bits-zero bits
            head clear skip value length
        ]

        &lt;else&gt; [
            insert value skip tail bits-one bits
            head clear skip value length
        ]
    ]

    debase/base value 2
]
```

It works on **binary!** values up to 8 bytes and operates based on whatever the width of the input binary is, thus can be used along with **enbin/debin** to operate on **integer!** values at any desired width.

While it&#39;d be useful to have a native version that operated on **integer!** with **enbin/debin**-like paramaters, my case use only needed the op on a **binary!** value without the round trip.</description>
    
    <lastBuildDate>Wed, 27 Jan 2021 19:09:46 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/using-shift-on-binary/1476.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Using Shift on BINARY!</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>A wee wrapper for when you need that 32-bit itch scratched:</p>
<pre><code class="lang-nohighlight">shift-32: func [
    value [integer!]
    'mode [word!]
    bits [integer!]
][
    debin [be +/- 4] shift-binary enbin [be +/- 4] value :mode bits
]
</code></pre>
<p>Usage:</p>
<pre><code class="lang-nohighlight">&gt;&gt; shift-32 2 left 2  ; &lt;&lt;
== 8

&gt;&gt; shift-32 8 right 2  ; &gt;&gt;
== 2

&gt;&gt; shift-32 -8 logical 24  ; &gt;&gt;&gt;
== 255
</code></pre>
          <p><a href="https://forum.rebol.info/t/using-shift-on-binary/1476/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/using-shift-on-binary/1476/8</link>
        <pubDate>Wed, 27 Jan 2021 19:09:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1476-8</guid>
        <source url="https://forum.rebol.info/t/using-shift-on-binary/1476.rss">Using Shift on BINARY!</source>
      </item>
      <item>
        <title>Using Shift on BINARY!</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>Tests for this updated function:</p>
<pre><code>[         expected      result mode  bits width]

[               -8          -2 left     2 4]
[               16           2 left     3 4]
[           -37888       -1184 left     5 4]
[                0   134217728 left     5 4]
[       -536870912   251658240 left     5 4]
[       8053063680   251658240 left     5 8]
[        402653184           3 left    27 4]
[                1           2 right    1 4]
[               -2          -4 right    1 4]
[               37        1184 right    5 4]
[              -37       -1184 right    5 4]
[         -8388608 -2147483648 right    8 4]
[           707912  5799218898 right   13 8]
[                3   402653184 right   27 4]
[       2147483646          -4 logical  1 4]
[       1073741820         -16 logical  2 4]
[        134217691       -1184 logical  5 4]
[          8388608 -2147483648 logical  8 4]
[72057594029539328 -2147483648 logical  8 8]

; languages using 32-bit bitwise ops truncate a large number;
; would need to actively truncate the number here before passing to enbin
; in order to emulate
; [183624 5799218898 right 13 4]</code></pre>
          <p><a href="https://forum.rebol.info/t/using-shift-on-binary/1476/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/using-shift-on-binary/1476/7</link>
        <pubDate>Wed, 27 Jan 2021 16:48:10 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1476-7</guid>
        <source url="https://forum.rebol.info/t/using-shift-on-binary/1476.rss">Using Shift on BINARY!</source>
      </item>
      <item>
        <title>Using Shift on BINARY!</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>A version atop existing SHIFT. Should be faster. Changed interface to<br>
<strong>shift-binary &lt;value&gt; [left | right | logical] &lt;bits&gt;</strong></p>
<pre><code class="lang-nohighlight">shift-binary: func [
    value [binary!]
    'mode [word!]
    bits [integer!]
    &lt;local&gt; width carry-bits mask next-carry-bits
][
    assert [find [left right logical] mode]

    either mode = 'left [
        while [bits &gt;= 8] [
            bits: me - 8
            append remove value 0
        ]

        carry-bits: 0
        mask: shift (-1 + shift 1 bits) 8 - bits

        if not zero? bits [
            for-back offset tail value [
                next-carry-bits: shift offset/1 and+ mask bits - 8
                offset/1: 255 and+ (shift offset/1 bits) or+ carry-bits
                carry-bits: next-carry-bits
            ]
        ]
    ][
        either any [
            mode = 'logical
            zero? 128 and+ value/1
        ][
            while [bits &gt;= 8] [
                bits: me - 8
                remove back tail insert value 0
            ]

            carry-bits: 0
        ][
            while [bits &gt;= 8][
                bits: me - 8
                remove back tail insert value 255
            ]

            carry-bits: shift (-1 + shift 1 bits) 8 - bits
        ]

        mask: -1 + shift 1 bits

        if not zero? bits [
            for-next offset value [
                next-carry-bits: shift offset/1 and+ mask 8 - bits
                offset/1: 255 and+ (shift offset/1 negate bits) or+ carry-bits
                carry-bits: next-carry-bits
            ]
        ]
    ]

    value
]
</code></pre>
          <p><a href="https://forum.rebol.info/t/using-shift-on-binary/1476/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/using-shift-on-binary/1476/6</link>
        <pubDate>Wed, 27 Jan 2021 16:16:44 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1476-6</guid>
        <source url="https://forum.rebol.info/t/using-shift-on-binary/1476.rss">Using Shift on BINARY!</source>
      </item>
      <item>
        <title>Using Shift on BINARY!</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1476">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I'm not a fan of SHIFT not labeled by a direction.</p>
</blockquote>
</aside>
<p>Even putting together tests, it was not intuitive thinking of direction in terms of positive/negative.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1476">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Platform-integer-sized shifts are most efficient</p>
</blockquote>
</aside>
<p>I figure that's because they go straight to the metal? I fear though that 32-bit integer ops are going to be with us for a looong time. That they are standard for <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Bitwise">bitwise operations in JavaScript</a> alone means that they will persist <img src="https://forum.rebol.info/images/emoji/twitter/scream.png?v=9" title=":scream:" class="emoji" alt=":scream:"></p>
<aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1476">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Rotating bits is something that comes up sometimes</p>
</blockquote>
</aside>
<p>What would they typically be used for?</p>
          <p><a href="https://forum.rebol.info/t/using-shift-on-binary/1476/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/using-shift-on-binary/1476/5</link>
        <pubDate>Wed, 27 Jan 2021 02:48:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1476-5</guid>
        <source url="https://forum.rebol.info/t/using-shift-on-binary/1476.rss">Using Shift on BINARY!</source>
      </item>
      <item>
        <title>Using Shift on BINARY!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="rgchris" data-post="1" data-topic="1476">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>While it'd be useful to have a native version that operated on <strong>integer!</strong> with <strong>enbin/debin</strong>-like parameters, my case use only needed the op on a <strong>binary!</strong> value without the round trip.</p>
</blockquote>
</aside>
<p>Since there is a binary type, defining SHIFT on BINARY! makes the most sense.</p>
<p>Platform-integer-sized shifts are most efficient, but I don't think it's the kind of efficiency we should be hung up on.  I'll also point out that platform signed shifts have issues with <a href="https://stackoverflow.com/questions/3784996/why-does-left-shift-operation-invoke-undefined-behaviour-when-the-left-side-oper">defined/undefinedness</a>.</p>
<p>I'm not a fan of SHIFT not labeled by a direction.  It would seem to me to be better to define SHIFT-RIGHT and SHIFT-LEFT ... where if you use the negative sign, that goes the opposite direction of what the name says.  LSHIFT and RSHIFT could be shorthands, and &lt;&lt; and &gt;&gt; perhaps in the BITWISE dialect <em>(if that ever gets figured out)</em>.</p>
<p>(Maybe SHIFT could take a quoted WORD! and be cleanly written as <strong>shift left xxx</strong> or <strong>shift right xxx</strong>?)</p>
<p>Rotating bits is something that comes up sometimes--where the bits you shift out one side come back in on the other.  Though I've not really had it come up lately.</p>
          <p><a href="https://forum.rebol.info/t/using-shift-on-binary/1476/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/using-shift-on-binary/1476/4</link>
        <pubDate>Wed, 27 Jan 2021 00:44:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1476-4</guid>
        <source url="https://forum.rebol.info/t/using-shift-on-binary/1476.rss">Using Shift on BINARY!</source>
      </item>
      <item>
        <title>Using Shift on BINARY!</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>Some tests (all assume <code>[be +/- 4]</code> conversion):</p>
<pre><code class="lang-nohighlight">[expected mode value bits]
[-8 arithmetic -2 2]
[402653184 arithmetic 3 27]
[3 arithmetic 402653184 -27]
[-37 arithmetic -1184 -5]
[37 arithmetic 1184 -5]
[-8388608 arithmetic -2147483648 -8]
[1 arithmetic 2 -1]
[16 arithmetic 2 3]
[-2 arithmetic -4 -1]
[2147483646 logical -4 -1]
[8388608 logical -2147483648 -8]
[1073741820 logical -16 -2]
[-64 logical -16 2]
[-37888 logical -1184 5]
[134217691 logical -1184 -5]
</code></pre>
          <p><a href="https://forum.rebol.info/t/using-shift-on-binary/1476/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/using-shift-on-binary/1476/3</link>
        <pubDate>Tue, 26 Jan 2021 14:38:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1476-3</guid>
        <source url="https://forum.rebol.info/t/using-shift-on-binary/1476.rss">Using Shift on BINARY!</source>
      </item>
      <item>
        <title>Using Shift on BINARY!</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>In wrestling with an older file format, it's notable how entrenched 32-bit numbers are (for bit fiddling purposes) within big specifications. JavaScript itself (I believe) converts its numbers to 32-bit for the purposes of its <strong>&lt;&lt;</strong>, <strong>&gt;&gt;</strong> and <strong>&gt;&gt;&gt;</strong> operators.</p>
<p>As R3 Alpha and Ren-C shifts on 64-bit signed integers, it is not then compatible with some of those older specification. Thus I was trying to twist my brain into figuring out how bridge the gap. In short, I gave up and went with this approach which, while appalling, works as intended:</p>
<pre><code class="lang-nohighlight">bits-zero: enbase/base #{0000000000000000} 2
bits-one: enbase/base #{FFFFFFFFFFFFFFFF} 2

brute-force-shift: func [
    value [binary!]
    bits [integer!]
    /logical
    &lt;local&gt; length is-negative
][
    length: 8 * length-of value
    not-negative: zero? 128 and+ value/1
    value: enbase/base value 2

    case [
        not negative? bits [
            insert reverse value skip bits-zero 64 - bits
            reverse head clear skip value length
        ]

        any [
            logical
            not-negative
        ][
            insert value skip tail bits-zero bits
            head clear skip value length
        ]

        &lt;else&gt; [
            insert value skip tail bits-one bits
            head clear skip value length
        ]
    ]

    debase/base value 2
]
</code></pre>
<p>It works on <strong>binary!</strong> values up to 8 bytes and operates based on whatever the width of the input binary is, thus can be used along with <strong>enbin/debin</strong> to operate on <strong>integer!</strong> values at any desired width.</p>
<p>While it'd be useful to have a native version that operated on <strong>integer!</strong> with <strong>enbin/debin</strong>-like paramaters, my case use only needed the op on a <strong>binary!</strong> value without the round trip.</p>
          <p><a href="https://forum.rebol.info/t/using-shift-on-binary/1476/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/using-shift-on-binary/1476/1</link>
        <pubDate>Tue, 26 Jan 2021 14:34:44 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1476-1</guid>
        <source url="https://forum.rebol.info/t/using-shift-on-binary/1476.rss">Using Shift on BINARY!</source>
      </item>
  </channel>
</rss>

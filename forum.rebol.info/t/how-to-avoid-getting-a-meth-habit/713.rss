<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How to avoid getting a METH habit</title>
    <link>https://forum.rebol.info/t/how-to-avoid-getting-a-meth-habit/713</link>
    <description>The &quot;function spec dialect&quot; has been moving along.  In R3-Alpha, to get a locals-gathering function which imports a binding for an &quot;external&quot; variable, and has some static state...you would have had to write:

    import-me: 10
    function/extern/with [
        {Your function title here}
        some-arg
        /local some-local
    ][
        import-me: some-arg + state
        state: state + 20
    ][
        import-me
    ][
        state: 30
    ]

The same thing is expressed in Ren-C more elegantly without refinements, expanding the spec dialect so that things can be put up front.  The terminology is improved, also:

    import-me: 10
    function [
        {Your function title here}
        some-arg
        &lt;local&gt; some-local
        &lt;static&gt; state: (30) ;-- makes more sense than /WITH
        &lt;with&gt; import-me ;-- nicer than extern, &quot;with&quot; makes sense for binding
    ][
        import-me: some-arg + state
        state: state + 20
    ]

Another expansion just [folded the behavior of PROC and PROCEDURE into FUNC and FUNCTION](https://forum.rebol.info/t/method-and-the-argument-against-procedure/710/8), with the `return: &lt;void&gt;` notation.

But that still leaves one great divide: the FUNC and FUNCTION question.  And humorously, the non-locals gathering form of METHOD is METH.

Which raises the question...

### Can we indicate locals gathering in FUNCTION&#39;s spec and drop FUNC?

I&#39;m not necessarily saying that FUNC couldn&#39;t stick around as a shorthand.  Maybe PROC and PROCEDURE will stick around too.  Perhaps even METH.  But it would be nice if they weren&#39;t actually *necessary*.

One way of looking at the problem would be that FUNC-like behavior comes from keeping locals-gathering by default, then somehow saying you want to &quot;wildcard&quot; the WITH-ness:

    foo: function [x y z &lt;with&gt; &lt;*&gt;] [
       ...
    ]

That&#39;s sort of like saying &quot;import the world&quot;.  The opposite end of the spectrum would be to say that FUNC&#39;s non-locals gathering is the default, and you have to wildcard the locals:

    foo: function [x y z &lt;local&gt; &lt;*&gt;] [
        ...
    ]

Of course, either way there&#39;s the problem of what to do when someone mixes and matches, or says `&lt;local&gt; &lt;*&gt; &lt;with&gt; &lt;*&gt;`.

Since I don&#39;t have a good answer at the moment, I brought in some METH, and have been using it.  :zombie: 
 But I&#39;m wondering if there&#39;s a way to get by without it, and get life back on track.</description>
    
    <lastBuildDate>Thu, 28 Jun 2018 02:33:28 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/how-to-avoid-getting-a-meth-habit/713.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How to avoid getting a METH habit</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The "function spec dialect" has been moving along.  In R3-Alpha, to get a locals-gathering function which imports a binding for an "external" variable, and has some static state...you would have had to write:</p>
<pre><code>import-me: 10
function/extern/with [
    {Your function title here}
    some-arg
    /local some-local
][
    import-me: some-arg + state
    state: state + 20
][
    import-me
][
    state: 30
]
</code></pre>
<p>The same thing is expressed in Ren-C more elegantly without refinements, expanding the spec dialect so that things can be put up front.  The terminology is improved, also:</p>
<pre><code>import-me: 10
function [
    {Your function title here}
    some-arg
    &lt;local&gt; some-local
    &lt;static&gt; state: (30) ;-- makes more sense than /WITH
    &lt;with&gt; import-me ;-- nicer than extern, "with" makes sense for binding
][
    import-me: some-arg + state
    state: state + 20
]
</code></pre>
<p>Another expansion just <a href="https://forum.rebol.info/t/method-and-the-argument-against-procedure/710/8">folded the behavior of PROC and PROCEDURE into FUNC and FUNCTION</a>, with the <code>return: &lt;void&gt;</code> notation.</p>
<p>But that still leaves one great divide: the FUNC and FUNCTION question.  And humorously, the non-locals gathering form of METHOD is METH.</p>
<p>Which raises the question...</p>
<h3>Can we indicate locals gathering in FUNCTION's spec and drop FUNC?</h3>
<p>I'm not necessarily saying that FUNC couldn't stick around as a shorthand.  Maybe PROC and PROCEDURE will stick around too.  Perhaps even METH.  But it would be nice if they weren't actually <em>necessary</em>.</p>
<p>One way of looking at the problem would be that FUNC-like behavior comes from keeping locals-gathering by default, then somehow saying you want to "wildcard" the WITH-ness:</p>
<pre><code>foo: function [x y z &lt;with&gt; &lt;*&gt;] [
   ...
]
</code></pre>
<p>That's sort of like saying "import the world".  The opposite end of the spectrum would be to say that FUNC's non-locals gathering is the default, and you have to wildcard the locals:</p>
<pre><code>foo: function [x y z &lt;local&gt; &lt;*&gt;] [
    ...
]
</code></pre>
<p>Of course, either way there's the problem of what to do when someone mixes and matches, or says <code>&lt;local&gt; &lt;*&gt; &lt;with&gt; &lt;*&gt;</code>.</p>
<p>Since I don't have a good answer at the moment, I brought in some METH, and have been using it.  <img src="//forum.rebol.info/images/emoji/twitter/zombie.png?v=7" title=":zombie:" class="emoji" alt=":zombie:"><br>
But I'm wondering if there's a way to get by without it, and get life back on track.</p>
          <p><a href="https://forum.rebol.info/t/how-to-avoid-getting-a-meth-habit/713/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-to-avoid-getting-a-meth-habit/713/1</link>
        <pubDate>Thu, 28 Jun 2018 02:24:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-713-1</guid>
        <source url="https://forum.rebol.info/t/how-to-avoid-getting-a-meth-habit/713.rss">How to avoid getting a METH habit</source>
      </item>
  </channel>
</rss>

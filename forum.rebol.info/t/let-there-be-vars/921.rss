<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>LET there be VARs (?)</title>
    <link>https://forum.rebol.info/t/let-there-be-vars/921</link>
    <description>I have been increasingly thinking of being able to accomplish this:

    &gt;&gt; x: 10 (use [x] [x: 20 print [x]]) print [x]
    20
    10

With code that looks like this:

    &gt;&gt; x: 10 (var x: 20 print [x]) print [x]
    20
    10

How would this mystical VAR work, you ask?  Well you can do it poorly today by making VAR a variadic which takes all the ensuing code in its feed, turns it into a block, binds that block, and evaluates it.  It&#39;s pretty ugly, though...inefficient, plus you&#39;ll have VAR on the stack while the rest of the code is running.

We could do better, though, if VAR did its binding operation on the variadic feed itself...and the evaluator picked up the hint.  e.g.:

     var: function [name [set-word!] args [any-value! &lt;variadic&gt;]] [
         evaluate/set args name // this is just an upgraded do/next
         bind args name
         return get name
     ]

So all the VAR did was the assignment, and then it gets off the stack.  But the evaluator could notice the binding request on the feed.  Now it knows that as it goes along, it needs to weave in this extra binding information.  That weaving is essentially the problem virtual binding is supposed to address.

I think this is pretty interesting.  Should it be called LET, or VAR?</description>
    
    <lastBuildDate>Fri, 30 Nov 2018 20:45:42 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/let-there-be-vars/921.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>LET there be VARs (?)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="7" data-topic="921">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>for debugging it would be great to be able to inspect which words have been gathered. Is this possible?</p>
</blockquote>
</aside>
<p>This has been part of the design of FRAME!...the idea is that with frame contexts you can reflect and work with actions in all kinds of ways, both in the debugger and as part of your creation of runtime constructs.</p>
<pre><code>foo: function [return: [block!] arg] [
   local: 10
   frame: binding of 'return // idiomatic choice...could use arg, local, frame
   return words of frame
]

&gt;&gt; words of :foo
== [arg] // asking ACTION! gets only the interface

&gt;&gt; foo 20
== [arg local: frame: return:] // asking FRAME! gets locals as SET-WORD!
</code></pre>
<p><em>(Note: Be merged up before trying this...the ability had atrophied somewhat.  While FRAME! has to be in working order for pretty much any of the system to run, frame reflection can get all kinds of confused.  Thanks to this post, there is now <a href="https://github.com/metaeducation/ren-c/blob/master/tests/functions/frame.test.reb" rel="nofollow noopener">one test</a>--which is infinitely better than zero.  But more would be great if anyone experiments and wants to put those experiments in as tests of what-should-work.)</em></p>
<h2>This could be a weakness for VAR, though...</h2>
<p>If you can virtually add locals to the binding stream, how would that be made visible?  Would the frame appear to be augmented?  Would that frame have a different identity than a non-augmented frame?</p>
<p>I hadn't thought about this aspect of the question, so good that you brought it up!  Will have to take it under consideration.</p>
          <p><a href="https://forum.rebol.info/t/let-there-be-vars/921/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/let-there-be-vars/921/8</link>
        <pubDate>Fri, 30 Nov 2018 20:45:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-921-8</guid>
        <source url="https://forum.rebol.info/t/let-there-be-vars/921.rss">LET there be VARs (?)</source>
      </item>
      <item>
        <title>LET there be VARs (?)</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>One thought that crossed my mind: for debugging it would be great to be able to inspect which words have been gathered. Is this possible?</p>
          <p><a href="https://forum.rebol.info/t/let-there-be-vars/921/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/let-there-be-vars/921/7</link>
        <pubDate>Thu, 29 Nov 2018 17:31:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-921-7</guid>
        <source url="https://forum.rebol.info/t/let-there-be-vars/921.rss">LET there be VARs (?)</source>
      </item>
      <item>
        <title>LET there be VARs (?)</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>Everybody used FUNC all of the time, FUNCTION hardly ever was used. That had a reason and in Red the FUNCTION was reclaimed to behave like FUNC.<br>
I like the automatic gathering of locals very much, certainly for the many quick scripts one makes. When scripts should be used in a production environment, and being maintained, I can see code review demanding declaration.<br>
As Ingo points out to be able to switch this behaviour on and off there could be some tag like  to be added when automatic gathering should be off, forcing the programmer to declare the variables beforehand. If it should be  itself if you already declare some locals has to be considered, perhaps in a testing phase one wants to be able to add some helper words in the local context without the need to declare and making sure you do not keep them in the declarations when shipping.</p>
          <p><a href="https://forum.rebol.info/t/let-there-be-vars/921/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/let-there-be-vars/921/6</link>
        <pubDate>Thu, 29 Nov 2018 07:48:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-921-6</guid>
        <source url="https://forum.rebol.info/t/let-there-be-vars/921.rss">LET there be VARs (?)</source>
      </item>
      <item>
        <title>LET there be VARs (?)</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>Another name might be LOCAL.</p>
<p>That said, I think being able to switch gathering locals on and off im FUNCTION itself is a real asset.</p>
          <p><a href="https://forum.rebol.info/t/let-there-be-vars/921/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/let-there-be-vars/921/5</link>
        <pubDate>Wed, 28 Nov 2018 17:33:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-921-5</guid>
        <source url="https://forum.rebol.info/t/let-there-be-vars/921.rss">LET there be VARs (?)</source>
      </item>
      <item>
        <title>LET there be VARs (?)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="3" data-topic="921">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I’m getting the feeling that if there were a good solution to it, that it could well be a better answer to how to deal with locals than the “locals-gathering” that FUNCTION does.</p>
</blockquote>
</aside>
<p>Looking at this in practice there are some unfortunate limitations.</p>
<pre><code>while [var x: find blah blah] [...]
</code></pre>
<p>Not only do you not want to be declaring the variable every time you do a loop iteration, the x would not be visible in the body--which is where you'd likely want to use it.  Because its scope would end at the end of the block.  You'd have to write:</p>
<pre><code>var x
while [x: find blah blah blah] [...]
</code></pre>
<p>That's not the end of the world, and possibly worth it if everything else can be made to work efficiently.</p>
<p>The issue of safety does come up with locals that aren't gathered, which is one of the problems historically with FUNC.  While today's FUNCTION may err on the side of creating too many locals for the function frame (especially when defining objects or nested functions inside the body), it does keep you from writing stray values into the global context.</p>
<p>This suggests that even in a world of working VARs.  maybe keeping a distinct FUNC and FUNCTION, where FUNCTION would unbind every SET-WORD! in the body by default that wasn't part of the arguments, <code>&lt;local&gt;</code>s, <code>&lt;with&gt;</code>s, or <code>&lt;static&gt;</code>s.</p>
<p>In any case, it's still a promising idea...but this shows a couple more considerations to add into the pile.</p>
          <p><a href="https://forum.rebol.info/t/let-there-be-vars/921/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/let-there-be-vars/921/4</link>
        <pubDate>Sun, 25 Nov 2018 06:55:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-921-4</guid>
        <source url="https://forum.rebol.info/t/let-there-be-vars/921.rss">LET there be VARs (?)</source>
      </item>
      <item>
        <title>LET there be VARs (?)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="921">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>VAR seems a bit pseudocode-like — it would probably be assumed to be a generic “variable” rather than “variadic”.</p>
</blockquote>
</aside>
<p>That is the intended meaning.  <strong>var x: 1</strong> is only variadic as an implementation detail of <em>how</em> it manages to pass its "variable declaration" on to influence the stream of code that comes after it.</p>
<p>But...can a "virtual" approach actually <em>work</em>?</p>
<h2>Bindings Need to be Preserved</h2>
<p>Rebol constantly passes blocks of symbolic code from one routine to another routine to execute or inspect.  Even though the implementation of the called routine may have some local variables expressed symbolically with the same name--there can't be interference.</p>
<pre><code>do-code: func [code &lt;local&gt; x] [
    x: 2 | do compose [-- "DO-CODE's x is" (x) | (code)]
]

my-print: func [arg &lt;local&gt; x] [
     x: arg | do-code [-- "MY-PRINT's x is" x]
]
</code></pre>
<p>If you call <strong>my-print 1</strong>, you will get:</p>
<pre><code>-- "DO-CODE's x is" x: 2
-- "MY-PRINT's x is" x: 1
</code></pre>
<p><em>This is foundational.</em>  It has to be the case that inside the body of DO-CODE, both x's preserve their intended binding--so long as DO-CODE doesn't "mess with x" inside a block that defines x.</p>
<h2>Can a naive VAR implementation do that?</h2>
<p>Let's try the same thing using VAR instead of :</p>
<pre><code>do-code: func [code] [ // now no `&lt;local&gt; x`
    var x: 20 | do compose [-- "DO-CODE's x is" (x) | (code)]
]

my-print: func [arg] [ // also no `&lt;local&gt; x`
     var x: arg | do-code [-- "MY-PRINT's x is" x]
]
</code></pre>
<p>An inefficient implementation of VAR could build a block out of everything that came after it, bind it, and DO it.  That would work because there'd be a clear moment in time where it ran.  It would essentially do the same thing as USE, so it would do this transformation:</p>
<pre><code> var x: arg | do-code [-- "MY-PRINT's x is" x]
 =&gt; use [x] [x: arg | do-code [-- "MY-PRINT''s x is" x]

 var x: 20 | do compose [-- "DO-CODE's x is" (x) | (code)]
 =&gt; use [x] [x: 20 | do compose [-- "DO-CODE's x is" (x) | (code)]
</code></pre>
<p>In today's world, that's quite a lot slower than using a fixed binding to a local.  The USE has to deep copy and rebind the block, create a new separate context, bind the Xs into it, etc.</p>
<p><strong>But yes, it works.</strong>  Outside of being slower, you wouldn't know a difference from an explicit <code>&lt;local&gt;</code> or gathered one... <em>except that the X would only apply from where its VAR was declared up to the end of the block or group it's in</em>.  And this is actually a fairly desirable property; if you want it to apply more widely, you apply it at a more outer scope.</p>
<h2>But could a savvier VAR work efficiently?</h2>
<p>Let's imagine a VAR that doesn't actually bind anything in-the-moment.  Instead it puts a little bit of "magic" onto the executing frame, via the suggested trick of binding a VARARGS! feed.  This would end up gluing the magic onto values as the frame went along in processing its current level.</p>
<p>I've used <code>~1</code> and backslashes to denote the augmentation of the ensuing values:</p>
<pre><code> var x: arg | do-code [-- "MY-PRINT's x is" x]
 =&gt; ~1\do-code\ ~1\[-- "MY-PRINT''s x is" x]\
</code></pre>
<p>So now, when DO-CODE is passed the BLOCK!, that block has some extra baggage.  Its own body has a VAR, that puts its magic on too.  We'll denote that with <code>~2</code>:</p>
<pre><code> var x: 2 | do compose [-- "DO-CODE's x is" (x) | (code)]
 =&gt; ~2\do\ ~2\compose\ ~2\[-- "DO-CODE's x is" (x) | (code)]\
</code></pre>
<p>This magic is supposed to be a no-op on anything it doesn't apply to, so <code>~1\do-code\</code> just runs DO-CODE with its existing binding, same for the DO and COMPOSE.</p>
<p>So our interesting question is <strong>what happens when the "magic" conflicts</strong>.  Whatever <code>~</code> means, it can't mean "override any binding of anything under me named x".  This would risk <code>~2</code> beaming its influence down into the composed code and overriding the <code>~1</code> that is intended to guarantee <code>MY-PRINT's x is 1</code>.</p>
<h2>I don't offhand have the answer to this...</h2>
<p>...and don't have time to wrestle it today.  But this is the phrasing of the problem, and it resembles other problems that mechanics have been created to solve (definitional returns and derived binding both use variations of this "magic".)</p>
<p>I'm getting the feeling that if there were a good solution to it, that it could well be a better answer to how to deal with locals than the "locals-gathering" that FUNCTION does.  While being able to do such gathering may make sense for some constructs--and Rebol should certainly be <em>able</em> to do it--it has a number of huge downsides when it collects things it shouldn't.  It would be a real victory to get down to just one type of FUNCTION...with a working VAR...that's still in line with Rebol's model and permits the cool feats.</p>
          <p><a href="https://forum.rebol.info/t/let-there-be-vars/921/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/let-there-be-vars/921/3</link>
        <pubDate>Sat, 24 Nov 2018 18:02:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-921-3</guid>
        <source url="https://forum.rebol.info/t/let-there-be-vars/921.rss">LET there be VARs (?)</source>
      </item>
      <item>
        <title>LET there be VARs (?)</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Although I would never name a word (variable) VAR, VAR seems a bit pseudocode-like — it would probably be assumed to be a generic “variable” rather than “variadic”.<br>
So while I prefer VAR for its intuitiveness— it does seem more direct in meaning, I think the usage here warrants a word more formal like LET.</p>
          <p><a href="https://forum.rebol.info/t/let-there-be-vars/921/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/let-there-be-vars/921/2</link>
        <pubDate>Fri, 23 Nov 2018 13:45:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-921-2</guid>
        <source url="https://forum.rebol.info/t/let-there-be-vars/921.rss">LET there be VARs (?)</source>
      </item>
      <item>
        <title>LET there be VARs (?)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I have been increasingly thinking of being able to accomplish this:</p>
<pre><code>&gt;&gt; x: 10 (use [x] [x: 20 print [x]]) print [x]
20
10
</code></pre>
<p>With code that looks like this:</p>
<pre><code>&gt;&gt; x: 10 (var x: 20 print [x]) print [x]
20
10
</code></pre>
<p>How would this mystical VAR work, you ask?  Well you can do it poorly today by making VAR a variadic which takes all the ensuing code in its feed, turns it into a block, binds that block, and evaluates it.  It's pretty ugly, though...inefficient, plus you'll have VAR on the stack while the rest of the code is running.</p>
<p>We could do better, though, if VAR did its binding operation on the variadic feed itself...and the evaluator picked up the hint.  e.g.:</p>
<pre><code> var: function [name [set-word!] args [any-value! &lt;variadic&gt;]] [
     evaluate/set args name // this is just an upgraded do/next
     bind args name
     return get name
 ]
</code></pre>
<p>So all the VAR did was the assignment, and then it gets off the stack.  But the evaluator could notice the binding request on the feed.  Now it knows that as it goes along, it needs to weave in this extra binding information.  That weaving is essentially the problem virtual binding is supposed to address.</p>
<p>I think this is pretty interesting.  Should it be called LET, or VAR?</p>
          <p><a href="https://forum.rebol.info/t/let-there-be-vars/921/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/let-there-be-vars/921/1</link>
        <pubDate>Thu, 22 Nov 2018 20:16:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-921-1</guid>
        <source url="https://forum.rebol.info/t/let-there-be-vars/921.rss">LET there be VARs (?)</source>
      </item>
  </channel>
</rss>
